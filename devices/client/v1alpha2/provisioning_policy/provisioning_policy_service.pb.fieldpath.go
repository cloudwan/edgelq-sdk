// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/provisioning_policy_service.proto
// DO NOT EDIT!!!

package provisioning_policy_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/provisioning_policy"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetProvisioningPolicyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetProvisioningPolicyRequest_FieldPathSelector
	Get(source *GetProvisioningPolicyRequest) []interface{}
	GetSingle(source *GetProvisioningPolicyRequest) (interface{}, bool)
	ClearValue(item *GetProvisioningPolicyRequest)

	// Those methods build corresponding GetProvisioningPolicyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetProvisioningPolicyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetProvisioningPolicyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetProvisioningPolicyRequest_FieldPathArrayItemValue
}

type GetProvisioningPolicyRequest_FieldPathSelector int32

const (
	GetProvisioningPolicyRequest_FieldPathSelectorName      GetProvisioningPolicyRequest_FieldPathSelector = 0
	GetProvisioningPolicyRequest_FieldPathSelectorFieldMask GetProvisioningPolicyRequest_FieldPathSelector = 1
	GetProvisioningPolicyRequest_FieldPathSelectorView      GetProvisioningPolicyRequest_FieldPathSelector = 2
)

func (s GetProvisioningPolicyRequest_FieldPathSelector) String() string {
	switch s {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		return "name"
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", s))
	}
}

func BuildGetProvisioningPolicyRequest_FieldPath(fp gotenobject.RawFieldPath) (GetProvisioningPolicyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetProvisioningPolicyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetProvisioningPolicyRequest_FieldTerminalPath{selector: GetProvisioningPolicyRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetProvisioningPolicyRequest_FieldTerminalPath{selector: GetProvisioningPolicyRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetProvisioningPolicyRequest_FieldTerminalPath{selector: GetProvisioningPolicyRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetProvisioningPolicyRequest", fp)
}

func ParseGetProvisioningPolicyRequest_FieldPath(rawField string) (GetProvisioningPolicyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetProvisioningPolicyRequest_FieldPath(fp)
}

func MustParseGetProvisioningPolicyRequest_FieldPath(rawField string) GetProvisioningPolicyRequest_FieldPath {
	fp, err := ParseGetProvisioningPolicyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetProvisioningPolicyRequest_FieldTerminalPath struct {
	selector GetProvisioningPolicyRequest_FieldPathSelector
}

var _ GetProvisioningPolicyRequest_FieldPath = (*GetProvisioningPolicyRequest_FieldTerminalPath)(nil)

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) Selector() GetProvisioningPolicyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetProvisioningPolicyRequest
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) Get(source *GetProvisioningPolicyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetProvisioningPolicyRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetProvisioningPolicyRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetProvisioningPolicyRequest))
}

// GetSingle returns value pointed by specific field of from source GetProvisioningPolicyRequest
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) GetSingle(source *GetProvisioningPolicyRequest) (interface{}, bool) {
	switch fp.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		return (*provisioning_policy.Reference)(nil)
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) ClearValue(item *GetProvisioningPolicyRequest) {
	if item != nil {
		switch fp.selector {
		case GetProvisioningPolicyRequest_FieldPathSelectorName:
			item.Name = nil
		case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetProvisioningPolicyRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
		}
	}
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetProvisioningPolicyRequest_FieldPathSelectorName ||
		fp.selector == GetProvisioningPolicyRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetProvisioningPolicyRequest_FieldPathSelectorView
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithIValue(value interface{}) GetProvisioningPolicyRequest_FieldPathValue {
	switch fp.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		return &GetProvisioningPolicyRequest_FieldTerminalPathValue{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return &GetProvisioningPolicyRequest_FieldTerminalPathValue{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		return &GetProvisioningPolicyRequest_FieldTerminalPathValue{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov := &GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{GetProvisioningPolicyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		return &GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Reference)}
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return &GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		return &GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetProvisioningPolicyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetProvisioningPolicyRequest_FieldPathValue allows storing values for GetProvisioningPolicyRequest fields according to their type
type GetProvisioningPolicyRequest_FieldPathValue interface {
	GetProvisioningPolicyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetProvisioningPolicyRequest)
	CompareWith(*GetProvisioningPolicyRequest) (cmp int, comparable bool)
}

func ParseGetProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) (GetProvisioningPolicyRequest_FieldPathValue, error) {
	fp, err := ParseGetProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProvisioningPolicyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetProvisioningPolicyRequest_FieldPathValue), nil
}

func MustParseGetProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) GetProvisioningPolicyRequest_FieldPathValue {
	fpv, err := ParseGetProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetProvisioningPolicyRequest_FieldTerminalPathValue struct {
	GetProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ GetProvisioningPolicyRequest_FieldPathValue = (*GetProvisioningPolicyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetProvisioningPolicyRequest' as interface{}
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) AsNameValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.(*provisioning_policy.Reference)
	return res, ok
}
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetProvisioningPolicyRequest
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) SetTo(target **GetProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(GetProvisioningPolicyRequest)
	}
	switch fpv.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*provisioning_policy.Reference)
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetProvisioningPolicyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetProvisioningPolicyRequest_FieldTerminalPathValue' with the value under path in 'GetProvisioningPolicyRequest'.
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) CompareWith(source *GetProvisioningPolicyRequest) (int, bool) {
	switch fpv.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*provisioning_policy.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetProvisioningPolicyRequest))
}

// GetProvisioningPolicyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetProvisioningPolicyRequest according to their type
// Present only for array (repeated) types.
type GetProvisioningPolicyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetProvisioningPolicyRequest_FieldPath
	ContainsValue(*GetProvisioningPolicyRequest) bool
}

// ParseGetProvisioningPolicyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetProvisioningPolicyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProvisioningPolicyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetProvisioningPolicyRequest_FieldPathArrayItemValue), nil
}

func MustParseGetProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetProvisioningPolicyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue struct {
	GetProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ GetProvisioningPolicyRequest_FieldPathArrayItemValue = (*GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetProvisioningPolicyRequest as interface{}
func (fpaiv *GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetProvisioningPolicyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetProvisioningPolicyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetProvisioningPolicyRequest'
func (fpaiv *GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetProvisioningPolicyRequest) bool {
	slice := fpaiv.GetProvisioningPolicyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetProvisioningPolicyRequest_FieldPathArrayOfValues allows storing slice of values for GetProvisioningPolicyRequest fields according to their type
type GetProvisioningPolicyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetProvisioningPolicyRequest_FieldPath
}

func ParseGetProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetProvisioningPolicyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProvisioningPolicyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetProvisioningPolicyRequest_FieldPathArrayOfValues), nil
}

func MustParseGetProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues struct {
	GetProvisioningPolicyRequest_FieldTerminalPath
	values interface{}
}

var _ GetProvisioningPolicyRequest_FieldPathArrayOfValues = (*GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Reference)
	return res, ok
}
func (fpaov *GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProvisioningPoliciesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProvisioningPoliciesRequest_FieldPathSelector
	Get(source *BatchGetProvisioningPoliciesRequest) []interface{}
	GetSingle(source *BatchGetProvisioningPoliciesRequest) (interface{}, bool)
	ClearValue(item *BatchGetProvisioningPoliciesRequest)

	// Those methods build corresponding BatchGetProvisioningPoliciesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProvisioningPoliciesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProvisioningPoliciesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue
}

type BatchGetProvisioningPoliciesRequest_FieldPathSelector int32

const (
	BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames     BatchGetProvisioningPoliciesRequest_FieldPathSelector = 0
	BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask BatchGetProvisioningPoliciesRequest_FieldPathSelector = 1
	BatchGetProvisioningPoliciesRequest_FieldPathSelectorView      BatchGetProvisioningPoliciesRequest_FieldPathSelector = 2
)

func (s BatchGetProvisioningPoliciesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesRequest: %d", s))
	}
}

func BuildBatchGetProvisioningPoliciesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProvisioningPoliciesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProvisioningPoliciesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetProvisioningPoliciesRequest_FieldTerminalPath{selector: BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetProvisioningPoliciesRequest_FieldTerminalPath{selector: BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetProvisioningPoliciesRequest_FieldTerminalPath{selector: BatchGetProvisioningPoliciesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProvisioningPoliciesRequest", fp)
}

func ParseBatchGetProvisioningPoliciesRequest_FieldPath(rawField string) (BatchGetProvisioningPoliciesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProvisioningPoliciesRequest_FieldPath(fp)
}

func MustParseBatchGetProvisioningPoliciesRequest_FieldPath(rawField string) BatchGetProvisioningPoliciesRequest_FieldPath {
	fp, err := ParseBatchGetProvisioningPoliciesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProvisioningPoliciesRequest_FieldTerminalPath struct {
	selector BatchGetProvisioningPoliciesRequest_FieldPathSelector
}

var _ BatchGetProvisioningPoliciesRequest_FieldPath = (*BatchGetProvisioningPoliciesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) Selector() BatchGetProvisioningPoliciesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProvisioningPoliciesRequest
func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) Get(source *BatchGetProvisioningPoliciesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetProvisioningPoliciesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProvisioningPoliciesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetProvisioningPoliciesRequest
func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) GetSingle(source *BatchGetProvisioningPoliciesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProvisioningPoliciesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames:
		return ([]*provisioning_policy.Reference)(nil)
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) ClearValue(item *BatchGetProvisioningPoliciesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetProvisioningPoliciesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProvisioningPoliciesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetProvisioningPoliciesRequest_FieldPathSelectorView
}

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetProvisioningPoliciesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames:
		return &BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue{BatchGetProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.([]*provisioning_policy.Reference)}
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return &BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue{BatchGetProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorView:
		return &BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue{BatchGetProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProvisioningPoliciesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningPoliciesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames:
		return &BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([][]*provisioning_policy.Reference)}
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return &BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorView:
		return &BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames:
		return &BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue{BatchGetProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPoliciesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetProvisioningPoliciesRequest_FieldPathValue allows storing values for BatchGetProvisioningPoliciesRequest fields according to their type
type BatchGetProvisioningPoliciesRequest_FieldPathValue interface {
	BatchGetProvisioningPoliciesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProvisioningPoliciesRequest)
	CompareWith(*BatchGetProvisioningPoliciesRequest) (cmp int, comparable bool)
}

func ParseBatchGetProvisioningPoliciesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetProvisioningPoliciesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetProvisioningPoliciesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPoliciesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProvisioningPoliciesRequest_FieldPathValue), nil
}

func MustParseBatchGetProvisioningPoliciesRequest_FieldPathValue(pathStr, valueStr string) BatchGetProvisioningPoliciesRequest_FieldPathValue {
	fpv, err := ParseBatchGetProvisioningPoliciesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue struct {
	BatchGetProvisioningPoliciesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningPoliciesRequest_FieldPathValue = (*BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProvisioningPoliciesRequest' as interface{}
func (fpv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue) AsNamesValue() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.([]*provisioning_policy.Reference)
	return res, ok
}
func (fpv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProvisioningPoliciesRequest
func (fpv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue) SetTo(target **BatchGetProvisioningPoliciesRequest) {
	if *target == nil {
		*target = new(BatchGetProvisioningPoliciesRequest)
	}
	switch fpv.selector {
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*provisioning_policy.Reference)
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProvisioningPoliciesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetProvisioningPoliciesRequest'.
func (fpv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetProvisioningPoliciesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProvisioningPoliciesRequest))
}

// BatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProvisioningPoliciesRequest according to their type
// Present only for array (repeated) types.
type BatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProvisioningPoliciesRequest_FieldPath
	ContainsValue(*BatchGetProvisioningPoliciesRequest) bool
}

// ParseBatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProvisioningPoliciesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPoliciesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetProvisioningPoliciesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningPoliciesRequest_FieldPathArrayItemValue = (*BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProvisioningPoliciesRequest as interface{}
func (fpaiv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpaiv.value.(*provisioning_policy.Reference)
	return res, ok
}

func (fpaiv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProvisioningPoliciesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProvisioningPoliciesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProvisioningPoliciesRequest'
func (fpaiv *BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProvisioningPoliciesRequest) bool {
	slice := fpaiv.BatchGetProvisioningPoliciesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetProvisioningPoliciesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetProvisioningPoliciesRequest fields according to their type
type BatchGetProvisioningPoliciesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProvisioningPoliciesRequest_FieldPath
}

func ParseBatchGetProvisioningPoliciesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProvisioningPoliciesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProvisioningPoliciesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPoliciesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProvisioningPoliciesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProvisioningPoliciesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProvisioningPoliciesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProvisioningPoliciesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetProvisioningPoliciesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetProvisioningPoliciesRequest_FieldPathArrayOfValues = (*BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case BatchGetProvisioningPoliciesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([][]*provisioning_policy.Reference)
	return res, ok
}
func (fpaov *BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *BatchGetProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProvisioningPoliciesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProvisioningPoliciesResponse_FieldPathSelector
	Get(source *BatchGetProvisioningPoliciesResponse) []interface{}
	GetSingle(source *BatchGetProvisioningPoliciesResponse) (interface{}, bool)
	ClearValue(item *BatchGetProvisioningPoliciesResponse)

	// Those methods build corresponding BatchGetProvisioningPoliciesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProvisioningPoliciesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue
}

type BatchGetProvisioningPoliciesResponse_FieldPathSelector int32

const (
	BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies BatchGetProvisioningPoliciesResponse_FieldPathSelector = 0
	BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing              BatchGetProvisioningPoliciesResponse_FieldPathSelector = 1
)

func (s BatchGetProvisioningPoliciesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return "provisioning_policies"
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", s))
	}
}

func BuildBatchGetProvisioningPoliciesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProvisioningPoliciesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProvisioningPoliciesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_policies", "provisioningPolicies", "provisioning-policies":
			return &BatchGetProvisioningPoliciesResponse_FieldTerminalPath{selector: BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies}, nil
		case "missing":
			return &BatchGetProvisioningPoliciesResponse_FieldTerminalPath{selector: BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_policies", "provisioningPolicies", "provisioning-policies":
			if subpath, err := provisioning_policy.BuildProvisioningPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetProvisioningPoliciesResponse_FieldSubPath{selector: BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProvisioningPoliciesResponse", fp)
}

func ParseBatchGetProvisioningPoliciesResponse_FieldPath(rawField string) (BatchGetProvisioningPoliciesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProvisioningPoliciesResponse_FieldPath(fp)
}

func MustParseBatchGetProvisioningPoliciesResponse_FieldPath(rawField string) BatchGetProvisioningPoliciesResponse_FieldPath {
	fp, err := ParseBatchGetProvisioningPoliciesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProvisioningPoliciesResponse_FieldTerminalPath struct {
	selector BatchGetProvisioningPoliciesResponse_FieldPathSelector
}

var _ BatchGetProvisioningPoliciesResponse_FieldPath = (*BatchGetProvisioningPoliciesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) Selector() BatchGetProvisioningPoliciesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProvisioningPoliciesResponse
func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) Get(source *BatchGetProvisioningPoliciesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
			for _, value := range source.GetProvisioningPolicies() {
				values = append(values, value)
			}
		case BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProvisioningPoliciesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetProvisioningPoliciesResponse
func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) GetSingle(source *BatchGetProvisioningPoliciesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		res := source.GetProvisioningPolicies()
		return res, res != nil
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProvisioningPoliciesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return ([]*provisioning_policy.ProvisioningPolicy)(nil)
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing:
		return ([]*provisioning_policy.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) ClearValue(item *BatchGetProvisioningPoliciesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
			item.ProvisioningPolicies = nil
		case BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProvisioningPoliciesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetProvisioningPoliciesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return &BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue{BatchGetProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_policy.ProvisioningPolicy)}
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing:
		return &BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue{BatchGetProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{BatchGetProvisioningPoliciesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return &BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{BatchGetProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_policy.ProvisioningPolicy)}
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing:
		return &BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{BatchGetProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return &BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue{BatchGetProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy)}
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing:
		return &BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue{BatchGetProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPoliciesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetProvisioningPoliciesResponse_FieldSubPath struct {
	selector BatchGetProvisioningPoliciesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetProvisioningPoliciesResponse_FieldPath = (*BatchGetProvisioningPoliciesResponse_FieldSubPath)(nil)

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) Selector() BatchGetProvisioningPoliciesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) AsProvisioningPoliciesSubPath() (provisioning_policy.ProvisioningPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_policy.ProvisioningPolicy_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetProvisioningPoliciesResponse
func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) Get(source *BatchGetProvisioningPoliciesResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		for _, item := range source.GetProvisioningPolicies() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetProvisioningPoliciesResponse))
}

// GetSingle returns value of selected field from source BatchGetProvisioningPoliciesResponse
func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) GetSingle(source *BatchGetProvisioningPoliciesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		if len(source.GetProvisioningPolicies()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningPolicies()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetProvisioningPoliciesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) ClearValue(item *BatchGetProvisioningPoliciesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
			for _, subItem := range item.ProvisioningPolicies {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetProvisioningPoliciesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetProvisioningPoliciesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetProvisioningPoliciesResponse_FieldPathValue {
	return &BatchGetProvisioningPoliciesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues {
	return &BatchGetProvisioningPoliciesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue {
	return &BatchGetProvisioningPoliciesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetProvisioningPoliciesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetProvisioningPoliciesResponse_FieldPathValue allows storing values for BatchGetProvisioningPoliciesResponse fields according to their type
type BatchGetProvisioningPoliciesResponse_FieldPathValue interface {
	BatchGetProvisioningPoliciesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProvisioningPoliciesResponse)
	CompareWith(*BatchGetProvisioningPoliciesResponse) (cmp int, comparable bool)
}

func ParseBatchGetProvisioningPoliciesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetProvisioningPoliciesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetProvisioningPoliciesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPoliciesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProvisioningPoliciesResponse_FieldPathValue), nil
}

func MustParseBatchGetProvisioningPoliciesResponse_FieldPathValue(pathStr, valueStr string) BatchGetProvisioningPoliciesResponse_FieldPathValue {
	fpv, err := ParseBatchGetProvisioningPoliciesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue struct {
	BatchGetProvisioningPoliciesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningPoliciesResponse_FieldPathValue = (*BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProvisioningPoliciesResponse' as interface{}
func (fpv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue) AsProvisioningPoliciesValue() ([]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpv.value.([]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue) AsMissingValue() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.([]*provisioning_policy.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProvisioningPoliciesResponse
func (fpv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue) SetTo(target **BatchGetProvisioningPoliciesResponse) {
	if *target == nil {
		*target = new(BatchGetProvisioningPoliciesResponse)
	}
	switch fpv.selector {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		(*target).ProvisioningPolicies = fpv.value.([]*provisioning_policy.ProvisioningPolicy)
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*provisioning_policy.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProvisioningPoliciesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetProvisioningPoliciesResponse'.
func (fpv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetProvisioningPoliciesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return 0, false
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProvisioningPoliciesResponse))
}

type BatchGetProvisioningPoliciesResponse_FieldSubPathValue struct {
	BatchGetProvisioningPoliciesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetProvisioningPoliciesResponse_FieldPathValue = (*BatchGetProvisioningPoliciesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetProvisioningPoliciesResponse_FieldSubPathValue) AsProvisioningPoliciesPathValue() (provisioning_policy.ProvisioningPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetProvisioningPoliciesResponse_FieldSubPathValue) SetTo(target **BatchGetProvisioningPoliciesResponse) {
	if *target == nil {
		*target = new(BatchGetProvisioningPoliciesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProvisioningPoliciesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProvisioningPoliciesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetProvisioningPoliciesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetProvisioningPoliciesResponse_FieldSubPathValue) CompareWith(source *BatchGetProvisioningPoliciesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProvisioningPoliciesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetProvisioningPoliciesResponse))
}

// BatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProvisioningPoliciesResponse according to their type
// Present only for array (repeated) types.
type BatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProvisioningPoliciesResponse_FieldPath
	ContainsValue(*BatchGetProvisioningPoliciesResponse) bool
}

// ParseBatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProvisioningPoliciesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPoliciesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetProvisioningPoliciesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningPoliciesResponse_FieldPathArrayItemValue = (*BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProvisioningPoliciesResponse as interface{}
func (fpaiv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) AsProvisioningPoliciesItemValue() (*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaiv.value.(*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpaiv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpaiv.value.(*provisioning_policy.Reference)
	return res, ok
}

func (fpaiv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProvisioningPoliciesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProvisioningPoliciesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProvisioningPoliciesResponse'
func (fpaiv *BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProvisioningPoliciesResponse) bool {
	slice := fpaiv.BatchGetProvisioningPoliciesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetProvisioningPoliciesResponse_FieldSubPathArrayItemValue struct {
	BatchGetProvisioningPoliciesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetProvisioningPoliciesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetProvisioningPoliciesResponse_FieldSubPathArrayItemValue) AsProvisioningPoliciesPathItemValue() (provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProvisioningPoliciesResponse'
func (fpaivs *BatchGetProvisioningPoliciesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetProvisioningPoliciesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPoliciesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetProvisioningPoliciesResponse fields according to their type
type BatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProvisioningPoliciesResponse_FieldPath
}

func ParseBatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProvisioningPoliciesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPoliciesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetProvisioningPoliciesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues = (*BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		for _, v := range fpaov.values.([][]*provisioning_policy.ProvisioningPolicy) {
			values = append(values, v)
		}
	case BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsProvisioningPoliciesArrayOfValues() ([][]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaov.values.([][]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpaov *BatchGetProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([][]*provisioning_policy.Reference)
	return res, ok
}

type BatchGetProvisioningPoliciesResponse_FieldSubPathArrayOfValues struct {
	BatchGetProvisioningPoliciesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetProvisioningPoliciesResponse_FieldPathArrayOfValues = (*BatchGetProvisioningPoliciesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetProvisioningPoliciesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetProvisioningPoliciesResponse_FieldSubPathArrayOfValues) AsProvisioningPoliciesPathArrayOfValues() (provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProvisioningPoliciesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProvisioningPoliciesRequest_FieldPathSelector
	Get(source *ListProvisioningPoliciesRequest) []interface{}
	GetSingle(source *ListProvisioningPoliciesRequest) (interface{}, bool)
	ClearValue(item *ListProvisioningPoliciesRequest)

	// Those methods build corresponding ListProvisioningPoliciesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProvisioningPoliciesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProvisioningPoliciesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProvisioningPoliciesRequest_FieldPathArrayItemValue
}

type ListProvisioningPoliciesRequest_FieldPathSelector int32

const (
	ListProvisioningPoliciesRequest_FieldPathSelectorParent            ListProvisioningPoliciesRequest_FieldPathSelector = 0
	ListProvisioningPoliciesRequest_FieldPathSelectorPageSize          ListProvisioningPoliciesRequest_FieldPathSelector = 1
	ListProvisioningPoliciesRequest_FieldPathSelectorPageToken         ListProvisioningPoliciesRequest_FieldPathSelector = 2
	ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy           ListProvisioningPoliciesRequest_FieldPathSelector = 3
	ListProvisioningPoliciesRequest_FieldPathSelectorFilter            ListProvisioningPoliciesRequest_FieldPathSelector = 4
	ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask         ListProvisioningPoliciesRequest_FieldPathSelector = 5
	ListProvisioningPoliciesRequest_FieldPathSelectorView              ListProvisioningPoliciesRequest_FieldPathSelector = 6
	ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo ListProvisioningPoliciesRequest_FieldPathSelector = 7
)

func (s ListProvisioningPoliciesRequest_FieldPathSelector) String() string {
	switch s {
	case ListProvisioningPoliciesRequest_FieldPathSelectorParent:
		return "parent"
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListProvisioningPoliciesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListProvisioningPoliciesRequest_FieldPathSelectorView:
		return "view"
	case ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesRequest: %d", s))
	}
}

func BuildListProvisioningPoliciesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListProvisioningPoliciesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProvisioningPoliciesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProvisioningPoliciesRequest", fp)
}

func ParseListProvisioningPoliciesRequest_FieldPath(rawField string) (ListProvisioningPoliciesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProvisioningPoliciesRequest_FieldPath(fp)
}

func MustParseListProvisioningPoliciesRequest_FieldPath(rawField string) ListProvisioningPoliciesRequest_FieldPath {
	fp, err := ParseListProvisioningPoliciesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProvisioningPoliciesRequest_FieldTerminalPath struct {
	selector ListProvisioningPoliciesRequest_FieldPathSelector
}

var _ ListProvisioningPoliciesRequest_FieldPath = (*ListProvisioningPoliciesRequest_FieldTerminalPath)(nil)

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) Selector() ListProvisioningPoliciesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProvisioningPoliciesRequest
func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) Get(source *ListProvisioningPoliciesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProvisioningPoliciesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListProvisioningPoliciesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListProvisioningPoliciesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListProvisioningPoliciesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListProvisioningPoliciesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProvisioningPoliciesRequest))
}

// GetSingle returns value pointed by specific field of from source ListProvisioningPoliciesRequest
func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) GetSingle(source *ListProvisioningPoliciesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListProvisioningPoliciesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListProvisioningPoliciesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListProvisioningPoliciesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProvisioningPoliciesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProvisioningPoliciesRequest_FieldPathSelectorParent:
		return (*provisioning_policy.ParentName)(nil)
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	case ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		return (*provisioning_policy.OrderBy)(nil)
	case ListProvisioningPoliciesRequest_FieldPathSelectorFilter:
		return (*provisioning_policy.Filter)(nil)
	case ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case ListProvisioningPoliciesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) ClearValue(item *ListProvisioningPoliciesRequest) {
	if item != nil {
		switch fp.selector {
		case ListProvisioningPoliciesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListProvisioningPoliciesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListProvisioningPoliciesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListProvisioningPoliciesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListProvisioningPoliciesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProvisioningPoliciesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProvisioningPoliciesRequest_FieldPathSelectorParent ||
		fp.selector == ListProvisioningPoliciesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListProvisioningPoliciesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListProvisioningPoliciesRequest_FieldPathSelectorFilter ||
		fp.selector == ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListProvisioningPoliciesRequest_FieldPathSelectorView ||
		fp.selector == ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) WithIValue(value interface{}) ListProvisioningPoliciesRequest_FieldPathValue {
	switch fp.selector {
	case ListProvisioningPoliciesRequest_FieldPathSelectorParent:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathValue{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ParentName)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathValue{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathValue{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathValue{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.OrderBy)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorFilter:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathValue{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Filter)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathValue{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorView:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathValue{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathValue{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProvisioningPoliciesRequest_FieldPathArrayOfValues {
	fpaov := &ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProvisioningPoliciesRequest_FieldPathSelectorParent:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ParentName)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.OrderBy)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorFilter:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Filter)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorView:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo:
		return &ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProvisioningPoliciesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningPoliciesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListProvisioningPoliciesRequest_FieldPathValue allows storing values for ListProvisioningPoliciesRequest fields according to their type
type ListProvisioningPoliciesRequest_FieldPathValue interface {
	ListProvisioningPoliciesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProvisioningPoliciesRequest)
	CompareWith(*ListProvisioningPoliciesRequest) (cmp int, comparable bool)
}

func ParseListProvisioningPoliciesRequest_FieldPathValue(pathStr, valueStr string) (ListProvisioningPoliciesRequest_FieldPathValue, error) {
	fp, err := ParseListProvisioningPoliciesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPoliciesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProvisioningPoliciesRequest_FieldPathValue), nil
}

func MustParseListProvisioningPoliciesRequest_FieldPathValue(pathStr, valueStr string) ListProvisioningPoliciesRequest_FieldPathValue {
	fpv, err := ParseListProvisioningPoliciesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProvisioningPoliciesRequest_FieldTerminalPathValue struct {
	ListProvisioningPoliciesRequest_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningPoliciesRequest_FieldPathValue = (*ListProvisioningPoliciesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProvisioningPoliciesRequest' as interface{}
func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) AsParentValue() (*provisioning_policy.ParentName, bool) {
	res, ok := fpv.value.(*provisioning_policy.ParentName)
	return res, ok
}
func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) AsPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) AsOrderByValue() (*provisioning_policy.OrderBy, bool) {
	res, ok := fpv.value.(*provisioning_policy.OrderBy)
	return res, ok
}
func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) AsFilterValue() (*provisioning_policy.Filter, bool) {
	res, ok := fpv.value.(*provisioning_policy.Filter)
	return res, ok
}
func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListProvisioningPoliciesRequest
func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) SetTo(target **ListProvisioningPoliciesRequest) {
	if *target == nil {
		*target = new(ListProvisioningPoliciesRequest)
	}
	switch fpv.selector {
	case ListProvisioningPoliciesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*provisioning_policy.ParentName)
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*provisioning_policy.PagerCursor)
	case ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*provisioning_policy.OrderBy)
	case ListProvisioningPoliciesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*provisioning_policy.Filter)
	case ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case ListProvisioningPoliciesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesRequest: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProvisioningPoliciesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProvisioningPoliciesRequest_FieldTerminalPathValue' with the value under path in 'ListProvisioningPoliciesRequest'.
func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) CompareWith(source *ListProvisioningPoliciesRequest) (int, bool) {
	switch fpv.selector {
	case ListProvisioningPoliciesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*provisioning_policy.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListProvisioningPoliciesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListProvisioningPoliciesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesRequest: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningPoliciesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProvisioningPoliciesRequest))
}

// ListProvisioningPoliciesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProvisioningPoliciesRequest according to their type
// Present only for array (repeated) types.
type ListProvisioningPoliciesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProvisioningPoliciesRequest_FieldPath
	ContainsValue(*ListProvisioningPoliciesRequest) bool
}

// ParseListProvisioningPoliciesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProvisioningPoliciesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListProvisioningPoliciesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListProvisioningPoliciesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPoliciesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProvisioningPoliciesRequest_FieldPathArrayItemValue), nil
}

func MustParseListProvisioningPoliciesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListProvisioningPoliciesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListProvisioningPoliciesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue struct {
	ListProvisioningPoliciesRequest_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningPoliciesRequest_FieldPathArrayItemValue = (*ListProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProvisioningPoliciesRequest as interface{}
func (fpaiv *ListProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListProvisioningPoliciesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProvisioningPoliciesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProvisioningPoliciesRequest'
func (fpaiv *ListProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProvisioningPoliciesRequest) bool {
	slice := fpaiv.ListProvisioningPoliciesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListProvisioningPoliciesRequest_FieldPathArrayOfValues allows storing slice of values for ListProvisioningPoliciesRequest fields according to their type
type ListProvisioningPoliciesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProvisioningPoliciesRequest_FieldPath
}

func ParseListProvisioningPoliciesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProvisioningPoliciesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListProvisioningPoliciesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPoliciesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProvisioningPoliciesRequest_FieldPathArrayOfValues), nil
}

func MustParseListProvisioningPoliciesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListProvisioningPoliciesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListProvisioningPoliciesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues struct {
	ListProvisioningPoliciesRequest_FieldTerminalPath
	values interface{}
}

var _ ListProvisioningPoliciesRequest_FieldPathArrayOfValues = (*ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProvisioningPoliciesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*provisioning_policy.ParentName) {
			values = append(values, v)
		}
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	case ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*provisioning_policy.OrderBy) {
			values = append(values, v)
		}
	case ListProvisioningPoliciesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*provisioning_policy.Filter) {
			values = append(values, v)
		}
	case ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case ListProvisioningPoliciesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*provisioning_policy.ParentName, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ParentName)
	return res, ok
}
func (fpaov *ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpaov *ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*provisioning_policy.OrderBy, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.OrderBy)
	return res, ok
}
func (fpaov *ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*provisioning_policy.Filter, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Filter)
	return res, ok
}
func (fpaov *ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProvisioningPoliciesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProvisioningPoliciesResponse_FieldPathSelector
	Get(source *ListProvisioningPoliciesResponse) []interface{}
	GetSingle(source *ListProvisioningPoliciesResponse) (interface{}, bool)
	ClearValue(item *ListProvisioningPoliciesResponse)

	// Those methods build corresponding ListProvisioningPoliciesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProvisioningPoliciesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProvisioningPoliciesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProvisioningPoliciesResponse_FieldPathArrayItemValue
}

type ListProvisioningPoliciesResponse_FieldPathSelector int32

const (
	ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies ListProvisioningPoliciesResponse_FieldPathSelector = 0
	ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken        ListProvisioningPoliciesResponse_FieldPathSelector = 1
	ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken        ListProvisioningPoliciesResponse_FieldPathSelector = 2
	ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset        ListProvisioningPoliciesResponse_FieldPathSelector = 3
	ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount    ListProvisioningPoliciesResponse_FieldPathSelector = 4
)

func (s ListProvisioningPoliciesResponse_FieldPathSelector) String() string {
	switch s {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return "provisioning_policies"
	case ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", s))
	}
}

func BuildListProvisioningPoliciesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListProvisioningPoliciesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProvisioningPoliciesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_policies", "provisioningPolicies", "provisioning-policies":
			return &ListProvisioningPoliciesResponse_FieldTerminalPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListProvisioningPoliciesResponse_FieldTerminalPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListProvisioningPoliciesResponse_FieldTerminalPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListProvisioningPoliciesResponse_FieldTerminalPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListProvisioningPoliciesResponse_FieldTerminalPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_policies", "provisioningPolicies", "provisioning-policies":
			if subpath, err := provisioning_policy.BuildProvisioningPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListProvisioningPoliciesResponse_FieldSubPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProvisioningPoliciesResponse", fp)
}

func ParseListProvisioningPoliciesResponse_FieldPath(rawField string) (ListProvisioningPoliciesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProvisioningPoliciesResponse_FieldPath(fp)
}

func MustParseListProvisioningPoliciesResponse_FieldPath(rawField string) ListProvisioningPoliciesResponse_FieldPath {
	fp, err := ParseListProvisioningPoliciesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProvisioningPoliciesResponse_FieldTerminalPath struct {
	selector ListProvisioningPoliciesResponse_FieldPathSelector
}

var _ ListProvisioningPoliciesResponse_FieldPath = (*ListProvisioningPoliciesResponse_FieldTerminalPath)(nil)

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) Selector() ListProvisioningPoliciesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProvisioningPoliciesResponse
func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) Get(source *ListProvisioningPoliciesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
			for _, value := range source.GetProvisioningPolicies() {
				values = append(values, value)
			}
		case ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProvisioningPoliciesResponse))
}

// GetSingle returns value pointed by specific field of from source ListProvisioningPoliciesResponse
func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) GetSingle(source *ListProvisioningPoliciesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		res := source.GetProvisioningPolicies()
		return res, res != nil
	case ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProvisioningPoliciesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return ([]*provisioning_policy.ProvisioningPolicy)(nil)
	case ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	case ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	case ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) ClearValue(item *ListProvisioningPoliciesResponse) {
	if item != nil {
		switch fp.selector {
		case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
			item.ProvisioningPolicies = nil
		case ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProvisioningPoliciesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) WithIValue(value interface{}) ListProvisioningPoliciesResponse_FieldPathValue {
	switch fp.selector {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return &ListProvisioningPoliciesResponse_FieldTerminalPathValue{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_policy.ProvisioningPolicy)}
	case ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken:
		return &ListProvisioningPoliciesResponse_FieldTerminalPathValue{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	case ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken:
		return &ListProvisioningPoliciesResponse_FieldTerminalPathValue{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	case ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset:
		return &ListProvisioningPoliciesResponse_FieldTerminalPathValue{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount:
		return &ListProvisioningPoliciesResponse_FieldTerminalPathValue{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProvisioningPoliciesResponse_FieldPathArrayOfValues {
	fpaov := &ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return &ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_policy.ProvisioningPolicy)}
	case ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken:
		return &ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	case ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken:
		return &ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	case ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset:
		return &ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount:
		return &ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProvisioningPoliciesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return &ListProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue{ListProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningPoliciesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListProvisioningPoliciesResponse_FieldSubPath struct {
	selector ListProvisioningPoliciesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListProvisioningPoliciesResponse_FieldPath = (*ListProvisioningPoliciesResponse_FieldSubPath)(nil)

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) Selector() ListProvisioningPoliciesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListProvisioningPoliciesResponse_FieldSubPath) AsProvisioningPoliciesSubPath() (provisioning_policy.ProvisioningPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_policy.ProvisioningPolicy_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListProvisioningPoliciesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListProvisioningPoliciesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListProvisioningPoliciesResponse
func (fps *ListProvisioningPoliciesResponse_FieldSubPath) Get(source *ListProvisioningPoliciesResponse) (values []interface{}) {
	switch fps.selector {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		for _, item := range source.GetProvisioningPolicies() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListProvisioningPoliciesResponse))
}

// GetSingle returns value of selected field from source ListProvisioningPoliciesResponse
func (fps *ListProvisioningPoliciesResponse_FieldSubPath) GetSingle(source *ListProvisioningPoliciesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		if len(source.GetProvisioningPolicies()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningPolicies()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fps.selector))
	}
}

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListProvisioningPoliciesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListProvisioningPoliciesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) ClearValue(item *ListProvisioningPoliciesResponse) {
	if item != nil {
		switch fps.selector {
		case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
			for _, subItem := range item.ProvisioningPolicies {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListProvisioningPoliciesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListProvisioningPoliciesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListProvisioningPoliciesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) WithIValue(value interface{}) ListProvisioningPoliciesResponse_FieldPathValue {
	return &ListProvisioningPoliciesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListProvisioningPoliciesResponse_FieldPathArrayOfValues {
	return &ListProvisioningPoliciesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListProvisioningPoliciesResponse_FieldPathArrayItemValue {
	return &ListProvisioningPoliciesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListProvisioningPoliciesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListProvisioningPoliciesResponse_FieldPathValue allows storing values for ListProvisioningPoliciesResponse fields according to their type
type ListProvisioningPoliciesResponse_FieldPathValue interface {
	ListProvisioningPoliciesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProvisioningPoliciesResponse)
	CompareWith(*ListProvisioningPoliciesResponse) (cmp int, comparable bool)
}

func ParseListProvisioningPoliciesResponse_FieldPathValue(pathStr, valueStr string) (ListProvisioningPoliciesResponse_FieldPathValue, error) {
	fp, err := ParseListProvisioningPoliciesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPoliciesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProvisioningPoliciesResponse_FieldPathValue), nil
}

func MustParseListProvisioningPoliciesResponse_FieldPathValue(pathStr, valueStr string) ListProvisioningPoliciesResponse_FieldPathValue {
	fpv, err := ParseListProvisioningPoliciesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProvisioningPoliciesResponse_FieldTerminalPathValue struct {
	ListProvisioningPoliciesResponse_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningPoliciesResponse_FieldPathValue = (*ListProvisioningPoliciesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProvisioningPoliciesResponse' as interface{}
func (fpv *ListProvisioningPoliciesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProvisioningPoliciesResponse_FieldTerminalPathValue) AsProvisioningPoliciesValue() ([]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpv.value.([]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpv *ListProvisioningPoliciesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpv *ListProvisioningPoliciesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpv *ListProvisioningPoliciesResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProvisioningPoliciesResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListProvisioningPoliciesResponse
func (fpv *ListProvisioningPoliciesResponse_FieldTerminalPathValue) SetTo(target **ListProvisioningPoliciesResponse) {
	if *target == nil {
		*target = new(ListProvisioningPoliciesResponse)
	}
	switch fpv.selector {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		(*target).ProvisioningPolicies = fpv.value.([]*provisioning_policy.ProvisioningPolicy)
	case ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*provisioning_policy.PagerCursor)
	case ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*provisioning_policy.PagerCursor)
	case ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningPoliciesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProvisioningPoliciesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProvisioningPoliciesResponse_FieldTerminalPathValue' with the value under path in 'ListProvisioningPoliciesResponse'.
func (fpv *ListProvisioningPoliciesResponse_FieldTerminalPathValue) CompareWith(source *ListProvisioningPoliciesResponse) (int, bool) {
	switch fpv.selector {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return 0, false
	case ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningPoliciesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProvisioningPoliciesResponse))
}

type ListProvisioningPoliciesResponse_FieldSubPathValue struct {
	ListProvisioningPoliciesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListProvisioningPoliciesResponse_FieldPathValue = (*ListProvisioningPoliciesResponse_FieldSubPathValue)(nil)

func (fpvs *ListProvisioningPoliciesResponse_FieldSubPathValue) AsProvisioningPoliciesPathValue() (provisioning_policy.ProvisioningPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue)
	return res, ok
}

func (fpvs *ListProvisioningPoliciesResponse_FieldSubPathValue) SetTo(target **ListProvisioningPoliciesResponse) {
	if *target == nil {
		*target = new(ListProvisioningPoliciesResponse)
	}
	switch fpvs.Selector() {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProvisioningPoliciesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProvisioningPoliciesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListProvisioningPoliciesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListProvisioningPoliciesResponse_FieldSubPathValue) CompareWith(source *ListProvisioningPoliciesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProvisioningPoliciesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListProvisioningPoliciesResponse))
}

// ListProvisioningPoliciesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProvisioningPoliciesResponse according to their type
// Present only for array (repeated) types.
type ListProvisioningPoliciesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProvisioningPoliciesResponse_FieldPath
	ContainsValue(*ListProvisioningPoliciesResponse) bool
}

// ParseListProvisioningPoliciesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProvisioningPoliciesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListProvisioningPoliciesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListProvisioningPoliciesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPoliciesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProvisioningPoliciesResponse_FieldPathArrayItemValue), nil
}

func MustParseListProvisioningPoliciesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListProvisioningPoliciesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListProvisioningPoliciesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue struct {
	ListProvisioningPoliciesResponse_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningPoliciesResponse_FieldPathArrayItemValue = (*ListProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProvisioningPoliciesResponse as interface{}
func (fpaiv *ListProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) AsProvisioningPoliciesItemValue() (*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaiv.value.(*provisioning_policy.ProvisioningPolicy)
	return res, ok
}

func (fpaiv *ListProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListProvisioningPoliciesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProvisioningPoliciesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProvisioningPoliciesResponse'
func (fpaiv *ListProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProvisioningPoliciesResponse) bool {
	slice := fpaiv.ListProvisioningPoliciesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListProvisioningPoliciesResponse_FieldSubPathArrayItemValue struct {
	ListProvisioningPoliciesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListProvisioningPoliciesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListProvisioningPoliciesResponse_FieldSubPathArrayItemValue) AsProvisioningPoliciesPathItemValue() (provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProvisioningPoliciesResponse'
func (fpaivs *ListProvisioningPoliciesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListProvisioningPoliciesResponse) bool {
	switch fpaivs.Selector() {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPoliciesResponse: %d", fpaivs.Selector()))
	}
}

// ListProvisioningPoliciesResponse_FieldPathArrayOfValues allows storing slice of values for ListProvisioningPoliciesResponse fields according to their type
type ListProvisioningPoliciesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProvisioningPoliciesResponse_FieldPath
}

func ParseListProvisioningPoliciesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProvisioningPoliciesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListProvisioningPoliciesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPoliciesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProvisioningPoliciesResponse_FieldPathArrayOfValues), nil
}

func MustParseListProvisioningPoliciesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListProvisioningPoliciesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListProvisioningPoliciesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues struct {
	ListProvisioningPoliciesResponse_FieldTerminalPath
	values interface{}
}

var _ ListProvisioningPoliciesResponse_FieldPathArrayOfValues = (*ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies:
		for _, v := range fpaov.values.([][]*provisioning_policy.ProvisioningPolicy) {
			values = append(values, v)
		}
	case ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	case ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	case ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsProvisioningPoliciesArrayOfValues() ([][]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaov.values.([][]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpaov *ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpaov *ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpaov *ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListProvisioningPoliciesResponse_FieldSubPathArrayOfValues struct {
	ListProvisioningPoliciesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListProvisioningPoliciesResponse_FieldPathArrayOfValues = (*ListProvisioningPoliciesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListProvisioningPoliciesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListProvisioningPoliciesResponse_FieldSubPathArrayOfValues) AsProvisioningPoliciesPathArrayOfValues() (provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningPolicyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningPolicyRequest_FieldPathSelector
	Get(source *WatchProvisioningPolicyRequest) []interface{}
	GetSingle(source *WatchProvisioningPolicyRequest) (interface{}, bool)
	ClearValue(item *WatchProvisioningPolicyRequest)

	// Those methods build corresponding WatchProvisioningPolicyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningPolicyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningPolicyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningPolicyRequest_FieldPathArrayItemValue
}

type WatchProvisioningPolicyRequest_FieldPathSelector int32

const (
	WatchProvisioningPolicyRequest_FieldPathSelectorName      WatchProvisioningPolicyRequest_FieldPathSelector = 0
	WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask WatchProvisioningPolicyRequest_FieldPathSelector = 1
	WatchProvisioningPolicyRequest_FieldPathSelectorView      WatchProvisioningPolicyRequest_FieldPathSelector = 2
)

func (s WatchProvisioningPolicyRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		return "name"
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", s))
	}
}

func BuildWatchProvisioningPolicyRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningPolicyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningPolicyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchProvisioningPolicyRequest_FieldTerminalPath{selector: WatchProvisioningPolicyRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProvisioningPolicyRequest_FieldTerminalPath{selector: WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProvisioningPolicyRequest_FieldTerminalPath{selector: WatchProvisioningPolicyRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningPolicyRequest", fp)
}

func ParseWatchProvisioningPolicyRequest_FieldPath(rawField string) (WatchProvisioningPolicyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningPolicyRequest_FieldPath(fp)
}

func MustParseWatchProvisioningPolicyRequest_FieldPath(rawField string) WatchProvisioningPolicyRequest_FieldPath {
	fp, err := ParseWatchProvisioningPolicyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningPolicyRequest_FieldTerminalPath struct {
	selector WatchProvisioningPolicyRequest_FieldPathSelector
}

var _ WatchProvisioningPolicyRequest_FieldPath = (*WatchProvisioningPolicyRequest_FieldTerminalPath)(nil)

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) Selector() WatchProvisioningPolicyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningPolicyRequest
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) Get(source *WatchProvisioningPolicyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningPolicyRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProvisioningPolicyRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningPolicyRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningPolicyRequest
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) GetSingle(source *WatchProvisioningPolicyRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		return (*provisioning_policy.Reference)(nil)
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) ClearValue(item *WatchProvisioningPolicyRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningPolicyRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProvisioningPolicyRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningPolicyRequest_FieldPathSelectorName ||
		fp.selector == WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProvisioningPolicyRequest_FieldPathSelectorView
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningPolicyRequest_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathValue{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathValue{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathValue{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Reference)}
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningPolicyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningPolicyRequest_FieldPathValue allows storing values for WatchProvisioningPolicyRequest fields according to their type
type WatchProvisioningPolicyRequest_FieldPathValue interface {
	WatchProvisioningPolicyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningPolicyRequest)
	CompareWith(*WatchProvisioningPolicyRequest) (cmp int, comparable bool)
}

func ParseWatchProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) (WatchProvisioningPolicyRequest_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningPolicyRequest_FieldPathValue), nil
}

func MustParseWatchProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) WatchProvisioningPolicyRequest_FieldPathValue {
	fpv, err := ParseWatchProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningPolicyRequest_FieldTerminalPathValue struct {
	WatchProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicyRequest_FieldPathValue = (*WatchProvisioningPolicyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningPolicyRequest' as interface{}
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) AsNameValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.(*provisioning_policy.Reference)
	return res, ok
}
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningPolicyRequest
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) SetTo(target **WatchProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(WatchProvisioningPolicyRequest)
	}
	switch fpv.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*provisioning_policy.Reference)
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPolicyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningPolicyRequest_FieldTerminalPathValue' with the value under path in 'WatchProvisioningPolicyRequest'.
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) CompareWith(source *WatchProvisioningPolicyRequest) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*provisioning_policy.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningPolicyRequest))
}

// WatchProvisioningPolicyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningPolicyRequest according to their type
// Present only for array (repeated) types.
type WatchProvisioningPolicyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningPolicyRequest_FieldPath
	ContainsValue(*WatchProvisioningPolicyRequest) bool
}

// ParseWatchProvisioningPolicyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningPolicyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningPolicyRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningPolicyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicyRequest_FieldPathArrayItemValue = (*WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningPolicyRequest as interface{}
func (fpaiv *WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningPolicyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningPolicyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningPolicyRequest'
func (fpaiv *WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningPolicyRequest) bool {
	slice := fpaiv.WatchProvisioningPolicyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningPolicyRequest_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningPolicyRequest fields according to their type
type WatchProvisioningPolicyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningPolicyRequest_FieldPath
}

func ParseWatchProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningPolicyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningPolicyRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningPolicyRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningPolicyRequest_FieldPathArrayOfValues = (*WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Reference)
	return res, ok
}
func (fpaov *WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningPolicyResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningPolicyResponse_FieldPathSelector
	Get(source *WatchProvisioningPolicyResponse) []interface{}
	GetSingle(source *WatchProvisioningPolicyResponse) (interface{}, bool)
	ClearValue(item *WatchProvisioningPolicyResponse)

	// Those methods build corresponding WatchProvisioningPolicyResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningPolicyResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningPolicyResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningPolicyResponse_FieldPathArrayItemValue
}

type WatchProvisioningPolicyResponse_FieldPathSelector int32

const (
	WatchProvisioningPolicyResponse_FieldPathSelectorChange WatchProvisioningPolicyResponse_FieldPathSelector = 0
)

func (s WatchProvisioningPolicyResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", s))
	}
}

func BuildWatchProvisioningPolicyResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningPolicyResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningPolicyResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchProvisioningPolicyResponse_FieldTerminalPath{selector: WatchProvisioningPolicyResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningPolicyResponse", fp)
}

func ParseWatchProvisioningPolicyResponse_FieldPath(rawField string) (WatchProvisioningPolicyResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningPolicyResponse_FieldPath(fp)
}

func MustParseWatchProvisioningPolicyResponse_FieldPath(rawField string) WatchProvisioningPolicyResponse_FieldPath {
	fp, err := ParseWatchProvisioningPolicyResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningPolicyResponse_FieldTerminalPath struct {
	selector WatchProvisioningPolicyResponse_FieldPathSelector
}

var _ WatchProvisioningPolicyResponse_FieldPath = (*WatchProvisioningPolicyResponse_FieldTerminalPath)(nil)

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) Selector() WatchProvisioningPolicyResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningPolicyResponse
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) Get(source *WatchProvisioningPolicyResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningPolicyResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningPolicyResponse
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) GetSingle(source *WatchProvisioningPolicyResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningPolicyResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		return (*provisioning_policy.ProvisioningPolicyChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) ClearValue(item *WatchProvisioningPolicyResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningPolicyResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningPolicyResponse_FieldPathSelectorChange
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningPolicyResponse_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		return &WatchProvisioningPolicyResponse_FieldTerminalPathValue{WatchProvisioningPolicyResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicyChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningPolicyResponse_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		return &WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyResponse_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicyChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningPolicyResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningPolicyResponse_FieldPathValue allows storing values for WatchProvisioningPolicyResponse fields according to their type
type WatchProvisioningPolicyResponse_FieldPathValue interface {
	WatchProvisioningPolicyResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningPolicyResponse)
	CompareWith(*WatchProvisioningPolicyResponse) (cmp int, comparable bool)
}

func ParseWatchProvisioningPolicyResponse_FieldPathValue(pathStr, valueStr string) (WatchProvisioningPolicyResponse_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningPolicyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningPolicyResponse_FieldPathValue), nil
}

func MustParseWatchProvisioningPolicyResponse_FieldPathValue(pathStr, valueStr string) WatchProvisioningPolicyResponse_FieldPathValue {
	fpv, err := ParseWatchProvisioningPolicyResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningPolicyResponse_FieldTerminalPathValue struct {
	WatchProvisioningPolicyResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicyResponse_FieldPathValue = (*WatchProvisioningPolicyResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningPolicyResponse' as interface{}
func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) AsChangeValue() (*provisioning_policy.ProvisioningPolicyChange, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicyChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningPolicyResponse
func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) SetTo(target **WatchProvisioningPolicyResponse) {
	if *target == nil {
		*target = new(WatchProvisioningPolicyResponse)
	}
	switch fpv.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*provisioning_policy.ProvisioningPolicyChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPolicyResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningPolicyResponse_FieldTerminalPathValue' with the value under path in 'WatchProvisioningPolicyResponse'.
func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) CompareWith(source *WatchProvisioningPolicyResponse) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningPolicyResponse))
}

// WatchProvisioningPolicyResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningPolicyResponse according to their type
// Present only for array (repeated) types.
type WatchProvisioningPolicyResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningPolicyResponse_FieldPath
	ContainsValue(*WatchProvisioningPolicyResponse) bool
}

// ParseWatchProvisioningPolicyResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningPolicyResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningPolicyResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningPolicyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningPolicyResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningPolicyResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningPolicyResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningPolicyResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningPolicyResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicyResponse_FieldPathArrayItemValue = (*WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningPolicyResponse as interface{}
func (fpaiv *WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningPolicyResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningPolicyResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningPolicyResponse'
func (fpaiv *WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningPolicyResponse) bool {
	slice := fpaiv.WatchProvisioningPolicyResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningPolicyResponse_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningPolicyResponse fields according to their type
type WatchProvisioningPolicyResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningPolicyResponse_FieldPath
}

func ParseWatchProvisioningPolicyResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningPolicyResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningPolicyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningPolicyResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningPolicyResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningPolicyResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningPolicyResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningPolicyResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningPolicyResponse_FieldPathArrayOfValues = (*WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicyChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*provisioning_policy.ProvisioningPolicyChange, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicyChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningPoliciesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningPoliciesRequest_FieldPathSelector
	Get(source *WatchProvisioningPoliciesRequest) []interface{}
	GetSingle(source *WatchProvisioningPoliciesRequest) (interface{}, bool)
	ClearValue(item *WatchProvisioningPoliciesRequest)

	// Those methods build corresponding WatchProvisioningPoliciesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningPoliciesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningPoliciesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningPoliciesRequest_FieldPathArrayItemValue
}

type WatchProvisioningPoliciesRequest_FieldPathSelector int32

const (
	WatchProvisioningPoliciesRequest_FieldPathSelectorType         WatchProvisioningPoliciesRequest_FieldPathSelector = 0
	WatchProvisioningPoliciesRequest_FieldPathSelectorParent       WatchProvisioningPoliciesRequest_FieldPathSelector = 1
	WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize     WatchProvisioningPoliciesRequest_FieldPathSelector = 2
	WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken    WatchProvisioningPoliciesRequest_FieldPathSelector = 3
	WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy      WatchProvisioningPoliciesRequest_FieldPathSelector = 4
	WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken  WatchProvisioningPoliciesRequest_FieldPathSelector = 5
	WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime WatchProvisioningPoliciesRequest_FieldPathSelector = 6
	WatchProvisioningPoliciesRequest_FieldPathSelectorFilter       WatchProvisioningPoliciesRequest_FieldPathSelector = 7
	WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask    WatchProvisioningPoliciesRequest_FieldPathSelector = 8
	WatchProvisioningPoliciesRequest_FieldPathSelectorView         WatchProvisioningPoliciesRequest_FieldPathSelector = 9
	WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize WatchProvisioningPoliciesRequest_FieldPathSelector = 10
)

func (s WatchProvisioningPoliciesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningPoliciesRequest_FieldPathSelectorType:
		return "type"
	case WatchProvisioningPoliciesRequest_FieldPathSelectorParent:
		return "parent"
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProvisioningPoliciesRequest_FieldPathSelectorView:
		return "view"
	case WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesRequest: %d", s))
	}
}

func BuildWatchProvisioningPoliciesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningPoliciesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningPoliciesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningPoliciesRequest", fp)
}

func ParseWatchProvisioningPoliciesRequest_FieldPath(rawField string) (WatchProvisioningPoliciesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningPoliciesRequest_FieldPath(fp)
}

func MustParseWatchProvisioningPoliciesRequest_FieldPath(rawField string) WatchProvisioningPoliciesRequest_FieldPath {
	fp, err := ParseWatchProvisioningPoliciesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningPoliciesRequest_FieldTerminalPath struct {
	selector WatchProvisioningPoliciesRequest_FieldPathSelector
}

var _ WatchProvisioningPoliciesRequest_FieldPath = (*WatchProvisioningPoliciesRequest_FieldTerminalPath)(nil)

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) Selector() WatchProvisioningPoliciesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningPoliciesRequest
func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) Get(source *WatchProvisioningPoliciesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningPoliciesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchProvisioningPoliciesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchProvisioningPoliciesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProvisioningPoliciesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningPoliciesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningPoliciesRequest
func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) GetSingle(source *WatchProvisioningPoliciesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningPoliciesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchProvisioningPoliciesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProvisioningPoliciesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningPoliciesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningPoliciesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchProvisioningPoliciesRequest_FieldPathSelectorParent:
		return (*provisioning_policy.ParentReference)(nil)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		return (*provisioning_policy.OrderBy)(nil)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFilter:
		return (*provisioning_policy.Filter)(nil)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) ClearValue(item *WatchProvisioningPoliciesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningPoliciesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchProvisioningPoliciesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchProvisioningPoliciesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProvisioningPoliciesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningPoliciesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningPoliciesRequest_FieldPathSelectorType ||
		fp.selector == WatchProvisioningPoliciesRequest_FieldPathSelectorParent ||
		fp.selector == WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchProvisioningPoliciesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProvisioningPoliciesRequest_FieldPathSelectorView ||
		fp.selector == WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningPoliciesRequest_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningPoliciesRequest_FieldPathSelectorType:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathValue{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorParent:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathValue{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ParentReference)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathValue{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathValue{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathValue{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.OrderBy)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathValue{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathValue{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFilter:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathValue{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Filter)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathValue{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorView:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathValue{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathValue{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningPoliciesRequest_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningPoliciesRequest_FieldPathSelectorType:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorParent:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ParentReference)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.OrderBy)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFilter:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Filter)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorView:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningPoliciesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningPoliciesRequest_FieldPathValue allows storing values for WatchProvisioningPoliciesRequest fields according to their type
type WatchProvisioningPoliciesRequest_FieldPathValue interface {
	WatchProvisioningPoliciesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningPoliciesRequest)
	CompareWith(*WatchProvisioningPoliciesRequest) (cmp int, comparable bool)
}

func ParseWatchProvisioningPoliciesRequest_FieldPathValue(pathStr, valueStr string) (WatchProvisioningPoliciesRequest_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningPoliciesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPoliciesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningPoliciesRequest_FieldPathValue), nil
}

func MustParseWatchProvisioningPoliciesRequest_FieldPathValue(pathStr, valueStr string) WatchProvisioningPoliciesRequest_FieldPathValue {
	fpv, err := ParseWatchProvisioningPoliciesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningPoliciesRequest_FieldTerminalPathValue struct {
	WatchProvisioningPoliciesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPoliciesRequest_FieldPathValue = (*WatchProvisioningPoliciesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningPoliciesRequest' as interface{}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) AsParentValue() (*provisioning_policy.ParentReference, bool) {
	res, ok := fpv.value.(*provisioning_policy.ParentReference)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) AsPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) AsOrderByValue() (*provisioning_policy.OrderBy, bool) {
	res, ok := fpv.value.(*provisioning_policy.OrderBy)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) AsFilterValue() (*provisioning_policy.Filter, bool) {
	res, ok := fpv.value.(*provisioning_policy.Filter)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningPoliciesRequest
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) SetTo(target **WatchProvisioningPoliciesRequest) {
	if *target == nil {
		*target = new(WatchProvisioningPoliciesRequest)
	}
	switch fpv.selector {
	case WatchProvisioningPoliciesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*provisioning_policy.ParentReference)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*provisioning_policy.PagerCursor)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*provisioning_policy.OrderBy)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*provisioning_policy.Filter)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPoliciesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningPoliciesRequest_FieldTerminalPathValue' with the value under path in 'WatchProvisioningPoliciesRequest'.
func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) CompareWith(source *WatchProvisioningPoliciesRequest) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningPoliciesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*provisioning_policy.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProvisioningPoliciesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPoliciesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningPoliciesRequest))
}

// WatchProvisioningPoliciesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningPoliciesRequest according to their type
// Present only for array (repeated) types.
type WatchProvisioningPoliciesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningPoliciesRequest_FieldPath
	ContainsValue(*WatchProvisioningPoliciesRequest) bool
}

// ParseWatchProvisioningPoliciesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningPoliciesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningPoliciesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningPoliciesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPoliciesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningPoliciesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningPoliciesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningPoliciesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningPoliciesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningPoliciesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPoliciesRequest_FieldPathArrayItemValue = (*WatchProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningPoliciesRequest as interface{}
func (fpaiv *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningPoliciesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningPoliciesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningPoliciesRequest'
func (fpaiv *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningPoliciesRequest) bool {
	slice := fpaiv.WatchProvisioningPoliciesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningPoliciesRequest_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningPoliciesRequest fields according to their type
type WatchProvisioningPoliciesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningPoliciesRequest_FieldPath
}

func ParseWatchProvisioningPoliciesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningPoliciesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningPoliciesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPoliciesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningPoliciesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningPoliciesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningPoliciesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningPoliciesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningPoliciesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningPoliciesRequest_FieldPathArrayOfValues = (*WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningPoliciesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*provisioning_policy.ParentReference) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*provisioning_policy.OrderBy) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*provisioning_policy.Filter) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*provisioning_policy.ParentReference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ParentReference)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*provisioning_policy.OrderBy, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.OrderBy)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*provisioning_policy.Filter, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Filter)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningPoliciesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningPoliciesResponse_FieldPathSelector
	Get(source *WatchProvisioningPoliciesResponse) []interface{}
	GetSingle(source *WatchProvisioningPoliciesResponse) (interface{}, bool)
	ClearValue(item *WatchProvisioningPoliciesResponse)

	// Those methods build corresponding WatchProvisioningPoliciesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningPoliciesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningPoliciesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningPoliciesResponse_FieldPathArrayItemValue
}

type WatchProvisioningPoliciesResponse_FieldPathSelector int32

const (
	WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges WatchProvisioningPoliciesResponse_FieldPathSelector = 0
	WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent                 WatchProvisioningPoliciesResponse_FieldPathSelector = 1
	WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange           WatchProvisioningPoliciesResponse_FieldPathSelector = 2
	WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken               WatchProvisioningPoliciesResponse_FieldPathSelector = 3
	WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize              WatchProvisioningPoliciesResponse_FieldPathSelector = 4
	WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset               WatchProvisioningPoliciesResponse_FieldPathSelector = 5
	WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset               WatchProvisioningPoliciesResponse_FieldPathSelector = 6
)

func (s WatchProvisioningPoliciesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges:
		return "provisioning_policy_changes"
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", s))
	}
}

func BuildWatchProvisioningPoliciesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningPoliciesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningPoliciesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_policy_changes", "provisioningPolicyChanges", "provisioning-policy-changes":
			return &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchProvisioningPoliciesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchProvisioningPoliciesResponse_FieldSubPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningPoliciesResponse", fp)
}

func ParseWatchProvisioningPoliciesResponse_FieldPath(rawField string) (WatchProvisioningPoliciesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningPoliciesResponse_FieldPath(fp)
}

func MustParseWatchProvisioningPoliciesResponse_FieldPath(rawField string) WatchProvisioningPoliciesResponse_FieldPath {
	fp, err := ParseWatchProvisioningPoliciesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningPoliciesResponse_FieldTerminalPath struct {
	selector WatchProvisioningPoliciesResponse_FieldPathSelector
}

var _ WatchProvisioningPoliciesResponse_FieldPath = (*WatchProvisioningPoliciesResponse_FieldTerminalPath)(nil)

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) Selector() WatchProvisioningPoliciesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningPoliciesResponse
func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) Get(source *WatchProvisioningPoliciesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges:
			for _, value := range source.GetProvisioningPolicyChanges() {
				values = append(values, value)
			}
		case WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningPoliciesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningPoliciesResponse
func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) GetSingle(source *WatchProvisioningPoliciesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges:
		res := source.GetProvisioningPolicyChanges()
		return res, res != nil
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningPoliciesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges:
		return ([]*provisioning_policy.ProvisioningPolicyChange)(nil)
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchProvisioningPoliciesResponse_PageTokenChange)(nil)
	case WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) ClearValue(item *WatchProvisioningPoliciesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges:
			item.ProvisioningPolicyChanges = nil
		case WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningPoliciesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges ||
		fp.selector == WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningPoliciesResponse_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathValue{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_policy.ProvisioningPolicyChange)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathValue{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathValue{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(*WatchProvisioningPoliciesResponse_PageTokenChange)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathValue{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathValue{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathValue{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathValue{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningPoliciesResponse_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_policy.ProvisioningPolicyChange)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([]*WatchProvisioningPoliciesResponse_PageTokenChange)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningPoliciesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges:
		return &WatchProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue{WatchProvisioningPoliciesResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicyChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchProvisioningPoliciesResponse_FieldSubPath struct {
	selector WatchProvisioningPoliciesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchProvisioningPoliciesResponse_FieldPath = (*WatchProvisioningPoliciesResponse_FieldSubPath)(nil)

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) Selector() WatchProvisioningPoliciesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchProvisioningPoliciesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchProvisioningPoliciesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchProvisioningPoliciesResponse
func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) Get(source *WatchProvisioningPoliciesResponse) (values []interface{}) {
	switch fps.selector {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchProvisioningPoliciesResponse))
}

// GetSingle returns value of selected field from source WatchProvisioningPoliciesResponse
func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) GetSingle(source *WatchProvisioningPoliciesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fps.selector))
	}
}

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchProvisioningPoliciesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) ClearValue(item *WatchProvisioningPoliciesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchProvisioningPoliciesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) WithIValue(value interface{}) WatchProvisioningPoliciesResponse_FieldPathValue {
	return &WatchProvisioningPoliciesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchProvisioningPoliciesResponse_FieldPathArrayOfValues {
	return &WatchProvisioningPoliciesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchProvisioningPoliciesResponse_FieldPathArrayItemValue {
	return &WatchProvisioningPoliciesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchProvisioningPoliciesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchProvisioningPoliciesResponse_FieldPathValue allows storing values for WatchProvisioningPoliciesResponse fields according to their type
type WatchProvisioningPoliciesResponse_FieldPathValue interface {
	WatchProvisioningPoliciesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningPoliciesResponse)
	CompareWith(*WatchProvisioningPoliciesResponse) (cmp int, comparable bool)
}

func ParseWatchProvisioningPoliciesResponse_FieldPathValue(pathStr, valueStr string) (WatchProvisioningPoliciesResponse_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningPoliciesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPoliciesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningPoliciesResponse_FieldPathValue), nil
}

func MustParseWatchProvisioningPoliciesResponse_FieldPathValue(pathStr, valueStr string) WatchProvisioningPoliciesResponse_FieldPathValue {
	fpv, err := ParseWatchProvisioningPoliciesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningPoliciesResponse_FieldTerminalPathValue struct {
	WatchProvisioningPoliciesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPoliciesResponse_FieldPathValue = (*WatchProvisioningPoliciesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningPoliciesResponse' as interface{}
func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) AsProvisioningPolicyChangesValue() ([]*provisioning_policy.ProvisioningPolicyChange, bool) {
	res, ok := fpv.value.([]*provisioning_policy.ProvisioningPolicyChange)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchProvisioningPoliciesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchProvisioningPoliciesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningPoliciesResponse
func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) SetTo(target **WatchProvisioningPoliciesResponse) {
	if *target == nil {
		*target = new(WatchProvisioningPoliciesResponse)
	}
	switch fpv.selector {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges:
		(*target).ProvisioningPolicyChanges = fpv.value.([]*provisioning_policy.ProvisioningPolicyChange)
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchProvisioningPoliciesResponse_PageTokenChange)
	case WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPoliciesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningPoliciesResponse_FieldTerminalPathValue' with the value under path in 'WatchProvisioningPoliciesResponse'.
func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) CompareWith(source *WatchProvisioningPoliciesResponse) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges:
		return 0, false
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPoliciesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningPoliciesResponse))
}

type WatchProvisioningPoliciesResponse_FieldSubPathValue struct {
	WatchProvisioningPoliciesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchProvisioningPoliciesResponse_FieldPathValue = (*WatchProvisioningPoliciesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchProvisioningPoliciesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchProvisioningPoliciesResponse_FieldSubPathValue) SetTo(target **WatchProvisioningPoliciesResponse) {
	if *target == nil {
		*target = new(WatchProvisioningPoliciesResponse)
	}
	switch fpvs.Selector() {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProvisioningPoliciesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPoliciesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchProvisioningPoliciesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchProvisioningPoliciesResponse_FieldSubPathValue) CompareWith(source *WatchProvisioningPoliciesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProvisioningPoliciesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchProvisioningPoliciesResponse))
}

// WatchProvisioningPoliciesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningPoliciesResponse according to their type
// Present only for array (repeated) types.
type WatchProvisioningPoliciesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningPoliciesResponse_FieldPath
	ContainsValue(*WatchProvisioningPoliciesResponse) bool
}

// ParseWatchProvisioningPoliciesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningPoliciesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningPoliciesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningPoliciesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPoliciesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningPoliciesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningPoliciesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningPoliciesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningPoliciesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningPoliciesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPoliciesResponse_FieldPathArrayItemValue = (*WatchProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningPoliciesResponse as interface{}
func (fpaiv *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) AsProvisioningPolicyChangesItemValue() (*provisioning_policy.ProvisioningPolicyChange, bool) {
	res, ok := fpaiv.value.(*provisioning_policy.ProvisioningPolicyChange)
	return res, ok
}

func (fpaiv *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningPoliciesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningPoliciesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningPoliciesResponse'
func (fpaiv *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningPoliciesResponse) bool {
	slice := fpaiv.WatchProvisioningPoliciesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchProvisioningPoliciesResponse_FieldSubPathArrayItemValue struct {
	WatchProvisioningPoliciesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchProvisioningPoliciesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchProvisioningPoliciesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningPoliciesResponse'
func (fpaivs *WatchProvisioningPoliciesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchProvisioningPoliciesResponse) bool {
	switch fpaivs.Selector() {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse: %d", fpaivs.Selector()))
	}
}

// WatchProvisioningPoliciesResponse_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningPoliciesResponse fields according to their type
type WatchProvisioningPoliciesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningPoliciesResponse_FieldPath
}

func ParseWatchProvisioningPoliciesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningPoliciesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningPoliciesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPoliciesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningPoliciesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningPoliciesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningPoliciesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningPoliciesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningPoliciesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningPoliciesResponse_FieldPathArrayOfValues = (*WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges:
		for _, v := range fpaov.values.([][]*provisioning_policy.ProvisioningPolicyChange) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchProvisioningPoliciesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsProvisioningPolicyChangesArrayOfValues() ([][]*provisioning_policy.ProvisioningPolicyChange, bool) {
	res, ok := fpaov.values.([][]*provisioning_policy.ProvisioningPolicyChange)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchProvisioningPoliciesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchProvisioningPoliciesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchProvisioningPoliciesResponse_FieldSubPathArrayOfValues struct {
	WatchProvisioningPoliciesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchProvisioningPoliciesResponse_FieldPathArrayOfValues = (*WatchProvisioningPoliciesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchProvisioningPoliciesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchProvisioningPoliciesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningPoliciesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchProvisioningPoliciesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchProvisioningPoliciesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchProvisioningPoliciesResponse_PageTokenChange)

	// Those methods build corresponding WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelector = 0
	WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchProvisioningPoliciesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningPoliciesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningPoliciesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath{selector: WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath{selector: WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningPoliciesResponse_PageTokenChange", fp)
}

func ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPath(rawField string) (WatchProvisioningPoliciesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningPoliciesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPath(rawField string) WatchProvisioningPoliciesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelector
}

var _ WatchProvisioningPoliciesResponsePageTokenChange_FieldPath = (*WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) Selector() WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningPoliciesResponse_PageTokenChange
func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchProvisioningPoliciesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningPoliciesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningPoliciesResponse_PageTokenChange
func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchProvisioningPoliciesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningPoliciesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchProvisioningPoliciesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningPoliciesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue{WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue{WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue interface {
	WatchProvisioningPoliciesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningPoliciesResponse_PageTokenChange)
	CompareWith(*WatchProvisioningPoliciesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPoliciesResponsePageTokenChange_FieldPathValue = (*WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpv *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchProvisioningPoliciesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchProvisioningPoliciesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*provisioning_policy.PagerCursor)
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*provisioning_policy.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPoliciesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchProvisioningPoliciesResponse_PageTokenChange'.
func (fpv *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchProvisioningPoliciesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPoliciesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningPoliciesResponse_PageTokenChange))
}

// WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningPoliciesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchProvisioningPoliciesResponse_PageTokenChange) bool
}

// ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningPoliciesResponse_PageTokenChange as interface{}
func (fpaiv *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningPoliciesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningPoliciesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningPoliciesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningPoliciesResponsePageTokenChange_FieldPath
}

func ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningPoliciesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	case WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpaov *WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateProvisioningPolicyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateProvisioningPolicyRequest_FieldPathSelector
	Get(source *CreateProvisioningPolicyRequest) []interface{}
	GetSingle(source *CreateProvisioningPolicyRequest) (interface{}, bool)
	ClearValue(item *CreateProvisioningPolicyRequest)

	// Those methods build corresponding CreateProvisioningPolicyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateProvisioningPolicyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathArrayItemValue
}

type CreateProvisioningPolicyRequest_FieldPathSelector int32

const (
	CreateProvisioningPolicyRequest_FieldPathSelectorParent             CreateProvisioningPolicyRequest_FieldPathSelector = 0
	CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy CreateProvisioningPolicyRequest_FieldPathSelector = 1
)

func (s CreateProvisioningPolicyRequest_FieldPathSelector) String() string {
	switch s {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		return "parent"
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return "provisioning_policy"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", s))
	}
}

func BuildCreateProvisioningPolicyRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateProvisioningPolicyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateProvisioningPolicyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateProvisioningPolicyRequest_FieldTerminalPath{selector: CreateProvisioningPolicyRequest_FieldPathSelectorParent}, nil
		case "provisioning_policy", "provisioningPolicy", "provisioning-policy":
			return &CreateProvisioningPolicyRequest_FieldTerminalPath{selector: CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_policy", "provisioningPolicy", "provisioning-policy":
			if subpath, err := provisioning_policy.BuildProvisioningPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateProvisioningPolicyRequest_FieldSubPath{selector: CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateProvisioningPolicyRequest", fp)
}

func ParseCreateProvisioningPolicyRequest_FieldPath(rawField string) (CreateProvisioningPolicyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateProvisioningPolicyRequest_FieldPath(fp)
}

func MustParseCreateProvisioningPolicyRequest_FieldPath(rawField string) CreateProvisioningPolicyRequest_FieldPath {
	fp, err := ParseCreateProvisioningPolicyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateProvisioningPolicyRequest_FieldTerminalPath struct {
	selector CreateProvisioningPolicyRequest_FieldPathSelector
}

var _ CreateProvisioningPolicyRequest_FieldPath = (*CreateProvisioningPolicyRequest_FieldTerminalPath)(nil)

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) Selector() CreateProvisioningPolicyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateProvisioningPolicyRequest
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) Get(source *CreateProvisioningPolicyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			if source.ProvisioningPolicy != nil {
				values = append(values, source.ProvisioningPolicy)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateProvisioningPolicyRequest))
}

// GetSingle returns value pointed by specific field of from source CreateProvisioningPolicyRequest
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) GetSingle(source *CreateProvisioningPolicyRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		res := source.GetProvisioningPolicy()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		return (*provisioning_policy.ParentReference)(nil)
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return (*provisioning_policy.ProvisioningPolicy)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) ClearValue(item *CreateProvisioningPolicyRequest) {
	if item != nil {
		switch fp.selector {
		case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			item.ProvisioningPolicy = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateProvisioningPolicyRequest_FieldPathSelectorParent
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithIValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathValue {
	switch fp.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		return &CreateProvisioningPolicyRequest_FieldTerminalPathValue{CreateProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ParentReference)}
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return &CreateProvisioningPolicyRequest_FieldTerminalPathValue{CreateProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov := &CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{CreateProvisioningPolicyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		return &CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{CreateProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ParentReference)}
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return &CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{CreateProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateProvisioningPolicyRequest_FieldSubPath struct {
	selector CreateProvisioningPolicyRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateProvisioningPolicyRequest_FieldPath = (*CreateProvisioningPolicyRequest_FieldSubPath)(nil)

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) Selector() CreateProvisioningPolicyRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) AsProvisioningPolicySubPath() (provisioning_policy.ProvisioningPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_policy.ProvisioningPolicy_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateProvisioningPolicyRequest
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) Get(source *CreateProvisioningPolicyRequest) (values []interface{}) {
	switch fps.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		values = append(values, fps.subPath.GetRaw(source.GetProvisioningPolicy())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateProvisioningPolicyRequest))
}

// GetSingle returns value of selected field from source CreateProvisioningPolicyRequest
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) GetSingle(source *CreateProvisioningPolicyRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		if source.GetProvisioningPolicy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningPolicy())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fps.selector))
	}
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) ClearValue(item *CreateProvisioningPolicyRequest) {
	if item != nil {
		switch fps.selector {
		case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			fps.subPath.ClearValueRaw(item.ProvisioningPolicy)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateProvisioningPolicyRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithIValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathValue {
	return &CreateProvisioningPolicyRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateProvisioningPolicyRequest_FieldPathArrayOfValues {
	return &CreateProvisioningPolicyRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathArrayItemValue {
	return &CreateProvisioningPolicyRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateProvisioningPolicyRequest_FieldPathValue allows storing values for CreateProvisioningPolicyRequest fields according to their type
type CreateProvisioningPolicyRequest_FieldPathValue interface {
	CreateProvisioningPolicyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateProvisioningPolicyRequest)
	CompareWith(*CreateProvisioningPolicyRequest) (cmp int, comparable bool)
}

func ParseCreateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) (CreateProvisioningPolicyRequest_FieldPathValue, error) {
	fp, err := ParseCreateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProvisioningPolicyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateProvisioningPolicyRequest_FieldPathValue), nil
}

func MustParseCreateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) CreateProvisioningPolicyRequest_FieldPathValue {
	fpv, err := ParseCreateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateProvisioningPolicyRequest_FieldTerminalPathValue struct {
	CreateProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProvisioningPolicyRequest_FieldPathValue = (*CreateProvisioningPolicyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateProvisioningPolicyRequest' as interface{}
func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) AsParentValue() (*provisioning_policy.ParentReference, bool) {
	res, ok := fpv.value.(*provisioning_policy.ParentReference)
	return res, ok
}
func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) AsProvisioningPolicyValue() (*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy)
	return res, ok
}

// SetTo stores value for selected field for object CreateProvisioningPolicyRequest
func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) SetTo(target **CreateProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(CreateProvisioningPolicyRequest)
	}
	switch fpv.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*provisioning_policy.ParentReference)
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		(*target).ProvisioningPolicy = fpv.value.(*provisioning_policy.ProvisioningPolicy)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProvisioningPolicyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateProvisioningPolicyRequest_FieldTerminalPathValue' with the value under path in 'CreateProvisioningPolicyRequest'.
func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) CompareWith(source *CreateProvisioningPolicyRequest) (int, bool) {
	switch fpv.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*provisioning_policy.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateProvisioningPolicyRequest))
}

type CreateProvisioningPolicyRequest_FieldSubPathValue struct {
	CreateProvisioningPolicyRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateProvisioningPolicyRequest_FieldPathValue = (*CreateProvisioningPolicyRequest_FieldSubPathValue)(nil)

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) AsProvisioningPolicyPathValue() (provisioning_policy.ProvisioningPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue)
	return res, ok
}

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) SetTo(target **CreateProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(CreateProvisioningPolicyRequest)
	}
	switch fpvs.Selector() {
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).SetTo(&(*target).ProvisioningPolicy)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProvisioningPolicyRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) CompareWith(source *CreateProvisioningPolicyRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).CompareWith(source.GetProvisioningPolicy())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateProvisioningPolicyRequest))
}

// CreateProvisioningPolicyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateProvisioningPolicyRequest according to their type
// Present only for array (repeated) types.
type CreateProvisioningPolicyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateProvisioningPolicyRequest_FieldPath
	ContainsValue(*CreateProvisioningPolicyRequest) bool
}

// ParseCreateProvisioningPolicyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateProvisioningPolicyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProvisioningPolicyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateProvisioningPolicyRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateProvisioningPolicyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue struct {
	CreateProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProvisioningPolicyRequest_FieldPathArrayItemValue = (*CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateProvisioningPolicyRequest as interface{}
func (fpaiv *CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateProvisioningPolicyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateProvisioningPolicyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProvisioningPolicyRequest'
func (fpaiv *CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateProvisioningPolicyRequest) bool {
	slice := fpaiv.CreateProvisioningPolicyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateProvisioningPolicyRequest_FieldSubPathArrayItemValue struct {
	CreateProvisioningPolicyRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateProvisioningPolicyRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateProvisioningPolicyRequest_FieldSubPathArrayItemValue) AsProvisioningPolicyPathItemValue() (provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProvisioningPolicyRequest'
func (fpaivs *CreateProvisioningPolicyRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateProvisioningPolicyRequest) bool {
	switch fpaivs.Selector() {
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue).ContainsValue(source.GetProvisioningPolicy())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fpaivs.Selector()))
	}
}

// CreateProvisioningPolicyRequest_FieldPathArrayOfValues allows storing slice of values for CreateProvisioningPolicyRequest fields according to their type
type CreateProvisioningPolicyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateProvisioningPolicyRequest_FieldPath
}

func ParseCreateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateProvisioningPolicyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProvisioningPolicyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateProvisioningPolicyRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues struct {
	CreateProvisioningPolicyRequest_FieldTerminalPath
	values interface{}
}

var _ CreateProvisioningPolicyRequest_FieldPathArrayOfValues = (*CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*provisioning_policy.ParentReference) {
			values = append(values, v)
		}
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*provisioning_policy.ParentReference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ParentReference)
	return res, ok
}
func (fpaov *CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsProvisioningPolicyArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}

type CreateProvisioningPolicyRequest_FieldSubPathArrayOfValues struct {
	CreateProvisioningPolicyRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateProvisioningPolicyRequest_FieldPathArrayOfValues = (*CreateProvisioningPolicyRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateProvisioningPolicyRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateProvisioningPolicyRequest_FieldSubPathArrayOfValues) AsProvisioningPolicyPathArrayOfValues() (provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProvisioningPolicyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProvisioningPolicyRequest_FieldPathSelector
	Get(source *UpdateProvisioningPolicyRequest) []interface{}
	GetSingle(source *UpdateProvisioningPolicyRequest) (interface{}, bool)
	ClearValue(item *UpdateProvisioningPolicyRequest)

	// Those methods build corresponding UpdateProvisioningPolicyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayItemValue
}

type UpdateProvisioningPolicyRequest_FieldPathSelector int32

const (
	UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy UpdateProvisioningPolicyRequest_FieldPathSelector = 0
	UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask         UpdateProvisioningPolicyRequest_FieldPathSelector = 1
	UpdateProvisioningPolicyRequest_FieldPathSelectorCas                UpdateProvisioningPolicyRequest_FieldPathSelector = 2
)

func (s UpdateProvisioningPolicyRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return "provisioning_policy"
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", s))
	}
}

func BuildUpdateProvisioningPolicyRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateProvisioningPolicyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProvisioningPolicyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_policy", "provisioningPolicy", "provisioning-policy":
			return &UpdateProvisioningPolicyRequest_FieldTerminalPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateProvisioningPolicyRequest_FieldTerminalPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateProvisioningPolicyRequest_FieldTerminalPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_policy", "provisioningPolicy", "provisioning-policy":
			if subpath, err := provisioning_policy.BuildProvisioningPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProvisioningPolicyRequest_FieldSubPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateProvisioningPolicyRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProvisioningPolicyRequest_FieldSubPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProvisioningPolicyRequest", fp)
}

func ParseUpdateProvisioningPolicyRequest_FieldPath(rawField string) (UpdateProvisioningPolicyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProvisioningPolicyRequest_FieldPath(fp)
}

func MustParseUpdateProvisioningPolicyRequest_FieldPath(rawField string) UpdateProvisioningPolicyRequest_FieldPath {
	fp, err := ParseUpdateProvisioningPolicyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProvisioningPolicyRequest_FieldTerminalPath struct {
	selector UpdateProvisioningPolicyRequest_FieldPathSelector
}

var _ UpdateProvisioningPolicyRequest_FieldPath = (*UpdateProvisioningPolicyRequest_FieldTerminalPath)(nil)

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) Selector() UpdateProvisioningPolicyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProvisioningPolicyRequest
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) Get(source *UpdateProvisioningPolicyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			if source.ProvisioningPolicy != nil {
				values = append(values, source.ProvisioningPolicy)
			}
		case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProvisioningPolicyRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateProvisioningPolicyRequest
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) GetSingle(source *UpdateProvisioningPolicyRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		res := source.GetProvisioningPolicy()
		return res, res != nil
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return (*provisioning_policy.ProvisioningPolicy)(nil)
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return (*UpdateProvisioningPolicyRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) ClearValue(item *UpdateProvisioningPolicyRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			item.ProvisioningPolicy = nil
		case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathValue {
	switch fp.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathValue{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy)}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathValue{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathValue{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*UpdateProvisioningPolicyRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov := &UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy)}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*UpdateProvisioningPolicyRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProvisioningPolicyRequest_FieldSubPath struct {
	selector UpdateProvisioningPolicyRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProvisioningPolicyRequest_FieldPath = (*UpdateProvisioningPolicyRequest_FieldSubPath)(nil)

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) Selector() UpdateProvisioningPolicyRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) AsProvisioningPolicySubPath() (provisioning_policy.ProvisioningPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_policy.ProvisioningPolicy_FieldPath)
	return res, ok
}
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) AsCasSubPath() (UpdateProvisioningPolicyRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateProvisioningPolicyRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProvisioningPolicyRequest
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) Get(source *UpdateProvisioningPolicyRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		values = append(values, fps.subPath.GetRaw(source.GetProvisioningPolicy())...)
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProvisioningPolicyRequest))
}

// GetSingle returns value of selected field from source UpdateProvisioningPolicyRequest
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) GetSingle(source *UpdateProvisioningPolicyRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		if source.GetProvisioningPolicy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningPolicy())
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fps.selector))
	}
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) ClearValue(item *UpdateProvisioningPolicyRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			fps.subPath.ClearValueRaw(item.ProvisioningPolicy)
		case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProvisioningPolicyRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithIValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathValue {
	return &UpdateProvisioningPolicyRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayOfValues {
	return &UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayItemValue {
	return &UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProvisioningPolicyRequest_FieldPathValue allows storing values for UpdateProvisioningPolicyRequest fields according to their type
type UpdateProvisioningPolicyRequest_FieldPathValue interface {
	UpdateProvisioningPolicyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProvisioningPolicyRequest)
	CompareWith(*UpdateProvisioningPolicyRequest) (cmp int, comparable bool)
}

func ParseUpdateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) (UpdateProvisioningPolicyRequest_FieldPathValue, error) {
	fp, err := ParseUpdateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProvisioningPolicyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProvisioningPolicyRequest_FieldPathValue), nil
}

func MustParseUpdateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) UpdateProvisioningPolicyRequest_FieldPathValue {
	fpv, err := ParseUpdateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProvisioningPolicyRequest_FieldTerminalPathValue struct {
	UpdateProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningPolicyRequest_FieldPathValue = (*UpdateProvisioningPolicyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateProvisioningPolicyRequest' as interface{}
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) AsProvisioningPolicyValue() (*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) AsCasValue() (*UpdateProvisioningPolicyRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateProvisioningPolicyRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateProvisioningPolicyRequest
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) SetTo(target **UpdateProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(UpdateProvisioningPolicyRequest)
	}
	switch fpv.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		(*target).ProvisioningPolicy = fpv.value.(*provisioning_policy.ProvisioningPolicy)
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateProvisioningPolicyRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningPolicyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProvisioningPolicyRequest_FieldTerminalPathValue' with the value under path in 'UpdateProvisioningPolicyRequest'.
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) CompareWith(source *UpdateProvisioningPolicyRequest) (int, bool) {
	switch fpv.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return 0, false
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProvisioningPolicyRequest))
}

type UpdateProvisioningPolicyRequest_FieldSubPathValue struct {
	UpdateProvisioningPolicyRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProvisioningPolicyRequest_FieldPathValue = (*UpdateProvisioningPolicyRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) AsProvisioningPolicyPathValue() (provisioning_policy.ProvisioningPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) AsCasPathValue() (UpdateProvisioningPolicyRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateProvisioningPolicyRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) SetTo(target **UpdateProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(UpdateProvisioningPolicyRequest)
	}
	switch fpvs.Selector() {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).SetTo(&(*target).ProvisioningPolicy)
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateProvisioningPolicyRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningPolicyRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) CompareWith(source *UpdateProvisioningPolicyRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).CompareWith(source.GetProvisioningPolicy())
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateProvisioningPolicyRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProvisioningPolicyRequest))
}

// UpdateProvisioningPolicyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateProvisioningPolicyRequest according to their type
// Present only for array (repeated) types.
type UpdateProvisioningPolicyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProvisioningPolicyRequest_FieldPath
	ContainsValue(*UpdateProvisioningPolicyRequest) bool
}

// ParseUpdateProvisioningPolicyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProvisioningPolicyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProvisioningPolicyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProvisioningPolicyRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProvisioningPolicyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue struct {
	UpdateProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningPolicyRequest_FieldPathArrayItemValue = (*UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProvisioningPolicyRequest as interface{}
func (fpaiv *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProvisioningPolicyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProvisioningPolicyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProvisioningPolicyRequest'
func (fpaiv *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProvisioningPolicyRequest) bool {
	slice := fpaiv.UpdateProvisioningPolicyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue struct {
	UpdateProvisioningPolicyRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue) AsProvisioningPolicyPathItemValue() (provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProvisioningPolicyRequest'
func (fpaivs *UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProvisioningPolicyRequest) bool {
	switch fpaivs.Selector() {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue).ContainsValue(source.GetProvisioningPolicy())
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fpaivs.Selector()))
	}
}

// UpdateProvisioningPolicyRequest_FieldPathArrayOfValues allows storing slice of values for UpdateProvisioningPolicyRequest fields according to their type
type UpdateProvisioningPolicyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProvisioningPolicyRequest_FieldPath
}

func ParseUpdateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProvisioningPolicyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProvisioningPolicyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProvisioningPolicyRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues struct {
	UpdateProvisioningPolicyRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateProvisioningPolicyRequest_FieldPathArrayOfValues = (*UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy) {
			values = append(values, v)
		}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateProvisioningPolicyRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsProvisioningPolicyArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpaov *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateProvisioningPolicyRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateProvisioningPolicyRequest_CAS)
	return res, ok
}

type UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues struct {
	UpdateProvisioningPolicyRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProvisioningPolicyRequest_FieldPathArrayOfValues = (*UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues) AsProvisioningPolicyPathArrayOfValues() (provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProvisioningPolicyRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProvisioningPolicyRequestCAS_FieldPathSelector
	Get(source *UpdateProvisioningPolicyRequest_CAS) []interface{}
	GetSingle(source *UpdateProvisioningPolicyRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateProvisioningPolicyRequest_CAS)

	// Those methods build corresponding UpdateProvisioningPolicyRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue
}

type UpdateProvisioningPolicyRequestCAS_FieldPathSelector int32

const (
	UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState UpdateProvisioningPolicyRequestCAS_FieldPathSelector = 0
	UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask        UpdateProvisioningPolicyRequestCAS_FieldPathSelector = 1
)

func (s UpdateProvisioningPolicyRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", s))
	}
}

func BuildUpdateProvisioningPolicyRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateProvisioningPolicyRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProvisioningPolicyRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPath{selector: UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPath{selector: UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := provisioning_policy.BuildProvisioningPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProvisioningPolicyRequestCAS_FieldSubPath{selector: UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProvisioningPolicyRequest_CAS", fp)
}

func ParseUpdateProvisioningPolicyRequestCAS_FieldPath(rawField string) (UpdateProvisioningPolicyRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProvisioningPolicyRequestCAS_FieldPath(fp)
}

func MustParseUpdateProvisioningPolicyRequestCAS_FieldPath(rawField string) UpdateProvisioningPolicyRequestCAS_FieldPath {
	fp, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProvisioningPolicyRequestCAS_FieldTerminalPath struct {
	selector UpdateProvisioningPolicyRequestCAS_FieldPathSelector
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPath = (*UpdateProvisioningPolicyRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) Selector() UpdateProvisioningPolicyRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProvisioningPolicyRequest_CAS
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) Get(source *UpdateProvisioningPolicyRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateProvisioningPolicyRequest_CAS
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) GetSingle(source *UpdateProvisioningPolicyRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return (*provisioning_policy.ProvisioningPolicy)(nil)
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) ClearValue(item *UpdateProvisioningPolicyRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProvisioningPolicyRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue{UpdateProvisioningPolicyRequestCAS_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy)}
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue{UpdateProvisioningPolicyRequestCAS_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequestCAS_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy)}
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequestCAS_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProvisioningPolicyRequestCAS_FieldSubPath struct {
	selector UpdateProvisioningPolicyRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPath = (*UpdateProvisioningPolicyRequestCAS_FieldSubPath)(nil)

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) Selector() UpdateProvisioningPolicyRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) AsConditionalStateSubPath() (provisioning_policy.ProvisioningPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_policy.ProvisioningPolicy_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProvisioningPolicyRequest_CAS
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) Get(source *UpdateProvisioningPolicyRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateProvisioningPolicyRequest_CAS
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) GetSingle(source *UpdateProvisioningPolicyRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) ClearValue(item *UpdateProvisioningPolicyRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProvisioningPolicyRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProvisioningPolicyRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathValue {
	return &UpdateProvisioningPolicyRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues {
	return &UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue {
	return &UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProvisioningPolicyRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateProvisioningPolicyRequestCAS_FieldPathValue interface {
	UpdateProvisioningPolicyRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProvisioningPolicyRequest_CAS)
	CompareWith(*UpdateProvisioningPolicyRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateProvisioningPolicyRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateProvisioningPolicyRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProvisioningPolicyRequestCAS_FieldPathValue), nil
}

func MustParseUpdateProvisioningPolicyRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateProvisioningPolicyRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue struct {
	UpdateProvisioningPolicyRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPathValue = (*UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateProvisioningPolicyRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProvisioningPolicyRequest_CAS)
	}
	switch fpv.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*provisioning_policy.ProvisioningPolicy)
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningPolicyRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateProvisioningPolicyRequest_CAS'.
func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateProvisioningPolicyRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProvisioningPolicyRequest_CAS))
}

type UpdateProvisioningPolicyRequestCAS_FieldSubPathValue struct {
	UpdateProvisioningPolicyRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPathValue = (*UpdateProvisioningPolicyRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (provisioning_policy.ProvisioningPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) SetTo(target **UpdateProvisioningPolicyRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProvisioningPolicyRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningPolicyRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) CompareWith(source *UpdateProvisioningPolicyRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProvisioningPolicyRequestCAS_FieldPath
	ContainsValue(*UpdateProvisioningPolicyRequest_CAS) bool
}

// ParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateProvisioningPolicyRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue = (*UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProvisioningPolicyRequest_CAS as interface{}
func (fpaiv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProvisioningPolicyRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProvisioningPolicyRequest_CAS) bool {
	slice := fpaiv.UpdateProvisioningPolicyRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateProvisioningPolicyRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProvisioningPolicyRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProvisioningPolicyRequestCAS_FieldPath
}

func ParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateProvisioningPolicyRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues = (*UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy) {
			values = append(values, v)
		}
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpaov *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}

type UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateProvisioningPolicyRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues = (*UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteProvisioningPolicyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteProvisioningPolicyRequest_FieldPathSelector
	Get(source *DeleteProvisioningPolicyRequest) []interface{}
	GetSingle(source *DeleteProvisioningPolicyRequest) (interface{}, bool)
	ClearValue(item *DeleteProvisioningPolicyRequest)

	// Those methods build corresponding DeleteProvisioningPolicyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteProvisioningPolicyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteProvisioningPolicyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteProvisioningPolicyRequest_FieldPathArrayItemValue
}

type DeleteProvisioningPolicyRequest_FieldPathSelector int32

const (
	DeleteProvisioningPolicyRequest_FieldPathSelectorName DeleteProvisioningPolicyRequest_FieldPathSelector = 0
)

func (s DeleteProvisioningPolicyRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", s))
	}
}

func BuildDeleteProvisioningPolicyRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteProvisioningPolicyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteProvisioningPolicyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteProvisioningPolicyRequest_FieldTerminalPath{selector: DeleteProvisioningPolicyRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteProvisioningPolicyRequest", fp)
}

func ParseDeleteProvisioningPolicyRequest_FieldPath(rawField string) (DeleteProvisioningPolicyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteProvisioningPolicyRequest_FieldPath(fp)
}

func MustParseDeleteProvisioningPolicyRequest_FieldPath(rawField string) DeleteProvisioningPolicyRequest_FieldPath {
	fp, err := ParseDeleteProvisioningPolicyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteProvisioningPolicyRequest_FieldTerminalPath struct {
	selector DeleteProvisioningPolicyRequest_FieldPathSelector
}

var _ DeleteProvisioningPolicyRequest_FieldPath = (*DeleteProvisioningPolicyRequest_FieldTerminalPath)(nil)

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) Selector() DeleteProvisioningPolicyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteProvisioningPolicyRequest
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) Get(source *DeleteProvisioningPolicyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteProvisioningPolicyRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteProvisioningPolicyRequest
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) GetSingle(source *DeleteProvisioningPolicyRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		return (*provisioning_policy.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) ClearValue(item *DeleteProvisioningPolicyRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteProvisioningPolicyRequest_FieldPathSelectorName
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteProvisioningPolicyRequest_FieldPathValue {
	switch fp.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		return &DeleteProvisioningPolicyRequest_FieldTerminalPathValue{DeleteProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov := &DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{DeleteProvisioningPolicyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		return &DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{DeleteProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteProvisioningPolicyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteProvisioningPolicyRequest_FieldPathValue allows storing values for DeleteProvisioningPolicyRequest fields according to their type
type DeleteProvisioningPolicyRequest_FieldPathValue interface {
	DeleteProvisioningPolicyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteProvisioningPolicyRequest)
	CompareWith(*DeleteProvisioningPolicyRequest) (cmp int, comparable bool)
}

func ParseDeleteProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) (DeleteProvisioningPolicyRequest_FieldPathValue, error) {
	fp, err := ParseDeleteProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProvisioningPolicyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteProvisioningPolicyRequest_FieldPathValue), nil
}

func MustParseDeleteProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) DeleteProvisioningPolicyRequest_FieldPathValue {
	fpv, err := ParseDeleteProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteProvisioningPolicyRequest_FieldTerminalPathValue struct {
	DeleteProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProvisioningPolicyRequest_FieldPathValue = (*DeleteProvisioningPolicyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteProvisioningPolicyRequest' as interface{}
func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) AsNameValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.(*provisioning_policy.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteProvisioningPolicyRequest
func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) SetTo(target **DeleteProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(DeleteProvisioningPolicyRequest)
	}
	switch fpv.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*provisioning_policy.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteProvisioningPolicyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteProvisioningPolicyRequest_FieldTerminalPathValue' with the value under path in 'DeleteProvisioningPolicyRequest'.
func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) CompareWith(source *DeleteProvisioningPolicyRequest) (int, bool) {
	switch fpv.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*provisioning_policy.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteProvisioningPolicyRequest))
}

// DeleteProvisioningPolicyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteProvisioningPolicyRequest according to their type
// Present only for array (repeated) types.
type DeleteProvisioningPolicyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteProvisioningPolicyRequest_FieldPath
	ContainsValue(*DeleteProvisioningPolicyRequest) bool
}

// ParseDeleteProvisioningPolicyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteProvisioningPolicyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProvisioningPolicyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteProvisioningPolicyRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteProvisioningPolicyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue struct {
	DeleteProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProvisioningPolicyRequest_FieldPathArrayItemValue = (*DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteProvisioningPolicyRequest as interface{}
func (fpaiv *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteProvisioningPolicyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteProvisioningPolicyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteProvisioningPolicyRequest'
func (fpaiv *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteProvisioningPolicyRequest) bool {
	slice := fpaiv.DeleteProvisioningPolicyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteProvisioningPolicyRequest_FieldPathArrayOfValues allows storing slice of values for DeleteProvisioningPolicyRequest fields according to their type
type DeleteProvisioningPolicyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteProvisioningPolicyRequest_FieldPath
}

func ParseDeleteProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteProvisioningPolicyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProvisioningPolicyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteProvisioningPolicyRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues struct {
	DeleteProvisioningPolicyRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteProvisioningPolicyRequest_FieldPathArrayOfValues = (*DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Reference)
	return res, ok
}
