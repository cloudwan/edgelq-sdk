// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/provisioning_approval_request_custom.proto
// DO NOT EDIT!!!

package provisioning_approval_request_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	provisioning_approval_request "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/provisioning_approval_request"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &provisioning_approval_request.ProvisioningApprovalRequest{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProvisionDeviceForApprovedRequestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProvisionDeviceForApprovedRequestRequest_FieldPathSelector
	Get(source *ProvisionDeviceForApprovedRequestRequest) []interface{}
	GetSingle(source *ProvisionDeviceForApprovedRequestRequest) (interface{}, bool)
	ClearValue(item *ProvisionDeviceForApprovedRequestRequest)

	// Those methods build corresponding ProvisionDeviceForApprovedRequestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProvisionDeviceForApprovedRequestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue
}

type ProvisionDeviceForApprovedRequestRequest_FieldPathSelector int32

const (
	ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName         ProvisionDeviceForApprovedRequestRequest_FieldPathSelector = 0
	ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus ProvisionDeviceForApprovedRequestRequest_FieldPathSelector = 1
)

func (s ProvisionDeviceForApprovedRequestRequest_FieldPathSelector) String() string {
	switch s {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName:
		return "name"
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		return "device_status"
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", s))
	}
}

func BuildProvisionDeviceForApprovedRequestRequest_FieldPath(fp gotenobject.RawFieldPath) (ProvisionDeviceForApprovedRequestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProvisionDeviceForApprovedRequestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath{selector: ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName}, nil
		case "device_status", "deviceStatus", "device-status":
			return &ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath{selector: ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus}, nil
		}
	} else {
		switch fp[0] {
		case "device_status", "deviceStatus", "device-status":
			if subpath, err := device.BuildDeviceStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisionDeviceForApprovedRequestRequest_FieldSubPath{selector: ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProvisionDeviceForApprovedRequestRequest", fp)
}

func ParseProvisionDeviceForApprovedRequestRequest_FieldPath(rawField string) (ProvisionDeviceForApprovedRequestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProvisionDeviceForApprovedRequestRequest_FieldPath(fp)
}

func MustParseProvisionDeviceForApprovedRequestRequest_FieldPath(rawField string) ProvisionDeviceForApprovedRequestRequest_FieldPath {
	fp, err := ParseProvisionDeviceForApprovedRequestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath struct {
	selector ProvisionDeviceForApprovedRequestRequest_FieldPathSelector
}

var _ ProvisionDeviceForApprovedRequestRequest_FieldPath = (*ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath)(nil)

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) Selector() ProvisionDeviceForApprovedRequestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProvisionDeviceForApprovedRequestRequest
func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) Get(source *ProvisionDeviceForApprovedRequestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
			if source.DeviceStatus != nil {
				values = append(values, source.DeviceStatus)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProvisionDeviceForApprovedRequestRequest))
}

// GetSingle returns value pointed by specific field of from source ProvisionDeviceForApprovedRequestRequest
func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) GetSingle(source *ProvisionDeviceForApprovedRequestRequest) (interface{}, bool) {
	switch fp.selector {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		res := source.GetDeviceStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fp.selector))
	}
}

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProvisionDeviceForApprovedRequestRequest))
}

// GetDefault returns a default value of the field type
func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName:
		return (*provisioning_approval_request.Reference)(nil)
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		return (*device.Device_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fp.selector))
	}
}

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) ClearValue(item *ProvisionDeviceForApprovedRequestRequest) {
	if item != nil {
		switch fp.selector {
		case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName:
			item.Name = nil
		case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
			item.DeviceStatus = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fp.selector))
		}
	}
}

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProvisionDeviceForApprovedRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName
}

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) WithIValue(value interface{}) ProvisionDeviceForApprovedRequestRequest_FieldPathValue {
	switch fp.selector {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName:
		return &ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue{ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.Reference)}
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		return &ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue{ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath: *fp, value: value.(*device.Device_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fp.selector))
	}
}

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues {
	fpaov := &ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayOfValues{ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName:
		return &ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayOfValues{ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.Reference)}
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		return &ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayOfValues{ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath: *fp, values: values.([]*device.Device_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fp.selector))
	}
}

func (fp *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProvisionDeviceForApprovedRequestRequest_FieldSubPath struct {
	selector ProvisionDeviceForApprovedRequestRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProvisionDeviceForApprovedRequestRequest_FieldPath = (*ProvisionDeviceForApprovedRequestRequest_FieldSubPath)(nil)

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) Selector() ProvisionDeviceForApprovedRequestRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) AsDeviceStatusSubPath() (device.DeviceStatus_FieldPath, bool) {
	res, ok := fps.subPath.(device.DeviceStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProvisionDeviceForApprovedRequestRequest
func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) Get(source *ProvisionDeviceForApprovedRequestRequest) (values []interface{}) {
	if asStatusFieldPath, ok := fps.AsDeviceStatusSubPath(); ok {
		values = append(values, asStatusFieldPath.Get(source.GetDeviceStatus())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fps.selector))
	}
	return
}

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProvisionDeviceForApprovedRequestRequest))
}

// GetSingle returns value of selected field from source ProvisionDeviceForApprovedRequestRequest
func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) GetSingle(source *ProvisionDeviceForApprovedRequestRequest) (interface{}, bool) {
	switch fps.selector {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		if source.GetDeviceStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeviceStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fps.selector))
	}
}

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProvisionDeviceForApprovedRequestRequest))
}

// GetDefault returns a default value of the field type
func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) ClearValue(item *ProvisionDeviceForApprovedRequestRequest) {
	if item != nil {
		switch fps.selector {
		case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
			fps.subPath.ClearValueRaw(item.DeviceStatus)
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fps.selector))
		}
	}
}

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProvisionDeviceForApprovedRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) WithIValue(value interface{}) ProvisionDeviceForApprovedRequestRequest_FieldPathValue {
	return &ProvisionDeviceForApprovedRequestRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues {
	return &ProvisionDeviceForApprovedRequestRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue {
	return &ProvisionDeviceForApprovedRequestRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProvisionDeviceForApprovedRequestRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProvisionDeviceForApprovedRequestRequest_FieldPathValue allows storing values for ProvisionDeviceForApprovedRequestRequest fields according to their type
type ProvisionDeviceForApprovedRequestRequest_FieldPathValue interface {
	ProvisionDeviceForApprovedRequestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProvisionDeviceForApprovedRequestRequest)
	CompareWith(*ProvisionDeviceForApprovedRequestRequest) (cmp int, comparable bool)
}

func ParseProvisionDeviceForApprovedRequestRequest_FieldPathValue(pathStr, valueStr string) (ProvisionDeviceForApprovedRequestRequest_FieldPathValue, error) {
	fp, err := ParseProvisionDeviceForApprovedRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionDeviceForApprovedRequestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProvisionDeviceForApprovedRequestRequest_FieldPathValue), nil
}

func MustParseProvisionDeviceForApprovedRequestRequest_FieldPathValue(pathStr, valueStr string) ProvisionDeviceForApprovedRequestRequest_FieldPathValue {
	fpv, err := ParseProvisionDeviceForApprovedRequestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue struct {
	ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath
	value interface{}
}

var _ ProvisionDeviceForApprovedRequestRequest_FieldPathValue = (*ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProvisionDeviceForApprovedRequestRequest' as interface{}
func (fpv *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue) AsNameValue() (*provisioning_approval_request.Reference, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.Reference)
	return res, ok
}
func (fpv *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue) AsDeviceStatusValue() (*device.Device_Status, bool) {
	res, ok := fpv.value.(*device.Device_Status)
	return res, ok
}

// SetTo stores value for selected field for object ProvisionDeviceForApprovedRequestRequest
func (fpv *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue) SetTo(target **ProvisionDeviceForApprovedRequestRequest) {
	if *target == nil {
		*target = new(ProvisionDeviceForApprovedRequestRequest)
	}
	switch fpv.selector {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*provisioning_approval_request.Reference)
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		(*target).DeviceStatus = fpv.value.(*device.Device_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fpv.selector))
	}
}

func (fpv *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisionDeviceForApprovedRequestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue' with the value under path in 'ProvisionDeviceForApprovedRequestRequest'.
func (fpv *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue) CompareWith(source *ProvisionDeviceForApprovedRequestRequest) (int, bool) {
	switch fpv.selector {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*provisioning_approval_request.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fpv.selector))
	}
}

func (fpv *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProvisionDeviceForApprovedRequestRequest))
}

type ProvisionDeviceForApprovedRequestRequest_FieldSubPathValue struct {
	ProvisionDeviceForApprovedRequestRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProvisionDeviceForApprovedRequestRequest_FieldPathValue = (*ProvisionDeviceForApprovedRequestRequest_FieldSubPathValue)(nil)

func (fpvs *ProvisionDeviceForApprovedRequestRequest_FieldSubPathValue) AsDeviceStatusPathValue() (device.DeviceStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device.DeviceStatus_FieldPathValue)
	return res, ok
}

func (fpvs *ProvisionDeviceForApprovedRequestRequest_FieldSubPathValue) SetTo(target **ProvisionDeviceForApprovedRequestRequest) {
	if *target == nil {
		*target = new(ProvisionDeviceForApprovedRequestRequest)
	}
	switch fpvs.Selector() {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		fpvs.subPathValue.(device.DeviceStatus_FieldPathValue).SetTo(&(*target).DeviceStatus)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisionDeviceForApprovedRequestRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisionDeviceForApprovedRequestRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProvisionDeviceForApprovedRequestRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProvisionDeviceForApprovedRequestRequest_FieldSubPathValue) CompareWith(source *ProvisionDeviceForApprovedRequestRequest) (int, bool) {
	switch fpvs.Selector() {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		return fpvs.subPathValue.(device.DeviceStatus_FieldPathValue).CompareWith(source.GetDeviceStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisionDeviceForApprovedRequestRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProvisionDeviceForApprovedRequestRequest))
}

// ProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ProvisionDeviceForApprovedRequestRequest according to their type
// Present only for array (repeated) types.
type ProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProvisionDeviceForApprovedRequestRequest_FieldPath
	ContainsValue(*ProvisionDeviceForApprovedRequestRequest) bool
}

// ParseProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseProvisionDeviceForApprovedRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionDeviceForApprovedRequestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue), nil
}

func MustParseProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) ProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayItemValue struct {
	ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath
	value interface{}
}

var _ ProvisionDeviceForApprovedRequestRequest_FieldPathArrayItemValue = (*ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProvisionDeviceForApprovedRequestRequest as interface{}
func (fpaiv *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ProvisionDeviceForApprovedRequestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProvisionDeviceForApprovedRequestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProvisionDeviceForApprovedRequestRequest'
func (fpaiv *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ProvisionDeviceForApprovedRequestRequest) bool {
	slice := fpaiv.ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProvisionDeviceForApprovedRequestRequest_FieldSubPathArrayItemValue struct {
	ProvisionDeviceForApprovedRequestRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProvisionDeviceForApprovedRequestRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProvisionDeviceForApprovedRequestRequest_FieldSubPathArrayItemValue) AsDeviceStatusPathItemValue() (device.DeviceStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device.DeviceStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProvisionDeviceForApprovedRequestRequest'
func (fpaivs *ProvisionDeviceForApprovedRequestRequest_FieldSubPathArrayItemValue) ContainsValue(source *ProvisionDeviceForApprovedRequestRequest) bool {
	switch fpaivs.Selector() {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		return fpaivs.subPathItemValue.(device.DeviceStatus_FieldPathArrayItemValue).ContainsValue(source.GetDeviceStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestRequest: %d", fpaivs.Selector()))
	}
}

// ProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues allows storing slice of values for ProvisionDeviceForApprovedRequestRequest fields according to their type
type ProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProvisionDeviceForApprovedRequestRequest_FieldPath
}

func ParseProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseProvisionDeviceForApprovedRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionDeviceForApprovedRequestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues), nil
}

func MustParseProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayOfValues struct {
	ProvisionDeviceForApprovedRequestRequest_FieldTerminalPath
	values interface{}
}

var _ ProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues = (*ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*provisioning_approval_request.Reference) {
			values = append(values, v)
		}
	case ProvisionDeviceForApprovedRequestRequest_FieldPathSelectorDeviceStatus:
		for _, v := range fpaov.values.([]*device.Device_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*provisioning_approval_request.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.Reference)
	return res, ok
}
func (fpaov *ProvisionDeviceForApprovedRequestRequest_FieldTerminalPathArrayOfValues) AsDeviceStatusArrayOfValues() ([]*device.Device_Status, bool) {
	res, ok := fpaov.values.([]*device.Device_Status)
	return res, ok
}

type ProvisionDeviceForApprovedRequestRequest_FieldSubPathArrayOfValues struct {
	ProvisionDeviceForApprovedRequestRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProvisionDeviceForApprovedRequestRequest_FieldPathArrayOfValues = (*ProvisionDeviceForApprovedRequestRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProvisionDeviceForApprovedRequestRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProvisionDeviceForApprovedRequestRequest_FieldSubPathArrayOfValues) AsDeviceStatusPathArrayOfValues() (device.DeviceStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device.DeviceStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProvisionDeviceForApprovedRequestResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProvisionDeviceForApprovedRequestResponse_FieldPathSelector
	Get(source *ProvisionDeviceForApprovedRequestResponse) []interface{}
	GetSingle(source *ProvisionDeviceForApprovedRequestResponse) (interface{}, bool)
	ClearValue(item *ProvisionDeviceForApprovedRequestResponse)

	// Those methods build corresponding ProvisionDeviceForApprovedRequestResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProvisionDeviceForApprovedRequestResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue
}

type ProvisionDeviceForApprovedRequestResponse_FieldPathSelector int32

const (
	ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice ProvisionDeviceForApprovedRequestResponse_FieldPathSelector = 0
)

func (s ProvisionDeviceForApprovedRequestResponse_FieldPathSelector) String() string {
	switch s {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		return "device"
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", s))
	}
}

func BuildProvisionDeviceForApprovedRequestResponse_FieldPath(fp gotenobject.RawFieldPath) (ProvisionDeviceForApprovedRequestResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProvisionDeviceForApprovedRequestResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device":
			return &ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath{selector: ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice}, nil
		}
	} else {
		switch fp[0] {
		case "device":
			if subpath, err := device.BuildDevice_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisionDeviceForApprovedRequestResponse_FieldSubPath{selector: ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProvisionDeviceForApprovedRequestResponse", fp)
}

func ParseProvisionDeviceForApprovedRequestResponse_FieldPath(rawField string) (ProvisionDeviceForApprovedRequestResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProvisionDeviceForApprovedRequestResponse_FieldPath(fp)
}

func MustParseProvisionDeviceForApprovedRequestResponse_FieldPath(rawField string) ProvisionDeviceForApprovedRequestResponse_FieldPath {
	fp, err := ParseProvisionDeviceForApprovedRequestResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath struct {
	selector ProvisionDeviceForApprovedRequestResponse_FieldPathSelector
}

var _ ProvisionDeviceForApprovedRequestResponse_FieldPath = (*ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath)(nil)

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) Selector() ProvisionDeviceForApprovedRequestResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProvisionDeviceForApprovedRequestResponse
func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) Get(source *ProvisionDeviceForApprovedRequestResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
			if source.Device != nil {
				values = append(values, source.Device)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProvisionDeviceForApprovedRequestResponse))
}

// GetSingle returns value pointed by specific field of from source ProvisionDeviceForApprovedRequestResponse
func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) GetSingle(source *ProvisionDeviceForApprovedRequestResponse) (interface{}, bool) {
	switch fp.selector {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		res := source.GetDevice()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fp.selector))
	}
}

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProvisionDeviceForApprovedRequestResponse))
}

// GetDefault returns a default value of the field type
func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		return (*device.Device)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fp.selector))
	}
}

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) ClearValue(item *ProvisionDeviceForApprovedRequestResponse) {
	if item != nil {
		switch fp.selector {
		case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
			item.Device = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fp.selector))
		}
	}
}

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProvisionDeviceForApprovedRequestResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) WithIValue(value interface{}) ProvisionDeviceForApprovedRequestResponse_FieldPathValue {
	switch fp.selector {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		return &ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathValue{ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath: *fp, value: value.(*device.Device)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fp.selector))
	}
}

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues {
	fpaov := &ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayOfValues{ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		return &ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayOfValues{ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath: *fp, values: values.([]*device.Device)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fp.selector))
	}
}

func (fp *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProvisionDeviceForApprovedRequestResponse_FieldSubPath struct {
	selector ProvisionDeviceForApprovedRequestResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProvisionDeviceForApprovedRequestResponse_FieldPath = (*ProvisionDeviceForApprovedRequestResponse_FieldSubPath)(nil)

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) Selector() ProvisionDeviceForApprovedRequestResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) AsDeviceSubPath() (device.Device_FieldPath, bool) {
	res, ok := fps.subPath.(device.Device_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProvisionDeviceForApprovedRequestResponse
func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) Get(source *ProvisionDeviceForApprovedRequestResponse) (values []interface{}) {
	if asDeviceFieldPath, ok := fps.AsDeviceSubPath(); ok {
		values = append(values, asDeviceFieldPath.Get(source.GetDevice())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fps.selector))
	}
	return
}

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProvisionDeviceForApprovedRequestResponse))
}

// GetSingle returns value of selected field from source ProvisionDeviceForApprovedRequestResponse
func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) GetSingle(source *ProvisionDeviceForApprovedRequestResponse) (interface{}, bool) {
	switch fps.selector {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		if source.GetDevice() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDevice())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fps.selector))
	}
}

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProvisionDeviceForApprovedRequestResponse))
}

// GetDefault returns a default value of the field type
func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) ClearValue(item *ProvisionDeviceForApprovedRequestResponse) {
	if item != nil {
		switch fps.selector {
		case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
			fps.subPath.ClearValueRaw(item.Device)
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fps.selector))
		}
	}
}

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProvisionDeviceForApprovedRequestResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) WithIValue(value interface{}) ProvisionDeviceForApprovedRequestResponse_FieldPathValue {
	return &ProvisionDeviceForApprovedRequestResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues {
	return &ProvisionDeviceForApprovedRequestResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue {
	return &ProvisionDeviceForApprovedRequestResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProvisionDeviceForApprovedRequestResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProvisionDeviceForApprovedRequestResponse_FieldPathValue allows storing values for ProvisionDeviceForApprovedRequestResponse fields according to their type
type ProvisionDeviceForApprovedRequestResponse_FieldPathValue interface {
	ProvisionDeviceForApprovedRequestResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProvisionDeviceForApprovedRequestResponse)
	CompareWith(*ProvisionDeviceForApprovedRequestResponse) (cmp int, comparable bool)
}

func ParseProvisionDeviceForApprovedRequestResponse_FieldPathValue(pathStr, valueStr string) (ProvisionDeviceForApprovedRequestResponse_FieldPathValue, error) {
	fp, err := ParseProvisionDeviceForApprovedRequestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionDeviceForApprovedRequestResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProvisionDeviceForApprovedRequestResponse_FieldPathValue), nil
}

func MustParseProvisionDeviceForApprovedRequestResponse_FieldPathValue(pathStr, valueStr string) ProvisionDeviceForApprovedRequestResponse_FieldPathValue {
	fpv, err := ParseProvisionDeviceForApprovedRequestResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathValue struct {
	ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath
	value interface{}
}

var _ ProvisionDeviceForApprovedRequestResponse_FieldPathValue = (*ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProvisionDeviceForApprovedRequestResponse' as interface{}
func (fpv *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathValue) AsDeviceValue() (*device.Device, bool) {
	res, ok := fpv.value.(*device.Device)
	return res, ok
}

// SetTo stores value for selected field for object ProvisionDeviceForApprovedRequestResponse
func (fpv *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathValue) SetTo(target **ProvisionDeviceForApprovedRequestResponse) {
	if *target == nil {
		*target = new(ProvisionDeviceForApprovedRequestResponse)
	}
	switch fpv.selector {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		(*target).Device = fpv.value.(*device.Device)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fpv.selector))
	}
}

func (fpv *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisionDeviceForApprovedRequestResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathValue' with the value under path in 'ProvisionDeviceForApprovedRequestResponse'.
func (fpv *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathValue) CompareWith(source *ProvisionDeviceForApprovedRequestResponse) (int, bool) {
	switch fpv.selector {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fpv.selector))
	}
}

func (fpv *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProvisionDeviceForApprovedRequestResponse))
}

type ProvisionDeviceForApprovedRequestResponse_FieldSubPathValue struct {
	ProvisionDeviceForApprovedRequestResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProvisionDeviceForApprovedRequestResponse_FieldPathValue = (*ProvisionDeviceForApprovedRequestResponse_FieldSubPathValue)(nil)

func (fpvs *ProvisionDeviceForApprovedRequestResponse_FieldSubPathValue) AsDevicePathValue() (device.Device_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device.Device_FieldPathValue)
	return res, ok
}

func (fpvs *ProvisionDeviceForApprovedRequestResponse_FieldSubPathValue) SetTo(target **ProvisionDeviceForApprovedRequestResponse) {
	if *target == nil {
		*target = new(ProvisionDeviceForApprovedRequestResponse)
	}
	switch fpvs.Selector() {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		fpvs.subPathValue.(device.Device_FieldPathValue).SetTo(&(*target).Device)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisionDeviceForApprovedRequestResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisionDeviceForApprovedRequestResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProvisionDeviceForApprovedRequestResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProvisionDeviceForApprovedRequestResponse_FieldSubPathValue) CompareWith(source *ProvisionDeviceForApprovedRequestResponse) (int, bool) {
	switch fpvs.Selector() {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		return fpvs.subPathValue.(device.Device_FieldPathValue).CompareWith(source.GetDevice())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisionDeviceForApprovedRequestResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProvisionDeviceForApprovedRequestResponse))
}

// ProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ProvisionDeviceForApprovedRequestResponse according to their type
// Present only for array (repeated) types.
type ProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProvisionDeviceForApprovedRequestResponse_FieldPath
	ContainsValue(*ProvisionDeviceForApprovedRequestResponse) bool
}

// ParseProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseProvisionDeviceForApprovedRequestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionDeviceForApprovedRequestResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue), nil
}

func MustParseProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue(pathStr, valueStr string) ProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayItemValue struct {
	ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath
	value interface{}
}

var _ ProvisionDeviceForApprovedRequestResponse_FieldPathArrayItemValue = (*ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProvisionDeviceForApprovedRequestResponse as interface{}
func (fpaiv *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ProvisionDeviceForApprovedRequestResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProvisionDeviceForApprovedRequestResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProvisionDeviceForApprovedRequestResponse'
func (fpaiv *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ProvisionDeviceForApprovedRequestResponse) bool {
	slice := fpaiv.ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProvisionDeviceForApprovedRequestResponse_FieldSubPathArrayItemValue struct {
	ProvisionDeviceForApprovedRequestResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProvisionDeviceForApprovedRequestResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProvisionDeviceForApprovedRequestResponse_FieldSubPathArrayItemValue) AsDevicePathItemValue() (device.Device_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device.Device_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProvisionDeviceForApprovedRequestResponse'
func (fpaivs *ProvisionDeviceForApprovedRequestResponse_FieldSubPathArrayItemValue) ContainsValue(source *ProvisionDeviceForApprovedRequestResponse) bool {
	switch fpaivs.Selector() {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		return fpaivs.subPathItemValue.(device.Device_FieldPathArrayItemValue).ContainsValue(source.GetDevice())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionDeviceForApprovedRequestResponse: %d", fpaivs.Selector()))
	}
}

// ProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues allows storing slice of values for ProvisionDeviceForApprovedRequestResponse fields according to their type
type ProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProvisionDeviceForApprovedRequestResponse_FieldPath
}

func ParseProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseProvisionDeviceForApprovedRequestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionDeviceForApprovedRequestResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues), nil
}

func MustParseProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues {
	fpaov, err := ParseProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayOfValues struct {
	ProvisionDeviceForApprovedRequestResponse_FieldTerminalPath
	values interface{}
}

var _ ProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues = (*ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProvisionDeviceForApprovedRequestResponse_FieldPathSelectorDevice:
		for _, v := range fpaov.values.([]*device.Device) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProvisionDeviceForApprovedRequestResponse_FieldTerminalPathArrayOfValues) AsDeviceArrayOfValues() ([]*device.Device, bool) {
	res, ok := fpaov.values.([]*device.Device)
	return res, ok
}

type ProvisionDeviceForApprovedRequestResponse_FieldSubPathArrayOfValues struct {
	ProvisionDeviceForApprovedRequestResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProvisionDeviceForApprovedRequestResponse_FieldPathArrayOfValues = (*ProvisionDeviceForApprovedRequestResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProvisionDeviceForApprovedRequestResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProvisionDeviceForApprovedRequestResponse_FieldSubPathArrayOfValues) AsDevicePathArrayOfValues() (device.Device_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device.Device_FieldPathArrayOfValues)
	return res, ok
}
