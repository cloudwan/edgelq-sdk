// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/provisioning_approval_request_service.proto
// DO NOT EDIT!!!

package provisioning_approval_request_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	provisioning_approval_request "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/provisioning_approval_request"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/provisioning_policy"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &provisioning_approval_request.ProvisioningApprovalRequest{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetProvisioningApprovalRequestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetProvisioningApprovalRequestRequest_FieldPathSelector
	Get(source *GetProvisioningApprovalRequestRequest) []interface{}
	GetSingle(source *GetProvisioningApprovalRequestRequest) (interface{}, bool)
	ClearValue(item *GetProvisioningApprovalRequestRequest)

	// Those methods build corresponding GetProvisioningApprovalRequestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetProvisioningApprovalRequestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetProvisioningApprovalRequestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetProvisioningApprovalRequestRequest_FieldPathArrayItemValue
}

type GetProvisioningApprovalRequestRequest_FieldPathSelector int32

const (
	GetProvisioningApprovalRequestRequest_FieldPathSelectorName      GetProvisioningApprovalRequestRequest_FieldPathSelector = 0
	GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask GetProvisioningApprovalRequestRequest_FieldPathSelector = 1
	GetProvisioningApprovalRequestRequest_FieldPathSelectorView      GetProvisioningApprovalRequestRequest_FieldPathSelector = 2
)

func (s GetProvisioningApprovalRequestRequest_FieldPathSelector) String() string {
	switch s {
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return "name"
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningApprovalRequestRequest: %d", s))
	}
}

func BuildGetProvisioningApprovalRequestRequest_FieldPath(fp gotenobject.RawFieldPath) (GetProvisioningApprovalRequestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetProvisioningApprovalRequestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetProvisioningApprovalRequestRequest_FieldTerminalPath{selector: GetProvisioningApprovalRequestRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetProvisioningApprovalRequestRequest_FieldTerminalPath{selector: GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetProvisioningApprovalRequestRequest_FieldTerminalPath{selector: GetProvisioningApprovalRequestRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetProvisioningApprovalRequestRequest", fp)
}

func ParseGetProvisioningApprovalRequestRequest_FieldPath(rawField string) (GetProvisioningApprovalRequestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetProvisioningApprovalRequestRequest_FieldPath(fp)
}

func MustParseGetProvisioningApprovalRequestRequest_FieldPath(rawField string) GetProvisioningApprovalRequestRequest_FieldPath {
	fp, err := ParseGetProvisioningApprovalRequestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetProvisioningApprovalRequestRequest_FieldTerminalPath struct {
	selector GetProvisioningApprovalRequestRequest_FieldPathSelector
}

var _ GetProvisioningApprovalRequestRequest_FieldPath = (*GetProvisioningApprovalRequestRequest_FieldTerminalPath)(nil)

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) Selector() GetProvisioningApprovalRequestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetProvisioningApprovalRequestRequest
func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) Get(source *GetProvisioningApprovalRequestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetProvisioningApprovalRequestRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetProvisioningApprovalRequestRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetProvisioningApprovalRequestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetProvisioningApprovalRequestRequest))
}

// GetSingle returns value pointed by specific field of from source GetProvisioningApprovalRequestRequest
func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) GetSingle(source *GetProvisioningApprovalRequestRequest) (interface{}, bool) {
	switch fp.selector {
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetProvisioningApprovalRequestRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return (*provisioning_approval_request.Reference)(nil)
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		return (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)(nil)
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) ClearValue(item *GetProvisioningApprovalRequestRequest) {
	if item != nil {
		switch fp.selector {
		case GetProvisioningApprovalRequestRequest_FieldPathSelectorName:
			item.Name = nil
		case GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetProvisioningApprovalRequestRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetProvisioningApprovalRequestRequest: %d", fp.selector))
		}
	}
}

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetProvisioningApprovalRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetProvisioningApprovalRequestRequest_FieldPathSelectorName ||
		fp.selector == GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetProvisioningApprovalRequestRequest_FieldPathSelectorView
}

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) WithIValue(value interface{}) GetProvisioningApprovalRequestRequest_FieldPathValue {
	switch fp.selector {
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return &GetProvisioningApprovalRequestRequest_FieldTerminalPathValue{GetProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.Reference)}
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		return &GetProvisioningApprovalRequestRequest_FieldTerminalPathValue{GetProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorView:
		return &GetProvisioningApprovalRequestRequest_FieldTerminalPathValue{GetProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	fpaov := &GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{GetProvisioningApprovalRequestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return &GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{GetProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.Reference)}
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		return &GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{GetProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorView:
		return &GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{GetProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningApprovalRequestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetProvisioningApprovalRequestRequest_FieldPathValue allows storing values for GetProvisioningApprovalRequestRequest fields according to their type
type GetProvisioningApprovalRequestRequest_FieldPathValue interface {
	GetProvisioningApprovalRequestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetProvisioningApprovalRequestRequest)
	CompareWith(*GetProvisioningApprovalRequestRequest) (cmp int, comparable bool)
}

func ParseGetProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr string) (GetProvisioningApprovalRequestRequest_FieldPathValue, error) {
	fp, err := ParseGetProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProvisioningApprovalRequestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetProvisioningApprovalRequestRequest_FieldPathValue), nil
}

func MustParseGetProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr string) GetProvisioningApprovalRequestRequest_FieldPathValue {
	fpv, err := ParseGetProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetProvisioningApprovalRequestRequest_FieldTerminalPathValue struct {
	GetProvisioningApprovalRequestRequest_FieldTerminalPath
	value interface{}
}

var _ GetProvisioningApprovalRequestRequest_FieldPathValue = (*GetProvisioningApprovalRequestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetProvisioningApprovalRequestRequest' as interface{}
func (fpv *GetProvisioningApprovalRequestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsNameValue() (*provisioning_approval_request.Reference, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.Reference)
	return res, ok
}
func (fpv *GetProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpv *GetProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetProvisioningApprovalRequestRequest
func (fpv *GetProvisioningApprovalRequestRequest_FieldTerminalPathValue) SetTo(target **GetProvisioningApprovalRequestRequest) {
	if *target == nil {
		*target = new(GetProvisioningApprovalRequestRequest)
	}
	switch fpv.selector {
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*provisioning_approval_request.Reference)
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningApprovalRequestRequest: %d", fpv.selector))
	}
}

func (fpv *GetProvisioningApprovalRequestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetProvisioningApprovalRequestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetProvisioningApprovalRequestRequest_FieldTerminalPathValue' with the value under path in 'GetProvisioningApprovalRequestRequest'.
func (fpv *GetProvisioningApprovalRequestRequest_FieldTerminalPathValue) CompareWith(source *GetProvisioningApprovalRequestRequest) (int, bool) {
	switch fpv.selector {
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*provisioning_approval_request.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningApprovalRequestRequest: %d", fpv.selector))
	}
}

func (fpv *GetProvisioningApprovalRequestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetProvisioningApprovalRequestRequest))
}

// GetProvisioningApprovalRequestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetProvisioningApprovalRequestRequest according to their type
// Present only for array (repeated) types.
type GetProvisioningApprovalRequestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetProvisioningApprovalRequestRequest_FieldPath
	ContainsValue(*GetProvisioningApprovalRequestRequest) bool
}

// ParseGetProvisioningApprovalRequestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetProvisioningApprovalRequestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProvisioningApprovalRequestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetProvisioningApprovalRequestRequest_FieldPathArrayItemValue), nil
}

func MustParseGetProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue struct {
	GetProvisioningApprovalRequestRequest_FieldTerminalPath
	value interface{}
}

var _ GetProvisioningApprovalRequestRequest_FieldPathArrayItemValue = (*GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetProvisioningApprovalRequestRequest as interface{}
func (fpaiv *GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetProvisioningApprovalRequestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetProvisioningApprovalRequestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetProvisioningApprovalRequestRequest'
func (fpaiv *GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetProvisioningApprovalRequestRequest) bool {
	slice := fpaiv.GetProvisioningApprovalRequestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetProvisioningApprovalRequestRequest_FieldPathArrayOfValues allows storing slice of values for GetProvisioningApprovalRequestRequest fields according to their type
type GetProvisioningApprovalRequestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetProvisioningApprovalRequestRequest_FieldPath
}

func ParseGetProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetProvisioningApprovalRequestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProvisioningApprovalRequestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetProvisioningApprovalRequestRequest_FieldPathArrayOfValues), nil
}

func MustParseGetProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues struct {
	GetProvisioningApprovalRequestRequest_FieldTerminalPath
	values interface{}
}

var _ GetProvisioningApprovalRequestRequest_FieldPathArrayOfValues = (*GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*provisioning_approval_request.Reference) {
			values = append(values, v)
		}
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask) {
			values = append(values, v)
		}
	case GetProvisioningApprovalRequestRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*provisioning_approval_request.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.Reference)
	return res, ok
}
func (fpaov *GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpaov *GetProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProvisioningApprovalRequestsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProvisioningApprovalRequestsRequest_FieldPathSelector
	Get(source *BatchGetProvisioningApprovalRequestsRequest) []interface{}
	GetSingle(source *BatchGetProvisioningApprovalRequestsRequest) (interface{}, bool)
	ClearValue(item *BatchGetProvisioningApprovalRequestsRequest)

	// Those methods build corresponding BatchGetProvisioningApprovalRequestsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProvisioningApprovalRequestsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue
}

type BatchGetProvisioningApprovalRequestsRequest_FieldPathSelector int32

const (
	BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames     BatchGetProvisioningApprovalRequestsRequest_FieldPathSelector = 0
	BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask BatchGetProvisioningApprovalRequestsRequest_FieldPathSelector = 1
	BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView      BatchGetProvisioningApprovalRequestsRequest_FieldPathSelector = 2
)

func (s BatchGetProvisioningApprovalRequestsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsRequest: %d", s))
	}
}

func BuildBatchGetProvisioningApprovalRequestsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProvisioningApprovalRequestsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProvisioningApprovalRequestsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProvisioningApprovalRequestsRequest", fp)
}

func ParseBatchGetProvisioningApprovalRequestsRequest_FieldPath(rawField string) (BatchGetProvisioningApprovalRequestsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProvisioningApprovalRequestsRequest_FieldPath(fp)
}

func MustParseBatchGetProvisioningApprovalRequestsRequest_FieldPath(rawField string) BatchGetProvisioningApprovalRequestsRequest_FieldPath {
	fp, err := ParseBatchGetProvisioningApprovalRequestsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath struct {
	selector BatchGetProvisioningApprovalRequestsRequest_FieldPathSelector
}

var _ BatchGetProvisioningApprovalRequestsRequest_FieldPath = (*BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) Selector() BatchGetProvisioningApprovalRequestsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProvisioningApprovalRequestsRequest
func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) Get(source *BatchGetProvisioningApprovalRequestsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProvisioningApprovalRequestsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetProvisioningApprovalRequestsRequest
func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) GetSingle(source *BatchGetProvisioningApprovalRequestsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProvisioningApprovalRequestsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames:
		return ([]*provisioning_approval_request.Reference)(nil)
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)(nil)
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) ClearValue(item *BatchGetProvisioningApprovalRequestsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProvisioningApprovalRequestsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView
}

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetProvisioningApprovalRequestsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames:
		return &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue{BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.([]*provisioning_approval_request.Reference)}
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue{BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue{BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames:
		return &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([][]*provisioning_approval_request.Reference)}
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames:
		return &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue{BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetProvisioningApprovalRequestsRequest_FieldPathValue allows storing values for BatchGetProvisioningApprovalRequestsRequest fields according to their type
type BatchGetProvisioningApprovalRequestsRequest_FieldPathValue interface {
	BatchGetProvisioningApprovalRequestsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProvisioningApprovalRequestsRequest)
	CompareWith(*BatchGetProvisioningApprovalRequestsRequest) (cmp int, comparable bool)
}

func ParseBatchGetProvisioningApprovalRequestsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetProvisioningApprovalRequestsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetProvisioningApprovalRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningApprovalRequestsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProvisioningApprovalRequestsRequest_FieldPathValue), nil
}

func MustParseBatchGetProvisioningApprovalRequestsRequest_FieldPathValue(pathStr, valueStr string) BatchGetProvisioningApprovalRequestsRequest_FieldPathValue {
	fpv, err := ParseBatchGetProvisioningApprovalRequestsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue struct {
	BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningApprovalRequestsRequest_FieldPathValue = (*BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProvisioningApprovalRequestsRequest' as interface{}
func (fpv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsNamesValue() ([]*provisioning_approval_request.Reference, bool) {
	res, ok := fpv.value.([]*provisioning_approval_request.Reference)
	return res, ok
}
func (fpv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProvisioningApprovalRequestsRequest
func (fpv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue) SetTo(target **BatchGetProvisioningApprovalRequestsRequest) {
	if *target == nil {
		*target = new(BatchGetProvisioningApprovalRequestsRequest)
	}
	switch fpv.selector {
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*provisioning_approval_request.Reference)
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProvisioningApprovalRequestsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetProvisioningApprovalRequestsRequest'.
func (fpv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetProvisioningApprovalRequestsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProvisioningApprovalRequestsRequest))
}

// BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProvisioningApprovalRequestsRequest according to their type
// Present only for array (repeated) types.
type BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProvisioningApprovalRequestsRequest_FieldPath
	ContainsValue(*BatchGetProvisioningApprovalRequestsRequest) bool
}

// ParseBatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProvisioningApprovalRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningApprovalRequestsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayItemValue = (*BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProvisioningApprovalRequestsRequest as interface{}
func (fpaiv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*provisioning_approval_request.Reference, bool) {
	res, ok := fpaiv.value.(*provisioning_approval_request.Reference)
	return res, ok
}

func (fpaiv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProvisioningApprovalRequestsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProvisioningApprovalRequestsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProvisioningApprovalRequestsRequest'
func (fpaiv *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProvisioningApprovalRequestsRequest) bool {
	slice := fpaiv.BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetProvisioningApprovalRequestsRequest fields according to their type
type BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProvisioningApprovalRequestsRequest_FieldPath
}

func ParseBatchGetProvisioningApprovalRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProvisioningApprovalRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningApprovalRequestsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProvisioningApprovalRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProvisioningApprovalRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetProvisioningApprovalRequestsRequest_FieldPathArrayOfValues = (*BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*provisioning_approval_request.Reference) {
			values = append(values, v)
		}
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask) {
			values = append(values, v)
		}
	case BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*provisioning_approval_request.Reference, bool) {
	res, ok := fpaov.values.([][]*provisioning_approval_request.Reference)
	return res, ok
}
func (fpaov *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpaov *BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProvisioningApprovalRequestsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProvisioningApprovalRequestsResponse_FieldPathSelector
	Get(source *BatchGetProvisioningApprovalRequestsResponse) []interface{}
	GetSingle(source *BatchGetProvisioningApprovalRequestsResponse) (interface{}, bool)
	ClearValue(item *BatchGetProvisioningApprovalRequestsResponse)

	// Those methods build corresponding BatchGetProvisioningApprovalRequestsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProvisioningApprovalRequestsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue
}

type BatchGetProvisioningApprovalRequestsResponse_FieldPathSelector int32

const (
	BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests BatchGetProvisioningApprovalRequestsResponse_FieldPathSelector = 0
	BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing                      BatchGetProvisioningApprovalRequestsResponse_FieldPathSelector = 1
)

func (s BatchGetProvisioningApprovalRequestsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return "provisioning_approval_requests"
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", s))
	}
}

func BuildBatchGetProvisioningApprovalRequestsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProvisioningApprovalRequestsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProvisioningApprovalRequestsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_approval_requests", "provisioningApprovalRequests", "provisioning-approval-requests":
			return &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests}, nil
		case "missing":
			return &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_approval_requests", "provisioningApprovalRequests", "provisioning-approval-requests":
			if subpath, err := provisioning_approval_request.BuildProvisioningApprovalRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetProvisioningApprovalRequestsResponse_FieldSubPath{selector: BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProvisioningApprovalRequestsResponse", fp)
}

func ParseBatchGetProvisioningApprovalRequestsResponse_FieldPath(rawField string) (BatchGetProvisioningApprovalRequestsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProvisioningApprovalRequestsResponse_FieldPath(fp)
}

func MustParseBatchGetProvisioningApprovalRequestsResponse_FieldPath(rawField string) BatchGetProvisioningApprovalRequestsResponse_FieldPath {
	fp, err := ParseBatchGetProvisioningApprovalRequestsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath struct {
	selector BatchGetProvisioningApprovalRequestsResponse_FieldPathSelector
}

var _ BatchGetProvisioningApprovalRequestsResponse_FieldPath = (*BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) Selector() BatchGetProvisioningApprovalRequestsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProvisioningApprovalRequestsResponse
func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) Get(source *BatchGetProvisioningApprovalRequestsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
			for _, value := range source.GetProvisioningApprovalRequests() {
				values = append(values, value)
			}
		case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProvisioningApprovalRequestsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetProvisioningApprovalRequestsResponse
func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) GetSingle(source *BatchGetProvisioningApprovalRequestsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		res := source.GetProvisioningApprovalRequests()
		return res, res != nil
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProvisioningApprovalRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return ([]*provisioning_approval_request.ProvisioningApprovalRequest)(nil)
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing:
		return ([]*provisioning_approval_request.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) ClearValue(item *BatchGetProvisioningApprovalRequestsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
			item.ProvisioningApprovalRequests = nil
		case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProvisioningApprovalRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetProvisioningApprovalRequestsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue{BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_approval_request.ProvisioningApprovalRequest)}
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing:
		return &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue{BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_approval_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_approval_request.ProvisioningApprovalRequest)}
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing:
		return &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_approval_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue{BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest)}
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing:
		return &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue{BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetProvisioningApprovalRequestsResponse_FieldSubPath struct {
	selector BatchGetProvisioningApprovalRequestsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetProvisioningApprovalRequestsResponse_FieldPath = (*BatchGetProvisioningApprovalRequestsResponse_FieldSubPath)(nil)

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) Selector() BatchGetProvisioningApprovalRequestsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) AsProvisioningApprovalRequestsSubPath() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetProvisioningApprovalRequestsResponse
func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) Get(source *BatchGetProvisioningApprovalRequestsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		for _, item := range source.GetProvisioningApprovalRequests() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetProvisioningApprovalRequestsResponse))
}

// GetSingle returns value of selected field from source BatchGetProvisioningApprovalRequestsResponse
func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) GetSingle(source *BatchGetProvisioningApprovalRequestsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		if len(source.GetProvisioningApprovalRequests()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningApprovalRequests()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetProvisioningApprovalRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) ClearValue(item *BatchGetProvisioningApprovalRequestsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
			for _, subItem := range item.ProvisioningApprovalRequests {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetProvisioningApprovalRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetProvisioningApprovalRequestsResponse_FieldPathValue {
	return &BatchGetProvisioningApprovalRequestsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues {
	return &BatchGetProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue {
	return &BatchGetProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetProvisioningApprovalRequestsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetProvisioningApprovalRequestsResponse_FieldPathValue allows storing values for BatchGetProvisioningApprovalRequestsResponse fields according to their type
type BatchGetProvisioningApprovalRequestsResponse_FieldPathValue interface {
	BatchGetProvisioningApprovalRequestsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProvisioningApprovalRequestsResponse)
	CompareWith(*BatchGetProvisioningApprovalRequestsResponse) (cmp int, comparable bool)
}

func ParseBatchGetProvisioningApprovalRequestsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetProvisioningApprovalRequestsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetProvisioningApprovalRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningApprovalRequestsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProvisioningApprovalRequestsResponse_FieldPathValue), nil
}

func MustParseBatchGetProvisioningApprovalRequestsResponse_FieldPathValue(pathStr, valueStr string) BatchGetProvisioningApprovalRequestsResponse_FieldPathValue {
	fpv, err := ParseBatchGetProvisioningApprovalRequestsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue struct {
	BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningApprovalRequestsResponse_FieldPathValue = (*BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProvisioningApprovalRequestsResponse' as interface{}
func (fpv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsProvisioningApprovalRequestsValue() ([]*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpv.value.([]*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}
func (fpv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsMissingValue() ([]*provisioning_approval_request.Reference, bool) {
	res, ok := fpv.value.([]*provisioning_approval_request.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProvisioningApprovalRequestsResponse
func (fpv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue) SetTo(target **BatchGetProvisioningApprovalRequestsResponse) {
	if *target == nil {
		*target = new(BatchGetProvisioningApprovalRequestsResponse)
	}
	switch fpv.selector {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		(*target).ProvisioningApprovalRequests = fpv.value.([]*provisioning_approval_request.ProvisioningApprovalRequest)
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*provisioning_approval_request.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProvisioningApprovalRequestsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetProvisioningApprovalRequestsResponse'.
func (fpv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetProvisioningApprovalRequestsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return 0, false
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProvisioningApprovalRequestsResponse))
}

type BatchGetProvisioningApprovalRequestsResponse_FieldSubPathValue struct {
	BatchGetProvisioningApprovalRequestsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetProvisioningApprovalRequestsResponse_FieldPathValue = (*BatchGetProvisioningApprovalRequestsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetProvisioningApprovalRequestsResponse_FieldSubPathValue) AsProvisioningApprovalRequestsPathValue() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetProvisioningApprovalRequestsResponse_FieldSubPathValue) SetTo(target **BatchGetProvisioningApprovalRequestsResponse) {
	if *target == nil {
		*target = new(BatchGetProvisioningApprovalRequestsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProvisioningApprovalRequestsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProvisioningApprovalRequestsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetProvisioningApprovalRequestsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetProvisioningApprovalRequestsResponse_FieldSubPathValue) CompareWith(source *BatchGetProvisioningApprovalRequestsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProvisioningApprovalRequestsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetProvisioningApprovalRequestsResponse))
}

// BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProvisioningApprovalRequestsResponse according to their type
// Present only for array (repeated) types.
type BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProvisioningApprovalRequestsResponse_FieldPath
	ContainsValue(*BatchGetProvisioningApprovalRequestsResponse) bool
}

// ParseBatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProvisioningApprovalRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningApprovalRequestsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayItemValue = (*BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProvisioningApprovalRequestsResponse as interface{}
func (fpaiv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) AsProvisioningApprovalRequestsItemValue() (*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpaiv.value.(*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}
func (fpaiv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*provisioning_approval_request.Reference, bool) {
	res, ok := fpaiv.value.(*provisioning_approval_request.Reference)
	return res, ok
}

func (fpaiv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProvisioningApprovalRequestsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProvisioningApprovalRequestsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProvisioningApprovalRequestsResponse'
func (fpaiv *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProvisioningApprovalRequestsResponse) bool {
	slice := fpaiv.BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue struct {
	BatchGetProvisioningApprovalRequestsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue) AsProvisioningApprovalRequestsPathItemValue() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProvisioningApprovalRequestsResponse'
func (fpaivs *BatchGetProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetProvisioningApprovalRequestsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningApprovalRequestsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetProvisioningApprovalRequestsResponse fields according to their type
type BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProvisioningApprovalRequestsResponse_FieldPath
}

func ParseBatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProvisioningApprovalRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningApprovalRequestsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues = (*BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		for _, v := range fpaov.values.([][]*provisioning_approval_request.ProvisioningApprovalRequest) {
			values = append(values, v)
		}
	case BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*provisioning_approval_request.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsProvisioningApprovalRequestsArrayOfValues() ([][]*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpaov.values.([][]*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}
func (fpaov *BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*provisioning_approval_request.Reference, bool) {
	res, ok := fpaov.values.([][]*provisioning_approval_request.Reference)
	return res, ok
}

type BatchGetProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues struct {
	BatchGetProvisioningApprovalRequestsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetProvisioningApprovalRequestsResponse_FieldPathArrayOfValues = (*BatchGetProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues) AsProvisioningApprovalRequestsPathArrayOfValues() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProvisioningApprovalRequestsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProvisioningApprovalRequestsRequest_FieldPathSelector
	Get(source *ListProvisioningApprovalRequestsRequest) []interface{}
	GetSingle(source *ListProvisioningApprovalRequestsRequest) (interface{}, bool)
	ClearValue(item *ListProvisioningApprovalRequestsRequest)

	// Those methods build corresponding ListProvisioningApprovalRequestsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProvisioningApprovalRequestsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProvisioningApprovalRequestsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue
}

type ListProvisioningApprovalRequestsRequest_FieldPathSelector int32

const (
	ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent            ListProvisioningApprovalRequestsRequest_FieldPathSelector = 0
	ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize          ListProvisioningApprovalRequestsRequest_FieldPathSelector = 1
	ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken         ListProvisioningApprovalRequestsRequest_FieldPathSelector = 2
	ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy           ListProvisioningApprovalRequestsRequest_FieldPathSelector = 3
	ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter            ListProvisioningApprovalRequestsRequest_FieldPathSelector = 4
	ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask         ListProvisioningApprovalRequestsRequest_FieldPathSelector = 5
	ListProvisioningApprovalRequestsRequest_FieldPathSelectorView              ListProvisioningApprovalRequestsRequest_FieldPathSelector = 6
	ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo ListProvisioningApprovalRequestsRequest_FieldPathSelector = 7
)

func (s ListProvisioningApprovalRequestsRequest_FieldPathSelector) String() string {
	switch s {
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		return "parent"
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return "view"
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsRequest: %d", s))
	}
}

func BuildListProvisioningApprovalRequestsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListProvisioningApprovalRequestsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProvisioningApprovalRequestsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProvisioningApprovalRequestsRequest", fp)
}

func ParseListProvisioningApprovalRequestsRequest_FieldPath(rawField string) (ListProvisioningApprovalRequestsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProvisioningApprovalRequestsRequest_FieldPath(fp)
}

func MustParseListProvisioningApprovalRequestsRequest_FieldPath(rawField string) ListProvisioningApprovalRequestsRequest_FieldPath {
	fp, err := ParseListProvisioningApprovalRequestsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProvisioningApprovalRequestsRequest_FieldTerminalPath struct {
	selector ListProvisioningApprovalRequestsRequest_FieldPathSelector
}

var _ ListProvisioningApprovalRequestsRequest_FieldPath = (*ListProvisioningApprovalRequestsRequest_FieldTerminalPath)(nil)

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) Selector() ListProvisioningApprovalRequestsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProvisioningApprovalRequestsRequest
func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) Get(source *ListProvisioningApprovalRequestsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProvisioningApprovalRequestsRequest))
}

// GetSingle returns value pointed by specific field of from source ListProvisioningApprovalRequestsRequest
func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) GetSingle(source *ListProvisioningApprovalRequestsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProvisioningApprovalRequestsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		return (*provisioning_approval_request.ParentName)(nil)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		return (*provisioning_approval_request.PagerCursor)(nil)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		return (*provisioning_approval_request.OrderBy)(nil)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		return (*provisioning_approval_request.Filter)(nil)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)(nil)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) ClearValue(item *ListProvisioningApprovalRequestsRequest) {
	if item != nil {
		switch fp.selector {
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProvisioningApprovalRequestsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent ||
		fp.selector == ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter ||
		fp.selector == ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListProvisioningApprovalRequestsRequest_FieldPathSelectorView ||
		fp.selector == ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) WithIValue(value interface{}) ListProvisioningApprovalRequestsRequest_FieldPathValue {
	switch fp.selector {
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ParentName)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.PagerCursor)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.OrderBy)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.Filter)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProvisioningApprovalRequestsRequest_FieldPathArrayOfValues {
	fpaov := &ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ParentName)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.PagerCursor)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.OrderBy)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.Filter)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningApprovalRequestsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListProvisioningApprovalRequestsRequest_FieldPathValue allows storing values for ListProvisioningApprovalRequestsRequest fields according to their type
type ListProvisioningApprovalRequestsRequest_FieldPathValue interface {
	ListProvisioningApprovalRequestsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProvisioningApprovalRequestsRequest)
	CompareWith(*ListProvisioningApprovalRequestsRequest) (cmp int, comparable bool)
}

func ParseListProvisioningApprovalRequestsRequest_FieldPathValue(pathStr, valueStr string) (ListProvisioningApprovalRequestsRequest_FieldPathValue, error) {
	fp, err := ParseListProvisioningApprovalRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningApprovalRequestsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProvisioningApprovalRequestsRequest_FieldPathValue), nil
}

func MustParseListProvisioningApprovalRequestsRequest_FieldPathValue(pathStr, valueStr string) ListProvisioningApprovalRequestsRequest_FieldPathValue {
	fpv, err := ParseListProvisioningApprovalRequestsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue struct {
	ListProvisioningApprovalRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningApprovalRequestsRequest_FieldPathValue = (*ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProvisioningApprovalRequestsRequest' as interface{}
func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsParentValue() (*provisioning_approval_request.ParentName, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ParentName)
	return res, ok
}
func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsPageTokenValue() (*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.PagerCursor)
	return res, ok
}
func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsOrderByValue() (*provisioning_approval_request.OrderBy, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.OrderBy)
	return res, ok
}
func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsFilterValue() (*provisioning_approval_request.Filter, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.Filter)
	return res, ok
}
func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListProvisioningApprovalRequestsRequest
func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) SetTo(target **ListProvisioningApprovalRequestsRequest) {
	if *target == nil {
		*target = new(ListProvisioningApprovalRequestsRequest)
	}
	switch fpv.selector {
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*provisioning_approval_request.ParentName)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*provisioning_approval_request.PagerCursor)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*provisioning_approval_request.OrderBy)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*provisioning_approval_request.Filter)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProvisioningApprovalRequestsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue' with the value under path in 'ListProvisioningApprovalRequestsRequest'.
func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) CompareWith(source *ListProvisioningApprovalRequestsRequest) (int, bool) {
	switch fpv.selector {
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*provisioning_approval_request.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProvisioningApprovalRequestsRequest))
}

// ListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProvisioningApprovalRequestsRequest according to their type
// Present only for array (repeated) types.
type ListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProvisioningApprovalRequestsRequest_FieldPath
	ContainsValue(*ListProvisioningApprovalRequestsRequest) bool
}

// ParseListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListProvisioningApprovalRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningApprovalRequestsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue), nil
}

func MustParseListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue struct {
	ListProvisioningApprovalRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningApprovalRequestsRequest_FieldPathArrayItemValue = (*ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProvisioningApprovalRequestsRequest as interface{}
func (fpaiv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListProvisioningApprovalRequestsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProvisioningApprovalRequestsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProvisioningApprovalRequestsRequest'
func (fpaiv *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProvisioningApprovalRequestsRequest) bool {
	slice := fpaiv.ListProvisioningApprovalRequestsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListProvisioningApprovalRequestsRequest_FieldPathArrayOfValues allows storing slice of values for ListProvisioningApprovalRequestsRequest fields according to their type
type ListProvisioningApprovalRequestsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProvisioningApprovalRequestsRequest_FieldPath
}

func ParseListProvisioningApprovalRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProvisioningApprovalRequestsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListProvisioningApprovalRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningApprovalRequestsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProvisioningApprovalRequestsRequest_FieldPathArrayOfValues), nil
}

func MustParseListProvisioningApprovalRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListProvisioningApprovalRequestsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListProvisioningApprovalRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues struct {
	ListProvisioningApprovalRequestsRequest_FieldTerminalPath
	values interface{}
}

var _ ListProvisioningApprovalRequestsRequest_FieldPathArrayOfValues = (*ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ParentName) {
			values = append(values, v)
		}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*provisioning_approval_request.PagerCursor) {
			values = append(values, v)
		}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*provisioning_approval_request.OrderBy) {
			values = append(values, v)
		}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*provisioning_approval_request.Filter) {
			values = append(values, v)
		}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask) {
			values = append(values, v)
		}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*provisioning_approval_request.ParentName, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ParentName)
	return res, ok
}
func (fpaov *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.PagerCursor)
	return res, ok
}
func (fpaov *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*provisioning_approval_request.OrderBy, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.OrderBy)
	return res, ok
}
func (fpaov *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*provisioning_approval_request.Filter, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.Filter)
	return res, ok
}
func (fpaov *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpaov *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProvisioningApprovalRequestsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProvisioningApprovalRequestsResponse_FieldPathSelector
	Get(source *ListProvisioningApprovalRequestsResponse) []interface{}
	GetSingle(source *ListProvisioningApprovalRequestsResponse) (interface{}, bool)
	ClearValue(item *ListProvisioningApprovalRequestsResponse)

	// Those methods build corresponding ListProvisioningApprovalRequestsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProvisioningApprovalRequestsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue
}

type ListProvisioningApprovalRequestsResponse_FieldPathSelector int32

const (
	ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests ListProvisioningApprovalRequestsResponse_FieldPathSelector = 0
	ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken                ListProvisioningApprovalRequestsResponse_FieldPathSelector = 1
	ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken                ListProvisioningApprovalRequestsResponse_FieldPathSelector = 2
	ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset                ListProvisioningApprovalRequestsResponse_FieldPathSelector = 3
	ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount            ListProvisioningApprovalRequestsResponse_FieldPathSelector = 4
)

func (s ListProvisioningApprovalRequestsResponse_FieldPathSelector) String() string {
	switch s {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return "provisioning_approval_requests"
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", s))
	}
}

func BuildListProvisioningApprovalRequestsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListProvisioningApprovalRequestsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProvisioningApprovalRequestsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_approval_requests", "provisioningApprovalRequests", "provisioning-approval-requests":
			return &ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_approval_requests", "provisioningApprovalRequests", "provisioning-approval-requests":
			if subpath, err := provisioning_approval_request.BuildProvisioningApprovalRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListProvisioningApprovalRequestsResponse_FieldSubPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProvisioningApprovalRequestsResponse", fp)
}

func ParseListProvisioningApprovalRequestsResponse_FieldPath(rawField string) (ListProvisioningApprovalRequestsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProvisioningApprovalRequestsResponse_FieldPath(fp)
}

func MustParseListProvisioningApprovalRequestsResponse_FieldPath(rawField string) ListProvisioningApprovalRequestsResponse_FieldPath {
	fp, err := ParseListProvisioningApprovalRequestsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProvisioningApprovalRequestsResponse_FieldTerminalPath struct {
	selector ListProvisioningApprovalRequestsResponse_FieldPathSelector
}

var _ ListProvisioningApprovalRequestsResponse_FieldPath = (*ListProvisioningApprovalRequestsResponse_FieldTerminalPath)(nil)

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) Selector() ListProvisioningApprovalRequestsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProvisioningApprovalRequestsResponse
func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) Get(source *ListProvisioningApprovalRequestsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
			for _, value := range source.GetProvisioningApprovalRequests() {
				values = append(values, value)
			}
		case ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProvisioningApprovalRequestsResponse))
}

// GetSingle returns value pointed by specific field of from source ListProvisioningApprovalRequestsResponse
func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) GetSingle(source *ListProvisioningApprovalRequestsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		res := source.GetProvisioningApprovalRequests()
		return res, res != nil
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProvisioningApprovalRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return ([]*provisioning_approval_request.ProvisioningApprovalRequest)(nil)
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken:
		return (*provisioning_approval_request.PagerCursor)(nil)
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken:
		return (*provisioning_approval_request.PagerCursor)(nil)
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) ClearValue(item *ListProvisioningApprovalRequestsResponse) {
	if item != nil {
		switch fp.selector {
		case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
			item.ProvisioningApprovalRequests = nil
		case ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProvisioningApprovalRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) WithIValue(value interface{}) ListProvisioningApprovalRequestsResponse_FieldPathValue {
	switch fp.selector {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return &ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_approval_request.ProvisioningApprovalRequest)}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken:
		return &ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.PagerCursor)}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken:
		return &ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.PagerCursor)}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset:
		return &ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount:
		return &ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues {
	fpaov := &ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return &ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_approval_request.ProvisioningApprovalRequest)}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken:
		return &ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.PagerCursor)}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken:
		return &ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.PagerCursor)}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset:
		return &ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount:
		return &ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return &ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue{ListProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningApprovalRequestsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListProvisioningApprovalRequestsResponse_FieldSubPath struct {
	selector ListProvisioningApprovalRequestsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListProvisioningApprovalRequestsResponse_FieldPath = (*ListProvisioningApprovalRequestsResponse_FieldSubPath)(nil)

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) Selector() ListProvisioningApprovalRequestsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) AsProvisioningApprovalRequestsSubPath() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListProvisioningApprovalRequestsResponse
func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) Get(source *ListProvisioningApprovalRequestsResponse) (values []interface{}) {
	switch fps.selector {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		for _, item := range source.GetProvisioningApprovalRequests() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListProvisioningApprovalRequestsResponse))
}

// GetSingle returns value of selected field from source ListProvisioningApprovalRequestsResponse
func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) GetSingle(source *ListProvisioningApprovalRequestsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		if len(source.GetProvisioningApprovalRequests()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningApprovalRequests()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fps.selector))
	}
}

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListProvisioningApprovalRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) ClearValue(item *ListProvisioningApprovalRequestsResponse) {
	if item != nil {
		switch fps.selector {
		case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
			for _, subItem := range item.ProvisioningApprovalRequests {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListProvisioningApprovalRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) WithIValue(value interface{}) ListProvisioningApprovalRequestsResponse_FieldPathValue {
	return &ListProvisioningApprovalRequestsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues {
	return &ListProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue {
	return &ListProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListProvisioningApprovalRequestsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListProvisioningApprovalRequestsResponse_FieldPathValue allows storing values for ListProvisioningApprovalRequestsResponse fields according to their type
type ListProvisioningApprovalRequestsResponse_FieldPathValue interface {
	ListProvisioningApprovalRequestsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProvisioningApprovalRequestsResponse)
	CompareWith(*ListProvisioningApprovalRequestsResponse) (cmp int, comparable bool)
}

func ParseListProvisioningApprovalRequestsResponse_FieldPathValue(pathStr, valueStr string) (ListProvisioningApprovalRequestsResponse_FieldPathValue, error) {
	fp, err := ParseListProvisioningApprovalRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningApprovalRequestsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProvisioningApprovalRequestsResponse_FieldPathValue), nil
}

func MustParseListProvisioningApprovalRequestsResponse_FieldPathValue(pathStr, valueStr string) ListProvisioningApprovalRequestsResponse_FieldPathValue {
	fpv, err := ParseListProvisioningApprovalRequestsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue struct {
	ListProvisioningApprovalRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningApprovalRequestsResponse_FieldPathValue = (*ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProvisioningApprovalRequestsResponse' as interface{}
func (fpv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsProvisioningApprovalRequestsValue() ([]*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpv.value.([]*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}
func (fpv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.PagerCursor)
	return res, ok
}
func (fpv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.PagerCursor)
	return res, ok
}
func (fpv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListProvisioningApprovalRequestsResponse
func (fpv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue) SetTo(target **ListProvisioningApprovalRequestsResponse) {
	if *target == nil {
		*target = new(ListProvisioningApprovalRequestsResponse)
	}
	switch fpv.selector {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		(*target).ProvisioningApprovalRequests = fpv.value.([]*provisioning_approval_request.ProvisioningApprovalRequest)
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*provisioning_approval_request.PagerCursor)
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*provisioning_approval_request.PagerCursor)
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProvisioningApprovalRequestsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue' with the value under path in 'ListProvisioningApprovalRequestsResponse'.
func (fpv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue) CompareWith(source *ListProvisioningApprovalRequestsResponse) (int, bool) {
	switch fpv.selector {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return 0, false
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProvisioningApprovalRequestsResponse))
}

type ListProvisioningApprovalRequestsResponse_FieldSubPathValue struct {
	ListProvisioningApprovalRequestsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListProvisioningApprovalRequestsResponse_FieldPathValue = (*ListProvisioningApprovalRequestsResponse_FieldSubPathValue)(nil)

func (fpvs *ListProvisioningApprovalRequestsResponse_FieldSubPathValue) AsProvisioningApprovalRequestsPathValue() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue)
	return res, ok
}

func (fpvs *ListProvisioningApprovalRequestsResponse_FieldSubPathValue) SetTo(target **ListProvisioningApprovalRequestsResponse) {
	if *target == nil {
		*target = new(ListProvisioningApprovalRequestsResponse)
	}
	switch fpvs.Selector() {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProvisioningApprovalRequestsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProvisioningApprovalRequestsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListProvisioningApprovalRequestsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListProvisioningApprovalRequestsResponse_FieldSubPathValue) CompareWith(source *ListProvisioningApprovalRequestsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProvisioningApprovalRequestsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListProvisioningApprovalRequestsResponse))
}

// ListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProvisioningApprovalRequestsResponse according to their type
// Present only for array (repeated) types.
type ListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProvisioningApprovalRequestsResponse_FieldPath
	ContainsValue(*ListProvisioningApprovalRequestsResponse) bool
}

// ParseListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListProvisioningApprovalRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningApprovalRequestsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue), nil
}

func MustParseListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue struct {
	ListProvisioningApprovalRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningApprovalRequestsResponse_FieldPathArrayItemValue = (*ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProvisioningApprovalRequestsResponse as interface{}
func (fpaiv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) AsProvisioningApprovalRequestsItemValue() (*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpaiv.value.(*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}

func (fpaiv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListProvisioningApprovalRequestsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProvisioningApprovalRequestsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProvisioningApprovalRequestsResponse'
func (fpaiv *ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProvisioningApprovalRequestsResponse) bool {
	slice := fpaiv.ListProvisioningApprovalRequestsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue struct {
	ListProvisioningApprovalRequestsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue) AsProvisioningApprovalRequestsPathItemValue() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProvisioningApprovalRequestsResponse'
func (fpaivs *ListProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListProvisioningApprovalRequestsResponse) bool {
	switch fpaivs.Selector() {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningApprovalRequestsResponse: %d", fpaivs.Selector()))
	}
}

// ListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues allows storing slice of values for ListProvisioningApprovalRequestsResponse fields according to their type
type ListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProvisioningApprovalRequestsResponse_FieldPath
}

func ParseListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListProvisioningApprovalRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningApprovalRequestsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues), nil
}

func MustParseListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues struct {
	ListProvisioningApprovalRequestsResponse_FieldTerminalPath
	values interface{}
}

var _ ListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues = (*ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests:
		for _, v := range fpaov.values.([][]*provisioning_approval_request.ProvisioningApprovalRequest) {
			values = append(values, v)
		}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*provisioning_approval_request.PagerCursor) {
			values = append(values, v)
		}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*provisioning_approval_request.PagerCursor) {
			values = append(values, v)
		}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsProvisioningApprovalRequestsArrayOfValues() ([][]*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpaov.values.([][]*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}
func (fpaov *ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.PagerCursor)
	return res, ok
}
func (fpaov *ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.PagerCursor)
	return res, ok
}
func (fpaov *ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues struct {
	ListProvisioningApprovalRequestsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListProvisioningApprovalRequestsResponse_FieldPathArrayOfValues = (*ListProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues) AsProvisioningApprovalRequestsPathArrayOfValues() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningApprovalRequestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningApprovalRequestRequest_FieldPathSelector
	Get(source *WatchProvisioningApprovalRequestRequest) []interface{}
	GetSingle(source *WatchProvisioningApprovalRequestRequest) (interface{}, bool)
	ClearValue(item *WatchProvisioningApprovalRequestRequest)

	// Those methods build corresponding WatchProvisioningApprovalRequestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningApprovalRequestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningApprovalRequestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue
}

type WatchProvisioningApprovalRequestRequest_FieldPathSelector int32

const (
	WatchProvisioningApprovalRequestRequest_FieldPathSelectorName      WatchProvisioningApprovalRequestRequest_FieldPathSelector = 0
	WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask WatchProvisioningApprovalRequestRequest_FieldPathSelector = 1
	WatchProvisioningApprovalRequestRequest_FieldPathSelectorView      WatchProvisioningApprovalRequestRequest_FieldPathSelector = 2
)

func (s WatchProvisioningApprovalRequestRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return "name"
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestRequest: %d", s))
	}
}

func BuildWatchProvisioningApprovalRequestRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningApprovalRequestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningApprovalRequestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchProvisioningApprovalRequestRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProvisioningApprovalRequestRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProvisioningApprovalRequestRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningApprovalRequestRequest", fp)
}

func ParseWatchProvisioningApprovalRequestRequest_FieldPath(rawField string) (WatchProvisioningApprovalRequestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningApprovalRequestRequest_FieldPath(fp)
}

func MustParseWatchProvisioningApprovalRequestRequest_FieldPath(rawField string) WatchProvisioningApprovalRequestRequest_FieldPath {
	fp, err := ParseWatchProvisioningApprovalRequestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningApprovalRequestRequest_FieldTerminalPath struct {
	selector WatchProvisioningApprovalRequestRequest_FieldPathSelector
}

var _ WatchProvisioningApprovalRequestRequest_FieldPath = (*WatchProvisioningApprovalRequestRequest_FieldTerminalPath)(nil)

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) Selector() WatchProvisioningApprovalRequestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningApprovalRequestRequest
func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) Get(source *WatchProvisioningApprovalRequestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningApprovalRequestRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProvisioningApprovalRequestRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningApprovalRequestRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningApprovalRequestRequest
func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) GetSingle(source *WatchProvisioningApprovalRequestRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningApprovalRequestRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return (*provisioning_approval_request.Reference)(nil)
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		return (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)(nil)
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) ClearValue(item *WatchProvisioningApprovalRequestRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningApprovalRequestRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProvisioningApprovalRequestRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningApprovalRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningApprovalRequestRequest_FieldPathSelectorName ||
		fp.selector == WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProvisioningApprovalRequestRequest_FieldPathSelectorView
}

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningApprovalRequestRequest_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return &WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.Reference)}
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorView:
		return &WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return &WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.Reference)}
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorView:
		return &WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningApprovalRequestRequest_FieldPathValue allows storing values for WatchProvisioningApprovalRequestRequest fields according to their type
type WatchProvisioningApprovalRequestRequest_FieldPathValue interface {
	WatchProvisioningApprovalRequestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningApprovalRequestRequest)
	CompareWith(*WatchProvisioningApprovalRequestRequest) (cmp int, comparable bool)
}

func ParseWatchProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr string) (WatchProvisioningApprovalRequestRequest_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningApprovalRequestRequest_FieldPathValue), nil
}

func MustParseWatchProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr string) WatchProvisioningApprovalRequestRequest_FieldPathValue {
	fpv, err := ParseWatchProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue struct {
	WatchProvisioningApprovalRequestRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningApprovalRequestRequest_FieldPathValue = (*WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningApprovalRequestRequest' as interface{}
func (fpv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsNameValue() (*provisioning_approval_request.Reference, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.Reference)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningApprovalRequestRequest
func (fpv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue) SetTo(target **WatchProvisioningApprovalRequestRequest) {
	if *target == nil {
		*target = new(WatchProvisioningApprovalRequestRequest)
	}
	switch fpv.selector {
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*provisioning_approval_request.Reference)
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningApprovalRequestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue' with the value under path in 'WatchProvisioningApprovalRequestRequest'.
func (fpv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue) CompareWith(source *WatchProvisioningApprovalRequestRequest) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*provisioning_approval_request.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningApprovalRequestRequest))
}

// WatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningApprovalRequestRequest according to their type
// Present only for array (repeated) types.
type WatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningApprovalRequestRequest_FieldPath
	ContainsValue(*WatchProvisioningApprovalRequestRequest) bool
}

// ParseWatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningApprovalRequestRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningApprovalRequestRequest_FieldPathArrayItemValue = (*WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningApprovalRequestRequest as interface{}
func (fpaiv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningApprovalRequestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningApprovalRequestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningApprovalRequestRequest'
func (fpaiv *WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningApprovalRequestRequest) bool {
	slice := fpaiv.WatchProvisioningApprovalRequestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningApprovalRequestRequest_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningApprovalRequestRequest fields according to their type
type WatchProvisioningApprovalRequestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningApprovalRequestRequest_FieldPath
}

func ParseWatchProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningApprovalRequestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningApprovalRequestRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningApprovalRequestRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningApprovalRequestRequest_FieldPathArrayOfValues = (*WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*provisioning_approval_request.Reference) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*provisioning_approval_request.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.Reference)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningApprovalRequestResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningApprovalRequestResponse_FieldPathSelector
	Get(source *WatchProvisioningApprovalRequestResponse) []interface{}
	GetSingle(source *WatchProvisioningApprovalRequestResponse) (interface{}, bool)
	ClearValue(item *WatchProvisioningApprovalRequestResponse)

	// Those methods build corresponding WatchProvisioningApprovalRequestResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningApprovalRequestResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningApprovalRequestResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue
}

type WatchProvisioningApprovalRequestResponse_FieldPathSelector int32

const (
	WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange WatchProvisioningApprovalRequestResponse_FieldPathSelector = 0
)

func (s WatchProvisioningApprovalRequestResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestResponse: %d", s))
	}
}

func BuildWatchProvisioningApprovalRequestResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningApprovalRequestResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningApprovalRequestResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchProvisioningApprovalRequestResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningApprovalRequestResponse", fp)
}

func ParseWatchProvisioningApprovalRequestResponse_FieldPath(rawField string) (WatchProvisioningApprovalRequestResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningApprovalRequestResponse_FieldPath(fp)
}

func MustParseWatchProvisioningApprovalRequestResponse_FieldPath(rawField string) WatchProvisioningApprovalRequestResponse_FieldPath {
	fp, err := ParseWatchProvisioningApprovalRequestResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningApprovalRequestResponse_FieldTerminalPath struct {
	selector WatchProvisioningApprovalRequestResponse_FieldPathSelector
}

var _ WatchProvisioningApprovalRequestResponse_FieldPath = (*WatchProvisioningApprovalRequestResponse_FieldTerminalPath)(nil)

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) Selector() WatchProvisioningApprovalRequestResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningApprovalRequestResponse
func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) Get(source *WatchProvisioningApprovalRequestResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningApprovalRequestResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningApprovalRequestResponse
func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) GetSingle(source *WatchProvisioningApprovalRequestResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningApprovalRequestResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange:
		return (*provisioning_approval_request.ProvisioningApprovalRequestChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) ClearValue(item *WatchProvisioningApprovalRequestResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningApprovalRequestResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange
}

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningApprovalRequestResponse_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange:
		return &WatchProvisioningApprovalRequestResponse_FieldTerminalPathValue{WatchProvisioningApprovalRequestResponse_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequestChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningApprovalRequestResponse_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange:
		return &WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestResponse_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ProvisioningApprovalRequestChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningApprovalRequestResponse_FieldPathValue allows storing values for WatchProvisioningApprovalRequestResponse fields according to their type
type WatchProvisioningApprovalRequestResponse_FieldPathValue interface {
	WatchProvisioningApprovalRequestResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningApprovalRequestResponse)
	CompareWith(*WatchProvisioningApprovalRequestResponse) (cmp int, comparable bool)
}

func ParseWatchProvisioningApprovalRequestResponse_FieldPathValue(pathStr, valueStr string) (WatchProvisioningApprovalRequestResponse_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningApprovalRequestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningApprovalRequestResponse_FieldPathValue), nil
}

func MustParseWatchProvisioningApprovalRequestResponse_FieldPathValue(pathStr, valueStr string) WatchProvisioningApprovalRequestResponse_FieldPathValue {
	fpv, err := ParseWatchProvisioningApprovalRequestResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningApprovalRequestResponse_FieldTerminalPathValue struct {
	WatchProvisioningApprovalRequestResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningApprovalRequestResponse_FieldPathValue = (*WatchProvisioningApprovalRequestResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningApprovalRequestResponse' as interface{}
func (fpv *WatchProvisioningApprovalRequestResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningApprovalRequestResponse_FieldTerminalPathValue) AsChangeValue() (*provisioning_approval_request.ProvisioningApprovalRequestChange, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequestChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningApprovalRequestResponse
func (fpv *WatchProvisioningApprovalRequestResponse_FieldTerminalPathValue) SetTo(target **WatchProvisioningApprovalRequestResponse) {
	if *target == nil {
		*target = new(WatchProvisioningApprovalRequestResponse)
	}
	switch fpv.selector {
	case WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequestChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningApprovalRequestResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningApprovalRequestResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningApprovalRequestResponse_FieldTerminalPathValue' with the value under path in 'WatchProvisioningApprovalRequestResponse'.
func (fpv *WatchProvisioningApprovalRequestResponse_FieldTerminalPathValue) CompareWith(source *WatchProvisioningApprovalRequestResponse) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningApprovalRequestResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningApprovalRequestResponse))
}

// WatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningApprovalRequestResponse according to their type
// Present only for array (repeated) types.
type WatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningApprovalRequestResponse_FieldPath
	ContainsValue(*WatchProvisioningApprovalRequestResponse) bool
}

// ParseWatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningApprovalRequestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningApprovalRequestResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningApprovalRequestResponse_FieldPathArrayItemValue = (*WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningApprovalRequestResponse as interface{}
func (fpaiv *WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningApprovalRequestResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningApprovalRequestResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningApprovalRequestResponse'
func (fpaiv *WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningApprovalRequestResponse) bool {
	slice := fpaiv.WatchProvisioningApprovalRequestResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningApprovalRequestResponse_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningApprovalRequestResponse fields according to their type
type WatchProvisioningApprovalRequestResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningApprovalRequestResponse_FieldPath
}

func ParseWatchProvisioningApprovalRequestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningApprovalRequestResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningApprovalRequestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningApprovalRequestResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningApprovalRequestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningApprovalRequestResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningApprovalRequestResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningApprovalRequestResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningApprovalRequestResponse_FieldPathArrayOfValues = (*WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequestChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningApprovalRequestResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*provisioning_approval_request.ProvisioningApprovalRequestChange, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequestChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningApprovalRequestsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningApprovalRequestsRequest_FieldPathSelector
	Get(source *WatchProvisioningApprovalRequestsRequest) []interface{}
	GetSingle(source *WatchProvisioningApprovalRequestsRequest) (interface{}, bool)
	ClearValue(item *WatchProvisioningApprovalRequestsRequest)

	// Those methods build corresponding WatchProvisioningApprovalRequestsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningApprovalRequestsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningApprovalRequestsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue
}

type WatchProvisioningApprovalRequestsRequest_FieldPathSelector int32

const (
	WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType         WatchProvisioningApprovalRequestsRequest_FieldPathSelector = 0
	WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent       WatchProvisioningApprovalRequestsRequest_FieldPathSelector = 1
	WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize     WatchProvisioningApprovalRequestsRequest_FieldPathSelector = 2
	WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken    WatchProvisioningApprovalRequestsRequest_FieldPathSelector = 3
	WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy      WatchProvisioningApprovalRequestsRequest_FieldPathSelector = 4
	WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken  WatchProvisioningApprovalRequestsRequest_FieldPathSelector = 5
	WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime WatchProvisioningApprovalRequestsRequest_FieldPathSelector = 6
	WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter       WatchProvisioningApprovalRequestsRequest_FieldPathSelector = 7
	WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask    WatchProvisioningApprovalRequestsRequest_FieldPathSelector = 8
	WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView         WatchProvisioningApprovalRequestsRequest_FieldPathSelector = 9
	WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize WatchProvisioningApprovalRequestsRequest_FieldPathSelector = 10
)

func (s WatchProvisioningApprovalRequestsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType:
		return "type"
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return "view"
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsRequest: %d", s))
	}
}

func BuildWatchProvisioningApprovalRequestsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningApprovalRequestsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningApprovalRequestsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningApprovalRequestsRequest", fp)
}

func ParseWatchProvisioningApprovalRequestsRequest_FieldPath(rawField string) (WatchProvisioningApprovalRequestsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningApprovalRequestsRequest_FieldPath(fp)
}

func MustParseWatchProvisioningApprovalRequestsRequest_FieldPath(rawField string) WatchProvisioningApprovalRequestsRequest_FieldPath {
	fp, err := ParseWatchProvisioningApprovalRequestsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningApprovalRequestsRequest_FieldTerminalPath struct {
	selector WatchProvisioningApprovalRequestsRequest_FieldPathSelector
}

var _ WatchProvisioningApprovalRequestsRequest_FieldPath = (*WatchProvisioningApprovalRequestsRequest_FieldTerminalPath)(nil)

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) Selector() WatchProvisioningApprovalRequestsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningApprovalRequestsRequest
func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) Get(source *WatchProvisioningApprovalRequestsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningApprovalRequestsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningApprovalRequestsRequest
func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) GetSingle(source *WatchProvisioningApprovalRequestsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningApprovalRequestsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		return (*provisioning_approval_request.ParentReference)(nil)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		return (*provisioning_approval_request.PagerCursor)(nil)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		return (*provisioning_approval_request.OrderBy)(nil)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		return (*provisioning_approval_request.Filter)(nil)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)(nil)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) ClearValue(item *WatchProvisioningApprovalRequestsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningApprovalRequestsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType ||
		fp.selector == WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent ||
		fp.selector == WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView ||
		fp.selector == WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningApprovalRequestsRequest_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ParentReference)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.PagerCursor)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.OrderBy)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.Filter)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningApprovalRequestsRequest_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ParentReference)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.PagerCursor)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.OrderBy)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.Filter)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningApprovalRequestsRequest_FieldPathValue allows storing values for WatchProvisioningApprovalRequestsRequest fields according to their type
type WatchProvisioningApprovalRequestsRequest_FieldPathValue interface {
	WatchProvisioningApprovalRequestsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningApprovalRequestsRequest)
	CompareWith(*WatchProvisioningApprovalRequestsRequest) (cmp int, comparable bool)
}

func ParseWatchProvisioningApprovalRequestsRequest_FieldPathValue(pathStr, valueStr string) (WatchProvisioningApprovalRequestsRequest_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningApprovalRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningApprovalRequestsRequest_FieldPathValue), nil
}

func MustParseWatchProvisioningApprovalRequestsRequest_FieldPathValue(pathStr, valueStr string) WatchProvisioningApprovalRequestsRequest_FieldPathValue {
	fpv, err := ParseWatchProvisioningApprovalRequestsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue struct {
	WatchProvisioningApprovalRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningApprovalRequestsRequest_FieldPathValue = (*WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningApprovalRequestsRequest' as interface{}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsParentValue() (*provisioning_approval_request.ParentReference, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ParentReference)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsPageTokenValue() (*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.PagerCursor)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsOrderByValue() (*provisioning_approval_request.OrderBy, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.OrderBy)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsFilterValue() (*provisioning_approval_request.Filter, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.Filter)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningApprovalRequestsRequest
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) SetTo(target **WatchProvisioningApprovalRequestsRequest) {
	if *target == nil {
		*target = new(WatchProvisioningApprovalRequestsRequest)
	}
	switch fpv.selector {
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*provisioning_approval_request.ParentReference)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*provisioning_approval_request.PagerCursor)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*provisioning_approval_request.OrderBy)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*provisioning_approval_request.Filter)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningApprovalRequestsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue' with the value under path in 'WatchProvisioningApprovalRequestsRequest'.
func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) CompareWith(source *WatchProvisioningApprovalRequestsRequest) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*provisioning_approval_request.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningApprovalRequestsRequest))
}

// WatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningApprovalRequestsRequest according to their type
// Present only for array (repeated) types.
type WatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningApprovalRequestsRequest_FieldPath
	ContainsValue(*WatchProvisioningApprovalRequestsRequest) bool
}

// ParseWatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningApprovalRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningApprovalRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningApprovalRequestsRequest_FieldPathArrayItemValue = (*WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningApprovalRequestsRequest as interface{}
func (fpaiv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningApprovalRequestsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningApprovalRequestsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningApprovalRequestsRequest'
func (fpaiv *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningApprovalRequestsRequest) bool {
	slice := fpaiv.WatchProvisioningApprovalRequestsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningApprovalRequestsRequest_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningApprovalRequestsRequest fields according to their type
type WatchProvisioningApprovalRequestsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningApprovalRequestsRequest_FieldPath
}

func ParseWatchProvisioningApprovalRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningApprovalRequestsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningApprovalRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningApprovalRequestsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningApprovalRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningApprovalRequestsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningApprovalRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningApprovalRequestsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningApprovalRequestsRequest_FieldPathArrayOfValues = (*WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ParentReference) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*provisioning_approval_request.PagerCursor) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*provisioning_approval_request.OrderBy) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*provisioning_approval_request.Filter) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*provisioning_approval_request.ParentReference, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ParentReference)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.PagerCursor)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*provisioning_approval_request.OrderBy, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.OrderBy)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*provisioning_approval_request.Filter, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.Filter)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningApprovalRequestsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningApprovalRequestsResponse_FieldPathSelector
	Get(source *WatchProvisioningApprovalRequestsResponse) []interface{}
	GetSingle(source *WatchProvisioningApprovalRequestsResponse) (interface{}, bool)
	ClearValue(item *WatchProvisioningApprovalRequestsResponse)

	// Those methods build corresponding WatchProvisioningApprovalRequestsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningApprovalRequestsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue
}

type WatchProvisioningApprovalRequestsResponse_FieldPathSelector int32

const (
	WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges WatchProvisioningApprovalRequestsResponse_FieldPathSelector = 0
	WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent                          WatchProvisioningApprovalRequestsResponse_FieldPathSelector = 1
	WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange                    WatchProvisioningApprovalRequestsResponse_FieldPathSelector = 2
	WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken                        WatchProvisioningApprovalRequestsResponse_FieldPathSelector = 3
	WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize                       WatchProvisioningApprovalRequestsResponse_FieldPathSelector = 4
	WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset                        WatchProvisioningApprovalRequestsResponse_FieldPathSelector = 5
	WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset                        WatchProvisioningApprovalRequestsResponse_FieldPathSelector = 6
)

func (s WatchProvisioningApprovalRequestsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges:
		return "provisioning_approval_request_changes"
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", s))
	}
}

func BuildWatchProvisioningApprovalRequestsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningApprovalRequestsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningApprovalRequestsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_approval_request_changes", "provisioningApprovalRequestChanges", "provisioning-approval-request-changes":
			return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchProvisioningApprovalRequestsResponse_FieldSubPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningApprovalRequestsResponse", fp)
}

func ParseWatchProvisioningApprovalRequestsResponse_FieldPath(rawField string) (WatchProvisioningApprovalRequestsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningApprovalRequestsResponse_FieldPath(fp)
}

func MustParseWatchProvisioningApprovalRequestsResponse_FieldPath(rawField string) WatchProvisioningApprovalRequestsResponse_FieldPath {
	fp, err := ParseWatchProvisioningApprovalRequestsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningApprovalRequestsResponse_FieldTerminalPath struct {
	selector WatchProvisioningApprovalRequestsResponse_FieldPathSelector
}

var _ WatchProvisioningApprovalRequestsResponse_FieldPath = (*WatchProvisioningApprovalRequestsResponse_FieldTerminalPath)(nil)

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) Selector() WatchProvisioningApprovalRequestsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningApprovalRequestsResponse
func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) Get(source *WatchProvisioningApprovalRequestsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges:
			for _, value := range source.GetProvisioningApprovalRequestChanges() {
				values = append(values, value)
			}
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningApprovalRequestsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningApprovalRequestsResponse
func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) GetSingle(source *WatchProvisioningApprovalRequestsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges:
		res := source.GetProvisioningApprovalRequestChanges()
		return res, res != nil
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningApprovalRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges:
		return ([]*provisioning_approval_request.ProvisioningApprovalRequestChange)(nil)
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchProvisioningApprovalRequestsResponse_PageTokenChange)(nil)
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) ClearValue(item *WatchProvisioningApprovalRequestsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges:
			item.ProvisioningApprovalRequestChanges = nil
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningApprovalRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges ||
		fp.selector == WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningApprovalRequestsResponse_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_approval_request.ProvisioningApprovalRequestChange)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(*WatchProvisioningApprovalRequestsResponse_PageTokenChange)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_approval_request.ProvisioningApprovalRequestChange)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([]*WatchProvisioningApprovalRequestsResponse_PageTokenChange)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges:
		return &WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue{WatchProvisioningApprovalRequestsResponse_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequestChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchProvisioningApprovalRequestsResponse_FieldSubPath struct {
	selector WatchProvisioningApprovalRequestsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchProvisioningApprovalRequestsResponse_FieldPath = (*WatchProvisioningApprovalRequestsResponse_FieldSubPath)(nil)

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) Selector() WatchProvisioningApprovalRequestsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchProvisioningApprovalRequestsResponse
func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) Get(source *WatchProvisioningApprovalRequestsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchProvisioningApprovalRequestsResponse))
}

// GetSingle returns value of selected field from source WatchProvisioningApprovalRequestsResponse
func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) GetSingle(source *WatchProvisioningApprovalRequestsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fps.selector))
	}
}

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchProvisioningApprovalRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) ClearValue(item *WatchProvisioningApprovalRequestsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchProvisioningApprovalRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) WithIValue(value interface{}) WatchProvisioningApprovalRequestsResponse_FieldPathValue {
	return &WatchProvisioningApprovalRequestsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues {
	return &WatchProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue {
	return &WatchProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchProvisioningApprovalRequestsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchProvisioningApprovalRequestsResponse_FieldPathValue allows storing values for WatchProvisioningApprovalRequestsResponse fields according to their type
type WatchProvisioningApprovalRequestsResponse_FieldPathValue interface {
	WatchProvisioningApprovalRequestsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningApprovalRequestsResponse)
	CompareWith(*WatchProvisioningApprovalRequestsResponse) (cmp int, comparable bool)
}

func ParseWatchProvisioningApprovalRequestsResponse_FieldPathValue(pathStr, valueStr string) (WatchProvisioningApprovalRequestsResponse_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningApprovalRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningApprovalRequestsResponse_FieldPathValue), nil
}

func MustParseWatchProvisioningApprovalRequestsResponse_FieldPathValue(pathStr, valueStr string) WatchProvisioningApprovalRequestsResponse_FieldPathValue {
	fpv, err := ParseWatchProvisioningApprovalRequestsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue struct {
	WatchProvisioningApprovalRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningApprovalRequestsResponse_FieldPathValue = (*WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningApprovalRequestsResponse' as interface{}
func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsProvisioningApprovalRequestChangesValue() ([]*provisioning_approval_request.ProvisioningApprovalRequestChange, bool) {
	res, ok := fpv.value.([]*provisioning_approval_request.ProvisioningApprovalRequestChange)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchProvisioningApprovalRequestsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchProvisioningApprovalRequestsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningApprovalRequestsResponse
func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) SetTo(target **WatchProvisioningApprovalRequestsResponse) {
	if *target == nil {
		*target = new(WatchProvisioningApprovalRequestsResponse)
	}
	switch fpv.selector {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges:
		(*target).ProvisioningApprovalRequestChanges = fpv.value.([]*provisioning_approval_request.ProvisioningApprovalRequestChange)
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchProvisioningApprovalRequestsResponse_PageTokenChange)
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningApprovalRequestsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue' with the value under path in 'WatchProvisioningApprovalRequestsResponse'.
func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) CompareWith(source *WatchProvisioningApprovalRequestsResponse) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges:
		return 0, false
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningApprovalRequestsResponse))
}

type WatchProvisioningApprovalRequestsResponse_FieldSubPathValue struct {
	WatchProvisioningApprovalRequestsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchProvisioningApprovalRequestsResponse_FieldPathValue = (*WatchProvisioningApprovalRequestsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchProvisioningApprovalRequestsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchProvisioningApprovalRequestsResponse_FieldSubPathValue) SetTo(target **WatchProvisioningApprovalRequestsResponse) {
	if *target == nil {
		*target = new(WatchProvisioningApprovalRequestsResponse)
	}
	switch fpvs.Selector() {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProvisioningApprovalRequestsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningApprovalRequestsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchProvisioningApprovalRequestsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchProvisioningApprovalRequestsResponse_FieldSubPathValue) CompareWith(source *WatchProvisioningApprovalRequestsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProvisioningApprovalRequestsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchProvisioningApprovalRequestsResponse))
}

// WatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningApprovalRequestsResponse according to their type
// Present only for array (repeated) types.
type WatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningApprovalRequestsResponse_FieldPath
	ContainsValue(*WatchProvisioningApprovalRequestsResponse) bool
}

// ParseWatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningApprovalRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningApprovalRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningApprovalRequestsResponse_FieldPathArrayItemValue = (*WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningApprovalRequestsResponse as interface{}
func (fpaiv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) AsProvisioningApprovalRequestChangesItemValue() (*provisioning_approval_request.ProvisioningApprovalRequestChange, bool) {
	res, ok := fpaiv.value.(*provisioning_approval_request.ProvisioningApprovalRequestChange)
	return res, ok
}

func (fpaiv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningApprovalRequestsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningApprovalRequestsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningApprovalRequestsResponse'
func (fpaiv *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningApprovalRequestsResponse) bool {
	slice := fpaiv.WatchProvisioningApprovalRequestsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue struct {
	WatchProvisioningApprovalRequestsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningApprovalRequestsResponse'
func (fpaivs *WatchProvisioningApprovalRequestsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchProvisioningApprovalRequestsResponse) bool {
	switch fpaivs.Selector() {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse: %d", fpaivs.Selector()))
	}
}

// WatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningApprovalRequestsResponse fields according to their type
type WatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningApprovalRequestsResponse_FieldPath
}

func ParseWatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningApprovalRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningApprovalRequestsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningApprovalRequestsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues = (*WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges:
		for _, v := range fpaov.values.([][]*provisioning_approval_request.ProvisioningApprovalRequestChange) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchProvisioningApprovalRequestsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsProvisioningApprovalRequestChangesArrayOfValues() ([][]*provisioning_approval_request.ProvisioningApprovalRequestChange, bool) {
	res, ok := fpaov.values.([][]*provisioning_approval_request.ProvisioningApprovalRequestChange)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchProvisioningApprovalRequestsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchProvisioningApprovalRequestsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues struct {
	WatchProvisioningApprovalRequestsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchProvisioningApprovalRequestsResponse_FieldPathArrayOfValues = (*WatchProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchProvisioningApprovalRequestsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchProvisioningApprovalRequestsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchProvisioningApprovalRequestsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchProvisioningApprovalRequestsResponse_PageTokenChange)

	// Those methods build corresponding WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelector = 0
	WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningApprovalRequestsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningApprovalRequestsResponse_PageTokenChange", fp)
}

func ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath(rawField string) (WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath(rawField string) WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelector
}

var _ WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath = (*WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) Selector() WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningApprovalRequestsResponse_PageTokenChange
func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchProvisioningApprovalRequestsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningApprovalRequestsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningApprovalRequestsResponse_PageTokenChange
func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchProvisioningApprovalRequestsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningApprovalRequestsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*provisioning_approval_request.PagerCursor)(nil)
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*provisioning_approval_request.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchProvisioningApprovalRequestsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningApprovalRequestsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue{WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.PagerCursor)}
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue{WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.PagerCursor)}
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue interface {
	WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningApprovalRequestsResponse_PageTokenChange)
	CompareWith(*WatchProvisioningApprovalRequestsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathValue = (*WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.PagerCursor)
	return res, ok
}
func (fpv *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchProvisioningApprovalRequestsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchProvisioningApprovalRequestsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*provisioning_approval_request.PagerCursor)
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*provisioning_approval_request.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningApprovalRequestsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchProvisioningApprovalRequestsResponse_PageTokenChange'.
func (fpv *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchProvisioningApprovalRequestsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningApprovalRequestsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningApprovalRequestsResponse_PageTokenChange))
}

// WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchProvisioningApprovalRequestsResponse_PageTokenChange) bool
}

// ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningApprovalRequestsResponse_PageTokenChange as interface{}
func (fpaiv *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningApprovalRequestsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningApprovalRequestsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningApprovalRequestsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath
}

func ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*provisioning_approval_request.PagerCursor) {
			values = append(values, v)
		}
	case WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*provisioning_approval_request.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.PagerCursor)
	return res, ok
}
func (fpaov *WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*provisioning_approval_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateProvisioningApprovalRequestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateProvisioningApprovalRequestRequest_FieldPathSelector
	Get(source *CreateProvisioningApprovalRequestRequest) []interface{}
	GetSingle(source *CreateProvisioningApprovalRequestRequest) (interface{}, bool)
	ClearValue(item *CreateProvisioningApprovalRequestRequest)

	// Those methods build corresponding CreateProvisioningApprovalRequestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateProvisioningApprovalRequestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue
}

type CreateProvisioningApprovalRequestRequest_FieldPathSelector int32

const (
	CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent                      CreateProvisioningApprovalRequestRequest_FieldPathSelector = 0
	CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest CreateProvisioningApprovalRequestRequest_FieldPathSelector = 1
)

func (s CreateProvisioningApprovalRequestRequest_FieldPathSelector) String() string {
	switch s {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent:
		return "parent"
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return "provisioning_approval_request"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", s))
	}
}

func BuildCreateProvisioningApprovalRequestRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateProvisioningApprovalRequestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateProvisioningApprovalRequestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent}, nil
		case "provisioning_approval_request", "provisioningApprovalRequest", "provisioning-approval-request":
			return &CreateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_approval_request", "provisioningApprovalRequest", "provisioning-approval-request":
			if subpath, err := provisioning_approval_request.BuildProvisioningApprovalRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateProvisioningApprovalRequestRequest_FieldSubPath{selector: CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateProvisioningApprovalRequestRequest", fp)
}

func ParseCreateProvisioningApprovalRequestRequest_FieldPath(rawField string) (CreateProvisioningApprovalRequestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateProvisioningApprovalRequestRequest_FieldPath(fp)
}

func MustParseCreateProvisioningApprovalRequestRequest_FieldPath(rawField string) CreateProvisioningApprovalRequestRequest_FieldPath {
	fp, err := ParseCreateProvisioningApprovalRequestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateProvisioningApprovalRequestRequest_FieldTerminalPath struct {
	selector CreateProvisioningApprovalRequestRequest_FieldPathSelector
}

var _ CreateProvisioningApprovalRequestRequest_FieldPath = (*CreateProvisioningApprovalRequestRequest_FieldTerminalPath)(nil)

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) Selector() CreateProvisioningApprovalRequestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateProvisioningApprovalRequestRequest
func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) Get(source *CreateProvisioningApprovalRequestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
			if source.ProvisioningApprovalRequest != nil {
				values = append(values, source.ProvisioningApprovalRequest)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateProvisioningApprovalRequestRequest))
}

// GetSingle returns value pointed by specific field of from source CreateProvisioningApprovalRequestRequest
func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) GetSingle(source *CreateProvisioningApprovalRequestRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		res := source.GetProvisioningApprovalRequest()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateProvisioningApprovalRequestRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent:
		return (*provisioning_approval_request.ParentReference)(nil)
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return (*provisioning_approval_request.ProvisioningApprovalRequest)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) ClearValue(item *CreateProvisioningApprovalRequestRequest) {
	if item != nil {
		switch fp.selector {
		case CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
			item.ProvisioningApprovalRequest = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateProvisioningApprovalRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent
}

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) WithIValue(value interface{}) CreateProvisioningApprovalRequestRequest_FieldPathValue {
	switch fp.selector {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent:
		return &CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue{CreateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ParentReference)}
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return &CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue{CreateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	fpaov := &CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{CreateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent:
		return &CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{CreateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ParentReference)}
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return &CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{CreateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ProvisioningApprovalRequest)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateProvisioningApprovalRequestRequest_FieldSubPath struct {
	selector CreateProvisioningApprovalRequestRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateProvisioningApprovalRequestRequest_FieldPath = (*CreateProvisioningApprovalRequestRequest_FieldSubPath)(nil)

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) Selector() CreateProvisioningApprovalRequestRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) AsProvisioningApprovalRequestSubPath() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateProvisioningApprovalRequestRequest
func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) Get(source *CreateProvisioningApprovalRequestRequest) (values []interface{}) {
	switch fps.selector {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		values = append(values, fps.subPath.GetRaw(source.GetProvisioningApprovalRequest())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateProvisioningApprovalRequestRequest))
}

// GetSingle returns value of selected field from source CreateProvisioningApprovalRequestRequest
func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) GetSingle(source *CreateProvisioningApprovalRequestRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		if source.GetProvisioningApprovalRequest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningApprovalRequest())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fps.selector))
	}
}

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateProvisioningApprovalRequestRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) ClearValue(item *CreateProvisioningApprovalRequestRequest) {
	if item != nil {
		switch fps.selector {
		case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
			fps.subPath.ClearValueRaw(item.ProvisioningApprovalRequest)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateProvisioningApprovalRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) WithIValue(value interface{}) CreateProvisioningApprovalRequestRequest_FieldPathValue {
	return &CreateProvisioningApprovalRequestRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	return &CreateProvisioningApprovalRequestRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	return &CreateProvisioningApprovalRequestRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateProvisioningApprovalRequestRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateProvisioningApprovalRequestRequest_FieldPathValue allows storing values for CreateProvisioningApprovalRequestRequest fields according to their type
type CreateProvisioningApprovalRequestRequest_FieldPathValue interface {
	CreateProvisioningApprovalRequestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateProvisioningApprovalRequestRequest)
	CompareWith(*CreateProvisioningApprovalRequestRequest) (cmp int, comparable bool)
}

func ParseCreateProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr string) (CreateProvisioningApprovalRequestRequest_FieldPathValue, error) {
	fp, err := ParseCreateProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProvisioningApprovalRequestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateProvisioningApprovalRequestRequest_FieldPathValue), nil
}

func MustParseCreateProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr string) CreateProvisioningApprovalRequestRequest_FieldPathValue {
	fpv, err := ParseCreateProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue struct {
	CreateProvisioningApprovalRequestRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProvisioningApprovalRequestRequest_FieldPathValue = (*CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateProvisioningApprovalRequestRequest' as interface{}
func (fpv *CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsParentValue() (*provisioning_approval_request.ParentReference, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ParentReference)
	return res, ok
}
func (fpv *CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsProvisioningApprovalRequestValue() (*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}

// SetTo stores value for selected field for object CreateProvisioningApprovalRequestRequest
func (fpv *CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue) SetTo(target **CreateProvisioningApprovalRequestRequest) {
	if *target == nil {
		*target = new(CreateProvisioningApprovalRequestRequest)
	}
	switch fpv.selector {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*provisioning_approval_request.ParentReference)
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		(*target).ProvisioningApprovalRequest = fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProvisioningApprovalRequestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue' with the value under path in 'CreateProvisioningApprovalRequestRequest'.
func (fpv *CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue) CompareWith(source *CreateProvisioningApprovalRequestRequest) (int, bool) {
	switch fpv.selector {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*provisioning_approval_request.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProvisioningApprovalRequestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateProvisioningApprovalRequestRequest))
}

type CreateProvisioningApprovalRequestRequest_FieldSubPathValue struct {
	CreateProvisioningApprovalRequestRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateProvisioningApprovalRequestRequest_FieldPathValue = (*CreateProvisioningApprovalRequestRequest_FieldSubPathValue)(nil)

func (fpvs *CreateProvisioningApprovalRequestRequest_FieldSubPathValue) AsProvisioningApprovalRequestPathValue() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue)
	return res, ok
}

func (fpvs *CreateProvisioningApprovalRequestRequest_FieldSubPathValue) SetTo(target **CreateProvisioningApprovalRequestRequest) {
	if *target == nil {
		*target = new(CreateProvisioningApprovalRequestRequest)
	}
	switch fpvs.Selector() {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		fpvs.subPathValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue).SetTo(&(*target).ProvisioningApprovalRequest)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProvisioningApprovalRequestRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProvisioningApprovalRequestRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateProvisioningApprovalRequestRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateProvisioningApprovalRequestRequest_FieldSubPathValue) CompareWith(source *CreateProvisioningApprovalRequestRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return fpvs.subPathValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue).CompareWith(source.GetProvisioningApprovalRequest())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProvisioningApprovalRequestRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateProvisioningApprovalRequestRequest))
}

// CreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateProvisioningApprovalRequestRequest according to their type
// Present only for array (repeated) types.
type CreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateProvisioningApprovalRequestRequest_FieldPath
	ContainsValue(*CreateProvisioningApprovalRequestRequest) bool
}

// ParseCreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProvisioningApprovalRequestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue struct {
	CreateProvisioningApprovalRequestRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProvisioningApprovalRequestRequest_FieldPathArrayItemValue = (*CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateProvisioningApprovalRequestRequest as interface{}
func (fpaiv *CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateProvisioningApprovalRequestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateProvisioningApprovalRequestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProvisioningApprovalRequestRequest'
func (fpaiv *CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateProvisioningApprovalRequestRequest) bool {
	slice := fpaiv.CreateProvisioningApprovalRequestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateProvisioningApprovalRequestRequest_FieldSubPathArrayItemValue struct {
	CreateProvisioningApprovalRequestRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateProvisioningApprovalRequestRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateProvisioningApprovalRequestRequest_FieldSubPathArrayItemValue) AsProvisioningApprovalRequestPathItemValue() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProvisioningApprovalRequestRequest'
func (fpaivs *CreateProvisioningApprovalRequestRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateProvisioningApprovalRequestRequest) bool {
	switch fpaivs.Selector() {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return fpaivs.subPathItemValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue).ContainsValue(source.GetProvisioningApprovalRequest())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningApprovalRequestRequest: %d", fpaivs.Selector()))
	}
}

// CreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues allows storing slice of values for CreateProvisioningApprovalRequestRequest fields according to their type
type CreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateProvisioningApprovalRequestRequest_FieldPath
}

func ParseCreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProvisioningApprovalRequestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues struct {
	CreateProvisioningApprovalRequestRequest_FieldTerminalPath
	values interface{}
}

var _ CreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues = (*CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ParentReference) {
			values = append(values, v)
		}
	case CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*provisioning_approval_request.ParentReference, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ParentReference)
	return res, ok
}
func (fpaov *CreateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsProvisioningApprovalRequestArrayOfValues() ([]*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}

type CreateProvisioningApprovalRequestRequest_FieldSubPathArrayOfValues struct {
	CreateProvisioningApprovalRequestRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateProvisioningApprovalRequestRequest_FieldPathArrayOfValues = (*CreateProvisioningApprovalRequestRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateProvisioningApprovalRequestRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateProvisioningApprovalRequestRequest_FieldSubPathArrayOfValues) AsProvisioningApprovalRequestPathArrayOfValues() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProvisioningApprovalRequestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProvisioningApprovalRequestRequest_FieldPathSelector
	Get(source *UpdateProvisioningApprovalRequestRequest) []interface{}
	GetSingle(source *UpdateProvisioningApprovalRequestRequest) (interface{}, bool)
	ClearValue(item *UpdateProvisioningApprovalRequestRequest)

	// Those methods build corresponding UpdateProvisioningApprovalRequestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProvisioningApprovalRequestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue
}

type UpdateProvisioningApprovalRequestRequest_FieldPathSelector int32

const (
	UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest UpdateProvisioningApprovalRequestRequest_FieldPathSelector = 0
	UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask                  UpdateProvisioningApprovalRequestRequest_FieldPathSelector = 1
	UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas                         UpdateProvisioningApprovalRequestRequest_FieldPathSelector = 2
)

func (s UpdateProvisioningApprovalRequestRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return "provisioning_approval_request"
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", s))
	}
}

func BuildUpdateProvisioningApprovalRequestRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateProvisioningApprovalRequestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProvisioningApprovalRequestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_approval_request", "provisioningApprovalRequest", "provisioning-approval-request":
			return &UpdateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_approval_request", "provisioningApprovalRequest", "provisioning-approval-request":
			if subpath, err := provisioning_approval_request.BuildProvisioningApprovalRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProvisioningApprovalRequestRequest_FieldSubPath{selector: UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateProvisioningApprovalRequestRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProvisioningApprovalRequestRequest_FieldSubPath{selector: UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProvisioningApprovalRequestRequest", fp)
}

func ParseUpdateProvisioningApprovalRequestRequest_FieldPath(rawField string) (UpdateProvisioningApprovalRequestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProvisioningApprovalRequestRequest_FieldPath(fp)
}

func MustParseUpdateProvisioningApprovalRequestRequest_FieldPath(rawField string) UpdateProvisioningApprovalRequestRequest_FieldPath {
	fp, err := ParseUpdateProvisioningApprovalRequestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProvisioningApprovalRequestRequest_FieldTerminalPath struct {
	selector UpdateProvisioningApprovalRequestRequest_FieldPathSelector
}

var _ UpdateProvisioningApprovalRequestRequest_FieldPath = (*UpdateProvisioningApprovalRequestRequest_FieldTerminalPath)(nil)

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) Selector() UpdateProvisioningApprovalRequestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProvisioningApprovalRequestRequest
func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) Get(source *UpdateProvisioningApprovalRequestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
			if source.ProvisioningApprovalRequest != nil {
				values = append(values, source.ProvisioningApprovalRequest)
			}
		case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProvisioningApprovalRequestRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateProvisioningApprovalRequestRequest
func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) GetSingle(source *UpdateProvisioningApprovalRequestRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		res := source.GetProvisioningApprovalRequest()
		return res, res != nil
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProvisioningApprovalRequestRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return (*provisioning_approval_request.ProvisioningApprovalRequest)(nil)
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask:
		return (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)(nil)
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		return (*UpdateProvisioningApprovalRequestRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) ClearValue(item *UpdateProvisioningApprovalRequestRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
			item.ProvisioningApprovalRequest = nil
		case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProvisioningApprovalRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateProvisioningApprovalRequestRequest_FieldPathValue {
	switch fp.selector {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return &UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue{UpdateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest)}
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask:
		return &UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue{UpdateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		return &UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue{UpdateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(*UpdateProvisioningApprovalRequestRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	fpaov := &UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return &UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ProvisioningApprovalRequest)}
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask:
		return &UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		return &UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]*UpdateProvisioningApprovalRequestRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProvisioningApprovalRequestRequest_FieldSubPath struct {
	selector UpdateProvisioningApprovalRequestRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProvisioningApprovalRequestRequest_FieldPath = (*UpdateProvisioningApprovalRequestRequest_FieldSubPath)(nil)

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) Selector() UpdateProvisioningApprovalRequestRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) AsProvisioningApprovalRequestSubPath() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPath)
	return res, ok
}
func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) AsCasSubPath() (UpdateProvisioningApprovalRequestRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateProvisioningApprovalRequestRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProvisioningApprovalRequestRequest
func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) Get(source *UpdateProvisioningApprovalRequestRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		values = append(values, fps.subPath.GetRaw(source.GetProvisioningApprovalRequest())...)
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProvisioningApprovalRequestRequest))
}

// GetSingle returns value of selected field from source UpdateProvisioningApprovalRequestRequest
func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) GetSingle(source *UpdateProvisioningApprovalRequestRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		if source.GetProvisioningApprovalRequest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningApprovalRequest())
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fps.selector))
	}
}

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProvisioningApprovalRequestRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) ClearValue(item *UpdateProvisioningApprovalRequestRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
			fps.subPath.ClearValueRaw(item.ProvisioningApprovalRequest)
		case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProvisioningApprovalRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) WithIValue(value interface{}) UpdateProvisioningApprovalRequestRequest_FieldPathValue {
	return &UpdateProvisioningApprovalRequestRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	return &UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	return &UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProvisioningApprovalRequestRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProvisioningApprovalRequestRequest_FieldPathValue allows storing values for UpdateProvisioningApprovalRequestRequest fields according to their type
type UpdateProvisioningApprovalRequestRequest_FieldPathValue interface {
	UpdateProvisioningApprovalRequestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProvisioningApprovalRequestRequest)
	CompareWith(*UpdateProvisioningApprovalRequestRequest) (cmp int, comparable bool)
}

func ParseUpdateProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr string) (UpdateProvisioningApprovalRequestRequest_FieldPathValue, error) {
	fp, err := ParseUpdateProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProvisioningApprovalRequestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProvisioningApprovalRequestRequest_FieldPathValue), nil
}

func MustParseUpdateProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr string) UpdateProvisioningApprovalRequestRequest_FieldPathValue {
	fpv, err := ParseUpdateProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue struct {
	UpdateProvisioningApprovalRequestRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningApprovalRequestRequest_FieldPathValue = (*UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateProvisioningApprovalRequestRequest' as interface{}
func (fpv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsProvisioningApprovalRequestValue() (*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}
func (fpv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsCasValue() (*UpdateProvisioningApprovalRequestRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateProvisioningApprovalRequestRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateProvisioningApprovalRequestRequest
func (fpv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue) SetTo(target **UpdateProvisioningApprovalRequestRequest) {
	if *target == nil {
		*target = new(UpdateProvisioningApprovalRequestRequest)
	}
	switch fpv.selector {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		(*target).ProvisioningApprovalRequest = fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest)
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateProvisioningApprovalRequestRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningApprovalRequestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue' with the value under path in 'UpdateProvisioningApprovalRequestRequest'.
func (fpv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue) CompareWith(source *UpdateProvisioningApprovalRequestRequest) (int, bool) {
	switch fpv.selector {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return 0, false
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProvisioningApprovalRequestRequest))
}

type UpdateProvisioningApprovalRequestRequest_FieldSubPathValue struct {
	UpdateProvisioningApprovalRequestRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProvisioningApprovalRequestRequest_FieldPathValue = (*UpdateProvisioningApprovalRequestRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateProvisioningApprovalRequestRequest_FieldSubPathValue) AsProvisioningApprovalRequestPathValue() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateProvisioningApprovalRequestRequest_FieldSubPathValue) AsCasPathValue() (UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProvisioningApprovalRequestRequest_FieldSubPathValue) SetTo(target **UpdateProvisioningApprovalRequestRequest) {
	if *target == nil {
		*target = new(UpdateProvisioningApprovalRequestRequest)
	}
	switch fpvs.Selector() {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		fpvs.subPathValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue).SetTo(&(*target).ProvisioningApprovalRequest)
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningApprovalRequestRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningApprovalRequestRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProvisioningApprovalRequestRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProvisioningApprovalRequestRequest_FieldSubPathValue) CompareWith(source *UpdateProvisioningApprovalRequestRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return fpvs.subPathValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue).CompareWith(source.GetProvisioningApprovalRequest())
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningApprovalRequestRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProvisioningApprovalRequestRequest))
}

// UpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateProvisioningApprovalRequestRequest according to their type
// Present only for array (repeated) types.
type UpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProvisioningApprovalRequestRequest_FieldPath
	ContainsValue(*UpdateProvisioningApprovalRequestRequest) bool
}

// ParseUpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProvisioningApprovalRequestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue struct {
	UpdateProvisioningApprovalRequestRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningApprovalRequestRequest_FieldPathArrayItemValue = (*UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProvisioningApprovalRequestRequest as interface{}
func (fpaiv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProvisioningApprovalRequestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProvisioningApprovalRequestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProvisioningApprovalRequestRequest'
func (fpaiv *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProvisioningApprovalRequestRequest) bool {
	slice := fpaiv.UpdateProvisioningApprovalRequestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayItemValue struct {
	UpdateProvisioningApprovalRequestRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayItemValue) AsProvisioningApprovalRequestPathItemValue() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProvisioningApprovalRequestRequest'
func (fpaivs *UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProvisioningApprovalRequestRequest) bool {
	switch fpaivs.Selector() {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		return fpaivs.subPathItemValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue).ContainsValue(source.GetProvisioningApprovalRequest())
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest: %d", fpaivs.Selector()))
	}
}

// UpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues allows storing slice of values for UpdateProvisioningApprovalRequestRequest fields according to their type
type UpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProvisioningApprovalRequestRequest_FieldPath
}

func ParseUpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProvisioningApprovalRequestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues struct {
	UpdateProvisioningApprovalRequestRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues = (*UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest) {
			values = append(values, v)
		}
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask) {
			values = append(values, v)
		}
	case UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateProvisioningApprovalRequestRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsProvisioningApprovalRequestArrayOfValues() ([]*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}
func (fpaov *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}
func (fpaov *UpdateProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateProvisioningApprovalRequestRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateProvisioningApprovalRequestRequest_CAS)
	return res, ok
}

type UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayOfValues struct {
	UpdateProvisioningApprovalRequestRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProvisioningApprovalRequestRequest_FieldPathArrayOfValues = (*UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayOfValues) AsProvisioningApprovalRequestPathArrayOfValues() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateProvisioningApprovalRequestRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProvisioningApprovalRequestRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelector
	Get(source *UpdateProvisioningApprovalRequestRequest_CAS) []interface{}
	GetSingle(source *UpdateProvisioningApprovalRequestRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateProvisioningApprovalRequestRequest_CAS)

	// Those methods build corresponding UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue
}

type UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelector int32

const (
	UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelector = 0
	UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask        UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelector = 1
)

func (s UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", s))
	}
}

func BuildUpdateProvisioningApprovalRequestRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateProvisioningApprovalRequestRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProvisioningApprovalRequestRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath{selector: UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath{selector: UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := provisioning_approval_request.BuildProvisioningApprovalRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath{selector: UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProvisioningApprovalRequestRequest_CAS", fp)
}

func ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPath(rawField string) (UpdateProvisioningApprovalRequestRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProvisioningApprovalRequestRequestCAS_FieldPath(fp)
}

func MustParseUpdateProvisioningApprovalRequestRequestCAS_FieldPath(rawField string) UpdateProvisioningApprovalRequestRequestCAS_FieldPath {
	fp, err := ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath struct {
	selector UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelector
}

var _ UpdateProvisioningApprovalRequestRequestCAS_FieldPath = (*UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) Selector() UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProvisioningApprovalRequestRequest_CAS
func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) Get(source *UpdateProvisioningApprovalRequestRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProvisioningApprovalRequestRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateProvisioningApprovalRequestRequest_CAS
func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) GetSingle(source *UpdateProvisioningApprovalRequestRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProvisioningApprovalRequestRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		return (*provisioning_approval_request.ProvisioningApprovalRequest)(nil)
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask:
		return (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) ClearValue(item *UpdateProvisioningApprovalRequestRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProvisioningApprovalRequestRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue{UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest)}
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue{UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayOfValues{UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayOfValues{UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ProvisioningApprovalRequest)}
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayOfValues{UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath struct {
	selector UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProvisioningApprovalRequestRequestCAS_FieldPath = (*UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath)(nil)

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) Selector() UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) AsConditionalStateSubPath() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProvisioningApprovalRequestRequest_CAS
func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) Get(source *UpdateProvisioningApprovalRequestRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProvisioningApprovalRequestRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateProvisioningApprovalRequestRequest_CAS
func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) GetSingle(source *UpdateProvisioningApprovalRequestRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProvisioningApprovalRequestRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) ClearValue(item *UpdateProvisioningApprovalRequestRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProvisioningApprovalRequestRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue {
	return &UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues {
	return &UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue {
	return &UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue interface {
	UpdateProvisioningApprovalRequestRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProvisioningApprovalRequestRequest_CAS)
	CompareWith(*UpdateProvisioningApprovalRequestRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue), nil
}

func MustParseUpdateProvisioningApprovalRequestRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue struct {
	UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue = (*UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}
func (fpv *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateProvisioningApprovalRequestRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProvisioningApprovalRequestRequest_CAS)
	}
	switch fpv.selector {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest)
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningApprovalRequestRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateProvisioningApprovalRequestRequest_CAS'.
func (fpv *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateProvisioningApprovalRequestRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProvisioningApprovalRequestRequest_CAS))
}

type UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathValue struct {
	UpdateProvisioningApprovalRequestRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProvisioningApprovalRequestRequestCAS_FieldPathValue = (*UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathValue) SetTo(target **UpdateProvisioningApprovalRequestRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProvisioningApprovalRequestRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningApprovalRequestRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathValue) CompareWith(source *UpdateProvisioningApprovalRequestRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProvisioningApprovalRequestRequest_CAS))
}

// UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProvisioningApprovalRequestRequestCAS_FieldPath
	ContainsValue(*UpdateProvisioningApprovalRequestRequest_CAS) bool
}

// ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayItemValue = (*UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProvisioningApprovalRequestRequest_CAS as interface{}
func (fpaiv *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProvisioningApprovalRequestRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProvisioningApprovalRequestRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProvisioningApprovalRequestRequest_CAS) bool {
	slice := fpaiv.UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateProvisioningApprovalRequestRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProvisioningApprovalRequestRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningApprovalRequestRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProvisioningApprovalRequestRequestCAS_FieldPath
}

func ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues = (*UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest) {
			values = append(values, v)
		}
	case UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*provisioning_approval_request.ProvisioningApprovalRequest, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest)
	return res, ok
}
func (fpaov *UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return res, ok
}

type UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateProvisioningApprovalRequestRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProvisioningApprovalRequestRequestCAS_FieldPathArrayOfValues = (*UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProvisioningApprovalRequestRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteProvisioningApprovalRequestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteProvisioningApprovalRequestRequest_FieldPathSelector
	Get(source *DeleteProvisioningApprovalRequestRequest) []interface{}
	GetSingle(source *DeleteProvisioningApprovalRequestRequest) (interface{}, bool)
	ClearValue(item *DeleteProvisioningApprovalRequestRequest)

	// Those methods build corresponding DeleteProvisioningApprovalRequestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteProvisioningApprovalRequestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteProvisioningApprovalRequestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue
}

type DeleteProvisioningApprovalRequestRequest_FieldPathSelector int32

const (
	DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName DeleteProvisioningApprovalRequestRequest_FieldPathSelector = 0
)

func (s DeleteProvisioningApprovalRequestRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningApprovalRequestRequest: %d", s))
	}
}

func BuildDeleteProvisioningApprovalRequestRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteProvisioningApprovalRequestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteProvisioningApprovalRequestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteProvisioningApprovalRequestRequest_FieldTerminalPath{selector: DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteProvisioningApprovalRequestRequest", fp)
}

func ParseDeleteProvisioningApprovalRequestRequest_FieldPath(rawField string) (DeleteProvisioningApprovalRequestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteProvisioningApprovalRequestRequest_FieldPath(fp)
}

func MustParseDeleteProvisioningApprovalRequestRequest_FieldPath(rawField string) DeleteProvisioningApprovalRequestRequest_FieldPath {
	fp, err := ParseDeleteProvisioningApprovalRequestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteProvisioningApprovalRequestRequest_FieldTerminalPath struct {
	selector DeleteProvisioningApprovalRequestRequest_FieldPathSelector
}

var _ DeleteProvisioningApprovalRequestRequest_FieldPath = (*DeleteProvisioningApprovalRequestRequest_FieldTerminalPath)(nil)

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) Selector() DeleteProvisioningApprovalRequestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteProvisioningApprovalRequestRequest
func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) Get(source *DeleteProvisioningApprovalRequestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProvisioningApprovalRequestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteProvisioningApprovalRequestRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteProvisioningApprovalRequestRequest
func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) GetSingle(source *DeleteProvisioningApprovalRequestRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteProvisioningApprovalRequestRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return (*provisioning_approval_request.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) ClearValue(item *DeleteProvisioningApprovalRequestRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProvisioningApprovalRequestRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteProvisioningApprovalRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName
}

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteProvisioningApprovalRequestRequest_FieldPathValue {
	switch fp.selector {
	case DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return &DeleteProvisioningApprovalRequestRequest_FieldTerminalPathValue{DeleteProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, value: value.(*provisioning_approval_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	fpaov := &DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{DeleteProvisioningApprovalRequestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName:
		return &DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues{DeleteProvisioningApprovalRequestRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_approval_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningApprovalRequestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningApprovalRequestRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningApprovalRequestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteProvisioningApprovalRequestRequest_FieldPathValue allows storing values for DeleteProvisioningApprovalRequestRequest fields according to their type
type DeleteProvisioningApprovalRequestRequest_FieldPathValue interface {
	DeleteProvisioningApprovalRequestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteProvisioningApprovalRequestRequest)
	CompareWith(*DeleteProvisioningApprovalRequestRequest) (cmp int, comparable bool)
}

func ParseDeleteProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr string) (DeleteProvisioningApprovalRequestRequest_FieldPathValue, error) {
	fp, err := ParseDeleteProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProvisioningApprovalRequestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteProvisioningApprovalRequestRequest_FieldPathValue), nil
}

func MustParseDeleteProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr string) DeleteProvisioningApprovalRequestRequest_FieldPathValue {
	fpv, err := ParseDeleteProvisioningApprovalRequestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteProvisioningApprovalRequestRequest_FieldTerminalPathValue struct {
	DeleteProvisioningApprovalRequestRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProvisioningApprovalRequestRequest_FieldPathValue = (*DeleteProvisioningApprovalRequestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteProvisioningApprovalRequestRequest' as interface{}
func (fpv *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathValue) AsNameValue() (*provisioning_approval_request.Reference, bool) {
	res, ok := fpv.value.(*provisioning_approval_request.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteProvisioningApprovalRequestRequest
func (fpv *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathValue) SetTo(target **DeleteProvisioningApprovalRequestRequest) {
	if *target == nil {
		*target = new(DeleteProvisioningApprovalRequestRequest)
	}
	switch fpv.selector {
	case DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*provisioning_approval_request.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningApprovalRequestRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteProvisioningApprovalRequestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteProvisioningApprovalRequestRequest_FieldTerminalPathValue' with the value under path in 'DeleteProvisioningApprovalRequestRequest'.
func (fpv *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathValue) CompareWith(source *DeleteProvisioningApprovalRequestRequest) (int, bool) {
	switch fpv.selector {
	case DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*provisioning_approval_request.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningApprovalRequestRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteProvisioningApprovalRequestRequest))
}

// DeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteProvisioningApprovalRequestRequest according to their type
// Present only for array (repeated) types.
type DeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteProvisioningApprovalRequestRequest_FieldPath
	ContainsValue(*DeleteProvisioningApprovalRequestRequest) bool
}

// ParseDeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProvisioningApprovalRequestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue struct {
	DeleteProvisioningApprovalRequestRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProvisioningApprovalRequestRequest_FieldPathArrayItemValue = (*DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteProvisioningApprovalRequestRequest as interface{}
func (fpaiv *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteProvisioningApprovalRequestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteProvisioningApprovalRequestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteProvisioningApprovalRequestRequest'
func (fpaiv *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteProvisioningApprovalRequestRequest) bool {
	slice := fpaiv.DeleteProvisioningApprovalRequestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteProvisioningApprovalRequestRequest_FieldPathArrayOfValues allows storing slice of values for DeleteProvisioningApprovalRequestRequest fields according to their type
type DeleteProvisioningApprovalRequestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteProvisioningApprovalRequestRequest_FieldPath
}

func ParseDeleteProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteProvisioningApprovalRequestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteProvisioningApprovalRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProvisioningApprovalRequestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteProvisioningApprovalRequestRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteProvisioningApprovalRequestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteProvisioningApprovalRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues struct {
	DeleteProvisioningApprovalRequestRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteProvisioningApprovalRequestRequest_FieldPathArrayOfValues = (*DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*provisioning_approval_request.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteProvisioningApprovalRequestRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*provisioning_approval_request.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_approval_request.Reference)
	return res, ok
}
