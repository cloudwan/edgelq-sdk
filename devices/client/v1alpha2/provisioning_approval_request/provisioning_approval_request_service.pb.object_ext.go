// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/provisioning_approval_request_service.proto
// DO NOT EDIT!!!

package provisioning_approval_request_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	provisioning_approval_request "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/provisioning_approval_request"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/provisioning_policy"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &provisioning_approval_request.ProvisioningApprovalRequest{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetProvisioningApprovalRequestRequest) GotenObjectExt() {}

func (o *GetProvisioningApprovalRequestRequest) MakeFullFieldMask() *GetProvisioningApprovalRequestRequest_FieldMask {
	return FullGetProvisioningApprovalRequestRequest_FieldMask()
}

func (o *GetProvisioningApprovalRequestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetProvisioningApprovalRequestRequest_FieldMask()
}

func (o *GetProvisioningApprovalRequestRequest) MakeDiffFieldMask(other *GetProvisioningApprovalRequestRequest) *GetProvisioningApprovalRequestRequest_FieldMask {
	if o == nil && other == nil {
		return &GetProvisioningApprovalRequestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetProvisioningApprovalRequestRequest_FieldMask()
	}

	res := &GetProvisioningApprovalRequestRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetProvisioningApprovalRequestRequest_FieldTerminalPath{selector: GetProvisioningApprovalRequestRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetProvisioningApprovalRequestRequest_FieldTerminalPath{selector: GetProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetProvisioningApprovalRequestRequest_FieldTerminalPath{selector: GetProvisioningApprovalRequestRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetProvisioningApprovalRequestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetProvisioningApprovalRequestRequest))
}

func (o *GetProvisioningApprovalRequestRequest) Clone() *GetProvisioningApprovalRequestRequest {
	if o == nil {
		return nil
	}
	result := &GetProvisioningApprovalRequestRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &provisioning_approval_request.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	result.View = o.View
	return result
}

func (o *GetProvisioningApprovalRequestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetProvisioningApprovalRequestRequest) Merge(source *GetProvisioningApprovalRequestRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &provisioning_approval_request.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetProvisioningApprovalRequestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetProvisioningApprovalRequestRequest))
}

func (o *BatchGetProvisioningApprovalRequestsRequest) GotenObjectExt() {}

func (o *BatchGetProvisioningApprovalRequestsRequest) MakeFullFieldMask() *BatchGetProvisioningApprovalRequestsRequest_FieldMask {
	return FullBatchGetProvisioningApprovalRequestsRequest_FieldMask()
}

func (o *BatchGetProvisioningApprovalRequestsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProvisioningApprovalRequestsRequest_FieldMask()
}

func (o *BatchGetProvisioningApprovalRequestsRequest) MakeDiffFieldMask(other *BatchGetProvisioningApprovalRequestsRequest) *BatchGetProvisioningApprovalRequestsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProvisioningApprovalRequestsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProvisioningApprovalRequestsRequest_FieldMask()
	}

	res := &BatchGetProvisioningApprovalRequestsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetProvisioningApprovalRequestsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProvisioningApprovalRequestsRequest))
}

func (o *BatchGetProvisioningApprovalRequestsRequest) Clone() *BatchGetProvisioningApprovalRequestsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetProvisioningApprovalRequestsRequest{}
	result.Names = make([]*provisioning_approval_request.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &provisioning_approval_request.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetProvisioningApprovalRequestsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProvisioningApprovalRequestsRequest) Merge(source *BatchGetProvisioningApprovalRequestsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *provisioning_approval_request.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &provisioning_approval_request.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetProvisioningApprovalRequestsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProvisioningApprovalRequestsRequest))
}

func (o *BatchGetProvisioningApprovalRequestsResponse) GotenObjectExt() {}

func (o *BatchGetProvisioningApprovalRequestsResponse) MakeFullFieldMask() *BatchGetProvisioningApprovalRequestsResponse_FieldMask {
	return FullBatchGetProvisioningApprovalRequestsResponse_FieldMask()
}

func (o *BatchGetProvisioningApprovalRequestsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProvisioningApprovalRequestsResponse_FieldMask()
}

func (o *BatchGetProvisioningApprovalRequestsResponse) MakeDiffFieldMask(other *BatchGetProvisioningApprovalRequestsResponse) *BatchGetProvisioningApprovalRequestsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProvisioningApprovalRequestsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProvisioningApprovalRequestsResponse_FieldMask()
	}

	res := &BatchGetProvisioningApprovalRequestsResponse_FieldMask{}

	if len(o.GetProvisioningApprovalRequests()) == len(other.GetProvisioningApprovalRequests()) {
		for i, lValue := range o.GetProvisioningApprovalRequests() {
			rValue := other.GetProvisioningApprovalRequests()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: BatchGetProvisioningApprovalRequestsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetProvisioningApprovalRequestsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProvisioningApprovalRequestsResponse))
}

func (o *BatchGetProvisioningApprovalRequestsResponse) Clone() *BatchGetProvisioningApprovalRequestsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetProvisioningApprovalRequestsResponse{}
	result.ProvisioningApprovalRequests = make([]*provisioning_approval_request.ProvisioningApprovalRequest, len(o.ProvisioningApprovalRequests))
	for i, sourceValue := range o.ProvisioningApprovalRequests {
		result.ProvisioningApprovalRequests[i] = sourceValue.Clone()
	}
	result.Missing = make([]*provisioning_approval_request.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &provisioning_approval_request.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetProvisioningApprovalRequestsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProvisioningApprovalRequestsResponse) Merge(source *BatchGetProvisioningApprovalRequestsResponse) {
	for _, sourceValue := range source.GetProvisioningApprovalRequests() {
		exists := false
		for _, currentValue := range o.ProvisioningApprovalRequests {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *provisioning_approval_request.ProvisioningApprovalRequest
			if sourceValue != nil {
				newDstElement = new(provisioning_approval_request.ProvisioningApprovalRequest)
				newDstElement.Merge(sourceValue)
			}
			o.ProvisioningApprovalRequests = append(o.ProvisioningApprovalRequests, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *provisioning_approval_request.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &provisioning_approval_request.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetProvisioningApprovalRequestsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProvisioningApprovalRequestsResponse))
}

func (o *ListProvisioningApprovalRequestsRequest) GotenObjectExt() {}

func (o *ListProvisioningApprovalRequestsRequest) MakeFullFieldMask() *ListProvisioningApprovalRequestsRequest_FieldMask {
	return FullListProvisioningApprovalRequestsRequest_FieldMask()
}

func (o *ListProvisioningApprovalRequestsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProvisioningApprovalRequestsRequest_FieldMask()
}

func (o *ListProvisioningApprovalRequestsRequest) MakeDiffFieldMask(other *ListProvisioningApprovalRequestsRequest) *ListProvisioningApprovalRequestsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListProvisioningApprovalRequestsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProvisioningApprovalRequestsRequest_FieldMask()
	}

	res := &ListProvisioningApprovalRequestsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: ListProvisioningApprovalRequestsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListProvisioningApprovalRequestsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProvisioningApprovalRequestsRequest))
}

func (o *ListProvisioningApprovalRequestsRequest) Clone() *ListProvisioningApprovalRequestsRequest {
	if o == nil {
		return nil
	}
	result := &ListProvisioningApprovalRequestsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &provisioning_approval_request.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &provisioning_approval_request.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &provisioning_approval_request.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &provisioning_approval_request.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListProvisioningApprovalRequestsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProvisioningApprovalRequestsRequest) Merge(source *ListProvisioningApprovalRequestsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &provisioning_approval_request.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &provisioning_approval_request.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &provisioning_approval_request.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &provisioning_approval_request.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListProvisioningApprovalRequestsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProvisioningApprovalRequestsRequest))
}

func (o *ListProvisioningApprovalRequestsResponse) GotenObjectExt() {}

func (o *ListProvisioningApprovalRequestsResponse) MakeFullFieldMask() *ListProvisioningApprovalRequestsResponse_FieldMask {
	return FullListProvisioningApprovalRequestsResponse_FieldMask()
}

func (o *ListProvisioningApprovalRequestsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProvisioningApprovalRequestsResponse_FieldMask()
}

func (o *ListProvisioningApprovalRequestsResponse) MakeDiffFieldMask(other *ListProvisioningApprovalRequestsResponse) *ListProvisioningApprovalRequestsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListProvisioningApprovalRequestsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProvisioningApprovalRequestsResponse_FieldMask()
	}

	res := &ListProvisioningApprovalRequestsResponse_FieldMask{}

	if len(o.GetProvisioningApprovalRequests()) == len(other.GetProvisioningApprovalRequests()) {
		for i, lValue := range o.GetProvisioningApprovalRequests() {
			rValue := other.GetProvisioningApprovalRequests()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequests})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: ListProvisioningApprovalRequestsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListProvisioningApprovalRequestsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProvisioningApprovalRequestsResponse))
}

func (o *ListProvisioningApprovalRequestsResponse) Clone() *ListProvisioningApprovalRequestsResponse {
	if o == nil {
		return nil
	}
	result := &ListProvisioningApprovalRequestsResponse{}
	result.ProvisioningApprovalRequests = make([]*provisioning_approval_request.ProvisioningApprovalRequest, len(o.ProvisioningApprovalRequests))
	for i, sourceValue := range o.ProvisioningApprovalRequests {
		result.ProvisioningApprovalRequests[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &provisioning_approval_request.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &provisioning_approval_request.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListProvisioningApprovalRequestsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProvisioningApprovalRequestsResponse) Merge(source *ListProvisioningApprovalRequestsResponse) {
	for _, sourceValue := range source.GetProvisioningApprovalRequests() {
		exists := false
		for _, currentValue := range o.ProvisioningApprovalRequests {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *provisioning_approval_request.ProvisioningApprovalRequest
			if sourceValue != nil {
				newDstElement = new(provisioning_approval_request.ProvisioningApprovalRequest)
				newDstElement.Merge(sourceValue)
			}
			o.ProvisioningApprovalRequests = append(o.ProvisioningApprovalRequests, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &provisioning_approval_request.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &provisioning_approval_request.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListProvisioningApprovalRequestsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProvisioningApprovalRequestsResponse))
}

func (o *WatchProvisioningApprovalRequestRequest) GotenObjectExt() {}

func (o *WatchProvisioningApprovalRequestRequest) MakeFullFieldMask() *WatchProvisioningApprovalRequestRequest_FieldMask {
	return FullWatchProvisioningApprovalRequestRequest_FieldMask()
}

func (o *WatchProvisioningApprovalRequestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProvisioningApprovalRequestRequest_FieldMask()
}

func (o *WatchProvisioningApprovalRequestRequest) MakeDiffFieldMask(other *WatchProvisioningApprovalRequestRequest) *WatchProvisioningApprovalRequestRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProvisioningApprovalRequestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProvisioningApprovalRequestRequest_FieldMask()
	}

	res := &WatchProvisioningApprovalRequestRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchProvisioningApprovalRequestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProvisioningApprovalRequestRequest))
}

func (o *WatchProvisioningApprovalRequestRequest) Clone() *WatchProvisioningApprovalRequestRequest {
	if o == nil {
		return nil
	}
	result := &WatchProvisioningApprovalRequestRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &provisioning_approval_request.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchProvisioningApprovalRequestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProvisioningApprovalRequestRequest) Merge(source *WatchProvisioningApprovalRequestRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &provisioning_approval_request.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchProvisioningApprovalRequestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProvisioningApprovalRequestRequest))
}

func (o *WatchProvisioningApprovalRequestResponse) GotenObjectExt() {}

func (o *WatchProvisioningApprovalRequestResponse) MakeFullFieldMask() *WatchProvisioningApprovalRequestResponse_FieldMask {
	return FullWatchProvisioningApprovalRequestResponse_FieldMask()
}

func (o *WatchProvisioningApprovalRequestResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProvisioningApprovalRequestResponse_FieldMask()
}

func (o *WatchProvisioningApprovalRequestResponse) MakeDiffFieldMask(other *WatchProvisioningApprovalRequestResponse) *WatchProvisioningApprovalRequestResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProvisioningApprovalRequestResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProvisioningApprovalRequestResponse_FieldMask()
	}

	res := &WatchProvisioningApprovalRequestResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchProvisioningApprovalRequestResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProvisioningApprovalRequestResponse))
}

func (o *WatchProvisioningApprovalRequestResponse) Clone() *WatchProvisioningApprovalRequestResponse {
	if o == nil {
		return nil
	}
	result := &WatchProvisioningApprovalRequestResponse{}
	result.Change = proto.Clone(o.Change).(*provisioning_approval_request.ProvisioningApprovalRequestChange)
	return result
}

func (o *WatchProvisioningApprovalRequestResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProvisioningApprovalRequestResponse) Merge(source *WatchProvisioningApprovalRequestResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(provisioning_approval_request.ProvisioningApprovalRequestChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchProvisioningApprovalRequestResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProvisioningApprovalRequestResponse))
}

func (o *WatchProvisioningApprovalRequestsRequest) GotenObjectExt() {}

func (o *WatchProvisioningApprovalRequestsRequest) MakeFullFieldMask() *WatchProvisioningApprovalRequestsRequest_FieldMask {
	return FullWatchProvisioningApprovalRequestsRequest_FieldMask()
}

func (o *WatchProvisioningApprovalRequestsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProvisioningApprovalRequestsRequest_FieldMask()
}

func (o *WatchProvisioningApprovalRequestsRequest) MakeDiffFieldMask(other *WatchProvisioningApprovalRequestsRequest) *WatchProvisioningApprovalRequestsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProvisioningApprovalRequestsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProvisioningApprovalRequestsRequest_FieldMask()
	}

	res := &WatchProvisioningApprovalRequestsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsRequest_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchProvisioningApprovalRequestsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProvisioningApprovalRequestsRequest))
}

func (o *WatchProvisioningApprovalRequestsRequest) Clone() *WatchProvisioningApprovalRequestsRequest {
	if o == nil {
		return nil
	}
	result := &WatchProvisioningApprovalRequestsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &provisioning_approval_request.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &provisioning_approval_request.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &provisioning_approval_request.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &provisioning_approval_request.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchProvisioningApprovalRequestsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProvisioningApprovalRequestsRequest) Merge(source *WatchProvisioningApprovalRequestsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &provisioning_approval_request.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &provisioning_approval_request.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &provisioning_approval_request.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &provisioning_approval_request.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchProvisioningApprovalRequestsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProvisioningApprovalRequestsRequest))
}

func (o *WatchProvisioningApprovalRequestsResponse) GotenObjectExt() {}

func (o *WatchProvisioningApprovalRequestsResponse) MakeFullFieldMask() *WatchProvisioningApprovalRequestsResponse_FieldMask {
	return FullWatchProvisioningApprovalRequestsResponse_FieldMask()
}

func (o *WatchProvisioningApprovalRequestsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProvisioningApprovalRequestsResponse_FieldMask()
}

func (o *WatchProvisioningApprovalRequestsResponse) MakeDiffFieldMask(other *WatchProvisioningApprovalRequestsResponse) *WatchProvisioningApprovalRequestsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProvisioningApprovalRequestsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProvisioningApprovalRequestsResponse_FieldMask()
	}

	res := &WatchProvisioningApprovalRequestsResponse_FieldMask{}

	if len(o.GetProvisioningApprovalRequestChanges()) == len(other.GetProvisioningApprovalRequestChanges()) {
		for i, lValue := range o.GetProvisioningApprovalRequestChanges() {
			rValue := other.GetProvisioningApprovalRequestChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorProvisioningApprovalRequestChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsResponse_FieldSubPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsResponse_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchProvisioningApprovalRequestsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProvisioningApprovalRequestsResponse))
}

func (o *WatchProvisioningApprovalRequestsResponse) Clone() *WatchProvisioningApprovalRequestsResponse {
	if o == nil {
		return nil
	}
	result := &WatchProvisioningApprovalRequestsResponse{}
	result.ProvisioningApprovalRequestChanges = make([]*provisioning_approval_request.ProvisioningApprovalRequestChange, len(o.ProvisioningApprovalRequestChanges))
	for i, sourceValue := range o.ProvisioningApprovalRequestChanges {
		result.ProvisioningApprovalRequestChanges[i] = proto.Clone(sourceValue).(*provisioning_approval_request.ProvisioningApprovalRequestChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchProvisioningApprovalRequestsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProvisioningApprovalRequestsResponse) Merge(source *WatchProvisioningApprovalRequestsResponse) {
	for _, sourceValue := range source.GetProvisioningApprovalRequestChanges() {
		exists := false
		for _, currentValue := range o.ProvisioningApprovalRequestChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *provisioning_approval_request.ProvisioningApprovalRequestChange
			if sourceValue != nil {
				newDstElement = new(provisioning_approval_request.ProvisioningApprovalRequestChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ProvisioningApprovalRequestChanges = append(o.ProvisioningApprovalRequestChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchProvisioningApprovalRequestsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchProvisioningApprovalRequestsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProvisioningApprovalRequestsResponse))
}

func (o *WatchProvisioningApprovalRequestsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchProvisioningApprovalRequestsResponse_PageTokenChange) MakeFullFieldMask() *WatchProvisioningApprovalRequestsResponse_PageTokenChange_FieldMask {
	return FullWatchProvisioningApprovalRequestsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProvisioningApprovalRequestsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProvisioningApprovalRequestsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProvisioningApprovalRequestsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchProvisioningApprovalRequestsResponse_PageTokenChange) *WatchProvisioningApprovalRequestsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchProvisioningApprovalRequestsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProvisioningApprovalRequestsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchProvisioningApprovalRequestsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldTerminalPath{selector: WatchProvisioningApprovalRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchProvisioningApprovalRequestsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProvisioningApprovalRequestsResponse_PageTokenChange))
}

func (o *WatchProvisioningApprovalRequestsResponse_PageTokenChange) Clone() *WatchProvisioningApprovalRequestsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchProvisioningApprovalRequestsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &provisioning_approval_request.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &provisioning_approval_request.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchProvisioningApprovalRequestsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProvisioningApprovalRequestsResponse_PageTokenChange) Merge(source *WatchProvisioningApprovalRequestsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &provisioning_approval_request.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &provisioning_approval_request.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchProvisioningApprovalRequestsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProvisioningApprovalRequestsResponse_PageTokenChange))
}

func (o *CreateProvisioningApprovalRequestRequest) GotenObjectExt() {}

func (o *CreateProvisioningApprovalRequestRequest) MakeFullFieldMask() *CreateProvisioningApprovalRequestRequest_FieldMask {
	return FullCreateProvisioningApprovalRequestRequest_FieldMask()
}

func (o *CreateProvisioningApprovalRequestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateProvisioningApprovalRequestRequest_FieldMask()
}

func (o *CreateProvisioningApprovalRequestRequest) MakeDiffFieldMask(other *CreateProvisioningApprovalRequestRequest) *CreateProvisioningApprovalRequestRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateProvisioningApprovalRequestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateProvisioningApprovalRequestRequest_FieldMask()
	}

	res := &CreateProvisioningApprovalRequestRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: CreateProvisioningApprovalRequestRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetProvisioningApprovalRequest().MakeDiffFieldMask(other.GetProvisioningApprovalRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateProvisioningApprovalRequestRequest_FieldSubPath{selector: CreateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateProvisioningApprovalRequestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateProvisioningApprovalRequestRequest))
}

func (o *CreateProvisioningApprovalRequestRequest) Clone() *CreateProvisioningApprovalRequestRequest {
	if o == nil {
		return nil
	}
	result := &CreateProvisioningApprovalRequestRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &provisioning_approval_request.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ProvisioningApprovalRequest = o.ProvisioningApprovalRequest.Clone()
	return result
}

func (o *CreateProvisioningApprovalRequestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateProvisioningApprovalRequestRequest) Merge(source *CreateProvisioningApprovalRequestRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &provisioning_approval_request.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetProvisioningApprovalRequest() != nil {
		if o.ProvisioningApprovalRequest == nil {
			o.ProvisioningApprovalRequest = new(provisioning_approval_request.ProvisioningApprovalRequest)
		}
		o.ProvisioningApprovalRequest.Merge(source.GetProvisioningApprovalRequest())
	}
}

func (o *CreateProvisioningApprovalRequestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateProvisioningApprovalRequestRequest))
}

func (o *UpdateProvisioningApprovalRequestRequest) GotenObjectExt() {}

func (o *UpdateProvisioningApprovalRequestRequest) MakeFullFieldMask() *UpdateProvisioningApprovalRequestRequest_FieldMask {
	return FullUpdateProvisioningApprovalRequestRequest_FieldMask()
}

func (o *UpdateProvisioningApprovalRequestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProvisioningApprovalRequestRequest_FieldMask()
}

func (o *UpdateProvisioningApprovalRequestRequest) MakeDiffFieldMask(other *UpdateProvisioningApprovalRequestRequest) *UpdateProvisioningApprovalRequestRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateProvisioningApprovalRequestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProvisioningApprovalRequestRequest_FieldMask()
	}

	res := &UpdateProvisioningApprovalRequestRequest_FieldMask{}
	{
		subMask := o.GetProvisioningApprovalRequest().MakeDiffFieldMask(other.GetProvisioningApprovalRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProvisioningApprovalRequestRequest_FieldSubPath{selector: UpdateProvisioningApprovalRequestRequest_FieldPathSelectorProvisioningApprovalRequest, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: UpdateProvisioningApprovalRequestRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProvisioningApprovalRequestRequest_FieldTerminalPath{selector: UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProvisioningApprovalRequestRequest_FieldSubPath{selector: UpdateProvisioningApprovalRequestRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateProvisioningApprovalRequestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProvisioningApprovalRequestRequest))
}

func (o *UpdateProvisioningApprovalRequestRequest) Clone() *UpdateProvisioningApprovalRequestRequest {
	if o == nil {
		return nil
	}
	result := &UpdateProvisioningApprovalRequestRequest{}
	result.ProvisioningApprovalRequest = o.ProvisioningApprovalRequest.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateProvisioningApprovalRequestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProvisioningApprovalRequestRequest) Merge(source *UpdateProvisioningApprovalRequestRequest) {
	if source.GetProvisioningApprovalRequest() != nil {
		if o.ProvisioningApprovalRequest == nil {
			o.ProvisioningApprovalRequest = new(provisioning_approval_request.ProvisioningApprovalRequest)
		}
		o.ProvisioningApprovalRequest.Merge(source.GetProvisioningApprovalRequest())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateProvisioningApprovalRequestRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateProvisioningApprovalRequestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProvisioningApprovalRequestRequest))
}

func (o *UpdateProvisioningApprovalRequestRequest_CAS) GotenObjectExt() {}

func (o *UpdateProvisioningApprovalRequestRequest_CAS) MakeFullFieldMask() *UpdateProvisioningApprovalRequestRequest_CAS_FieldMask {
	return FullUpdateProvisioningApprovalRequestRequest_CAS_FieldMask()
}

func (o *UpdateProvisioningApprovalRequestRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProvisioningApprovalRequestRequest_CAS_FieldMask()
}

func (o *UpdateProvisioningApprovalRequestRequest_CAS) MakeDiffFieldMask(other *UpdateProvisioningApprovalRequestRequest_CAS) *UpdateProvisioningApprovalRequestRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateProvisioningApprovalRequestRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProvisioningApprovalRequestRequest_CAS_FieldMask()
	}

	res := &UpdateProvisioningApprovalRequestRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath{selector: UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProvisioningApprovalRequestRequestCAS_FieldSubPath{selector: UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateProvisioningApprovalRequestRequestCAS_FieldTerminalPath{selector: UpdateProvisioningApprovalRequestRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateProvisioningApprovalRequestRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProvisioningApprovalRequestRequest_CAS))
}

func (o *UpdateProvisioningApprovalRequestRequest_CAS) Clone() *UpdateProvisioningApprovalRequestRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateProvisioningApprovalRequestRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
	return result
}

func (o *UpdateProvisioningApprovalRequestRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProvisioningApprovalRequestRequest_CAS) Merge(source *UpdateProvisioningApprovalRequestRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(provisioning_approval_request.ProvisioningApprovalRequest)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_approval_request.ProvisioningApprovalRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateProvisioningApprovalRequestRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProvisioningApprovalRequestRequest_CAS))
}

func (o *DeleteProvisioningApprovalRequestRequest) GotenObjectExt() {}

func (o *DeleteProvisioningApprovalRequestRequest) MakeFullFieldMask() *DeleteProvisioningApprovalRequestRequest_FieldMask {
	return FullDeleteProvisioningApprovalRequestRequest_FieldMask()
}

func (o *DeleteProvisioningApprovalRequestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteProvisioningApprovalRequestRequest_FieldMask()
}

func (o *DeleteProvisioningApprovalRequestRequest) MakeDiffFieldMask(other *DeleteProvisioningApprovalRequestRequest) *DeleteProvisioningApprovalRequestRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteProvisioningApprovalRequestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteProvisioningApprovalRequestRequest_FieldMask()
	}

	res := &DeleteProvisioningApprovalRequestRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteProvisioningApprovalRequestRequest_FieldTerminalPath{selector: DeleteProvisioningApprovalRequestRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteProvisioningApprovalRequestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteProvisioningApprovalRequestRequest))
}

func (o *DeleteProvisioningApprovalRequestRequest) Clone() *DeleteProvisioningApprovalRequestRequest {
	if o == nil {
		return nil
	}
	result := &DeleteProvisioningApprovalRequestRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &provisioning_approval_request.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteProvisioningApprovalRequestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteProvisioningApprovalRequestRequest) Merge(source *DeleteProvisioningApprovalRequestRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &provisioning_approval_request.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteProvisioningApprovalRequestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteProvisioningApprovalRequestRequest))
}
