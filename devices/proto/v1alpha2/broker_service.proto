syntax = "proto3";

package ntt.devices.v1alpha2;

import "edgelq-sdk/devices/proto/v1alpha2/broker_custom.proto";
import "edgelq-sdk/devices/proto/v1alpha2/device.proto";
import "edgelq-sdk/devices/proto/v1alpha2/device_change.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "goten-sdk/types/view.proto";
import "goten-sdk/types/watch_type.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/devices/client/v1alpha2/broker;broker_client";
option java_multiple_files = false;
option java_outer_classname = "BrokerServiceProto";
option java_package = "com.ntt.devices.pb.v1alpha2";

// Broker service API for Devices
service BrokerService {
  option (google.api.default_host) = "devices.edgelq.com";
  option (google.api.oauth_scopes) = "https://apis.edgelq.com";

  // ListenForConnections
  rpc ListenForConnections ( stream ListenForConnectionsRequest ) returns ( stream ListenForConnectionsResponse ) {
    option (google.api.http) = { post:"/v1alpha2/{register_listener.device=projects/*/regions/*/devices/*}:listenForConnections"  };
  }

  // OpenConnectionChannelSocket
  rpc OpenConnectionChannelSocket ( stream OpenConnectionChannelSocketRequest ) returns ( stream OpenConnectionChannelSocketResponse ) {
    option (google.api.http) = { post:"/v1alpha2/{register_socket.device=projects/*/regions/*/devices/*}:openConnectionChannelSocket"  };
  }

  // ConnectToDevice
  rpc ConnectToDevice ( stream ConnectToDeviceRequest ) returns ( stream ConnectToDeviceResponse ) {
    option (google.api.http) = { post:"/v1alpha2/{open_request.device=projects/*/regions/*/devices/*}:connectToDevice"  };
  }
}
