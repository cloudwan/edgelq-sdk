syntax = "proto3";

package ntt.devices.v1;

import "edgelq-sdk/iam/proto/v1/common.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/type/latlng.proto";
import "goten-sdk/types/meta.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device;device";
option java_multiple_files = true;
option java_outer_classname = "DeviceProto";
option java_package = "com.ntt.devices.pb.v1";

// Device Resource
message Device {
  option (google.api.resource) = {
    type : "devices.edgelq.com/Device"
    pattern : "projects/{project}/regions/{region}/devices/{device}"
  };

  // Name of Device
  // When creating a new instance, this field is optional and if not provided,
  // it will be generated automatically. Last ID segment must conform to the
  // following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
  string name = 1;

  // Metadata is an object with information like create, update and delete time
  // (for async deleted resources), has user labels/annotations, sharding
  // information, multi-region syncing information and may have non-schema
  // owners (useful for taking ownership of resources belonging to lower level
  // services by higher ones).
  goten.types.Meta metadata = 2;

  // Spec holds the expected state of the Device, meaning configurations.
  Spec spec = 3;

  // Status of the Device reported from the actual device.
  Status status = 4;

  PublicListingSpec public_listing_spec = 5;

  // Display name for the device
  string display_name = 6;

  message Spec {
    // The associated service account to the Device.
    // The agents in the device uses a key from this service account
    // when they issue any requests to our endpoints for authoroization and
    // authentication. `ProvisionServiceAccountToDevice` creates a new service
    // account and a key for the Device and asign the account to this fileld. If
    // you change the value of this field, the existing device would lose the
    // access to the resources in our services, that means you can revoke the
    // permissions from the device. You can manually set an empty value to do
    // so, or call `RemoveServiceAccountFromDevice`.
    string service_account = 1;

    // Logging bucket associated with device
    string log_bucket = 14;

    // Monitoring metrics bucket associated with device
    string metrics_bucket = 15;

    // The expected OS version in string (e.g. 1.0.2).
    // The device will automatically download the OS image and upgrade itself
    // with it. You can stack the OS upgrade progress in the Condition named
    // `OSReady` in Status.Conditions.
    string os_version = 2;

    NetplanConfig netplan_config = 11;

    NetworkConfigMode netplan_api_config_mode = 12;

    // The URL is dynamically constructed once the device is created or updated.
    // The URL will be based on the device hardware information
    // URL format: base_url/dedicated_path/iso_version/architecture/os_type
    string os_image_url = 5;

    SSHConfig ssh_config = 6;

    AttestationConfig attestation_config = 7;

    // Disables the daemon on the device for device auto discovery on the
    // network. When it's enabled, avahi-daemon is launched on the device which
    // listens at UDP 5353. This daemon is useful to locate the device that
    // acquires an IP address with DHCP.
    bool disable_device_discovery = 8;

    LoggingConfig logging_config = 9;

    ProxyConfig proxy_config = 10;

    Location location = 13;

    USBGuard usb_guard = 16;

    message NetworkingConfig {
      int32 version = 1;

      string renderer = 9;

      map<string, EthOpts> ethernets = 10;

      map<string, WifiOpts> wifis = 11;

      map<string, BridgesOpts> bridges = 12;

      map<string, BondsOpts> bonds = 13;

      map<string, TunnelsOpts> tunnels = 14;

      map<string, VlansOpts> vlans = 15;

      map<string, ModemOpts> modems = 16;

      message CommonOpts {
        message DHCPOverrides {
          bool use_dns = 1 [ json_name = "use-dns" ];

          bool use_ntp = 2 [ json_name = "use-ntp" ];

          bool send_hostname = 3 [ json_name = "send-hostname" ];

          bool use_hostname = 4 [ json_name = "use-hostname" ];

          bool use_mtu = 5 [ json_name = "use-mtu" ];

          string hostname = 6;

          bool use_routes = 7 [ json_name = "use-routes" ];

          int32 route_metric = 9 [ json_name = "route-metric" ];

          reserved 8;
        }

        message Nameservers {
          repeated string search = 1;

          repeated string addresses = 2;
        }

        message Routes {
          string from = 1;

          string to = 2;

          string via = 3;

          bool on_link = 4 [ json_name = "on-link" ];

          int32 metric = 5;

          string type = 6;

          string scope = 7;

          int32 table = 8;
        }

        message RoutingPolicy {
          string from = 1;

          string to = 2;

          int32 table = 3;

          int32 priority = 4;

          int32 mark = 5;

          int32 type_of_service = 6 [ json_name = "type-of-service" ];
        }

        message Auth {
          string key_management = 1 [ json_name = "key-management" ];

          string password = 2;

          string method = 3;

          string identity = 4;

          string anonymous_identity = 5 [ json_name = "anonymous-identity" ];

          string ca_certificate = 6 [ json_name = "ca-certificate" ];

          string client_certificate = 7 [ json_name = "client-certificate" ];

          string client_key = 8 [ json_name = "client-key" ];

          string client_key_password = 9 [ json_name = "client-key-password" ];

          string phase2_auth = 10 [ json_name = "phase2-auth" ];
        }
      }

      message EthOpts {
        Match match = 1;

        string set_name = 2 [ json_name = "set-name" ];

        bool wakeonlan = 3;

        string renderer = 6;

        bool dhcp4 = 7;

        bool dhcp6 = 8;

        bool ipv6_privacy = 9 [ json_name = "ipv6-privacy" ];

        repeated string link_local = 10 [ json_name = "link-local" ];

        bool critical = 11;

        string dhcp_identifier = 12 [ json_name = "dhcp-identifier" ];

        CommonOpts.DHCPOverrides dhcp4_overrides = 13
            [ json_name = "dhcp4-overrides" ];

        CommonOpts.DHCPOverrides dhcp6_overrides = 14
            [ json_name = "dhcp6-overrides" ];

        bool accept_ra = 15;

        repeated string addresses = 16;

        CommonOpts.Nameservers nameservers = 17;

        string macaddress = 18;

        int32 mtu = 19;

        bool optional = 20;

        repeated string optional_addresses = 21
            [ json_name = "optional-addresses" ];

        repeated CommonOpts.Routes routes = 22;

        CommonOpts.RoutingPolicy routing_policy = 23
            [ json_name = "routing-policy" ];

        CommonOpts.Auth auth = 24;

        // Deprecated
        string gateway4 = 25;

        // Deprecated
        string gateway6 = 26;

        message Match {
          string name = 1;

          string macaddress = 2;

          string driver = 3;
        }

        reserved 4, 5;
      }

      message WifiOpts {
        Match match = 1;

        string set_name = 2 [ json_name = "set-name" ];

        bool wakeonlan = 3;

        map<string, AccessPoint> access_points = 5
            [ json_name = "access-points" ];

        // This enables WakeOnWLan on supported devices. Not all drivers support
        // all options. May be any combination of any, disconnect, magic_pkt,
        // gtk_rekey_failure, eap_identity_req, four_way_handshake,
        // rfkill_release or tcp (NetworkManager only). Or the exclusive default
        // flag (the default).
        repeated string wakeonwlan = 28;

        // This can be used to define the radio’s regulatory domain, to make use
        // of additional WiFi channels outside the “world domain”. Takes an ISO
        // / IEC 3166 country code (like GB) or 00 to reset to the “world
        // domain”
        string regulatory_domain = 29 [ json_name = "regulatory-domain" ];

        string renderer = 7;

        bool dhcp4 = 8;

        bool dhcp6 = 9;

        bool ipv6_privacy = 10 [ json_name = "ipv6-privacy" ];

        repeated string link_local = 11 [ json_name = "link-local" ];

        bool critical = 12;

        string dhcp_identifier = 13 [ json_name = "dhcp-identifier" ];

        CommonOpts.DHCPOverrides dhcp4_overrides = 14
            [ json_name = "dhcp4-overrides" ];

        CommonOpts.DHCPOverrides dhcp6_overrides = 15
            [ json_name = "dhcp6-overrides" ];

        bool accept_ra = 16;

        repeated string addresses = 17;

        CommonOpts.Nameservers nameservers = 18;

        string macaddress = 19;

        int32 mtu = 20;

        bool optional = 21;

        repeated string optional_addresses = 22
            [ json_name = "optional-addresses" ];

        repeated CommonOpts.Routes routes = 23;

        CommonOpts.RoutingPolicy routing_policy = 24
            [ json_name = "routing-policy" ];

        CommonOpts.Auth auth = 25;

        // Deprecated
        string gateway4 = 26;

        // Deprecated
        string gateway6 = 27;

        message Match {
          string name = 1;

          string macaddress = 2;

          string driver = 3;
        }

        message AccessPoint {
          // Setting password here is equivalent to using auth with
          // key-management: psk
          string password = 2;

          string mode = 3;

          string bssid = 4;

          string band = 5;

          string channel = 6;

          string hidden = 7;

          CommonOpts.Auth auth = 8;

          reserved 1;
        }

        reserved 4, 6;
      }

      message BridgesOpts {
        repeated string interfaces = 2;

        Parameters parameters = 3;

        string renderer = 5;

        bool dhcp4 = 6;

        bool dhcp6 = 7;

        bool ipv6_privacy = 8 [ json_name = "ipv6-privacy" ];

        repeated string link_local = 9 [ json_name = "link-local" ];

        bool critical = 10;

        string dhcp_identifier = 11 [ json_name = "dhcp-identifier" ];

        CommonOpts.DHCPOverrides dhcp4_overrides = 12
            [ json_name = "dhcp4-overrides" ];

        CommonOpts.DHCPOverrides dhcp6_overrides = 13
            [ json_name = "dhcp6-overrides" ];

        bool accept_ra = 14;

        repeated string addresses = 15;

        CommonOpts.Nameservers nameservers = 16;

        string macaddress = 17;

        int32 mtu = 18;

        bool optional = 19;

        repeated string optional_addresses = 20
            [ json_name = "optional-addresses" ];

        repeated CommonOpts.Routes routes = 21;

        CommonOpts.RoutingPolicy routing_policy = 22
            [ json_name = "routing-policy" ];

        CommonOpts.Auth auth = 23;

        // Deprecated
        string gateway4 = 24;

        // Deprecated
        string gateway6 = 25;

        message Parameters {
          int32 ageing_time = 1 [ json_name = "ageing-time" ];

          int32 priority = 2;

          int32 port_priority = 3 [ json_name = "port-priority" ];

          int32 forward_delay = 4 [ json_name = "forward-delay" ];

          int32 hello_time = 5 [ json_name = "hello-time" ];

          int32 max_age = 6 [ json_name = "max-age" ];

          int32 path_cost = 7 [ json_name = "path-cost" ];

          bool stp = 8;
        }

        reserved 1, 4;
      }

      message BondsOpts {
        repeated string interfaces = 2;

        Parameters parameters = 3;

        string renderer = 5;

        bool dhcp4 = 6;

        bool dhcp6 = 7;

        bool ipv6_privacy = 8 [ json_name = "ipv6-privacy" ];

        repeated string link_local = 9 [ json_name = "link-local" ];

        bool critical = 10;

        string dhcp_identifier = 11 [ json_name = "dhcp-identifier" ];

        CommonOpts.DHCPOverrides dhcp4_overrides = 12
            [ json_name = "dhcp4-overrides" ];

        CommonOpts.DHCPOverrides dhcp6_overrides = 13
            [ json_name = "dhcp6-overrides" ];

        bool accept_ra = 14;

        repeated string addresses = 15;

        CommonOpts.Nameservers nameservers = 16;

        string macaddress = 17;

        int32 mtu = 18;

        bool optional = 19;

        repeated string optional_addresses = 20
            [ json_name = "optional-addresses" ];

        repeated CommonOpts.Routes routes = 21;

        CommonOpts.RoutingPolicy routing_policy = 22
            [ json_name = "routing-policy" ];

        CommonOpts.Auth auth = 23;

        // Deprecated
        string gateway4 = 24;

        // Deprecated
        string gateway6 = 25;

        message Parameters {
          string mode = 1;

          int32 lacp_rate = 2 [ json_name = "lacp-rate" ];

          int32 mii_monitor_interval = 3 [ json_name = "mii-monitor-interval" ];

          int32 min_links = 4 [ json_name = "min-links" ];

          int32 transmit_hash_policy = 5 [ json_name = "transmit-hash-policy" ];

          int32 ad_select = 6 [ json_name = "ad-select" ];

          int32 all_slaves_active = 7 [ json_name = "all-slaves-active" ];

          bool arp_ip_targets = 8 [ json_name = "arp-ip-targets" ];

          string arp_validate = 9 [ json_name = "arp-validate" ];

          string arp_all_targets = 10 [ json_name = "arp-all-targets" ];

          string up_delay = 11 [ json_name = "up-delay" ];

          string fail_over_mac_policy = 12
              [ json_name = "fail-over-mac-policy" ];

          int32 gratuitous_arp = 13 [ json_name = "gratuitous-arp" ];

          string packets_per_slave = 14 [ json_name = "packets-per-slave" ];

          string primary_reselect_policy = 15
              [ json_name = "primary-reselect-policy" ];

          string resend_igmp = 16 [ json_name = "resend-igmp" ];

          string learn_packet_interval = 17
              [ json_name = "learn-packet-interval" ];

          string primary = 18;
        }

        reserved 1, 4;
      }

      message TunnelsOpts {
        string mode = 2;

        string local = 3;

        string remote = 4;

        int32 key = 5;

        string renderer = 7;

        bool dhcp4 = 8;

        bool dhcp6 = 9;

        bool ipv6_privacy = 10 [ json_name = "ipv6-privacy" ];

        repeated string link_local = 11 [ json_name = "link-local" ];

        bool critical = 12;

        string dhcp_identifier = 13 [ json_name = "dhcp-identifier" ];

        CommonOpts.DHCPOverrides dhcp4_overrides = 14
            [ json_name = "dhcp4-overrides" ];

        CommonOpts.DHCPOverrides dhcp6_overrides = 15
            [ json_name = "dhcp6-overrides" ];

        bool accept_ra = 16;

        repeated string addresses = 17;

        CommonOpts.Nameservers nameservers = 18;

        string macaddress = 19;

        int32 mtu = 20;

        bool optional = 21;

        repeated string optional_addresses = 22
            [ json_name = "optional-addresses" ];

        repeated CommonOpts.Routes routes = 23;

        CommonOpts.RoutingPolicy routing_policy = 24
            [ json_name = "routing-policy" ];

        CommonOpts.Auth auth = 25;

        // Deprecated
        string gateway4 = 26;

        // Deprecated
        string gateway6 = 27;

        message Key {
          int32 input = 1;

          int32 output = 2;
        }

        reserved 1, 6;
      }

      message VlansOpts {
        int32 id = 2;

        string link = 3;

        string renderer = 5;

        bool dhcp4 = 6;

        bool dhcp6 = 7;

        bool ipv6_privacy = 8 [ json_name = "ipv6-privacy" ];

        repeated string link_local = 9 [ json_name = "link-local" ];

        bool critical = 10;

        string dhcp_identifier = 11 [ json_name = "dhcp-identifier" ];

        CommonOpts.DHCPOverrides dhcp4_overrides = 12
            [ json_name = "dhcp4-overrides" ];

        CommonOpts.DHCPOverrides dhcp6_overrides = 13
            [ json_name = "dhcp6-overrides" ];

        bool accept_ra = 14;

        repeated string addresses = 15;

        CommonOpts.Nameservers nameservers = 16;

        string macaddress = 17;

        int32 mtu = 18;

        bool optional = 19;

        repeated string optional_addresses = 20
            [ json_name = "optional-addresses" ];

        repeated CommonOpts.Routes routes = 21;

        CommonOpts.RoutingPolicy routing_policy = 22
            [ json_name = "routing-policy" ];

        CommonOpts.Auth auth = 23;

        // Deprecated
        string gateway4 = 24;

        // Deprecated
        string gateway6 = 25;

        reserved 1, 4;
      }

      message ModemOpts {
        string apn = 1;

        string username = 2;

        string password = 3;

        string number = 4;

        string network_id = 5 [ json_name = "network-id" ];

        string device_id = 6 [ json_name = "device-id" ];

        string pin = 7;

        string sim_id = 8 [ json_name = "sim-id" ];

        string sim_operator_id = 9 [ json_name = "sim-operator-id" ];

        bool auto_config = 11 [ json_name = "auto-config" ];

        string renderer = 12;

        bool dhcp4 = 13;

        bool dhcp6 = 14;

        bool ipv6_privacy = 15 [ json_name = "ipv6-privacy" ];

        repeated string link_local = 16 [ json_name = "link-local" ];

        bool critical = 17;

        string dhcp_identifier = 18 [ json_name = "dhcp-identifier" ];

        CommonOpts.DHCPOverrides dhcp4_overrides = 19
            [ json_name = "dhcp4-overrides" ];

        CommonOpts.DHCPOverrides dhcp6_overrides = 20
            [ json_name = "dhcp6-overrides" ];

        bool accept_ra = 21;

        repeated string addresses = 22;

        CommonOpts.Nameservers nameservers = 23;

        string macaddress = 24;

        int32 mtu = 25;

        bool optional = 26;

        repeated string optional_addresses = 27
            [ json_name = "optional-addresses" ];

        repeated CommonOpts.Routes routes = 28;

        CommonOpts.RoutingPolicy routing_policy = 29
            [ json_name = "routing-policy" ];

        CommonOpts.Auth auth = 30;

        // Deprecated
        string gateway4 = 31;

        // Deprecated
        string gateway6 = 32;

        reserved 10;
      }

      reserved 2, 3, 4, 5, 6, 7, 8;
    }

    message NetplanConfig { NetworkingConfig network = 1; }

    // SSHConfig defines the ssh configuration for the Device.
    message SSHConfig {
      bool disable_ssh_server = 1;

      bool disable_ssh_password = 2;

      repeated AuthKey ssh_authorized = 3;

      repeated string ip_allow_list = 4;

      repeated string ip_deny_list = 5;

      google.protobuf.Duration reject_period = 6;

      bool disable_ssh_authkey = 7;

      message AuthKey {
        string ssha_key = 1;

        bool cert_authority = 2;

        string command = 3;

        string environment = 4;

        string from = 5;

        bool no_agent_forwarding = 6;

        bool no_port_forwarding = 7;

        bool no_pty = 8;

        bool no_user_rc = 9;

        bool no_x11_forwarding = 10;

        string permitopen = 11;

        string principals = 12;

        string tunnel = 13;

        bool restrict = 14;
      }
    }

    message AttestationConfig {
      // If true, the droplet will try to attest itself.
      bool attestation_expected = 1;

      // Attestation domain for device attestation.
      string attestation_domain = 2;

      // Insecure, use for dev only.
      // If non-zero, droplet will use an in-memory TPM simulator instead of an
      // actual, physical one, using the provided seed as initialization seed.
      // OK, this is not *actually* insecure, since server-side should verify
      // trustworthiness of the key anyways (the entire point of verification
      // protocol after all), but it's better to mark it this way for people who
      // don't read the documentation.
      //
      // This field is designed to be used for development purposes, as it
      // allows for running the attestation protocol on devices which don't have
      // a TMP chip. To make it work, ensure that attestation domain policies
      // are configured for development as well (depends on which aspect we're
      // testing; at the very least
      // insecure_skip_manufacturer_ekcert_verification should be probably set
      // to true).
      int32 insecure_use_tpm_simulator_seed = 3;
    }

    message LoggingConfig {
      // Log priority as understood by systemd (0 - emergency, 1 - alert, 2 -
      // critical, 3 - error, 4 - warning, 5 - notice, 6 - informational, 7 -
      // debug). Journal logs with this priority and higher will be uploaded to
      // the server.
      int32 priority = 1;

      // List of systemd unit names to monitor for logs, e.g.
      // NetworkManager.service, docker.service.
      // Leave empty to export all journald logs.
      repeated string units = 2;

      // Whether the journald log exporter is enabled.
      bool enable_journal_export = 3;
    }

    message ProxyConfig {
      string http_proxy = 1;

      string https_proxy = 2;

      string no_proxy = 3;

      // By default proxy is applicable for all interfaces
      // configuring proxy_interfaces allows to restrict proxy setting to be
      // used only with specific interfaces At present this is only used for
      // Control Plane (for eg LTE fallback)
      repeated string proxy_interfaces = 4;
    }

    // Device location of the device.
    message Location {
      string address = 1;

      string placement = 2;
    }

    // USB Guard. When enable is not set, USB guard service will not be started.
    // When it is enabled, we can specify allowed device white list with
    // WhiteList. Each device can be specified one of Device Name, Device ID or
    // connected port number. We can specify multiple parameter for a device.
    message USBGuard {
      // Enable USB Guard service on the device.
      bool enable = 1;

      // This is array of white list of the USB devices.
      repeated WhiteList white_list = 2;

      // USB match operator for "via-port".
      message Port {
        repeated string equals = 1;

        repeated string one_of = 2;
      }

      // USB match operator for "with-interface".
      message Interface {
        repeated string equals = 1;

        repeated string one_of = 2;
      }

      // This is array of white list of the USB devices.
      message WhiteList {
        // USB device name to be allowed to connect.
        string device_name = 1;

        // USB device id to be allowed to connect.
        string device_id = 2;

        // USB port to be allowed to connect.
        Port via_port = 3;

        // USB interface to be allowed to connect.
        Interface with_interface = 4;

        // USB connect type to be allowed to connect.
        string with_connect_type = 5;
      }
    }

    // MERGE or REPLACE the api netplan_config with the baked in config in the
    // device
    enum NetworkConfigMode {
      MERGE = 0;

      REPLACE = 1;
    }

    reserved 3, 4;
  }

  message Status {
    // List of network addresses.
    repeated Address addresses = 1;

    // List of conditions of the Device.
    repeated Condition conditions = 2;

    NetworkConfigState network_config_state = 105;

    ProxyConfigStatus proxy_config_status = 106;

    // Device detailed information
    DeviceInfo device_info = 3;

    repeated ntt.iam.v1.PCR attestation_status = 4;

    // Normalized Address.
    NormalizedAddress normalized_address = 5;

    ConnectionStatus connection_status = 6;

    // Last change of connection_status
    google.protobuf.Timestamp connection_status_change_time = 7;

    // Interface addresses of the Device.
    message Address {
      // IPv4 or IPv6 address such as `203.0.113.5` (no suffix for subnet)
      string address = 1;

      // Always `InternalIP`
      string type = 2;
    }

    // Condition holds status of each sub component or module of the device.
    message Condition {
      // The message describes the status.
      string message = 1;

      // The reason for the status.
      string reason = 2;

      // The status name.
      string status = 3;

      // Type name of the status.
      string type = 4;

      // When the status has been updated last time.
      google.protobuf.Timestamp last_heart_beat_time = 5;

      // When the status has tuned into the current value.
      google.protobuf.Timestamp last_transition_time = 6;
    }

    message NetworkConfigState {
      NetworkConfigSource active_network_config_source = 1;

      NetworkConfigSource desired_network_config_source = 2;

      string desired_network_config_error = 3;

      Spec.NetplanConfig default_config = 4;

      Spec.NetplanConfig active_config = 5;

      Spec.NetplanConfig desired_config = 6;

      enum NetworkConfigSource {
        UNKNOWN = 0;

        DEFAULT_CONFIG = 1;

        API_CONFIG = 2;

        MERGED_DEFAULT_AND_API_CONFIG = 3;

        PREVIOUS_MERGED_DEFAULT_AND_API_CONFIG = 4;

        PREVIOUS_API_CONFIG = 5;
      }
    }

    message ProxyConfigStatus {
      ProxyConfigSource active_config_source = 1;

      ProxyConfigSource desired_config_source = 2;

      string proxy_config_error = 3;

      Spec.ProxyConfig default_config = 4;

      Spec.ProxyConfig active_config = 5;

      Spec.ProxyConfig api_config = 6;

      enum ProxyConfigSource {
        NO_CONFIG = 0;

        DEFAULT_CONFIG = 1;

        API_CONFIG = 2;
      }
    }

    // Device Information
    message DeviceInfo {
      // The architecture of the CPU (and the software compilied for) (e.g.
      // `arm64`)
      string architecture = 1;

      // The platform hardware (e.g. `raspberry`, `generic`)
      string hardware = 7;

      // Base OS name (e.g. `Linux`)
      string operating_system = 2;

      // OS kernel version
      string kernel_version = 3;

      // OS base Image name
      string os_image = 4;

      // Not used
      string container_runtime_version = 5;

      // Liquid OS version currently used.
      string os_version = 6;

      // Container driver name (e.g. `/var/lib/droplet/compose`)
      string driver = 101;

      HardwareInformation hardware_information = 102;

      map<string, NetworkInterface> network_interfaces = 103;

      ControlPlaneInterfaceInfo control_plane_interface_info = 104;

      message HardwareInformation {
        OS os = 1;

        BIOS bios = 2;

        System system = 3;

        CPU cpu = 4;

        Block block = 5;

        Network network = 6;

        GPU gpu = 7;

        MemoryInfo memory_info = 8;

        HailoInfo hailo_info = 20;

        NvidiaInfo nvidia_info = 21;

        repeated ModemStatus modem_status = 22;

        message Capability {
          string name = 1;

          string description = 2;
        }

        message OS {
          string operating_system = 1;

          string kernel_version = 2;

          string os_image = 3;

          string container_runtime_version = 4;
        }

        // TODO: Add capabilities and size
        message BIOS {
          string vendor = 1;

          string bios_version = 2;

          string release_date = 3;
        }

        message System {
          string manufacturer = 1;

          string product_name = 2;

          string version = 3;

          string serial_number = 4;

          Configuration configuration = 5;

          message Configuration {
            string chassis = 1;

            string uuid = 2;

            string sku_number = 3;

            string family = 4;
          }
        }

        message CPU {
          repeated Processor processors = 1;

          message Processor {
            string vendor = 1;

            string model = 2;

            repeated Capability capabilities = 3;

            uint32 num_threads = 4;

            uint32 num_cores = 5;

            uint32 num_enabled_cores = 6;

            string name = 7;

            string serial = 8;

            int64 frequency_mhz = 9;

            int64 max_frequency_mhz = 10;

            repeated Cache cache_info = 11;

            string driver = 12;

            int64 latency = 13;

            int64 clock = 14;

            message Cache {
              string type = 1;

              int64 size_bytes = 2;
            }
          }
        }

        message Block {
          repeated Disk disks = 1;

          message Disk {
            string name = 1;

            int64 size_bytes = 2;

            string drive_type = 3;

            string vendor = 4;

            string model = 5;

            string serial_number = 6;

            string wwn = 7;

            repeated Partition partitions = 8;

            message Partition {
              string name = 1;

              int64 size_bytes = 2;

              string mount_point = 3;

              string type = 4;
            }
          }
        }

        message Network {
          repeated NIC nics = 1;

          message NIC {
            string name = 1;

            string mac_address = 2;

            bool virtual = 3;

            string description = 4;

            string product_name = 5;

            string vendor = 6;

            string subvendor = 7;

            map<string, string> setting = 8;
          }
        }

        message GPU {
          repeated GraphicCard graphic_cards = 1;

          message GraphicCard {
            int64 index = 1;

            PCIDevice device = 2;
          }
        }

        // Revisit: May be just device ??
        message PCIDevice {
          string address = 1;

          string vendor = 2;

          string product = 3;

          string name = 4;

          string subvendor = 5;
        }

        message MemoryInfo {
          repeated Memory memory = 1;

          message Memory {
            string description = 1;

            int64 size_bytes = 2;

            repeated MemoryBank memory_banks = 3;

            message MemoryBank {
              string description = 1;

              string product = 2;

              string vendor = 3;

              string serial = 4;

              string slot = 5;

              int64 size_bytes = 6;

              int64 frequency_hz = 7;

              int32 width_bits = 8;
            }
          }
        }

        message HailoInfo {
          string status = 1;

          string cli_version = 2;

          repeated HailoModuleInfo modules = 10;

          message HailoModuleInfo {
            string dev_id = 1;

            string control_proto_version = 2;

            string firmware_version = 3;

            string logger_version = 4;

            string board_name = 5;

            string serial_number = 6;

            string part_number = 7;

            string product_name = 8;

            string neural_network_core_clock_rate = 9;
          }
        }

        message NvidiaInfo {
          string status = 1;

          string driver_version = 2;

          string cuda_version = 3;

          repeated GpuInfo gpus = 10;

          message GpuInfo {
            string id = 1;

            string product_name = 2;
          }
        }

        message ModemStatus {
          Modem modem = 1;

          message RegistrationSettings {
            string drx_cycle = 1;

            string mico_mode = 2;
          }

          message FiveGNr { RegistrationSettings registration_settings = 1; }

          message Settings {
            string apn = 1;

            string ip_type = 2;

            string password = 3;

            string user = 4;
          }

          message InitialBearer {
            string dbus_path = 1;

            Settings settings = 2;
          }

          message Eps {
            InitialBearer initial_bearer = 1;

            string ue_mode_operation = 2;
          }

          message ThreeGpp {
            FiveGNr fiveg_nr = 1;

            repeated string enabled_locks = 2;

            Eps eps = 3;

            string imei = 4;

            string operator_code = 5;

            string operator_name = 6;

            string packet_service_state = 7;

            string pco = 8;

            string registration_state = 9;
          }

          message Cdma {
            string activation_state = 1;

            string cdma1x_registration_state = 2;

            string esn = 3;

            string evdo_registration_state = 4;

            string meid = 5;

            string nid = 6;

            string sid = 7;
          }

          message SignalQuality {
            string recent = 1;

            string value = 2;
          }

          message Generic {
            repeated string access_technologies = 1;

            repeated string bearers = 2;

            string carrier_configuration = 3;

            string carrier_configuration_revision = 4;

            repeated string current_bands = 5;

            repeated string current_capabilities = 6;

            string current_modes = 7;

            string device = 8;

            string device_identifier = 9;

            repeated string drivers = 10;

            string equipment_identifier = 11;

            string hardware_revision = 12;

            string manufacturer = 13;

            string model = 14;

            repeated string own_numbers = 15;

            string plugin = 16;

            repeated string ports = 17;

            string power_state = 18;

            string primary_port = 19;

            string primary_sim_slot = 20;

            string revision = 21;

            SignalQuality signal_quality = 22;

            string sim = 23;

            repeated string sim_slots = 24;

            string state = 25;

            string state_failed_reason = 26;

            repeated string supported_bands = 27;

            repeated string supported_capabilities = 28;

            repeated string supported_ip_families = 29;

            repeated string supported_modes = 30;

            string unlock_required = 31;

            repeated string unlock_retries = 32;
          }

          message Signal5g {
            string error_rate = 1;

            string rsrp = 2;

            string rsrq = 3;

            string snr = 4;
          }

          message SignalCdma1x {
            string ecio = 1;

            string error_rate = 2;

            string rssi = 3;
          }

          message SignalEvdo {
            string ecio = 1;

            string error_rate = 2;

            string io = 3;

            string rssi = 4;

            string sinr = 5;
          }

          message SignalGsm {
            string error_rate = 1;

            string rssi = 2;
          }

          message SignalLte {
            string error_rate = 1;

            string rsrp = 2;

            string rsrq = 3;

            string rssi = 4;

            string snr = 5;
          }

          message SignalRefresh { string rate = 1; }

          message SignalThreshold {
            string error_rate = 1;

            string rssi = 2;
          }

          message SignalUmts {
            string ecio = 1;

            string error_rate = 2;

            string rscp = 3;

            string rssi = 4;
          }

          message Signal {
            Signal5g five_g = 1;

            SignalCdma1x cdma1x = 2;

            SignalEvdo evdo = 3;

            SignalGsm gsm = 4;

            SignalLte lte_signal = 5;

            SignalRefresh refresh = 6;

            SignalThreshold threshold = 7;

            SignalUmts umts = 8;
          }

          message SimStatus {
            string dbus_path = 1;

            string active = 2;

            string eid = 3;

            repeated string emergency_numbers = 4;

            string esim_status = 5;

            string gid1 = 6;

            string gid2 = 7;

            string iccid = 8;

            string imsi = 9;

            string operator_code = 10;

            string operator_name = 11;

            string removability = 12;

            string sim_type = 13;
          }

          message Modem {
            ThreeGpp three_g_pp = 1;

            Cdma cdma = 2;

            string dbus_path = 3;

            Generic generic = 4;

            Signal signal = 5;

            map<string, SimStatus> sim_status = 7;

            reserved 6;
          }
        }
      }

      // Network Interface
      message NetworkInterface {
        string interface_name = 1;

        repeated string ip_address_v4 = 2;

        repeated string external_ip_address_v4 = 3;

        repeated string ip_address_v6 = 4;

        repeated string external_ip_address_v6 = 5;

        // Asinfo describes the ISP (ASN) details for the interface
        // This is resolved automatically from the external_ip_address.
        ASInfo as_info = 10;

        // Carrier.
        Carrier carrier = 14;

        message ASInfo {
          // AS Number string example AS7018
          string asn = 1;

          // AS Owner name example AT&T Services, Inc.
          string name = 2;

          // Domain name example att.com
          string domain = 3;

          // Routes exported from this ASN example 12.128.0.0/9
          repeated string routes = 4;

          // ASN Owner type example isp(AT&T) / hosting(google)/ business
          // (Amazon)
          string asn_type = 5;
        }

        message Carrier {
          // Mobile network carrier name example AT&T
          string name = 1;

          // Mobile country code example 214
          string mobile_country_code = 2;

          // Mobile network code example 7
          string mobile_network_code = 3;

          // Mobile location area code example 2862
          string location_area_code = 4;
        }
      }

      message ControlPlaneInterfaceInfo {
        string active_control_plane_interface = 1;

        bool usesProxy = 2;

        // is_fallback would be true if droplet could not connect using the best
        // default route and explicitly uses this interface to connect to api
        // endpoint
        bool is_fallback = 3;
      }
    }

    message NormalizedAddress {
      // Postal code
      string postal_code = 1;

      // Country code example US, JP
      string country_code = 2;

      // Continent, e.g. North America, Asia
      string continent = 3;

      string continent_id = 4;

      // Country name example United States, Japan
      string country = 5;

      string country_id = 6;

      // Probe Location Administrative Area level 1 name, e.g. California
      // (state), Chiba (prefecture)
      string admin_area1 = 7;

      string admin_area1_id = 8;

      // Probe Location Administrative Area level 2 name, e.g. Santa Clara
      // (county), Tateyama (town)
      string admin_area2 = 9;

      string admin_area2_id = 10;

      // Probe Location Administrative Area level 3 name, e.g. Sunnyvale (city)
      string admin_area3 = 11;

      string admin_area3_id = 12;

      // Probe Location Administrative Area level 4 name, e.g. Sunnyvale (city)
      string admin_area4 = 13;

      string admin_area4_id = 14;

      // Original address.
      string address = 15;

      // coordinates
      google.type.LatLng coordinates = 16;

      // location accuracy in meters
      double accuracy = 17;
    }

    enum ConnectionStatus {
      CONNECTION_STATUS_UNSPECIFIED = 0;

      CONNECTED = 1;

      DISCONNECTED = 2;
    }
  }

  message PublicListingSpec {
    bool enabled = 1;

    google.protobuf.FieldMask field_mask = 2;
  }
}
