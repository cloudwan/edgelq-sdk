syntax = "proto3";

package ntt.devices.v1alpha;

import "edgelq-sdk/common/types/meta.proto";

import "google/api/resource.proto";

import "google/protobuf/duration.proto";

import "google/protobuf/field_mask.proto";

import "google/protobuf/timestamp.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/device;device";

option java_package = "com.ntt.devices.pb.v1alpha";

option java_outer_classname = "DeviceProto";

option java_multiple_files = true;

// Device Resource
message Device {
  option (google.api.resource) = {
    type : "devices.edgelq.com/Device"
    pattern : "projects/{project}/devices/{device}"
  };

  // Name of Device
  string name = 1;

  // Metadata of Device
  ntt.types.Meta metadata = 2;

  // Spec holds the expected state of the Device, meaning configurations.
  Spec spec = 3;

  // Status of the Device reported from the actual device.
  Status status = 4;

  PublicListingSpec public_listing_spec = 5;

  // Display name for the device
  string display_name = 6;

  message Spec {
    // The associated service account to the Device.
    // The agents in the device uses a key from this service account
    // when they issue any requests to our endpoints for authoroization and
    // authentication. `ProvisionServiceAccountToDevice` creates a new service
    // account and a key for the Device and asign the account to this fileld. If
    // you change the value of this field, the existing device would lose the
    // access to the resources in our services, that means you can revoke the
    // permissions from the device. You can manually set an empty value to do
    // so, or call `RemoveServiceAccountFromDevice`.
    string service_account = 1;

    // The expected OS version in string (e.g. 1.0.2).
    // The device will automatically download the OS image and upgrade itself
    // with it. You can stack the OS upgrade progress in the Condition named
    // `OSReady` in Status.Conditions.
    string os_version = 2;

    NetworkConfig net_config = 3;

    string net_config_mode = 4;

    // The URL is dynamically constructed once the device is created or updated.
    // The URL will be based on the device hardware information
    // URL format: base_url/dedicated_path/iso_version/architecture/os_type
    string os_image_url = 5;

    SSHConfig ssh_config = 6;

    // NetworkConfig defines the network configuration of the Device.
    // These fields are subset of the netplan configuration.
    message NetworkConfig {
      int32 version = 1;

      repeated EthOpts ethernets = 2;

      repeated WifiOpts wifis = 3;

      repeated BridgesOpts bridges = 4;

      repeated BondsOpts bonds = 5;

      repeated TunnelsOpts tunnels = 6;

      repeated VlansOpts vlans = 7;

      message CommonOpts {
        string renderer = 1;

        bool dhcp4 = 2;

        bool dhcp6 = 3;

        bool ipv6_privacy = 4;

        repeated string link_local = 5;

        bool critical = 6;

        string dhcp_identifier = 7;

        DHCPOverrides dhcp4_overrides = 8;

        DHCPOverrides dhcp6_overrides = 9;

        bool accept_ra = 10;

        repeated string addresses = 11;

        string gateway4 = 12;

        string gateway6 = 13;

        Nameservers nameservers = 14;

        string macaddress = 15;

        int32 mtu = 16;

        bool optional = 17;

        repeated string optional_addresses = 18;

        repeated Routes routes = 19;

        RoutingPolicy routing_policy = 20;

        Auth auth = 21;

        message DHCPOverrides {
          bool use_dns = 1;

          bool use_ntp = 2;

          bool send_hostname = 3;

          bool use_hostname = 4;

          bool use_mtu = 5;

          string hostname = 6;

          bool use_routes = 7;

          string route_metric = 8;
        }

        message Nameservers {
          repeated string search = 1;

          repeated string addresses = 2;
        }

        message Routes {
          string from = 1;

          string to = 2;

          string via = 3;

          bool on_link = 4;

          int32 metric = 5;

          string type = 6;

          string scope = 7;

          int32 table = 8;
        }

        message RoutingPolicy {
          string from = 1;

          string to = 2;

          int32 table = 3;

          int32 priority = 4;

          int32 mark = 5;

          int32 type_of_service = 6;
        }

        message Auth {
          string key = 1;

          string password = 2;

          string method = 3;

          string identity = 4;

          string anonymous_identity = 5;

          string ca_certificate = 6;

          string client_certificate = 7;

          string client_key = 8;

          string client_key_password = 9;
        }
      }

      message EthOpts {
        Match match = 1;

        string set_name = 2;

        bool wakeonlan = 3;

        CommonOpts opts = 4;

        string name = 5;

        message Match {
          string name = 1;

          string macaddress = 2;

          string driver = 3;
        }
      }

      message WifiOpts {
        Match match = 1;

        string set_name = 2;

        bool wakeonlan = 3;

        CommonOpts opts = 4;

        repeated AccessPoint access_points = 5;

        string name = 6;

        message Match {
          string name = 1;

          string macaddress = 2;

          string driver = 3;
        }

        message AccessPoint {
          string name = 1;

          string password = 2;

          string mode = 3;
        }
      }

      message BridgesOpts {
        CommonOpts opts = 1;

        repeated string interfaces = 2;

        Parameters parameters = 3;

        string name = 4;

        message Parameters {
          int32 ageing_time = 1;

          int32 priority = 2;

          int32 port_priority = 3;

          int32 forward_delay = 4;

          int32 hello_time = 5;

          int32 max_age = 6;

          int32 path_cost = 7;

          bool stp = 8;
        }
      }

      message BondsOpts {
        CommonOpts opts = 1;

        repeated string interfaces = 2;

        Parameters parameters = 3;

        string name = 4;

        message Parameters {
          string mode = 1;

          int32 lacp_rate = 2;

          int32 mii_monitor_interval = 3;

          int32 min_links = 4;

          int32 transmit_hash_policy = 5;

          int32 ad_select = 6;

          int32 all_slaves_active = 7;

          bool arp_ip_targets = 8;

          string arp_validate = 9;

          string arp_all_targets = 10;

          string up_delay = 11;

          string fail_over_mac_policy = 12;

          int32 gratuitous_arp = 13;

          string packets_per_slave = 14;

          string primary_reselect_policy = 15;

          string resend_igmp = 16;

          string learn_packet_interval = 17;

          string primary = 18;
        }
      }

      message TunnelsOpts {
        CommonOpts opts = 1;

        string mode = 2;

        string local = 3;

        string remote = 4;

        int32 key = 5;

        string name = 6;

        message Key {
          int32 input = 1;

          int32 output = 2;
        }
      }

      message VlansOpts {
        CommonOpts opts = 1;

        int32 id = 2;

        string link = 3;

        string name = 4;
      }
    }

    // SSHConfig defines the ssh configuration for the Device.
    message SSHConfig {
      bool disable_ssh_server = 1;

      bool disable_ssh_password = 2;

      repeated AuthKey ssh_authorized = 3;

      repeated string ip_allow_list = 4;

      repeated string ip_deny_list = 5;

      google.protobuf.Duration reject_period = 6;

      bool disable_ssh_authkey = 7;

      message AuthKey {
        string ssha_key = 1;

        bool cert_authority = 2;

        string command = 3;

        string environment = 4;

        string from = 5;

        bool no_agent_forwarding = 6;

        bool no_port_forwarding = 7;

        bool no_pty = 8;

        bool no_user_rc = 9;

        bool no_x11_forwarding = 10;

        string permitopen = 11;

        string principals = 12;

        string tunnel = 13;

        bool restrict = 14;
      }
    }
  }

  message Status {
    // List of network addresses.
    repeated Address addresses = 1;

    // List of conditions of the Device.
    repeated Condition conditions = 2;

    // Device detailed information
    DeviceInfo device_info = 3;

    // Interface addresses of the Device.
    message Address {
      // IPv4 or IPv6 address such as `203.0.113.5` (no suffix for subnet)
      string address = 1;

      // Always `InternalIP`
      string type = 2;
    }

    // Condition holds status of each sub component or module of the device.
    message Condition {
      // The message describes the status.
      string message = 1;

      // The reason for the status.
      string reason = 2;

      // The status name.
      string status = 3;

      // Type name of the status.
      string type = 4;

      // When the status has been updated last time.
      google.protobuf.Timestamp last_heart_beat_time = 5;

      // When the status has tuned into the current value.
      google.protobuf.Timestamp last_transition_time = 6;
    }

    // Device Information
    message DeviceInfo {
      // The architecture of the CPU (and the software compilied for) (e.g.
      // `arm64`)
      string architecture = 1;

      // Base OS name (e.g. `Linux`)
      string operating_system = 2;

      // OS kernel version
      string kernel_version = 3;

      // OS base Image name
      string os_image = 4;

      // Not used
      string container_runtime_version = 5;

      // Liquid OS version currently used.
      string os_version = 6;

      // Container driver name (e.g. `/var/lib/droplet/compose`)
      string driver = 101;

      HardwareInformation hardware_information = 102;

      message HardwareInformation {
        OS os = 1;

        BIOS bios = 2;

        System system = 3;

        CPU cpu = 4;

        Block block = 5;

        Network network = 6;

        GPU gpu = 7;

        MemoryInfo memory_info = 8;

        message Capability {
          string name = 1;

          string description = 2;
        }

        message OS {
          string operating_system = 1;

          string kernel_version = 2;

          string os_image = 3;

          string container_runtime_version = 4;
        }

        // TODO: Add capabilities and size
        message BIOS {
          string vendor = 1;

          string bios_version = 2;

          string release_date = 3;
        }

        message System {
          string manufacturer = 1;

          string product_name = 2;

          string version = 3;

          string serial_number = 4;

          Configuration configuration = 5;

          message Configuration {
            string chassis = 1;

            string uuid = 2;

            string sku_number = 3;

            string family = 4;
          }
        }

        message CPU {
          repeated Processor processors = 1;

          message Processor {
            string vendor = 1;

            string model = 2;

            repeated Capability capabilities = 3;

            uint32 num_threads = 4;

            uint32 num_cores = 5;

            uint32 num_enabled_cores = 6;

            string name = 7;

            string serial = 8;

            int64 frequency_mhz = 9;

            int64 max_frequency_mhz = 10;

            repeated Cache cache_info = 11;

            message Cache {
              string type = 1;

              int64 size_bytes = 2;
            }
          }
        }

        message Block {
          repeated Disk disks = 1;

          message Disk {
            string name = 1;

            int64 size_bytes = 2;

            string drive_type = 3;

            string vendor = 4;

            string model = 5;

            string serial_number = 6;

            string wwn = 7;

            repeated Partition partitions = 8;

            message Partition {
              string name = 1;

              int64 size_bytes = 2;

              string mount_point = 3;

              string type = 4;
            }
          }
        }

        message Network {
          repeated NIC nics = 1;

          message NIC {
            string name = 1;

            string mac_address = 2;

            bool virtual = 3;

            string description = 4;

            string product_name = 5;

            string vendor = 6;

            string subvendor = 7;

            map<string, string> setting = 8;
          }
        }

        message GPU {
          repeated GraphicCard graphic_cards = 1;

          message GraphicCard {
            int64 index = 1;

            PCIDevice device = 2;
          }
        }

        // Revisit: May be just device ??
        message PCIDevice {
          string address = 1;

          string vendor = 2;

          string product = 3;

          string name = 4;

          string subvendor = 5;
        }

        message MemoryInfo {
          repeated Memory memory = 1;

          message Memory {
            string description = 1;

            int64 size_bytes = 2;

            repeated MemoryBank memory_banks = 3;

            message MemoryBank {
              string description = 1;

              string product = 2;

              string vendor = 3;

              string serial = 4;

              string slot = 5;

              int64 size_bytes = 6;

              int64 frequency_hz = 7;

              int32 width_bits = 8;
            }
          }
        }
      }
    }
  }

  message PublicListingSpec {
    bool enabled = 1;

    google.protobuf.FieldMask field_mask = 2;
  }
}
