// Code generated by protoc-gen-goten-access
// Service: Devices
// DO NOT EDIT!!!

package devices_access

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"

	device_access "github.com/cloudwan/edgelq-sdk/devices/access/v1alpha2/device"
	project_access "github.com/cloudwan/edgelq-sdk/devices/access/v1alpha2/project"
	provisioning_approval_request_access "github.com/cloudwan/edgelq-sdk/devices/access/v1alpha2/provisioning_approval_request"
	provisioning_policy_access "github.com/cloudwan/edgelq-sdk/devices/access/v1alpha2/provisioning_policy"
	devices_client "github.com/cloudwan/edgelq-sdk/devices/client/v1alpha2/devices"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	provisioning_approval_request "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/provisioning_approval_request"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/provisioning_policy"
)

type DevicesApiAccess interface {
	gotenresource.Access

	device.DeviceAccess
	project.ProjectAccess
	provisioning_approval_request.ProvisioningApprovalRequestAccess
	provisioning_policy.ProvisioningPolicyAccess
}

type apiDevicesAccess struct {
	gotenresource.Access

	device.DeviceAccess
	project.ProjectAccess
	provisioning_approval_request.ProvisioningApprovalRequestAccess
	provisioning_policy.ProvisioningPolicyAccess
}

func NewApiAccess(client devices_client.DevicesClient) DevicesApiAccess {

	deviceAccess := device_access.NewApiDeviceAccess(client)
	projectAccess := project_access.NewApiProjectAccess(client)
	provisioningApprovalRequestAccess := provisioning_approval_request_access.NewApiProvisioningApprovalRequestAccess(client)
	provisioningPolicyAccess := provisioning_policy_access.NewApiProvisioningPolicyAccess(client)

	return &apiDevicesAccess{
		Access: gotenresource.NewCompositeAccess(

			device.AsAnyCastAccess(deviceAccess),
			project.AsAnyCastAccess(projectAccess),
			provisioning_approval_request.AsAnyCastAccess(provisioningApprovalRequestAccess),
			provisioning_policy.AsAnyCastAccess(provisioningPolicyAccess),
		),

		DeviceAccess:                      deviceAccess,
		ProjectAccess:                     projectAccess,
		ProvisioningApprovalRequestAccess: provisioningApprovalRequestAccess,
		ProvisioningPolicyAccess:          provisioningPolicyAccess,
	}
}
