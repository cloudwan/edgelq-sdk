// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha/device.proto
// DO NOT EDIT!!!

package device

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/project"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/service_account"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Device_FieldPath interface {
	gotenobject.FieldPath
	Selector() Device_FieldPathSelector
	Get(source *Device) []interface{}
	GetSingle(source *Device) (interface{}, bool)
	ClearValue(item *Device)

	// Those methods build corresponding Device_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Device_FieldPathValue
	WithIArrayOfValues(values interface{}) Device_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Device_FieldPathArrayItemValue
}

type Device_FieldPathSelector int32

const (
	Device_FieldPathSelectorName              Device_FieldPathSelector = 0
	Device_FieldPathSelectorMetadata          Device_FieldPathSelector = 1
	Device_FieldPathSelectorSpec              Device_FieldPathSelector = 2
	Device_FieldPathSelectorStatus            Device_FieldPathSelector = 3
	Device_FieldPathSelectorPublicListingSpec Device_FieldPathSelector = 4
	Device_FieldPathSelectorDisplayName       Device_FieldPathSelector = 5
)

func (s Device_FieldPathSelector) String() string {
	switch s {
	case Device_FieldPathSelectorName:
		return "name"
	case Device_FieldPathSelectorMetadata:
		return "metadata"
	case Device_FieldPathSelectorSpec:
		return "spec"
	case Device_FieldPathSelectorStatus:
		return "status"
	case Device_FieldPathSelectorPublicListingSpec:
		return "public_listing_spec"
	case Device_FieldPathSelectorDisplayName:
		return "display_name"
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", s))
	}
}

func BuildDevice_FieldPath(fp gotenobject.RawFieldPath) (Device_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorName}, nil
		case "metadata":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorMetadata}, nil
		case "spec":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorSpec}, nil
		case "status":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorStatus}, nil
		case "public_listing_spec", "publicListingSpec", "public-listing-spec":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorPublicListingSpec}, nil
		case "display_name", "displayName", "display-name":
			return &Device_FieldTerminalPath{selector: Device_FieldPathSelectorDisplayName}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Device_FieldSubPath{selector: Device_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildDeviceSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Device_FieldSubPath{selector: Device_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildDeviceStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Device_FieldSubPath{selector: Device_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		case "public_listing_spec", "publicListingSpec", "public-listing-spec":
			if subpath, err := BuildDevicePublicListingSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Device_FieldSubPath{selector: Device_FieldPathSelectorPublicListingSpec, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device", fp)
}

func ParseDevice_FieldPath(rawField string) (Device_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDevice_FieldPath(fp)
}

func MustParseDevice_FieldPath(rawField string) Device_FieldPath {
	fp, err := ParseDevice_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Device_FieldTerminalPath struct {
	selector Device_FieldPathSelector
}

var _ Device_FieldPath = (*Device_FieldTerminalPath)(nil)

func (fp *Device_FieldTerminalPath) Selector() Device_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Device_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Device_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device
func (fp *Device_FieldTerminalPath) Get(source *Device) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Device_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Device_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Device_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case Device_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		case Device_FieldPathSelectorPublicListingSpec:
			if source.PublicListingSpec != nil {
				values = append(values, source.PublicListingSpec)
			}
		case Device_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		default:
			panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
		}
	}
	return
}

func (fp *Device_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device))
}

// GetSingle returns value pointed by specific field of from source Device
func (fp *Device_FieldTerminalPath) GetSingle(source *Device) (interface{}, bool) {
	switch fp.selector {
	case Device_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Device_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Device_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case Device_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	case Device_FieldPathSelectorPublicListingSpec:
		res := source.GetPublicListingSpec()
		return res, res != nil
	case Device_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
	}
}

func (fp *Device_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device))
}

// GetDefault returns a default value of the field type
func (fp *Device_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Device_FieldPathSelectorName:
		return (*Name)(nil)
	case Device_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case Device_FieldPathSelectorSpec:
		return (*Device_Spec)(nil)
	case Device_FieldPathSelectorStatus:
		return (*Device_Status)(nil)
	case Device_FieldPathSelectorPublicListingSpec:
		return (*Device_PublicListingSpec)(nil)
	case Device_FieldPathSelectorDisplayName:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
	}
}

func (fp *Device_FieldTerminalPath) ClearValue(item *Device) {
	if item != nil {
		switch fp.selector {
		case Device_FieldPathSelectorName:
			item.Name = nil
		case Device_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Device_FieldPathSelectorSpec:
			item.Spec = nil
		case Device_FieldPathSelectorStatus:
			item.Status = nil
		case Device_FieldPathSelectorPublicListingSpec:
			item.PublicListingSpec = nil
		case Device_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
		}
	}
}

func (fp *Device_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device))
}

// IsLeaf - whether field path is holds simple value
func (fp *Device_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Device_FieldPathSelectorName ||
		fp.selector == Device_FieldPathSelectorDisplayName
}

func (fp *Device_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Device_FieldTerminalPath) WithIValue(value interface{}) Device_FieldPathValue {
	switch fp.selector {
	case Device_FieldPathSelectorName:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*Name)}
	case Device_FieldPathSelectorMetadata:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case Device_FieldPathSelectorSpec:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*Device_Spec)}
	case Device_FieldPathSelectorStatus:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*Device_Status)}
	case Device_FieldPathSelectorPublicListingSpec:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(*Device_PublicListingSpec)}
	case Device_FieldPathSelectorDisplayName:
		return &Device_FieldTerminalPathValue{Device_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
	}
}

func (fp *Device_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Device_FieldTerminalPath) WithIArrayOfValues(values interface{}) Device_FieldPathArrayOfValues {
	fpaov := &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp}
	switch fp.selector {
	case Device_FieldPathSelectorName:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Device_FieldPathSelectorMetadata:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case Device_FieldPathSelectorSpec:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*Device_Spec)}
	case Device_FieldPathSelectorStatus:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*Device_Status)}
	case Device_FieldPathSelectorPublicListingSpec:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]*Device_PublicListingSpec)}
	case Device_FieldPathSelectorDisplayName:
		return &Device_FieldTerminalPathArrayOfValues{Device_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
	}
	return fpaov
}

func (fp *Device_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Device_FieldTerminalPath) WithIArrayItemValue(value interface{}) Device_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fp.selector))
	}
}

func (fp *Device_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Device_FieldSubPath struct {
	selector Device_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Device_FieldPath = (*Device_FieldSubPath)(nil)

func (fps *Device_FieldSubPath) Selector() Device_FieldPathSelector {
	return fps.selector
}
func (fps *Device_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *Device_FieldSubPath) AsSpecSubPath() (DeviceSpec_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpec_FieldPath)
	return res, ok
}
func (fps *Device_FieldSubPath) AsStatusSubPath() (DeviceStatus_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatus_FieldPath)
	return res, ok
}
func (fps *Device_FieldSubPath) AsPublicListingSpecSubPath() (DevicePublicListingSpec_FieldPath, bool) {
	res, ok := fps.subPath.(DevicePublicListingSpec_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Device_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Device_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device
func (fps *Device_FieldSubPath) Get(source *Device) (values []interface{}) {
	if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else if asSpecFieldPath, ok := fps.AsSpecSubPath(); ok {
		values = append(values, asSpecFieldPath.Get(source.GetSpec())...)
	} else if asStatusFieldPath, ok := fps.AsStatusSubPath(); ok {
		values = append(values, asStatusFieldPath.Get(source.GetStatus())...)
	} else if asPublicListingSpecFieldPath, ok := fps.AsPublicListingSpecSubPath(); ok {
		values = append(values, asPublicListingSpecFieldPath.Get(source.GetPublicListingSpec())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device: %d", fps.selector))
	}
	return
}

func (fps *Device_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device))
}

// GetSingle returns value of selected field from source Device
func (fps *Device_FieldSubPath) GetSingle(source *Device) (interface{}, bool) {
	switch fps.selector {
	case Device_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Device_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case Device_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	case Device_FieldPathSelectorPublicListingSpec:
		if source.GetPublicListingSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPublicListingSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fps.selector))
	}
}

func (fps *Device_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device))
}

// GetDefault returns a default value of the field type
func (fps *Device_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Device_FieldSubPath) ClearValue(item *Device) {
	if item != nil {
		switch fps.selector {
		case Device_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Device_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case Device_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		case Device_FieldPathSelectorPublicListingSpec:
			fps.subPath.ClearValueRaw(item.PublicListingSpec)
		default:
			panic(fmt.Sprintf("Invalid selector for Device: %d", fps.selector))
		}
	}
}

func (fps *Device_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device))
}

// IsLeaf - whether field path is holds simple value
func (fps *Device_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Device_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Device_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Device_FieldSubPath) WithIValue(value interface{}) Device_FieldPathValue {
	return &Device_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Device_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Device_FieldSubPath) WithIArrayOfValues(values interface{}) Device_FieldPathArrayOfValues {
	return &Device_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Device_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Device_FieldSubPath) WithIArrayItemValue(value interface{}) Device_FieldPathArrayItemValue {
	return &Device_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Device_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Device_FieldPathValue allows storing values for Device fields according to their type
type Device_FieldPathValue interface {
	Device_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device)
	CompareWith(*Device) (cmp int, comparable bool)
}

func ParseDevice_FieldPathValue(pathStr, valueStr string) (Device_FieldPathValue, error) {
	fp, err := ParseDevice_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Device field path value from %s: %v", valueStr, err)
	}
	return fpv.(Device_FieldPathValue), nil
}

func MustParseDevice_FieldPathValue(pathStr, valueStr string) Device_FieldPathValue {
	fpv, err := ParseDevice_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Device_FieldTerminalPathValue struct {
	Device_FieldTerminalPath
	value interface{}
}

var _ Device_FieldPathValue = (*Device_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Device' as interface{}
func (fpv *Device_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Device_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsSpecValue() (*Device_Spec, bool) {
	res, ok := fpv.value.(*Device_Spec)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsStatusValue() (*Device_Status, bool) {
	res, ok := fpv.value.(*Device_Status)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsPublicListingSpecValue() (*Device_PublicListingSpec, bool) {
	res, ok := fpv.value.(*Device_PublicListingSpec)
	return res, ok
}
func (fpv *Device_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Device
func (fpv *Device_FieldTerminalPathValue) SetTo(target **Device) {
	if *target == nil {
		*target = new(Device)
	}
	switch fpv.selector {
	case Device_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Device_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case Device_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*Device_Spec)
	case Device_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*Device_Status)
	case Device_FieldPathSelectorPublicListingSpec:
		(*target).PublicListingSpec = fpv.value.(*Device_PublicListingSpec)
	case Device_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fpv.selector))
	}
}

func (fpv *Device_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Device_FieldTerminalPathValue' with the value under path in 'Device'.
func (fpv *Device_FieldTerminalPathValue) CompareWith(source *Device) (int, bool) {
	switch fpv.selector {
	case Device_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Device_FieldPathSelectorMetadata:
		return 0, false
	case Device_FieldPathSelectorSpec:
		return 0, false
	case Device_FieldPathSelectorStatus:
		return 0, false
	case Device_FieldPathSelectorPublicListingSpec:
		return 0, false
	case Device_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fpv.selector))
	}
}

func (fpv *Device_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device))
}

type Device_FieldSubPathValue struct {
	Device_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Device_FieldPathValue = (*Device_FieldSubPathValue)(nil)

func (fpvs *Device_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Device_FieldSubPathValue) AsSpecPathValue() (DeviceSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpec_FieldPathValue)
	return res, ok
}
func (fpvs *Device_FieldSubPathValue) AsStatusPathValue() (DeviceStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatus_FieldPathValue)
	return res, ok
}
func (fpvs *Device_FieldSubPathValue) AsPublicListingSpecPathValue() (DevicePublicListingSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DevicePublicListingSpec_FieldPathValue)
	return res, ok
}

func (fpvs *Device_FieldSubPathValue) SetTo(target **Device) {
	if *target == nil {
		*target = new(Device)
	}
	switch fpvs.Selector() {
	case Device_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Device_FieldPathSelectorSpec:
		fpvs.subPathValue.(DeviceSpec_FieldPathValue).SetTo(&(*target).Spec)
	case Device_FieldPathSelectorStatus:
		fpvs.subPathValue.(DeviceStatus_FieldPathValue).SetTo(&(*target).Status)
	case Device_FieldPathSelectorPublicListingSpec:
		fpvs.subPathValue.(DevicePublicListingSpec_FieldPathValue).SetTo(&(*target).PublicListingSpec)
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fpvs.Selector()))
	}
}

func (fpvs *Device_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Device_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Device_FieldSubPathValue) CompareWith(source *Device) (int, bool) {
	switch fpvs.Selector() {
	case Device_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Device_FieldPathSelectorSpec:
		return fpvs.subPathValue.(DeviceSpec_FieldPathValue).CompareWith(source.GetSpec())
	case Device_FieldPathSelectorStatus:
		return fpvs.subPathValue.(DeviceStatus_FieldPathValue).CompareWith(source.GetStatus())
	case Device_FieldPathSelectorPublicListingSpec:
		return fpvs.subPathValue.(DevicePublicListingSpec_FieldPathValue).CompareWith(source.GetPublicListingSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fpvs.Selector()))
	}
}

func (fpvs *Device_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device))
}

// Device_FieldPathArrayItemValue allows storing single item in Path-specific values for Device according to their type
// Present only for array (repeated) types.
type Device_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Device_FieldPath
	ContainsValue(*Device) bool
}

// ParseDevice_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDevice_FieldPathArrayItemValue(pathStr, valueStr string) (Device_FieldPathArrayItemValue, error) {
	fp, err := ParseDevice_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Device field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Device_FieldPathArrayItemValue), nil
}

func MustParseDevice_FieldPathArrayItemValue(pathStr, valueStr string) Device_FieldPathArrayItemValue {
	fpaiv, err := ParseDevice_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Device_FieldTerminalPathArrayItemValue struct {
	Device_FieldTerminalPath
	value interface{}
}

var _ Device_FieldPathArrayItemValue = (*Device_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device as interface{}
func (fpaiv *Device_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Device_FieldTerminalPathArrayItemValue) GetSingle(source *Device) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Device_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Device'
func (fpaiv *Device_FieldTerminalPathArrayItemValue) ContainsValue(source *Device) bool {
	slice := fpaiv.Device_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Device_FieldSubPathArrayItemValue struct {
	Device_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Device_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Device_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Device_FieldSubPathArrayItemValue) AsSpecPathItemValue() (DeviceSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Device_FieldSubPathArrayItemValue) AsStatusPathItemValue() (DeviceStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatus_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Device_FieldSubPathArrayItemValue) AsPublicListingSpecPathItemValue() (DevicePublicListingSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DevicePublicListingSpec_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Device'
func (fpaivs *Device_FieldSubPathArrayItemValue) ContainsValue(source *Device) bool {
	switch fpaivs.Selector() {
	case Device_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Device_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(DeviceSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case Device_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(DeviceStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	case Device_FieldPathSelectorPublicListingSpec:
		return fpaivs.subPathItemValue.(DevicePublicListingSpec_FieldPathArrayItemValue).ContainsValue(source.GetPublicListingSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for Device: %d", fpaivs.Selector()))
	}
}

// Device_FieldPathArrayOfValues allows storing slice of values for Device fields according to their type
type Device_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Device_FieldPath
}

func ParseDevice_FieldPathArrayOfValues(pathStr, valuesStr string) (Device_FieldPathArrayOfValues, error) {
	fp, err := ParseDevice_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Device field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Device_FieldPathArrayOfValues), nil
}

func MustParseDevice_FieldPathArrayOfValues(pathStr, valuesStr string) Device_FieldPathArrayOfValues {
	fpaov, err := ParseDevice_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Device_FieldTerminalPathArrayOfValues struct {
	Device_FieldTerminalPath
	values interface{}
}

var _ Device_FieldPathArrayOfValues = (*Device_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Device_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Device_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*Device_Spec) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*Device_Status) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorPublicListingSpec:
		for _, v := range fpaov.values.([]*Device_PublicListingSpec) {
			values = append(values, v)
		}
	case Device_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*Device_Spec, bool) {
	res, ok := fpaov.values.([]*Device_Spec)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*Device_Status, bool) {
	res, ok := fpaov.values.([]*Device_Status)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsPublicListingSpecArrayOfValues() ([]*Device_PublicListingSpec, bool) {
	res, ok := fpaov.values.([]*Device_PublicListingSpec)
	return res, ok
}
func (fpaov *Device_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type Device_FieldSubPathArrayOfValues struct {
	Device_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Device_FieldPathArrayOfValues = (*Device_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Device_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Device_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Device_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (DeviceSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Device_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (DeviceStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatus_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Device_FieldSubPathArrayOfValues) AsPublicListingSpecPathArrayOfValues() (DevicePublicListingSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DevicePublicListingSpec_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpec_FieldPathSelector
	Get(source *Device_Spec) []interface{}
	GetSingle(source *Device_Spec) (interface{}, bool)
	ClearValue(item *Device_Spec)

	// Those methods build corresponding DeviceSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpec_FieldPathArrayItemValue
}

type DeviceSpec_FieldPathSelector int32

const (
	DeviceSpec_FieldPathSelectorServiceAccount DeviceSpec_FieldPathSelector = 0
	DeviceSpec_FieldPathSelectorOsVersion      DeviceSpec_FieldPathSelector = 1
	DeviceSpec_FieldPathSelectorNetConfig      DeviceSpec_FieldPathSelector = 2
	DeviceSpec_FieldPathSelectorNetConfigMode  DeviceSpec_FieldPathSelector = 3
	DeviceSpec_FieldPathSelectorOsImageUrl     DeviceSpec_FieldPathSelector = 4
	DeviceSpec_FieldPathSelectorSshConfig      DeviceSpec_FieldPathSelector = 5
)

func (s DeviceSpec_FieldPathSelector) String() string {
	switch s {
	case DeviceSpec_FieldPathSelectorServiceAccount:
		return "service_account"
	case DeviceSpec_FieldPathSelectorOsVersion:
		return "os_version"
	case DeviceSpec_FieldPathSelectorNetConfig:
		return "net_config"
	case DeviceSpec_FieldPathSelectorNetConfigMode:
		return "net_config_mode"
	case DeviceSpec_FieldPathSelectorOsImageUrl:
		return "os_image_url"
	case DeviceSpec_FieldPathSelectorSshConfig:
		return "ssh_config"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", s))
	}
}

func BuildDeviceSpec_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "service_account", "serviceAccount", "service-account":
			return &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorServiceAccount}, nil
		case "os_version", "osVersion", "os-version":
			return &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorOsVersion}, nil
		case "net_config", "netConfig", "net-config":
			return &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorNetConfig}, nil
		case "net_config_mode", "netConfigMode", "net-config-mode":
			return &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorNetConfigMode}, nil
		case "os_image_url", "osImageUrl", "os-image-url":
			return &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorOsImageUrl}, nil
		case "ssh_config", "sshConfig", "ssh-config":
			return &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorSshConfig}, nil
		}
	} else {
		switch fp[0] {
		case "net_config", "netConfig", "net-config":
			if subpath, err := BuildDeviceSpecNetworkConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpec_FieldSubPath{selector: DeviceSpec_FieldPathSelectorNetConfig, subPath: subpath}, nil
			}
		case "ssh_config", "sshConfig", "ssh-config":
			if subpath, err := BuildDeviceSpecSSHConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpec_FieldSubPath{selector: DeviceSpec_FieldPathSelectorSshConfig, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec", fp)
}

func ParseDeviceSpec_FieldPath(rawField string) (DeviceSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpec_FieldPath(fp)
}

func MustParseDeviceSpec_FieldPath(rawField string) DeviceSpec_FieldPath {
	fp, err := ParseDeviceSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpec_FieldTerminalPath struct {
	selector DeviceSpec_FieldPathSelector
}

var _ DeviceSpec_FieldPath = (*DeviceSpec_FieldTerminalPath)(nil)

func (fp *DeviceSpec_FieldTerminalPath) Selector() DeviceSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec
func (fp *DeviceSpec_FieldTerminalPath) Get(source *Device_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpec_FieldPathSelectorServiceAccount:
			if source.ServiceAccount != nil {
				values = append(values, source.ServiceAccount)
			}
		case DeviceSpec_FieldPathSelectorOsVersion:
			values = append(values, source.OsVersion)
		case DeviceSpec_FieldPathSelectorNetConfig:
			if source.NetConfig != nil {
				values = append(values, source.NetConfig)
			}
		case DeviceSpec_FieldPathSelectorNetConfigMode:
			values = append(values, source.NetConfigMode)
		case DeviceSpec_FieldPathSelectorOsImageUrl:
			values = append(values, source.OsImageUrl)
		case DeviceSpec_FieldPathSelectorSshConfig:
			if source.SshConfig != nil {
				values = append(values, source.SshConfig)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec))
}

// GetSingle returns value pointed by specific field of from source Device_Spec
func (fp *DeviceSpec_FieldTerminalPath) GetSingle(source *Device_Spec) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpec_FieldPathSelectorServiceAccount:
		res := source.GetServiceAccount()
		return res, res != nil
	case DeviceSpec_FieldPathSelectorOsVersion:
		return source.GetOsVersion(), source != nil
	case DeviceSpec_FieldPathSelectorNetConfig:
		res := source.GetNetConfig()
		return res, res != nil
	case DeviceSpec_FieldPathSelectorNetConfigMode:
		return source.GetNetConfigMode(), source != nil
	case DeviceSpec_FieldPathSelectorOsImageUrl:
		return source.GetOsImageUrl(), source != nil
	case DeviceSpec_FieldPathSelectorSshConfig:
		res := source.GetSshConfig()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fp.selector))
	}
}

func (fp *DeviceSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpec_FieldPathSelectorServiceAccount:
		return (*iam_service_account.Reference)(nil)
	case DeviceSpec_FieldPathSelectorOsVersion:
		return ""
	case DeviceSpec_FieldPathSelectorNetConfig:
		return (*Device_Spec_NetworkConfig)(nil)
	case DeviceSpec_FieldPathSelectorNetConfigMode:
		return ""
	case DeviceSpec_FieldPathSelectorOsImageUrl:
		return ""
	case DeviceSpec_FieldPathSelectorSshConfig:
		return (*Device_Spec_SSHConfig)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fp.selector))
	}
}

func (fp *DeviceSpec_FieldTerminalPath) ClearValue(item *Device_Spec) {
	if item != nil {
		switch fp.selector {
		case DeviceSpec_FieldPathSelectorServiceAccount:
			item.ServiceAccount = nil
		case DeviceSpec_FieldPathSelectorOsVersion:
			item.OsVersion = ""
		case DeviceSpec_FieldPathSelectorNetConfig:
			item.NetConfig = nil
		case DeviceSpec_FieldPathSelectorNetConfigMode:
			item.NetConfigMode = ""
		case DeviceSpec_FieldPathSelectorOsImageUrl:
			item.OsImageUrl = ""
		case DeviceSpec_FieldPathSelectorSshConfig:
			item.SshConfig = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpec_FieldPathSelectorServiceAccount ||
		fp.selector == DeviceSpec_FieldPathSelectorOsVersion ||
		fp.selector == DeviceSpec_FieldPathSelectorNetConfigMode ||
		fp.selector == DeviceSpec_FieldPathSelectorOsImageUrl
}

func (fp *DeviceSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpec_FieldTerminalPath) WithIValue(value interface{}) DeviceSpec_FieldPathValue {
	switch fp.selector {
	case DeviceSpec_FieldPathSelectorServiceAccount:
		return &DeviceSpec_FieldTerminalPathValue{DeviceSpec_FieldTerminalPath: *fp, value: value.(*iam_service_account.Reference)}
	case DeviceSpec_FieldPathSelectorOsVersion:
		return &DeviceSpec_FieldTerminalPathValue{DeviceSpec_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpec_FieldPathSelectorNetConfig:
		return &DeviceSpec_FieldTerminalPathValue{DeviceSpec_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig)}
	case DeviceSpec_FieldPathSelectorNetConfigMode:
		return &DeviceSpec_FieldTerminalPathValue{DeviceSpec_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpec_FieldPathSelectorOsImageUrl:
		return &DeviceSpec_FieldTerminalPathValue{DeviceSpec_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpec_FieldPathSelectorSshConfig:
		return &DeviceSpec_FieldTerminalPathValue{DeviceSpec_FieldTerminalPath: *fp, value: value.(*Device_Spec_SSHConfig)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fp.selector))
	}
}

func (fp *DeviceSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpec_FieldPathArrayOfValues {
	fpaov := &DeviceSpec_FieldTerminalPathArrayOfValues{DeviceSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpec_FieldPathSelectorServiceAccount:
		return &DeviceSpec_FieldTerminalPathArrayOfValues{DeviceSpec_FieldTerminalPath: *fp, values: values.([]*iam_service_account.Reference)}
	case DeviceSpec_FieldPathSelectorOsVersion:
		return &DeviceSpec_FieldTerminalPathArrayOfValues{DeviceSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpec_FieldPathSelectorNetConfig:
		return &DeviceSpec_FieldTerminalPathArrayOfValues{DeviceSpec_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig)}
	case DeviceSpec_FieldPathSelectorNetConfigMode:
		return &DeviceSpec_FieldTerminalPathArrayOfValues{DeviceSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpec_FieldPathSelectorOsImageUrl:
		return &DeviceSpec_FieldTerminalPathArrayOfValues{DeviceSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpec_FieldPathSelectorSshConfig:
		return &DeviceSpec_FieldTerminalPathArrayOfValues{DeviceSpec_FieldTerminalPath: *fp, values: values.([]*Device_Spec_SSHConfig)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fp.selector))
	}
}

func (fp *DeviceSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceSpec_FieldSubPath struct {
	selector DeviceSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceSpec_FieldPath = (*DeviceSpec_FieldSubPath)(nil)

func (fps *DeviceSpec_FieldSubPath) Selector() DeviceSpec_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceSpec_FieldSubPath) AsNetConfigSubPath() (DeviceSpecNetworkConfig_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfig_FieldPath)
	return res, ok
}
func (fps *DeviceSpec_FieldSubPath) AsSshConfigSubPath() (DeviceSpecSSHConfig_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecSSHConfig_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Spec
func (fps *DeviceSpec_FieldSubPath) Get(source *Device_Spec) (values []interface{}) {
	if asNetworkConfigFieldPath, ok := fps.AsNetConfigSubPath(); ok {
		values = append(values, asNetworkConfigFieldPath.Get(source.GetNetConfig())...)
	} else if asSSHConfigFieldPath, ok := fps.AsSshConfigSubPath(); ok {
		values = append(values, asSSHConfigFieldPath.Get(source.GetSshConfig())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fps.selector))
	}
	return
}

func (fps *DeviceSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Spec))
}

// GetSingle returns value of selected field from source Device_Spec
func (fps *DeviceSpec_FieldSubPath) GetSingle(source *Device_Spec) (interface{}, bool) {
	switch fps.selector {
	case DeviceSpec_FieldPathSelectorNetConfig:
		if source.GetNetConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNetConfig())
	case DeviceSpec_FieldPathSelectorSshConfig:
		if source.GetSshConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSshConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fps.selector))
	}
}

func (fps *DeviceSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Spec))
}

// GetDefault returns a default value of the field type
func (fps *DeviceSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceSpec_FieldSubPath) ClearValue(item *Device_Spec) {
	if item != nil {
		switch fps.selector {
		case DeviceSpec_FieldPathSelectorNetConfig:
			fps.subPath.ClearValueRaw(item.NetConfig)
		case DeviceSpec_FieldPathSelectorSshConfig:
			fps.subPath.ClearValueRaw(item.SshConfig)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fps.selector))
		}
	}
}

func (fps *DeviceSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceSpec_FieldSubPath) WithIValue(value interface{}) DeviceSpec_FieldPathValue {
	return &DeviceSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceSpec_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceSpec_FieldPathArrayOfValues {
	return &DeviceSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceSpec_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceSpec_FieldPathArrayItemValue {
	return &DeviceSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceSpec_FieldPathValue allows storing values for Spec fields according to their type
type DeviceSpec_FieldPathValue interface {
	DeviceSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec)
	CompareWith(*Device_Spec) (cmp int, comparable bool)
}

func ParseDeviceSpec_FieldPathValue(pathStr, valueStr string) (DeviceSpec_FieldPathValue, error) {
	fp, err := ParseDeviceSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpec_FieldPathValue), nil
}

func MustParseDeviceSpec_FieldPathValue(pathStr, valueStr string) DeviceSpec_FieldPathValue {
	fpv, err := ParseDeviceSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpec_FieldTerminalPathValue struct {
	DeviceSpec_FieldTerminalPath
	value interface{}
}

var _ DeviceSpec_FieldPathValue = (*DeviceSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *DeviceSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpec_FieldTerminalPathValue) AsServiceAccountValue() (*iam_service_account.Reference, bool) {
	res, ok := fpv.value.(*iam_service_account.Reference)
	return res, ok
}
func (fpv *DeviceSpec_FieldTerminalPathValue) AsOsVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpec_FieldTerminalPathValue) AsNetConfigValue() (*Device_Spec_NetworkConfig, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig)
	return res, ok
}
func (fpv *DeviceSpec_FieldTerminalPathValue) AsNetConfigModeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpec_FieldTerminalPathValue) AsOsImageUrlValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpec_FieldTerminalPathValue) AsSshConfigValue() (*Device_Spec_SSHConfig, bool) {
	res, ok := fpv.value.(*Device_Spec_SSHConfig)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *DeviceSpec_FieldTerminalPathValue) SetTo(target **Device_Spec) {
	if *target == nil {
		*target = new(Device_Spec)
	}
	switch fpv.selector {
	case DeviceSpec_FieldPathSelectorServiceAccount:
		(*target).ServiceAccount = fpv.value.(*iam_service_account.Reference)
	case DeviceSpec_FieldPathSelectorOsVersion:
		(*target).OsVersion = fpv.value.(string)
	case DeviceSpec_FieldPathSelectorNetConfig:
		(*target).NetConfig = fpv.value.(*Device_Spec_NetworkConfig)
	case DeviceSpec_FieldPathSelectorNetConfigMode:
		(*target).NetConfigMode = fpv.value.(string)
	case DeviceSpec_FieldPathSelectorOsImageUrl:
		(*target).OsImageUrl = fpv.value.(string)
	case DeviceSpec_FieldPathSelectorSshConfig:
		(*target).SshConfig = fpv.value.(*Device_Spec_SSHConfig)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fpv.selector))
	}
}

func (fpv *DeviceSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpec_FieldTerminalPathValue' with the value under path in 'Device_Spec'.
func (fpv *DeviceSpec_FieldTerminalPathValue) CompareWith(source *Device_Spec) (int, bool) {
	switch fpv.selector {
	case DeviceSpec_FieldPathSelectorServiceAccount:
		leftValue := fpv.value.(*iam_service_account.Reference)
		rightValue := source.GetServiceAccount()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpec_FieldPathSelectorOsVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetOsVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpec_FieldPathSelectorNetConfig:
		return 0, false
	case DeviceSpec_FieldPathSelectorNetConfigMode:
		leftValue := fpv.value.(string)
		rightValue := source.GetNetConfigMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpec_FieldPathSelectorOsImageUrl:
		leftValue := fpv.value.(string)
		rightValue := source.GetOsImageUrl()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpec_FieldPathSelectorSshConfig:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fpv.selector))
	}
}

func (fpv *DeviceSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec))
}

type DeviceSpec_FieldSubPathValue struct {
	DeviceSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceSpec_FieldPathValue = (*DeviceSpec_FieldSubPathValue)(nil)

func (fpvs *DeviceSpec_FieldSubPathValue) AsNetConfigPathValue() (DeviceSpecNetworkConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfig_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpec_FieldSubPathValue) AsSshConfigPathValue() (DeviceSpecSSHConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecSSHConfig_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceSpec_FieldSubPathValue) SetTo(target **Device_Spec) {
	if *target == nil {
		*target = new(Device_Spec)
	}
	switch fpvs.Selector() {
	case DeviceSpec_FieldPathSelectorNetConfig:
		fpvs.subPathValue.(DeviceSpecNetworkConfig_FieldPathValue).SetTo(&(*target).NetConfig)
	case DeviceSpec_FieldPathSelectorSshConfig:
		fpvs.subPathValue.(DeviceSpecSSHConfig_FieldPathValue).SetTo(&(*target).SshConfig)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceSpec_FieldSubPathValue) CompareWith(source *Device_Spec) (int, bool) {
	switch fpvs.Selector() {
	case DeviceSpec_FieldPathSelectorNetConfig:
		return fpvs.subPathValue.(DeviceSpecNetworkConfig_FieldPathValue).CompareWith(source.GetNetConfig())
	case DeviceSpec_FieldPathSelectorSshConfig:
		return fpvs.subPathValue.(DeviceSpecSSHConfig_FieldPathValue).CompareWith(source.GetSshConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Spec))
}

// DeviceSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type DeviceSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpec_FieldPath
	ContainsValue(*Device_Spec) bool
}

// ParseDeviceSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpec_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpec_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpec_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpec_FieldTerminalPathArrayItemValue struct {
	DeviceSpec_FieldTerminalPath
	value interface{}
}

var _ DeviceSpec_FieldPathArrayItemValue = (*DeviceSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec as interface{}
func (fpaiv *DeviceSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpec_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *DeviceSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec) bool {
	slice := fpaiv.DeviceSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceSpec_FieldSubPathArrayItemValue struct {
	DeviceSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceSpec_FieldSubPathArrayItemValue) AsNetConfigPathItemValue() (DeviceSpecNetworkConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfig_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpec_FieldSubPathArrayItemValue) AsSshConfigPathItemValue() (DeviceSpecSSHConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecSSHConfig_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *DeviceSpec_FieldSubPathArrayItemValue) ContainsValue(source *Device_Spec) bool {
	switch fpaivs.Selector() {
	case DeviceSpec_FieldPathSelectorNetConfig:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfig_FieldPathArrayItemValue).ContainsValue(source.GetNetConfig())
	case DeviceSpec_FieldPathSelectorSshConfig:
		return fpaivs.subPathItemValue.(DeviceSpecSSHConfig_FieldPathArrayItemValue).ContainsValue(source.GetSshConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec: %d", fpaivs.Selector()))
	}
}

// DeviceSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type DeviceSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpec_FieldPath
}

func ParseDeviceSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpec_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpec_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpec_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpec_FieldTerminalPathArrayOfValues struct {
	DeviceSpec_FieldTerminalPath
	values interface{}
}

var _ DeviceSpec_FieldPathArrayOfValues = (*DeviceSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpec_FieldPathSelectorServiceAccount:
		for _, v := range fpaov.values.([]*iam_service_account.Reference) {
			values = append(values, v)
		}
	case DeviceSpec_FieldPathSelectorOsVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpec_FieldPathSelectorNetConfig:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig) {
			values = append(values, v)
		}
	case DeviceSpec_FieldPathSelectorNetConfigMode:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpec_FieldPathSelectorOsImageUrl:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpec_FieldPathSelectorSshConfig:
		for _, v := range fpaov.values.([]*Device_Spec_SSHConfig) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpec_FieldTerminalPathArrayOfValues) AsServiceAccountArrayOfValues() ([]*iam_service_account.Reference, bool) {
	res, ok := fpaov.values.([]*iam_service_account.Reference)
	return res, ok
}
func (fpaov *DeviceSpec_FieldTerminalPathArrayOfValues) AsOsVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpec_FieldTerminalPathArrayOfValues) AsNetConfigArrayOfValues() ([]*Device_Spec_NetworkConfig, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig)
	return res, ok
}
func (fpaov *DeviceSpec_FieldTerminalPathArrayOfValues) AsNetConfigModeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpec_FieldTerminalPathArrayOfValues) AsOsImageUrlArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpec_FieldTerminalPathArrayOfValues) AsSshConfigArrayOfValues() ([]*Device_Spec_SSHConfig, bool) {
	res, ok := fpaov.values.([]*Device_Spec_SSHConfig)
	return res, ok
}

type DeviceSpec_FieldSubPathArrayOfValues struct {
	DeviceSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceSpec_FieldPathArrayOfValues = (*DeviceSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceSpec_FieldSubPathArrayOfValues) AsNetConfigPathArrayOfValues() (DeviceSpecNetworkConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfig_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpec_FieldSubPathArrayOfValues) AsSshConfigPathArrayOfValues() (DeviceSpecSSHConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecSSHConfig_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatus_FieldPathSelector
	Get(source *Device_Status) []interface{}
	GetSingle(source *Device_Status) (interface{}, bool)
	ClearValue(item *Device_Status)

	// Those methods build corresponding DeviceStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatus_FieldPathArrayItemValue
}

type DeviceStatus_FieldPathSelector int32

const (
	DeviceStatus_FieldPathSelectorAddresses  DeviceStatus_FieldPathSelector = 0
	DeviceStatus_FieldPathSelectorConditions DeviceStatus_FieldPathSelector = 1
	DeviceStatus_FieldPathSelectorDeviceInfo DeviceStatus_FieldPathSelector = 2
)

func (s DeviceStatus_FieldPathSelector) String() string {
	switch s {
	case DeviceStatus_FieldPathSelectorAddresses:
		return "addresses"
	case DeviceStatus_FieldPathSelectorConditions:
		return "conditions"
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		return "device_info"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", s))
	}
}

func BuildDeviceStatus_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "addresses":
			return &DeviceStatus_FieldTerminalPath{selector: DeviceStatus_FieldPathSelectorAddresses}, nil
		case "conditions":
			return &DeviceStatus_FieldTerminalPath{selector: DeviceStatus_FieldPathSelectorConditions}, nil
		case "device_info", "deviceInfo", "device-info":
			return &DeviceStatus_FieldTerminalPath{selector: DeviceStatus_FieldPathSelectorDeviceInfo}, nil
		}
	} else {
		switch fp[0] {
		case "addresses":
			if subpath, err := BuildDeviceStatusAddress_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatus_FieldSubPath{selector: DeviceStatus_FieldPathSelectorAddresses, subPath: subpath}, nil
			}
		case "conditions":
			if subpath, err := BuildDeviceStatusCondition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatus_FieldSubPath{selector: DeviceStatus_FieldPathSelectorConditions, subPath: subpath}, nil
			}
		case "device_info", "deviceInfo", "device-info":
			if subpath, err := BuildDeviceStatusDeviceInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatus_FieldSubPath{selector: DeviceStatus_FieldPathSelectorDeviceInfo, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status", fp)
}

func ParseDeviceStatus_FieldPath(rawField string) (DeviceStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatus_FieldPath(fp)
}

func MustParseDeviceStatus_FieldPath(rawField string) DeviceStatus_FieldPath {
	fp, err := ParseDeviceStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatus_FieldTerminalPath struct {
	selector DeviceStatus_FieldPathSelector
}

var _ DeviceStatus_FieldPath = (*DeviceStatus_FieldTerminalPath)(nil)

func (fp *DeviceStatus_FieldTerminalPath) Selector() DeviceStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status
func (fp *DeviceStatus_FieldTerminalPath) Get(source *Device_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatus_FieldPathSelectorAddresses:
			for _, value := range source.GetAddresses() {
				values = append(values, value)
			}
		case DeviceStatus_FieldPathSelectorConditions:
			for _, value := range source.GetConditions() {
				values = append(values, value)
			}
		case DeviceStatus_FieldPathSelectorDeviceInfo:
			if source.DeviceInfo != nil {
				values = append(values, source.DeviceInfo)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status))
}

// GetSingle returns value pointed by specific field of from source Device_Status
func (fp *DeviceStatus_FieldTerminalPath) GetSingle(source *Device_Status) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatus_FieldPathSelectorAddresses:
		res := source.GetAddresses()
		return res, res != nil
	case DeviceStatus_FieldPathSelectorConditions:
		res := source.GetConditions()
		return res, res != nil
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		res := source.GetDeviceInfo()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fp.selector))
	}
}

func (fp *DeviceStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatus_FieldPathSelectorAddresses:
		return ([]*Device_Status_Address)(nil)
	case DeviceStatus_FieldPathSelectorConditions:
		return ([]*Device_Status_Condition)(nil)
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		return (*Device_Status_DeviceInfo)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fp.selector))
	}
}

func (fp *DeviceStatus_FieldTerminalPath) ClearValue(item *Device_Status) {
	if item != nil {
		switch fp.selector {
		case DeviceStatus_FieldPathSelectorAddresses:
			item.Addresses = nil
		case DeviceStatus_FieldPathSelectorConditions:
			item.Conditions = nil
		case DeviceStatus_FieldPathSelectorDeviceInfo:
			item.DeviceInfo = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatus_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DeviceStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatus_FieldTerminalPath) WithIValue(value interface{}) DeviceStatus_FieldPathValue {
	switch fp.selector {
	case DeviceStatus_FieldPathSelectorAddresses:
		return &DeviceStatus_FieldTerminalPathValue{DeviceStatus_FieldTerminalPath: *fp, value: value.([]*Device_Status_Address)}
	case DeviceStatus_FieldPathSelectorConditions:
		return &DeviceStatus_FieldTerminalPathValue{DeviceStatus_FieldTerminalPath: *fp, value: value.([]*Device_Status_Condition)}
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		return &DeviceStatus_FieldTerminalPathValue{DeviceStatus_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fp.selector))
	}
}

func (fp *DeviceStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatus_FieldPathArrayOfValues {
	fpaov := &DeviceStatus_FieldTerminalPathArrayOfValues{DeviceStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatus_FieldPathSelectorAddresses:
		return &DeviceStatus_FieldTerminalPathArrayOfValues{DeviceStatus_FieldTerminalPath: *fp, values: values.([][]*Device_Status_Address)}
	case DeviceStatus_FieldPathSelectorConditions:
		return &DeviceStatus_FieldTerminalPathArrayOfValues{DeviceStatus_FieldTerminalPath: *fp, values: values.([][]*Device_Status_Condition)}
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		return &DeviceStatus_FieldTerminalPathArrayOfValues{DeviceStatus_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatus_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceStatus_FieldPathSelectorAddresses:
		return &DeviceStatus_FieldTerminalPathArrayItemValue{DeviceStatus_FieldTerminalPath: *fp, value: value.(*Device_Status_Address)}
	case DeviceStatus_FieldPathSelectorConditions:
		return &DeviceStatus_FieldTerminalPathArrayItemValue{DeviceStatus_FieldTerminalPath: *fp, value: value.(*Device_Status_Condition)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fp.selector))
	}
}

func (fp *DeviceStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatus_FieldSubPath struct {
	selector DeviceStatus_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatus_FieldPath = (*DeviceStatus_FieldSubPath)(nil)

func (fps *DeviceStatus_FieldSubPath) Selector() DeviceStatus_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatus_FieldSubPath) AsAddressesSubPath() (DeviceStatusAddress_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusAddress_FieldPath)
	return res, ok
}
func (fps *DeviceStatus_FieldSubPath) AsConditionsSubPath() (DeviceStatusCondition_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusCondition_FieldPath)
	return res, ok
}
func (fps *DeviceStatus_FieldSubPath) AsDeviceInfoSubPath() (DeviceStatusDeviceInfo_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfo_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatus_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatus_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status
func (fps *DeviceStatus_FieldSubPath) Get(source *Device_Status) (values []interface{}) {
	if asAddressFieldPath, ok := fps.AsAddressesSubPath(); ok {
		for _, item := range source.GetAddresses() {
			values = append(values, asAddressFieldPath.Get(item)...)
		}
	} else if asConditionFieldPath, ok := fps.AsConditionsSubPath(); ok {
		for _, item := range source.GetConditions() {
			values = append(values, asConditionFieldPath.Get(item)...)
		}
	} else if asDeviceInfoFieldPath, ok := fps.AsDeviceInfoSubPath(); ok {
		values = append(values, asDeviceInfoFieldPath.Get(source.GetDeviceInfo())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatus_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status))
}

// GetSingle returns value of selected field from source Device_Status
func (fps *DeviceStatus_FieldSubPath) GetSingle(source *Device_Status) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatus_FieldPathSelectorAddresses:
		if len(source.GetAddresses()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAddresses()[0])
	case DeviceStatus_FieldPathSelectorConditions:
		if len(source.GetConditions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditions()[0])
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		if source.GetDeviceInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeviceInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fps.selector))
	}
}

func (fps *DeviceStatus_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatus_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatus_FieldSubPath) ClearValue(item *Device_Status) {
	if item != nil {
		switch fps.selector {
		case DeviceStatus_FieldPathSelectorAddresses:
			for _, subItem := range item.Addresses {
				fps.subPath.ClearValueRaw(subItem)
			}
		case DeviceStatus_FieldPathSelectorConditions:
			for _, subItem := range item.Conditions {
				fps.subPath.ClearValueRaw(subItem)
			}
		case DeviceStatus_FieldPathSelectorDeviceInfo:
			fps.subPath.ClearValueRaw(item.DeviceInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatus_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatus_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatus_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatus_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatus_FieldSubPath) WithIValue(value interface{}) DeviceStatus_FieldPathValue {
	return &DeviceStatus_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatus_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatus_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatus_FieldPathArrayOfValues {
	return &DeviceStatus_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatus_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatus_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatus_FieldPathArrayItemValue {
	return &DeviceStatus_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatus_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatus_FieldPathValue allows storing values for Status fields according to their type
type DeviceStatus_FieldPathValue interface {
	DeviceStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status)
	CompareWith(*Device_Status) (cmp int, comparable bool)
}

func ParseDeviceStatus_FieldPathValue(pathStr, valueStr string) (DeviceStatus_FieldPathValue, error) {
	fp, err := ParseDeviceStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatus_FieldPathValue), nil
}

func MustParseDeviceStatus_FieldPathValue(pathStr, valueStr string) DeviceStatus_FieldPathValue {
	fpv, err := ParseDeviceStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatus_FieldTerminalPathValue struct {
	DeviceStatus_FieldTerminalPath
	value interface{}
}

var _ DeviceStatus_FieldPathValue = (*DeviceStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *DeviceStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatus_FieldTerminalPathValue) AsAddressesValue() ([]*Device_Status_Address, bool) {
	res, ok := fpv.value.([]*Device_Status_Address)
	return res, ok
}
func (fpv *DeviceStatus_FieldTerminalPathValue) AsConditionsValue() ([]*Device_Status_Condition, bool) {
	res, ok := fpv.value.([]*Device_Status_Condition)
	return res, ok
}
func (fpv *DeviceStatus_FieldTerminalPathValue) AsDeviceInfoValue() (*Device_Status_DeviceInfo, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo)
	return res, ok
}

// SetTo stores value for selected field for object Status
func (fpv *DeviceStatus_FieldTerminalPathValue) SetTo(target **Device_Status) {
	if *target == nil {
		*target = new(Device_Status)
	}
	switch fpv.selector {
	case DeviceStatus_FieldPathSelectorAddresses:
		(*target).Addresses = fpv.value.([]*Device_Status_Address)
	case DeviceStatus_FieldPathSelectorConditions:
		(*target).Conditions = fpv.value.([]*Device_Status_Condition)
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		(*target).DeviceInfo = fpv.value.(*Device_Status_DeviceInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fpv.selector))
	}
}

func (fpv *DeviceStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatus_FieldTerminalPathValue' with the value under path in 'Device_Status'.
func (fpv *DeviceStatus_FieldTerminalPathValue) CompareWith(source *Device_Status) (int, bool) {
	switch fpv.selector {
	case DeviceStatus_FieldPathSelectorAddresses:
		return 0, false
	case DeviceStatus_FieldPathSelectorConditions:
		return 0, false
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fpv.selector))
	}
}

func (fpv *DeviceStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status))
}

type DeviceStatus_FieldSubPathValue struct {
	DeviceStatus_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatus_FieldPathValue = (*DeviceStatus_FieldSubPathValue)(nil)

func (fpvs *DeviceStatus_FieldSubPathValue) AsAddressesPathValue() (DeviceStatusAddress_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusAddress_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceStatus_FieldSubPathValue) AsConditionsPathValue() (DeviceStatusCondition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusCondition_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceStatus_FieldSubPathValue) AsDeviceInfoPathValue() (DeviceStatusDeviceInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfo_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatus_FieldSubPathValue) SetTo(target **Device_Status) {
	if *target == nil {
		*target = new(Device_Status)
	}
	switch fpvs.Selector() {
	case DeviceStatus_FieldPathSelectorAddresses:
		panic("FieldPath setter is unsupported for array subpaths")
	case DeviceStatus_FieldPathSelectorConditions:
		panic("FieldPath setter is unsupported for array subpaths")
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		fpvs.subPathValue.(DeviceStatusDeviceInfo_FieldPathValue).SetTo(&(*target).DeviceInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatus_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatus_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatus_FieldSubPathValue) CompareWith(source *Device_Status) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatus_FieldPathSelectorAddresses:
		return 0, false // repeated field
	case DeviceStatus_FieldPathSelectorConditions:
		return 0, false // repeated field
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		return fpvs.subPathValue.(DeviceStatusDeviceInfo_FieldPathValue).CompareWith(source.GetDeviceInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatus_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status))
}

// DeviceStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type DeviceStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatus_FieldPath
	ContainsValue(*Device_Status) bool
}

// ParseDeviceStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatus_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatus_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatus_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatus_FieldTerminalPathArrayItemValue struct {
	DeviceStatus_FieldTerminalPath
	value interface{}
}

var _ DeviceStatus_FieldPathArrayItemValue = (*DeviceStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status as interface{}
func (fpaiv *DeviceStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceStatus_FieldTerminalPathArrayItemValue) AsAddressesItemValue() (*Device_Status_Address, bool) {
	res, ok := fpaiv.value.(*Device_Status_Address)
	return res, ok
}
func (fpaiv *DeviceStatus_FieldTerminalPathArrayItemValue) AsConditionsItemValue() (*Device_Status_Condition, bool) {
	res, ok := fpaiv.value.(*Device_Status_Condition)
	return res, ok
}

func (fpaiv *DeviceStatus_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *DeviceStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status) bool {
	slice := fpaiv.DeviceStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatus_FieldSubPathArrayItemValue struct {
	DeviceStatus_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatus_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatus_FieldSubPathArrayItemValue) AsAddressesPathItemValue() (DeviceStatusAddress_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusAddress_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceStatus_FieldSubPathArrayItemValue) AsConditionsPathItemValue() (DeviceStatusCondition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusCondition_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceStatus_FieldSubPathArrayItemValue) AsDeviceInfoPathItemValue() (DeviceStatusDeviceInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfo_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaivs *DeviceStatus_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status) bool {
	switch fpaivs.Selector() {
	case DeviceStatus_FieldPathSelectorAddresses:
		return false // repeated/map field
	case DeviceStatus_FieldPathSelectorConditions:
		return false // repeated/map field
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfo_FieldPathArrayItemValue).ContainsValue(source.GetDeviceInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status: %d", fpaivs.Selector()))
	}
}

// DeviceStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type DeviceStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatus_FieldPath
}

func ParseDeviceStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatus_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatus_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatus_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatus_FieldTerminalPathArrayOfValues struct {
	DeviceStatus_FieldTerminalPath
	values interface{}
}

var _ DeviceStatus_FieldPathArrayOfValues = (*DeviceStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatus_FieldPathSelectorAddresses:
		for _, v := range fpaov.values.([][]*Device_Status_Address) {
			values = append(values, v)
		}
	case DeviceStatus_FieldPathSelectorConditions:
		for _, v := range fpaov.values.([][]*Device_Status_Condition) {
			values = append(values, v)
		}
	case DeviceStatus_FieldPathSelectorDeviceInfo:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatus_FieldTerminalPathArrayOfValues) AsAddressesArrayOfValues() ([][]*Device_Status_Address, bool) {
	res, ok := fpaov.values.([][]*Device_Status_Address)
	return res, ok
}
func (fpaov *DeviceStatus_FieldTerminalPathArrayOfValues) AsConditionsArrayOfValues() ([][]*Device_Status_Condition, bool) {
	res, ok := fpaov.values.([][]*Device_Status_Condition)
	return res, ok
}
func (fpaov *DeviceStatus_FieldTerminalPathArrayOfValues) AsDeviceInfoArrayOfValues() ([]*Device_Status_DeviceInfo, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo)
	return res, ok
}

type DeviceStatus_FieldSubPathArrayOfValues struct {
	DeviceStatus_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatus_FieldPathArrayOfValues = (*DeviceStatus_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatus_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatus_FieldSubPathArrayOfValues) AsAddressesPathArrayOfValues() (DeviceStatusAddress_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusAddress_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceStatus_FieldSubPathArrayOfValues) AsConditionsPathArrayOfValues() (DeviceStatusCondition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusCondition_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceStatus_FieldSubPathArrayOfValues) AsDeviceInfoPathArrayOfValues() (DeviceStatusDeviceInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfo_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DevicePublicListingSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() DevicePublicListingSpec_FieldPathSelector
	Get(source *Device_PublicListingSpec) []interface{}
	GetSingle(source *Device_PublicListingSpec) (interface{}, bool)
	ClearValue(item *Device_PublicListingSpec)

	// Those methods build corresponding DevicePublicListingSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DevicePublicListingSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) DevicePublicListingSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DevicePublicListingSpec_FieldPathArrayItemValue
}

type DevicePublicListingSpec_FieldPathSelector int32

const (
	DevicePublicListingSpec_FieldPathSelectorEnabled   DevicePublicListingSpec_FieldPathSelector = 0
	DevicePublicListingSpec_FieldPathSelectorFieldMask DevicePublicListingSpec_FieldPathSelector = 1
)

func (s DevicePublicListingSpec_FieldPathSelector) String() string {
	switch s {
	case DevicePublicListingSpec_FieldPathSelectorEnabled:
		return "enabled"
	case DevicePublicListingSpec_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_PublicListingSpec: %d", s))
	}
}

func BuildDevicePublicListingSpec_FieldPath(fp gotenobject.RawFieldPath) (DevicePublicListingSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_PublicListingSpec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "enabled":
			return &DevicePublicListingSpec_FieldTerminalPath{selector: DevicePublicListingSpec_FieldPathSelectorEnabled}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &DevicePublicListingSpec_FieldTerminalPath{selector: DevicePublicListingSpec_FieldPathSelectorFieldMask}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_PublicListingSpec", fp)
}

func ParseDevicePublicListingSpec_FieldPath(rawField string) (DevicePublicListingSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDevicePublicListingSpec_FieldPath(fp)
}

func MustParseDevicePublicListingSpec_FieldPath(rawField string) DevicePublicListingSpec_FieldPath {
	fp, err := ParseDevicePublicListingSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DevicePublicListingSpec_FieldTerminalPath struct {
	selector DevicePublicListingSpec_FieldPathSelector
}

var _ DevicePublicListingSpec_FieldPath = (*DevicePublicListingSpec_FieldTerminalPath)(nil)

func (fp *DevicePublicListingSpec_FieldTerminalPath) Selector() DevicePublicListingSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DevicePublicListingSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DevicePublicListingSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_PublicListingSpec
func (fp *DevicePublicListingSpec_FieldTerminalPath) Get(source *Device_PublicListingSpec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DevicePublicListingSpec_FieldPathSelectorEnabled:
			values = append(values, source.Enabled)
		case DevicePublicListingSpec_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_PublicListingSpec: %d", fp.selector))
		}
	}
	return
}

func (fp *DevicePublicListingSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_PublicListingSpec))
}

// GetSingle returns value pointed by specific field of from source Device_PublicListingSpec
func (fp *DevicePublicListingSpec_FieldTerminalPath) GetSingle(source *Device_PublicListingSpec) (interface{}, bool) {
	switch fp.selector {
	case DevicePublicListingSpec_FieldPathSelectorEnabled:
		return source.GetEnabled(), source != nil
	case DevicePublicListingSpec_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_PublicListingSpec: %d", fp.selector))
	}
}

func (fp *DevicePublicListingSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_PublicListingSpec))
}

// GetDefault returns a default value of the field type
func (fp *DevicePublicListingSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DevicePublicListingSpec_FieldPathSelectorEnabled:
		return false
	case DevicePublicListingSpec_FieldPathSelectorFieldMask:
		return (*Device_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_PublicListingSpec: %d", fp.selector))
	}
}

func (fp *DevicePublicListingSpec_FieldTerminalPath) ClearValue(item *Device_PublicListingSpec) {
	if item != nil {
		switch fp.selector {
		case DevicePublicListingSpec_FieldPathSelectorEnabled:
			item.Enabled = false
		case DevicePublicListingSpec_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_PublicListingSpec: %d", fp.selector))
		}
	}
}

func (fp *DevicePublicListingSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_PublicListingSpec))
}

// IsLeaf - whether field path is holds simple value
func (fp *DevicePublicListingSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DevicePublicListingSpec_FieldPathSelectorEnabled ||
		fp.selector == DevicePublicListingSpec_FieldPathSelectorFieldMask
}

func (fp *DevicePublicListingSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DevicePublicListingSpec_FieldTerminalPath) WithIValue(value interface{}) DevicePublicListingSpec_FieldPathValue {
	switch fp.selector {
	case DevicePublicListingSpec_FieldPathSelectorEnabled:
		return &DevicePublicListingSpec_FieldTerminalPathValue{DevicePublicListingSpec_FieldTerminalPath: *fp, value: value.(bool)}
	case DevicePublicListingSpec_FieldPathSelectorFieldMask:
		return &DevicePublicListingSpec_FieldTerminalPathValue{DevicePublicListingSpec_FieldTerminalPath: *fp, value: value.(*Device_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_PublicListingSpec: %d", fp.selector))
	}
}

func (fp *DevicePublicListingSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DevicePublicListingSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) DevicePublicListingSpec_FieldPathArrayOfValues {
	fpaov := &DevicePublicListingSpec_FieldTerminalPathArrayOfValues{DevicePublicListingSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case DevicePublicListingSpec_FieldPathSelectorEnabled:
		return &DevicePublicListingSpec_FieldTerminalPathArrayOfValues{DevicePublicListingSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case DevicePublicListingSpec_FieldPathSelectorFieldMask:
		return &DevicePublicListingSpec_FieldTerminalPathArrayOfValues{DevicePublicListingSpec_FieldTerminalPath: *fp, values: values.([]*Device_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_PublicListingSpec: %d", fp.selector))
	}
	return fpaov
}

func (fp *DevicePublicListingSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DevicePublicListingSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) DevicePublicListingSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_PublicListingSpec: %d", fp.selector))
	}
}

func (fp *DevicePublicListingSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DevicePublicListingSpec_FieldPathValue allows storing values for PublicListingSpec fields according to their type
type DevicePublicListingSpec_FieldPathValue interface {
	DevicePublicListingSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_PublicListingSpec)
	CompareWith(*Device_PublicListingSpec) (cmp int, comparable bool)
}

func ParseDevicePublicListingSpec_FieldPathValue(pathStr, valueStr string) (DevicePublicListingSpec_FieldPathValue, error) {
	fp, err := ParseDevicePublicListingSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PublicListingSpec field path value from %s: %v", valueStr, err)
	}
	return fpv.(DevicePublicListingSpec_FieldPathValue), nil
}

func MustParseDevicePublicListingSpec_FieldPathValue(pathStr, valueStr string) DevicePublicListingSpec_FieldPathValue {
	fpv, err := ParseDevicePublicListingSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DevicePublicListingSpec_FieldTerminalPathValue struct {
	DevicePublicListingSpec_FieldTerminalPath
	value interface{}
}

var _ DevicePublicListingSpec_FieldPathValue = (*DevicePublicListingSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PublicListingSpec' as interface{}
func (fpv *DevicePublicListingSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DevicePublicListingSpec_FieldTerminalPathValue) AsEnabledValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DevicePublicListingSpec_FieldTerminalPathValue) AsFieldMaskValue() (*Device_FieldMask, bool) {
	res, ok := fpv.value.(*Device_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object PublicListingSpec
func (fpv *DevicePublicListingSpec_FieldTerminalPathValue) SetTo(target **Device_PublicListingSpec) {
	if *target == nil {
		*target = new(Device_PublicListingSpec)
	}
	switch fpv.selector {
	case DevicePublicListingSpec_FieldPathSelectorEnabled:
		(*target).Enabled = fpv.value.(bool)
	case DevicePublicListingSpec_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*Device_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_PublicListingSpec: %d", fpv.selector))
	}
}

func (fpv *DevicePublicListingSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_PublicListingSpec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DevicePublicListingSpec_FieldTerminalPathValue' with the value under path in 'Device_PublicListingSpec'.
func (fpv *DevicePublicListingSpec_FieldTerminalPathValue) CompareWith(source *Device_PublicListingSpec) (int, bool) {
	switch fpv.selector {
	case DevicePublicListingSpec_FieldPathSelectorEnabled:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnabled()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DevicePublicListingSpec_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_PublicListingSpec: %d", fpv.selector))
	}
}

func (fpv *DevicePublicListingSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_PublicListingSpec))
}

// DevicePublicListingSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for PublicListingSpec according to their type
// Present only for array (repeated) types.
type DevicePublicListingSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DevicePublicListingSpec_FieldPath
	ContainsValue(*Device_PublicListingSpec) bool
}

// ParseDevicePublicListingSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDevicePublicListingSpec_FieldPathArrayItemValue(pathStr, valueStr string) (DevicePublicListingSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseDevicePublicListingSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PublicListingSpec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DevicePublicListingSpec_FieldPathArrayItemValue), nil
}

func MustParseDevicePublicListingSpec_FieldPathArrayItemValue(pathStr, valueStr string) DevicePublicListingSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseDevicePublicListingSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DevicePublicListingSpec_FieldTerminalPathArrayItemValue struct {
	DevicePublicListingSpec_FieldTerminalPath
	value interface{}
}

var _ DevicePublicListingSpec_FieldPathArrayItemValue = (*DevicePublicListingSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_PublicListingSpec as interface{}
func (fpaiv *DevicePublicListingSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DevicePublicListingSpec_FieldTerminalPathArrayItemValue) GetSingle(source *Device_PublicListingSpec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DevicePublicListingSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_PublicListingSpec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PublicListingSpec'
func (fpaiv *DevicePublicListingSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_PublicListingSpec) bool {
	slice := fpaiv.DevicePublicListingSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DevicePublicListingSpec_FieldPathArrayOfValues allows storing slice of values for PublicListingSpec fields according to their type
type DevicePublicListingSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DevicePublicListingSpec_FieldPath
}

func ParseDevicePublicListingSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (DevicePublicListingSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseDevicePublicListingSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PublicListingSpec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DevicePublicListingSpec_FieldPathArrayOfValues), nil
}

func MustParseDevicePublicListingSpec_FieldPathArrayOfValues(pathStr, valuesStr string) DevicePublicListingSpec_FieldPathArrayOfValues {
	fpaov, err := ParseDevicePublicListingSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DevicePublicListingSpec_FieldTerminalPathArrayOfValues struct {
	DevicePublicListingSpec_FieldTerminalPath
	values interface{}
}

var _ DevicePublicListingSpec_FieldPathArrayOfValues = (*DevicePublicListingSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DevicePublicListingSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DevicePublicListingSpec_FieldPathSelectorEnabled:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DevicePublicListingSpec_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*Device_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DevicePublicListingSpec_FieldTerminalPathArrayOfValues) AsEnabledArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DevicePublicListingSpec_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*Device_FieldMask, bool) {
	res, ok := fpaov.values.([]*Device_FieldMask)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfig_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfig_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig)

	// Those methods build corresponding DeviceSpecNetworkConfig_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfig_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfig_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfig_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfig_FieldPathSelector int32

const (
	DeviceSpecNetworkConfig_FieldPathSelectorVersion   DeviceSpecNetworkConfig_FieldPathSelector = 0
	DeviceSpecNetworkConfig_FieldPathSelectorEthernets DeviceSpecNetworkConfig_FieldPathSelector = 1
	DeviceSpecNetworkConfig_FieldPathSelectorWifis     DeviceSpecNetworkConfig_FieldPathSelector = 2
	DeviceSpecNetworkConfig_FieldPathSelectorBridges   DeviceSpecNetworkConfig_FieldPathSelector = 3
	DeviceSpecNetworkConfig_FieldPathSelectorBonds     DeviceSpecNetworkConfig_FieldPathSelector = 4
	DeviceSpecNetworkConfig_FieldPathSelectorTunnels   DeviceSpecNetworkConfig_FieldPathSelector = 5
	DeviceSpecNetworkConfig_FieldPathSelectorVlans     DeviceSpecNetworkConfig_FieldPathSelector = 6
)

func (s DeviceSpecNetworkConfig_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfig_FieldPathSelectorVersion:
		return "version"
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		return "ethernets"
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		return "wifis"
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		return "bridges"
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		return "bonds"
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		return "tunnels"
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		return "vlans"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", s))
	}
}

func BuildDeviceSpecNetworkConfig_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfig_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "version":
			return &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorVersion}, nil
		case "ethernets":
			return &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorEthernets}, nil
		case "wifis":
			return &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorWifis}, nil
		case "bridges":
			return &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorBridges}, nil
		case "bonds":
			return &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorBonds}, nil
		case "tunnels":
			return &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorTunnels}, nil
		case "vlans":
			return &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorVlans}, nil
		}
	} else {
		switch fp[0] {
		case "ethernets":
			if subpath, err := BuildDeviceSpecNetworkConfigEthOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfig_FieldSubPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorEthernets, subPath: subpath}, nil
			}
		case "wifis":
			if subpath, err := BuildDeviceSpecNetworkConfigWifiOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfig_FieldSubPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorWifis, subPath: subpath}, nil
			}
		case "bridges":
			if subpath, err := BuildDeviceSpecNetworkConfigBridgesOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfig_FieldSubPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorBridges, subPath: subpath}, nil
			}
		case "bonds":
			if subpath, err := BuildDeviceSpecNetworkConfigBondsOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfig_FieldSubPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorBonds, subPath: subpath}, nil
			}
		case "tunnels":
			if subpath, err := BuildDeviceSpecNetworkConfigTunnelsOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfig_FieldSubPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorTunnels, subPath: subpath}, nil
			}
		case "vlans":
			if subpath, err := BuildDeviceSpecNetworkConfigVlansOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfig_FieldSubPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorVlans, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig", fp)
}

func ParseDeviceSpecNetworkConfig_FieldPath(rawField string) (DeviceSpecNetworkConfig_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfig_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfig_FieldPath(rawField string) DeviceSpecNetworkConfig_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfig_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfig_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfig_FieldPathSelector
}

var _ DeviceSpecNetworkConfig_FieldPath = (*DeviceSpecNetworkConfig_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) Selector() DeviceSpecNetworkConfig_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig
func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfig_FieldPathSelectorVersion:
			values = append(values, source.Version)
		case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
			for _, value := range source.GetEthernets() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
			for _, value := range source.GetWifis() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
			for _, value := range source.GetBridges() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
			for _, value := range source.GetBonds() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
			for _, value := range source.GetTunnels() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
			for _, value := range source.GetVlans() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig
func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfig_FieldPathSelectorVersion:
		return source.GetVersion(), source != nil
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		res := source.GetEthernets()
		return res, res != nil
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		res := source.GetWifis()
		return res, res != nil
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		res := source.GetBridges()
		return res, res != nil
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		res := source.GetBonds()
		return res, res != nil
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		res := source.GetTunnels()
		return res, res != nil
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		res := source.GetVlans()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfig_FieldPathSelectorVersion:
		return int32(0)
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		return ([]*Device_Spec_NetworkConfig_EthOpts)(nil)
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		return ([]*Device_Spec_NetworkConfig_WifiOpts)(nil)
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		return ([]*Device_Spec_NetworkConfig_BridgesOpts)(nil)
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		return ([]*Device_Spec_NetworkConfig_BondsOpts)(nil)
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		return ([]*Device_Spec_NetworkConfig_TunnelsOpts)(nil)
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		return ([]*Device_Spec_NetworkConfig_VlansOpts)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfig_FieldPathSelectorVersion:
			item.Version = int32(0)
		case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
			item.Ethernets = nil
		case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
			item.Wifis = nil
		case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
			item.Bridges = nil
		case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
			item.Bonds = nil
		case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
			item.Tunnels = nil
		case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
			item.Vlans = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfig_FieldPathSelectorVersion
}

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfig_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfig_FieldPathSelectorVersion:
		return &DeviceSpecNetworkConfig_FieldTerminalPathValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		return &DeviceSpecNetworkConfig_FieldTerminalPathValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.([]*Device_Spec_NetworkConfig_EthOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		return &DeviceSpecNetworkConfig_FieldTerminalPathValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.([]*Device_Spec_NetworkConfig_WifiOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		return &DeviceSpecNetworkConfig_FieldTerminalPathValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.([]*Device_Spec_NetworkConfig_BridgesOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		return &DeviceSpecNetworkConfig_FieldTerminalPathValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.([]*Device_Spec_NetworkConfig_BondsOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		return &DeviceSpecNetworkConfig_FieldTerminalPathValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.([]*Device_Spec_NetworkConfig_TunnelsOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		return &DeviceSpecNetworkConfig_FieldTerminalPathValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.([]*Device_Spec_NetworkConfig_VlansOpts)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfig_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfig_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfig_FieldPathSelectorVersion:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, values: values.([][]*Device_Spec_NetworkConfig_EthOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, values: values.([][]*Device_Spec_NetworkConfig_WifiOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, values: values.([][]*Device_Spec_NetworkConfig_BridgesOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, values: values.([][]*Device_Spec_NetworkConfig_BondsOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, values: values.([][]*Device_Spec_NetworkConfig_TunnelsOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, values: values.([][]*Device_Spec_NetworkConfig_VlansOpts)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfig_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_EthOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_WifiOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_BridgesOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_BondsOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_TunnelsOpts)}
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		return &DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfig_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_VlansOpts)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfig_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceSpecNetworkConfig_FieldSubPath struct {
	selector DeviceSpecNetworkConfig_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceSpecNetworkConfig_FieldPath = (*DeviceSpecNetworkConfig_FieldSubPath)(nil)

func (fps *DeviceSpecNetworkConfig_FieldSubPath) Selector() DeviceSpecNetworkConfig_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceSpecNetworkConfig_FieldSubPath) AsEthernetsSubPath() (DeviceSpecNetworkConfigEthOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigEthOpts_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfig_FieldSubPath) AsWifisSubPath() (DeviceSpecNetworkConfigWifiOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigWifiOpts_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfig_FieldSubPath) AsBridgesSubPath() (DeviceSpecNetworkConfigBridgesOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigBridgesOpts_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfig_FieldSubPath) AsBondsSubPath() (DeviceSpecNetworkConfigBondsOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigBondsOpts_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfig_FieldSubPath) AsTunnelsSubPath() (DeviceSpecNetworkConfigTunnelsOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigTunnelsOpts_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfig_FieldSubPath) AsVlansSubPath() (DeviceSpecNetworkConfigVlansOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigVlansOpts_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceSpecNetworkConfig_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceSpecNetworkConfig_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Spec_NetworkConfig
func (fps *DeviceSpecNetworkConfig_FieldSubPath) Get(source *Device_Spec_NetworkConfig) (values []interface{}) {
	if asEthOptsFieldPath, ok := fps.AsEthernetsSubPath(); ok {
		for _, item := range source.GetEthernets() {
			values = append(values, asEthOptsFieldPath.Get(item)...)
		}
	} else if asWifiOptsFieldPath, ok := fps.AsWifisSubPath(); ok {
		for _, item := range source.GetWifis() {
			values = append(values, asWifiOptsFieldPath.Get(item)...)
		}
	} else if asBridgesOptsFieldPath, ok := fps.AsBridgesSubPath(); ok {
		for _, item := range source.GetBridges() {
			values = append(values, asBridgesOptsFieldPath.Get(item)...)
		}
	} else if asBondsOptsFieldPath, ok := fps.AsBondsSubPath(); ok {
		for _, item := range source.GetBonds() {
			values = append(values, asBondsOptsFieldPath.Get(item)...)
		}
	} else if asTunnelsOptsFieldPath, ok := fps.AsTunnelsSubPath(); ok {
		for _, item := range source.GetTunnels() {
			values = append(values, asTunnelsOptsFieldPath.Get(item)...)
		}
	} else if asVlansOptsFieldPath, ok := fps.AsVlansSubPath(); ok {
		for _, item := range source.GetVlans() {
			values = append(values, asVlansOptsFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fps.selector))
	}
	return
}

func (fps *DeviceSpecNetworkConfig_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Spec_NetworkConfig))
}

// GetSingle returns value of selected field from source Device_Spec_NetworkConfig
func (fps *DeviceSpecNetworkConfig_FieldSubPath) GetSingle(source *Device_Spec_NetworkConfig) (interface{}, bool) {
	switch fps.selector {
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		if len(source.GetEthernets()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetEthernets()[0])
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		if len(source.GetWifis()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetWifis()[0])
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		if len(source.GetBridges()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBridges()[0])
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		if len(source.GetBonds()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBonds()[0])
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		if len(source.GetTunnels()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTunnels()[0])
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		if len(source.GetVlans()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetVlans()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fps.selector))
	}
}

func (fps *DeviceSpecNetworkConfig_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Spec_NetworkConfig))
}

// GetDefault returns a default value of the field type
func (fps *DeviceSpecNetworkConfig_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceSpecNetworkConfig_FieldSubPath) ClearValue(item *Device_Spec_NetworkConfig) {
	if item != nil {
		switch fps.selector {
		case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
			for _, subItem := range item.Ethernets {
				fps.subPath.ClearValueRaw(subItem)
			}
		case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
			for _, subItem := range item.Wifis {
				fps.subPath.ClearValueRaw(subItem)
			}
		case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
			for _, subItem := range item.Bridges {
				fps.subPath.ClearValueRaw(subItem)
			}
		case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
			for _, subItem := range item.Bonds {
				fps.subPath.ClearValueRaw(subItem)
			}
		case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
			for _, subItem := range item.Tunnels {
				fps.subPath.ClearValueRaw(subItem)
			}
		case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
			for _, subItem := range item.Vlans {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fps.selector))
		}
	}
}

func (fps *DeviceSpecNetworkConfig_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Spec_NetworkConfig))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceSpecNetworkConfig_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceSpecNetworkConfig_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceSpecNetworkConfig_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceSpecNetworkConfig_FieldSubPath) WithIValue(value interface{}) DeviceSpecNetworkConfig_FieldPathValue {
	return &DeviceSpecNetworkConfig_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceSpecNetworkConfig_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceSpecNetworkConfig_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfig_FieldPathArrayOfValues {
	return &DeviceSpecNetworkConfig_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceSpecNetworkConfig_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceSpecNetworkConfig_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfig_FieldPathArrayItemValue {
	return &DeviceSpecNetworkConfig_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceSpecNetworkConfig_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfig_FieldPathValue allows storing values for NetworkConfig fields according to their type
type DeviceSpecNetworkConfig_FieldPathValue interface {
	DeviceSpecNetworkConfig_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig)
	CompareWith(*Device_Spec_NetworkConfig) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfig_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfig_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NetworkConfig field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfig_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfig_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfig_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfig_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfig_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfig_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfig_FieldPathValue = (*DeviceSpecNetworkConfig_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'NetworkConfig' as interface{}
func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) AsVersionValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) AsEthernetsValue() ([]*Device_Spec_NetworkConfig_EthOpts, bool) {
	res, ok := fpv.value.([]*Device_Spec_NetworkConfig_EthOpts)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) AsWifisValue() ([]*Device_Spec_NetworkConfig_WifiOpts, bool) {
	res, ok := fpv.value.([]*Device_Spec_NetworkConfig_WifiOpts)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) AsBridgesValue() ([]*Device_Spec_NetworkConfig_BridgesOpts, bool) {
	res, ok := fpv.value.([]*Device_Spec_NetworkConfig_BridgesOpts)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) AsBondsValue() ([]*Device_Spec_NetworkConfig_BondsOpts, bool) {
	res, ok := fpv.value.([]*Device_Spec_NetworkConfig_BondsOpts)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) AsTunnelsValue() ([]*Device_Spec_NetworkConfig_TunnelsOpts, bool) {
	res, ok := fpv.value.([]*Device_Spec_NetworkConfig_TunnelsOpts)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) AsVlansValue() ([]*Device_Spec_NetworkConfig_VlansOpts, bool) {
	res, ok := fpv.value.([]*Device_Spec_NetworkConfig_VlansOpts)
	return res, ok
}

// SetTo stores value for selected field for object NetworkConfig
func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfig_FieldPathSelectorVersion:
		(*target).Version = fpv.value.(int32)
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		(*target).Ethernets = fpv.value.([]*Device_Spec_NetworkConfig_EthOpts)
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		(*target).Wifis = fpv.value.([]*Device_Spec_NetworkConfig_WifiOpts)
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		(*target).Bridges = fpv.value.([]*Device_Spec_NetworkConfig_BridgesOpts)
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		(*target).Bonds = fpv.value.([]*Device_Spec_NetworkConfig_BondsOpts)
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		(*target).Tunnels = fpv.value.([]*Device_Spec_NetworkConfig_TunnelsOpts)
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		(*target).Vlans = fpv.value.([]*Device_Spec_NetworkConfig_VlansOpts)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfig_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig'.
func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfig_FieldPathSelectorVersion:
		leftValue := fpv.value.(int32)
		rightValue := source.GetVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		return 0, false
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		return 0, false
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		return 0, false
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		return 0, false
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		return 0, false
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfig_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig))
}

type DeviceSpecNetworkConfig_FieldSubPathValue struct {
	DeviceSpecNetworkConfig_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceSpecNetworkConfig_FieldPathValue = (*DeviceSpecNetworkConfig_FieldSubPathValue)(nil)

func (fpvs *DeviceSpecNetworkConfig_FieldSubPathValue) AsEthernetsPathValue() (DeviceSpecNetworkConfigEthOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigEthOpts_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfig_FieldSubPathValue) AsWifisPathValue() (DeviceSpecNetworkConfigWifiOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigWifiOpts_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfig_FieldSubPathValue) AsBridgesPathValue() (DeviceSpecNetworkConfigBridgesOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigBridgesOpts_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfig_FieldSubPathValue) AsBondsPathValue() (DeviceSpecNetworkConfigBondsOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigBondsOpts_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfig_FieldSubPathValue) AsTunnelsPathValue() (DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfig_FieldSubPathValue) AsVlansPathValue() (DeviceSpecNetworkConfigVlansOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigVlansOpts_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceSpecNetworkConfig_FieldSubPathValue) SetTo(target **Device_Spec_NetworkConfig) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig)
	}
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		panic("FieldPath setter is unsupported for array subpaths")
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		panic("FieldPath setter is unsupported for array subpaths")
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		panic("FieldPath setter is unsupported for array subpaths")
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		panic("FieldPath setter is unsupported for array subpaths")
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		panic("FieldPath setter is unsupported for array subpaths")
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfig_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceSpecNetworkConfig_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceSpecNetworkConfig_FieldSubPathValue) CompareWith(source *Device_Spec_NetworkConfig) (int, bool) {
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		return 0, false // repeated field
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		return 0, false // repeated field
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		return 0, false // repeated field
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		return 0, false // repeated field
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		return 0, false // repeated field
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfig_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Spec_NetworkConfig))
}

// DeviceSpecNetworkConfig_FieldPathArrayItemValue allows storing single item in Path-specific values for NetworkConfig according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfig_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfig_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig) bool
}

// ParseDeviceSpecNetworkConfig_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfig_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfig_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NetworkConfig field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfig_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfig_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfig_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfig_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfig_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfig_FieldPathArrayItemValue = (*DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig as interface{}
func (fpaiv *DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue) AsEthernetsItemValue() (*Device_Spec_NetworkConfig_EthOpts, bool) {
	res, ok := fpaiv.value.(*Device_Spec_NetworkConfig_EthOpts)
	return res, ok
}
func (fpaiv *DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue) AsWifisItemValue() (*Device_Spec_NetworkConfig_WifiOpts, bool) {
	res, ok := fpaiv.value.(*Device_Spec_NetworkConfig_WifiOpts)
	return res, ok
}
func (fpaiv *DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue) AsBridgesItemValue() (*Device_Spec_NetworkConfig_BridgesOpts, bool) {
	res, ok := fpaiv.value.(*Device_Spec_NetworkConfig_BridgesOpts)
	return res, ok
}
func (fpaiv *DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue) AsBondsItemValue() (*Device_Spec_NetworkConfig_BondsOpts, bool) {
	res, ok := fpaiv.value.(*Device_Spec_NetworkConfig_BondsOpts)
	return res, ok
}
func (fpaiv *DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue) AsTunnelsItemValue() (*Device_Spec_NetworkConfig_TunnelsOpts, bool) {
	res, ok := fpaiv.value.(*Device_Spec_NetworkConfig_TunnelsOpts)
	return res, ok
}
func (fpaiv *DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue) AsVlansItemValue() (*Device_Spec_NetworkConfig_VlansOpts, bool) {
	res, ok := fpaiv.value.(*Device_Spec_NetworkConfig_VlansOpts)
	return res, ok
}

func (fpaiv *DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig))
}

// Contains returns a boolean indicating if value that is being held is present in given 'NetworkConfig'
func (fpaiv *DeviceSpecNetworkConfig_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig) bool {
	slice := fpaiv.DeviceSpecNetworkConfig_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceSpecNetworkConfig_FieldSubPathArrayItemValue struct {
	DeviceSpecNetworkConfig_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceSpecNetworkConfig_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceSpecNetworkConfig_FieldSubPathArrayItemValue) AsEthernetsPathItemValue() (DeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfig_FieldSubPathArrayItemValue) AsWifisPathItemValue() (DeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfig_FieldSubPathArrayItemValue) AsBridgesPathItemValue() (DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfig_FieldSubPathArrayItemValue) AsBondsPathItemValue() (DeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfig_FieldSubPathArrayItemValue) AsTunnelsPathItemValue() (DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfig_FieldSubPathArrayItemValue) AsVlansPathItemValue() (DeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'NetworkConfig'
func (fpaivs *DeviceSpecNetworkConfig_FieldSubPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig) bool {
	switch fpaivs.Selector() {
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		return false // repeated/map field
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		return false // repeated/map field
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		return false // repeated/map field
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		return false // repeated/map field
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		return false // repeated/map field
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig: %d", fpaivs.Selector()))
	}
}

// DeviceSpecNetworkConfig_FieldPathArrayOfValues allows storing slice of values for NetworkConfig fields according to their type
type DeviceSpecNetworkConfig_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfig_FieldPath
}

func ParseDeviceSpecNetworkConfig_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfig_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NetworkConfig field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfig_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfig_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfig_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfig_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfig_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfig_FieldPathArrayOfValues = (*DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfig_FieldPathSelectorVersion:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfig_FieldPathSelectorEthernets:
		for _, v := range fpaov.values.([][]*Device_Spec_NetworkConfig_EthOpts) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfig_FieldPathSelectorWifis:
		for _, v := range fpaov.values.([][]*Device_Spec_NetworkConfig_WifiOpts) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfig_FieldPathSelectorBridges:
		for _, v := range fpaov.values.([][]*Device_Spec_NetworkConfig_BridgesOpts) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfig_FieldPathSelectorBonds:
		for _, v := range fpaov.values.([][]*Device_Spec_NetworkConfig_BondsOpts) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfig_FieldPathSelectorTunnels:
		for _, v := range fpaov.values.([][]*Device_Spec_NetworkConfig_TunnelsOpts) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfig_FieldPathSelectorVlans:
		for _, v := range fpaov.values.([][]*Device_Spec_NetworkConfig_VlansOpts) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues) AsVersionArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues) AsEthernetsArrayOfValues() ([][]*Device_Spec_NetworkConfig_EthOpts, bool) {
	res, ok := fpaov.values.([][]*Device_Spec_NetworkConfig_EthOpts)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues) AsWifisArrayOfValues() ([][]*Device_Spec_NetworkConfig_WifiOpts, bool) {
	res, ok := fpaov.values.([][]*Device_Spec_NetworkConfig_WifiOpts)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues) AsBridgesArrayOfValues() ([][]*Device_Spec_NetworkConfig_BridgesOpts, bool) {
	res, ok := fpaov.values.([][]*Device_Spec_NetworkConfig_BridgesOpts)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues) AsBondsArrayOfValues() ([][]*Device_Spec_NetworkConfig_BondsOpts, bool) {
	res, ok := fpaov.values.([][]*Device_Spec_NetworkConfig_BondsOpts)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues) AsTunnelsArrayOfValues() ([][]*Device_Spec_NetworkConfig_TunnelsOpts, bool) {
	res, ok := fpaov.values.([][]*Device_Spec_NetworkConfig_TunnelsOpts)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfig_FieldTerminalPathArrayOfValues) AsVlansArrayOfValues() ([][]*Device_Spec_NetworkConfig_VlansOpts, bool) {
	res, ok := fpaov.values.([][]*Device_Spec_NetworkConfig_VlansOpts)
	return res, ok
}

type DeviceSpecNetworkConfig_FieldSubPathArrayOfValues struct {
	DeviceSpecNetworkConfig_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceSpecNetworkConfig_FieldPathArrayOfValues = (*DeviceSpecNetworkConfig_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceSpecNetworkConfig_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceSpecNetworkConfig_FieldSubPathArrayOfValues) AsEthernetsPathArrayOfValues() (DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfig_FieldSubPathArrayOfValues) AsWifisPathArrayOfValues() (DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfig_FieldSubPathArrayOfValues) AsBridgesPathArrayOfValues() (DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfig_FieldSubPathArrayOfValues) AsBondsPathArrayOfValues() (DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfig_FieldSubPathArrayOfValues) AsTunnelsPathArrayOfValues() (DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfig_FieldSubPathArrayOfValues) AsVlansPathArrayOfValues() (DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecSSHConfig_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecSSHConfig_FieldPathSelector
	Get(source *Device_Spec_SSHConfig) []interface{}
	GetSingle(source *Device_Spec_SSHConfig) (interface{}, bool)
	ClearValue(item *Device_Spec_SSHConfig)

	// Those methods build corresponding DeviceSpecSSHConfig_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecSSHConfig_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecSSHConfig_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecSSHConfig_FieldPathArrayItemValue
}

type DeviceSpecSSHConfig_FieldPathSelector int32

const (
	DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer   DeviceSpecSSHConfig_FieldPathSelector = 0
	DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword DeviceSpecSSHConfig_FieldPathSelector = 1
	DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized      DeviceSpecSSHConfig_FieldPathSelector = 2
	DeviceSpecSSHConfig_FieldPathSelectorIpAllowList        DeviceSpecSSHConfig_FieldPathSelector = 3
	DeviceSpecSSHConfig_FieldPathSelectorIpDenyList         DeviceSpecSSHConfig_FieldPathSelector = 4
	DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod       DeviceSpecSSHConfig_FieldPathSelector = 5
	DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey  DeviceSpecSSHConfig_FieldPathSelector = 6
)

func (s DeviceSpecSSHConfig_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer:
		return "disable_ssh_server"
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword:
		return "disable_ssh_password"
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		return "ssh_authorized"
	case DeviceSpecSSHConfig_FieldPathSelectorIpAllowList:
		return "ip_allow_list"
	case DeviceSpecSSHConfig_FieldPathSelectorIpDenyList:
		return "ip_deny_list"
	case DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod:
		return "reject_period"
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey:
		return "disable_ssh_authkey"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", s))
	}
}

func BuildDeviceSpecSSHConfig_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecSSHConfig_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_SSHConfig")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "disable_ssh_server", "disableSshServer", "disable-ssh-server":
			return &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer}, nil
		case "disable_ssh_password", "disableSshPassword", "disable-ssh-password":
			return &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword}, nil
		case "ssh_authorized", "sshAuthorized", "ssh-authorized":
			return &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized}, nil
		case "ip_allow_list", "ipAllowList", "ip-allow-list":
			return &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorIpAllowList}, nil
		case "ip_deny_list", "ipDenyList", "ip-deny-list":
			return &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorIpDenyList}, nil
		case "reject_period", "rejectPeriod", "reject-period":
			return &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod}, nil
		case "disable_ssh_authkey", "disableSshAuthkey", "disable-ssh-authkey":
			return &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey}, nil
		}
	} else {
		switch fp[0] {
		case "ssh_authorized", "sshAuthorized", "ssh-authorized":
			if subpath, err := BuildDeviceSpecSSHConfigAuthKey_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecSSHConfig_FieldSubPath{selector: DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_SSHConfig", fp)
}

func ParseDeviceSpecSSHConfig_FieldPath(rawField string) (DeviceSpecSSHConfig_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecSSHConfig_FieldPath(fp)
}

func MustParseDeviceSpecSSHConfig_FieldPath(rawField string) DeviceSpecSSHConfig_FieldPath {
	fp, err := ParseDeviceSpecSSHConfig_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecSSHConfig_FieldTerminalPath struct {
	selector DeviceSpecSSHConfig_FieldPathSelector
}

var _ DeviceSpecSSHConfig_FieldPath = (*DeviceSpecSSHConfig_FieldTerminalPath)(nil)

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) Selector() DeviceSpecSSHConfig_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecSSHConfig_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecSSHConfig_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_SSHConfig
func (fp *DeviceSpecSSHConfig_FieldTerminalPath) Get(source *Device_Spec_SSHConfig) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer:
			values = append(values, source.DisableSshServer)
		case DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword:
			values = append(values, source.DisableSshPassword)
		case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
			for _, value := range source.GetSshAuthorized() {
				values = append(values, value)
			}
		case DeviceSpecSSHConfig_FieldPathSelectorIpAllowList:
			for _, value := range source.GetIpAllowList() {
				values = append(values, value)
			}
		case DeviceSpecSSHConfig_FieldPathSelectorIpDenyList:
			for _, value := range source.GetIpDenyList() {
				values = append(values, value)
			}
		case DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod:
			if source.RejectPeriod != nil {
				values = append(values, source.RejectPeriod)
			}
		case DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey:
			values = append(values, source.DisableSshAuthkey)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_SSHConfig))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_SSHConfig
func (fp *DeviceSpecSSHConfig_FieldTerminalPath) GetSingle(source *Device_Spec_SSHConfig) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer:
		return source.GetDisableSshServer(), source != nil
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword:
		return source.GetDisableSshPassword(), source != nil
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		res := source.GetSshAuthorized()
		return res, res != nil
	case DeviceSpecSSHConfig_FieldPathSelectorIpAllowList:
		res := source.GetIpAllowList()
		return res, res != nil
	case DeviceSpecSSHConfig_FieldPathSelectorIpDenyList:
		res := source.GetIpDenyList()
		return res, res != nil
	case DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod:
		res := source.GetRejectPeriod()
		return res, res != nil
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey:
		return source.GetDisableSshAuthkey(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fp.selector))
	}
}

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_SSHConfig))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecSSHConfig_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer:
		return false
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword:
		return false
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		return ([]*Device_Spec_SSHConfig_AuthKey)(nil)
	case DeviceSpecSSHConfig_FieldPathSelectorIpAllowList:
		return ([]string)(nil)
	case DeviceSpecSSHConfig_FieldPathSelectorIpDenyList:
		return ([]string)(nil)
	case DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod:
		return (*duration.Duration)(nil)
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fp.selector))
	}
}

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) ClearValue(item *Device_Spec_SSHConfig) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer:
			item.DisableSshServer = false
		case DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword:
			item.DisableSshPassword = false
		case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
			item.SshAuthorized = nil
		case DeviceSpecSSHConfig_FieldPathSelectorIpAllowList:
			item.IpAllowList = nil
		case DeviceSpecSSHConfig_FieldPathSelectorIpDenyList:
			item.IpDenyList = nil
		case DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod:
			item.RejectPeriod = nil
		case DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey:
			item.DisableSshAuthkey = false
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_SSHConfig))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecSSHConfig_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer ||
		fp.selector == DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword ||
		fp.selector == DeviceSpecSSHConfig_FieldPathSelectorIpAllowList ||
		fp.selector == DeviceSpecSSHConfig_FieldPathSelectorIpDenyList ||
		fp.selector == DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod ||
		fp.selector == DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey
}

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecSSHConfig_FieldPathValue {
	switch fp.selector {
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer:
		return &DeviceSpecSSHConfig_FieldTerminalPathValue{DeviceSpecSSHConfig_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword:
		return &DeviceSpecSSHConfig_FieldTerminalPathValue{DeviceSpecSSHConfig_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		return &DeviceSpecSSHConfig_FieldTerminalPathValue{DeviceSpecSSHConfig_FieldTerminalPath: *fp, value: value.([]*Device_Spec_SSHConfig_AuthKey)}
	case DeviceSpecSSHConfig_FieldPathSelectorIpAllowList:
		return &DeviceSpecSSHConfig_FieldTerminalPathValue{DeviceSpecSSHConfig_FieldTerminalPath: *fp, value: value.([]string)}
	case DeviceSpecSSHConfig_FieldPathSelectorIpDenyList:
		return &DeviceSpecSSHConfig_FieldTerminalPathValue{DeviceSpecSSHConfig_FieldTerminalPath: *fp, value: value.([]string)}
	case DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod:
		return &DeviceSpecSSHConfig_FieldTerminalPathValue{DeviceSpecSSHConfig_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey:
		return &DeviceSpecSSHConfig_FieldTerminalPathValue{DeviceSpecSSHConfig_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fp.selector))
	}
}

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecSSHConfig_FieldPathArrayOfValues {
	fpaov := &DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfig_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer:
		return &DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfig_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword:
		return &DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfig_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		return &DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfig_FieldTerminalPath: *fp, values: values.([][]*Device_Spec_SSHConfig_AuthKey)}
	case DeviceSpecSSHConfig_FieldPathSelectorIpAllowList:
		return &DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfig_FieldTerminalPath: *fp, values: values.([][]string)}
	case DeviceSpecSSHConfig_FieldPathSelectorIpDenyList:
		return &DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfig_FieldTerminalPath: *fp, values: values.([][]string)}
	case DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod:
		return &DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfig_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey:
		return &DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfig_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecSSHConfig_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		return &DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue{DeviceSpecSSHConfig_FieldTerminalPath: *fp, value: value.(*Device_Spec_SSHConfig_AuthKey)}
	case DeviceSpecSSHConfig_FieldPathSelectorIpAllowList:
		return &DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue{DeviceSpecSSHConfig_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecSSHConfig_FieldPathSelectorIpDenyList:
		return &DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue{DeviceSpecSSHConfig_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fp.selector))
	}
}

func (fp *DeviceSpecSSHConfig_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceSpecSSHConfig_FieldSubPath struct {
	selector DeviceSpecSSHConfig_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceSpecSSHConfig_FieldPath = (*DeviceSpecSSHConfig_FieldSubPath)(nil)

func (fps *DeviceSpecSSHConfig_FieldSubPath) Selector() DeviceSpecSSHConfig_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceSpecSSHConfig_FieldSubPath) AsSshAuthorizedSubPath() (DeviceSpecSSHConfigAuthKey_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecSSHConfigAuthKey_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceSpecSSHConfig_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceSpecSSHConfig_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Spec_SSHConfig
func (fps *DeviceSpecSSHConfig_FieldSubPath) Get(source *Device_Spec_SSHConfig) (values []interface{}) {
	if asAuthKeyFieldPath, ok := fps.AsSshAuthorizedSubPath(); ok {
		for _, item := range source.GetSshAuthorized() {
			values = append(values, asAuthKeyFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fps.selector))
	}
	return
}

func (fps *DeviceSpecSSHConfig_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Spec_SSHConfig))
}

// GetSingle returns value of selected field from source Device_Spec_SSHConfig
func (fps *DeviceSpecSSHConfig_FieldSubPath) GetSingle(source *Device_Spec_SSHConfig) (interface{}, bool) {
	switch fps.selector {
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		if len(source.GetSshAuthorized()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSshAuthorized()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fps.selector))
	}
}

func (fps *DeviceSpecSSHConfig_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Spec_SSHConfig))
}

// GetDefault returns a default value of the field type
func (fps *DeviceSpecSSHConfig_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceSpecSSHConfig_FieldSubPath) ClearValue(item *Device_Spec_SSHConfig) {
	if item != nil {
		switch fps.selector {
		case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
			for _, subItem := range item.SshAuthorized {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fps.selector))
		}
	}
}

func (fps *DeviceSpecSSHConfig_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Spec_SSHConfig))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceSpecSSHConfig_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceSpecSSHConfig_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceSpecSSHConfig_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceSpecSSHConfig_FieldSubPath) WithIValue(value interface{}) DeviceSpecSSHConfig_FieldPathValue {
	return &DeviceSpecSSHConfig_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceSpecSSHConfig_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceSpecSSHConfig_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceSpecSSHConfig_FieldPathArrayOfValues {
	return &DeviceSpecSSHConfig_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceSpecSSHConfig_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceSpecSSHConfig_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceSpecSSHConfig_FieldPathArrayItemValue {
	return &DeviceSpecSSHConfig_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceSpecSSHConfig_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceSpecSSHConfig_FieldPathValue allows storing values for SSHConfig fields according to their type
type DeviceSpecSSHConfig_FieldPathValue interface {
	DeviceSpecSSHConfig_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_SSHConfig)
	CompareWith(*Device_Spec_SSHConfig) (cmp int, comparable bool)
}

func ParseDeviceSpecSSHConfig_FieldPathValue(pathStr, valueStr string) (DeviceSpecSSHConfig_FieldPathValue, error) {
	fp, err := ParseDeviceSpecSSHConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SSHConfig field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecSSHConfig_FieldPathValue), nil
}

func MustParseDeviceSpecSSHConfig_FieldPathValue(pathStr, valueStr string) DeviceSpecSSHConfig_FieldPathValue {
	fpv, err := ParseDeviceSpecSSHConfig_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecSSHConfig_FieldTerminalPathValue struct {
	DeviceSpecSSHConfig_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecSSHConfig_FieldPathValue = (*DeviceSpecSSHConfig_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SSHConfig' as interface{}
func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) AsDisableSshServerValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) AsDisableSshPasswordValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) AsSshAuthorizedValue() ([]*Device_Spec_SSHConfig_AuthKey, bool) {
	res, ok := fpv.value.([]*Device_Spec_SSHConfig_AuthKey)
	return res, ok
}
func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) AsIpAllowListValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) AsIpDenyListValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) AsRejectPeriodValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) AsDisableSshAuthkeyValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object SSHConfig
func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) SetTo(target **Device_Spec_SSHConfig) {
	if *target == nil {
		*target = new(Device_Spec_SSHConfig)
	}
	switch fpv.selector {
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer:
		(*target).DisableSshServer = fpv.value.(bool)
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword:
		(*target).DisableSshPassword = fpv.value.(bool)
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		(*target).SshAuthorized = fpv.value.([]*Device_Spec_SSHConfig_AuthKey)
	case DeviceSpecSSHConfig_FieldPathSelectorIpAllowList:
		(*target).IpAllowList = fpv.value.([]string)
	case DeviceSpecSSHConfig_FieldPathSelectorIpDenyList:
		(*target).IpDenyList = fpv.value.([]string)
	case DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod:
		(*target).RejectPeriod = fpv.value.(*duration.Duration)
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey:
		(*target).DisableSshAuthkey = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_SSHConfig)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecSSHConfig_FieldTerminalPathValue' with the value under path in 'Device_Spec_SSHConfig'.
func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) CompareWith(source *Device_Spec_SSHConfig) (int, bool) {
	switch fpv.selector {
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer:
		leftValue := fpv.value.(bool)
		rightValue := source.GetDisableSshServer()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword:
		leftValue := fpv.value.(bool)
		rightValue := source.GetDisableSshPassword()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		return 0, false
	case DeviceSpecSSHConfig_FieldPathSelectorIpAllowList:
		return 0, false
	case DeviceSpecSSHConfig_FieldPathSelectorIpDenyList:
		return 0, false
	case DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetRejectPeriod()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey:
		leftValue := fpv.value.(bool)
		rightValue := source.GetDisableSshAuthkey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecSSHConfig_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_SSHConfig))
}

type DeviceSpecSSHConfig_FieldSubPathValue struct {
	DeviceSpecSSHConfig_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceSpecSSHConfig_FieldPathValue = (*DeviceSpecSSHConfig_FieldSubPathValue)(nil)

func (fpvs *DeviceSpecSSHConfig_FieldSubPathValue) AsSshAuthorizedPathValue() (DeviceSpecSSHConfigAuthKey_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecSSHConfigAuthKey_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceSpecSSHConfig_FieldSubPathValue) SetTo(target **Device_Spec_SSHConfig) {
	if *target == nil {
		*target = new(Device_Spec_SSHConfig)
	}
	switch fpvs.Selector() {
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecSSHConfig_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_SSHConfig)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceSpecSSHConfig_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceSpecSSHConfig_FieldSubPathValue) CompareWith(source *Device_Spec_SSHConfig) (int, bool) {
	switch fpvs.Selector() {
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecSSHConfig_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Spec_SSHConfig))
}

// DeviceSpecSSHConfig_FieldPathArrayItemValue allows storing single item in Path-specific values for SSHConfig according to their type
// Present only for array (repeated) types.
type DeviceSpecSSHConfig_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecSSHConfig_FieldPath
	ContainsValue(*Device_Spec_SSHConfig) bool
}

// ParseDeviceSpecSSHConfig_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecSSHConfig_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecSSHConfig_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecSSHConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SSHConfig field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecSSHConfig_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecSSHConfig_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecSSHConfig_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecSSHConfig_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue struct {
	DeviceSpecSSHConfig_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecSSHConfig_FieldPathArrayItemValue = (*DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_SSHConfig as interface{}
func (fpaiv *DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue) AsSshAuthorizedItemValue() (*Device_Spec_SSHConfig_AuthKey, bool) {
	res, ok := fpaiv.value.(*Device_Spec_SSHConfig_AuthKey)
	return res, ok
}
func (fpaiv *DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue) AsIpAllowListItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue) AsIpDenyListItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_SSHConfig) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_SSHConfig))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SSHConfig'
func (fpaiv *DeviceSpecSSHConfig_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_SSHConfig) bool {
	slice := fpaiv.DeviceSpecSSHConfig_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceSpecSSHConfig_FieldSubPathArrayItemValue struct {
	DeviceSpecSSHConfig_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceSpecSSHConfig_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceSpecSSHConfig_FieldSubPathArrayItemValue) AsSshAuthorizedPathItemValue() (DeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SSHConfig'
func (fpaivs *DeviceSpecSSHConfig_FieldSubPathArrayItemValue) ContainsValue(source *Device_Spec_SSHConfig) bool {
	switch fpaivs.Selector() {
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig: %d", fpaivs.Selector()))
	}
}

// DeviceSpecSSHConfig_FieldPathArrayOfValues allows storing slice of values for SSHConfig fields according to their type
type DeviceSpecSSHConfig_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecSSHConfig_FieldPath
}

func ParseDeviceSpecSSHConfig_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecSSHConfig_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecSSHConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SSHConfig field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecSSHConfig_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecSSHConfig_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecSSHConfig_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecSSHConfig_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues struct {
	DeviceSpecSSHConfig_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecSSHConfig_FieldPathArrayOfValues = (*DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized:
		for _, v := range fpaov.values.([][]*Device_Spec_SSHConfig_AuthKey) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfig_FieldPathSelectorIpAllowList:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfig_FieldPathSelectorIpDenyList:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues) AsDisableSshServerArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues) AsDisableSshPasswordArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues) AsSshAuthorizedArrayOfValues() ([][]*Device_Spec_SSHConfig_AuthKey, bool) {
	res, ok := fpaov.values.([][]*Device_Spec_SSHConfig_AuthKey)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues) AsIpAllowListArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues) AsIpDenyListArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues) AsRejectPeriodArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfig_FieldTerminalPathArrayOfValues) AsDisableSshAuthkeyArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type DeviceSpecSSHConfig_FieldSubPathArrayOfValues struct {
	DeviceSpecSSHConfig_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceSpecSSHConfig_FieldPathArrayOfValues = (*DeviceSpecSSHConfig_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceSpecSSHConfig_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceSpecSSHConfig_FieldSubPathArrayOfValues) AsSshAuthorizedPathArrayOfValues() (DeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigCommonOpts_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigCommonOpts_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_CommonOpts) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_CommonOpts) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_CommonOpts)

	// Those methods build corresponding DeviceSpecNetworkConfigCommonOpts_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOpts_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigCommonOpts_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer          DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 0
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4             DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 1
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6             DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 2
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy       DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 3
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal         DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 4
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical          DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 5
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier    DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 6
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides    DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 7
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides    DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 8
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa          DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 9
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses         DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 10
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4          DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 11
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6          DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 12
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers       DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 13
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress        DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 14
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu               DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 15
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional          DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 16
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 17
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes            DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 18
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy     DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 19
	DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth              DeviceSpecNetworkConfigCommonOpts_FieldPathSelector = 20
)

func (s DeviceSpecNetworkConfigCommonOpts_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer:
		return "renderer"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4:
		return "dhcp4"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6:
		return "dhcp6"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy:
		return "ipv6_privacy"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal:
		return "link_local"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical:
		return "critical"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier:
		return "dhcp_identifier"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		return "dhcp4_overrides"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		return "dhcp6_overrides"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa:
		return "accept_ra"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses:
		return "addresses"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4:
		return "gateway4"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6:
		return "gateway6"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		return "nameservers"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress:
		return "macaddress"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu:
		return "mtu"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional:
		return "optional"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses:
		return "optional_addresses"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		return "routes"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		return "routing_policy"
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		return "auth"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigCommonOpts_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigCommonOpts_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_CommonOpts")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "renderer":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer}, nil
		case "dhcp4", "dhcp_4", "dhcp-4":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4}, nil
		case "dhcp6", "dhcp_6", "dhcp-6":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6}, nil
		case "ipv6_privacy", "ipv6Privacy", "ipv6-privacy":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy}, nil
		case "link_local", "linkLocal", "link-local":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal}, nil
		case "critical":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical}, nil
		case "dhcp_identifier", "dhcpIdentifier", "dhcp-identifier":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier}, nil
		case "dhcp4_overrides", "dhcp4Overrides", "dhcp4-overrides":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides}, nil
		case "dhcp6_overrides", "dhcp6Overrides", "dhcp6-overrides":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides}, nil
		case "accept_ra", "acceptRa", "accept-ra":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa}, nil
		case "addresses":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses}, nil
		case "gateway4", "gateway_4", "gateway-4":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4}, nil
		case "gateway6", "gateway_6", "gateway-6":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6}, nil
		case "nameservers":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers}, nil
		case "macaddress":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress}, nil
		case "mtu":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu}, nil
		case "optional":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional}, nil
		case "optional_addresses", "optionalAddresses", "optional-addresses":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses}, nil
		case "routes":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes}, nil
		case "routing_policy", "routingPolicy", "routing-policy":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy}, nil
		case "auth":
			return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth}, nil
		}
	} else {
		switch fp[0] {
		case "dhcp4_overrides", "dhcp4Overrides", "dhcp4-overrides":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigCommonOpts_FieldSubPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides, subPath: subpath}, nil
			}
		case "dhcp6_overrides", "dhcp6Overrides", "dhcp6-overrides":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigCommonOpts_FieldSubPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides, subPath: subpath}, nil
			}
		case "nameservers":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOptsNameservers_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigCommonOpts_FieldSubPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers, subPath: subpath}, nil
			}
		case "routes":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOptsRoutes_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigCommonOpts_FieldSubPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes, subPath: subpath}, nil
			}
		case "routing_policy", "routingPolicy", "routing-policy":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigCommonOpts_FieldSubPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy, subPath: subpath}, nil
			}
		case "auth":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOptsAuth_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigCommonOpts_FieldSubPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_CommonOpts", fp)
}

func ParseDeviceSpecNetworkConfigCommonOpts_FieldPath(rawField string) (DeviceSpecNetworkConfigCommonOpts_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigCommonOpts_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigCommonOpts_FieldPath(rawField string) DeviceSpecNetworkConfigCommonOpts_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigCommonOpts_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigCommonOpts_FieldPathSelector
}

var _ DeviceSpecNetworkConfigCommonOpts_FieldPath = (*DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) Selector() DeviceSpecNetworkConfigCommonOpts_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_CommonOpts
func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_CommonOpts) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer:
			values = append(values, source.Renderer)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4:
			values = append(values, source.Dhcp4)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6:
			values = append(values, source.Dhcp6)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy:
			values = append(values, source.Ipv6Privacy)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal:
			for _, value := range source.GetLinkLocal() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical:
			values = append(values, source.Critical)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier:
			values = append(values, source.DhcpIdentifier)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
			if source.Dhcp4Overrides != nil {
				values = append(values, source.Dhcp4Overrides)
			}
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
			if source.Dhcp6Overrides != nil {
				values = append(values, source.Dhcp6Overrides)
			}
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa:
			values = append(values, source.AcceptRa)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses:
			for _, value := range source.GetAddresses() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4:
			values = append(values, source.Gateway4)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6:
			values = append(values, source.Gateway6)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
			if source.Nameservers != nil {
				values = append(values, source.Nameservers)
			}
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress:
			values = append(values, source.Macaddress)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu:
			values = append(values, source.Mtu)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional:
			values = append(values, source.Optional)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses:
			for _, value := range source.GetOptionalAddresses() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
			for _, value := range source.GetRoutes() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
			if source.RoutingPolicy != nil {
				values = append(values, source.RoutingPolicy)
			}
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
			if source.Auth != nil {
				values = append(values, source.Auth)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_CommonOpts))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_CommonOpts
func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer:
		return source.GetRenderer(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4:
		return source.GetDhcp4(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6:
		return source.GetDhcp6(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy:
		return source.GetIpv6Privacy(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal:
		res := source.GetLinkLocal()
		return res, res != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical:
		return source.GetCritical(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier:
		return source.GetDhcpIdentifier(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		res := source.GetDhcp4Overrides()
		return res, res != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		res := source.GetDhcp6Overrides()
		return res, res != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa:
		return source.GetAcceptRa(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses:
		res := source.GetAddresses()
		return res, res != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4:
		return source.GetGateway4(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6:
		return source.GetGateway6(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		res := source.GetNameservers()
		return res, res != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress:
		return source.GetMacaddress(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu:
		return source.GetMtu(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional:
		return source.GetOptional(), source != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses:
		res := source.GetOptionalAddresses()
		return res, res != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		res := source.GetRoutes()
		return res, res != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		res := source.GetRoutingPolicy()
		return res, res != nil
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		res := source.GetAuth()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer:
		return ""
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4:
		return false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6:
		return false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy:
		return false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal:
		return ([]string)(nil)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical:
		return false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier:
		return ""
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		return (*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)(nil)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		return (*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)(nil)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa:
		return false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses:
		return ([]string)(nil)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4:
		return ""
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6:
		return ""
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		return (*Device_Spec_NetworkConfig_CommonOpts_Nameservers)(nil)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress:
		return ""
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu:
		return int32(0)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional:
		return false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses:
		return ([]string)(nil)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		return ([]*Device_Spec_NetworkConfig_CommonOpts_Routes)(nil)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		return (*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)(nil)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		return (*Device_Spec_NetworkConfig_CommonOpts_Auth)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_CommonOpts) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer:
			item.Renderer = ""
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4:
			item.Dhcp4 = false
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6:
			item.Dhcp6 = false
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy:
			item.Ipv6Privacy = false
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal:
			item.LinkLocal = nil
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical:
			item.Critical = false
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier:
			item.DhcpIdentifier = ""
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
			item.Dhcp4Overrides = nil
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
			item.Dhcp6Overrides = nil
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa:
			item.AcceptRa = false
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses:
			item.Addresses = nil
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4:
			item.Gateway4 = ""
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6:
			item.Gateway6 = ""
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
			item.Nameservers = nil
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress:
			item.Macaddress = ""
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu:
			item.Mtu = int32(0)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional:
			item.Optional = false
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses:
			item.OptionalAddresses = nil
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
			item.Routes = nil
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
			item.RoutingPolicy = nil
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
			item.Auth = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_CommonOpts))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4 ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6 ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4 ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6 ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional ||
		fp.selector == DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses
}

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOpts_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.([]string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.([]string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.([]string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.([]*Device_Spec_NetworkConfig_CommonOpts_Routes)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts_Auth)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([][]string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([][]string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_CommonOpts_Nameservers)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([][]string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([][]*Device_Spec_NetworkConfig_CommonOpts_Routes)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_CommonOpts_Auth)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		return &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts_Routes)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceSpecNetworkConfigCommonOpts_FieldSubPath struct {
	selector DeviceSpecNetworkConfigCommonOpts_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceSpecNetworkConfigCommonOpts_FieldPath = (*DeviceSpecNetworkConfigCommonOpts_FieldSubPath)(nil)

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) Selector() DeviceSpecNetworkConfigCommonOpts_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) AsDhcp4OverridesSubPath() (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) AsDhcp6OverridesSubPath() (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) AsNameserversSubPath() (DeviceSpecNetworkConfigCommonOptsNameservers_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOptsNameservers_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) AsRoutesSubPath() (DeviceSpecNetworkConfigCommonOptsRoutes_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOptsRoutes_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) AsRoutingPolicySubPath() (DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) AsAuthSubPath() (DeviceSpecNetworkConfigCommonOptsAuth_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOptsAuth_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Spec_NetworkConfig_CommonOpts
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) Get(source *Device_Spec_NetworkConfig_CommonOpts) (values []interface{}) {
	if asDHCPOverridesFieldPath, ok := fps.AsDhcp4OverridesSubPath(); ok {
		values = append(values, asDHCPOverridesFieldPath.Get(source.GetDhcp4Overrides())...)
	} else if asDHCPOverridesFieldPath, ok := fps.AsDhcp6OverridesSubPath(); ok {
		values = append(values, asDHCPOverridesFieldPath.Get(source.GetDhcp6Overrides())...)
	} else if asNameserversFieldPath, ok := fps.AsNameserversSubPath(); ok {
		values = append(values, asNameserversFieldPath.Get(source.GetNameservers())...)
	} else if asRoutesFieldPath, ok := fps.AsRoutesSubPath(); ok {
		for _, item := range source.GetRoutes() {
			values = append(values, asRoutesFieldPath.Get(item)...)
		}
	} else if asRoutingPolicyFieldPath, ok := fps.AsRoutingPolicySubPath(); ok {
		values = append(values, asRoutingPolicyFieldPath.Get(source.GetRoutingPolicy())...)
	} else if asAuthFieldPath, ok := fps.AsAuthSubPath(); ok {
		values = append(values, asAuthFieldPath.Get(source.GetAuth())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fps.selector))
	}
	return
}

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Spec_NetworkConfig_CommonOpts))
}

// GetSingle returns value of selected field from source Device_Spec_NetworkConfig_CommonOpts
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts) (interface{}, bool) {
	switch fps.selector {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		if source.GetDhcp4Overrides() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDhcp4Overrides())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		if source.GetDhcp6Overrides() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDhcp6Overrides())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		if source.GetNameservers() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNameservers())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		if len(source.GetRoutes()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRoutes()[0])
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		if source.GetRoutingPolicy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRoutingPolicy())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		if source.GetAuth() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAuth())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fps.selector))
	}
}

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts))
}

// GetDefault returns a default value of the field type
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) ClearValue(item *Device_Spec_NetworkConfig_CommonOpts) {
	if item != nil {
		switch fps.selector {
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
			fps.subPath.ClearValueRaw(item.Dhcp4Overrides)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
			fps.subPath.ClearValueRaw(item.Dhcp6Overrides)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
			fps.subPath.ClearValueRaw(item.Nameservers)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
			for _, subItem := range item.Routes {
				fps.subPath.ClearValueRaw(subItem)
			}
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
			fps.subPath.ClearValueRaw(item.RoutingPolicy)
		case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
			fps.subPath.ClearValueRaw(item.Auth)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fps.selector))
		}
	}
}

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Spec_NetworkConfig_CommonOpts))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOpts_FieldPathValue {
	return &DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues {
	return &DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue {
	return &DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceSpecNetworkConfigCommonOpts_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigCommonOpts_FieldPathValue allows storing values for CommonOpts fields according to their type
type DeviceSpecNetworkConfigCommonOpts_FieldPathValue interface {
	DeviceSpecNetworkConfigCommonOpts_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_CommonOpts)
	CompareWith(*Device_Spec_NetworkConfig_CommonOpts) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigCommonOpts_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOpts_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CommonOpts field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOpts_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOpts_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigCommonOpts_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOpts_FieldPathValue = (*DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CommonOpts' as interface{}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsRendererValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsDhcp4Value() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsDhcp6Value() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsIpv6PrivacyValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsLinkLocalValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsCriticalValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsDhcpIdentifierValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsDhcp4OverridesValue() (*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsDhcp6OverridesValue() (*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsAcceptRaValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsAddressesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsGateway4Value() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsGateway6Value() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsNameserversValue() (*Device_Spec_NetworkConfig_CommonOpts_Nameservers, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsMacaddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsMtuValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsOptionalValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsOptionalAddressesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsRoutesValue() ([]*Device_Spec_NetworkConfig_CommonOpts_Routes, bool) {
	res, ok := fpv.value.([]*Device_Spec_NetworkConfig_CommonOpts_Routes)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsRoutingPolicyValue() (*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) AsAuthValue() (*Device_Spec_NetworkConfig_CommonOpts_Auth, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_CommonOpts_Auth)
	return res, ok
}

// SetTo stores value for selected field for object CommonOpts
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_CommonOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_CommonOpts)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer:
		(*target).Renderer = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4:
		(*target).Dhcp4 = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6:
		(*target).Dhcp6 = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy:
		(*target).Ipv6Privacy = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal:
		(*target).LinkLocal = fpv.value.([]string)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical:
		(*target).Critical = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier:
		(*target).DhcpIdentifier = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		(*target).Dhcp4Overrides = fpv.value.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		(*target).Dhcp6Overrides = fpv.value.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa:
		(*target).AcceptRa = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses:
		(*target).Addresses = fpv.value.([]string)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4:
		(*target).Gateway4 = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6:
		(*target).Gateway6 = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		(*target).Nameservers = fpv.value.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress:
		(*target).Macaddress = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu:
		(*target).Mtu = fpv.value.(int32)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional:
		(*target).Optional = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses:
		(*target).OptionalAddresses = fpv.value.([]string)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		(*target).Routes = fpv.value.([]*Device_Spec_NetworkConfig_CommonOpts_Routes)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		(*target).RoutingPolicy = fpv.value.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		(*target).Auth = fpv.value.(*Device_Spec_NetworkConfig_CommonOpts_Auth)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_CommonOpts)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_CommonOpts'.
func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_CommonOpts) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer:
		leftValue := fpv.value.(string)
		rightValue := source.GetRenderer()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4:
		leftValue := fpv.value.(bool)
		rightValue := source.GetDhcp4()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6:
		leftValue := fpv.value.(bool)
		rightValue := source.GetDhcp6()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIpv6Privacy()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal:
		return 0, false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical:
		leftValue := fpv.value.(bool)
		rightValue := source.GetCritical()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier:
		leftValue := fpv.value.(string)
		rightValue := source.GetDhcpIdentifier()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		return 0, false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		return 0, false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAcceptRa()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses:
		return 0, false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4:
		leftValue := fpv.value.(string)
		rightValue := source.GetGateway4()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6:
		leftValue := fpv.value.(string)
		rightValue := source.GetGateway6()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		return 0, false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetMacaddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMtu()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional:
		leftValue := fpv.value.(bool)
		rightValue := source.GetOptional()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses:
		return 0, false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		return 0, false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		return 0, false
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_CommonOpts))
}

type DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue struct {
	DeviceSpecNetworkConfigCommonOpts_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceSpecNetworkConfigCommonOpts_FieldPathValue = (*DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue)(nil)

func (fpvs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue) AsDhcp4OverridesPathValue() (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue) AsDhcp6OverridesPathValue() (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue) AsNameserversPathValue() (DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue) AsRoutesPathValue() (DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue) AsRoutingPolicyPathValue() (DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue) AsAuthPathValue() (DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue) SetTo(target **Device_Spec_NetworkConfig_CommonOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_CommonOpts)
	}
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue).SetTo(&(*target).Dhcp4Overrides)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue).SetTo(&(*target).Dhcp6Overrides)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue).SetTo(&(*target).Nameservers)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		panic("FieldPath setter is unsupported for array subpaths")
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue).SetTo(&(*target).RoutingPolicy)
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue).SetTo(&(*target).Auth)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_CommonOpts)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue) CompareWith(source *Device_Spec_NetworkConfig_CommonOpts) (int, bool) {
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue).CompareWith(source.GetDhcp4Overrides())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue).CompareWith(source.GetDhcp6Overrides())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue).CompareWith(source.GetNameservers())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		return 0, false // repeated field
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue).CompareWith(source.GetRoutingPolicy())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue).CompareWith(source.GetAuth())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Spec_NetworkConfig_CommonOpts))
}

// DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue allows storing single item in Path-specific values for CommonOpts according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigCommonOpts_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_CommonOpts) bool
}

// ParseDeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CommonOpts field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_CommonOpts as interface{}
func (fpaiv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue) AsLinkLocalItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue) AsAddressesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue) AsOptionalAddressesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue) AsRoutesItemValue() (*Device_Spec_NetworkConfig_CommonOpts_Routes, bool) {
	res, ok := fpaiv.value.(*Device_Spec_NetworkConfig_CommonOpts_Routes)
	return res, ok
}

func (fpaiv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CommonOpts'
func (fpaiv *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_CommonOpts) bool {
	slice := fpaiv.DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayItemValue struct {
	DeviceSpecNetworkConfigCommonOpts_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayItemValue) AsDhcp4OverridesPathItemValue() (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayItemValue) AsDhcp6OverridesPathItemValue() (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayItemValue) AsNameserversPathItemValue() (DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayItemValue) AsRoutesPathItemValue() (DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayItemValue) AsRoutingPolicyPathItemValue() (DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayItemValue) AsAuthPathItemValue() (DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CommonOpts'
func (fpaivs *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_CommonOpts) bool {
	switch fpaivs.Selector() {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue).ContainsValue(source.GetDhcp4Overrides())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue).ContainsValue(source.GetDhcp6Overrides())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue).ContainsValue(source.GetNameservers())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		return false // repeated/map field
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue).ContainsValue(source.GetRoutingPolicy())
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue).ContainsValue(source.GetAuth())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts: %d", fpaivs.Selector()))
	}
}

// DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues allows storing slice of values for CommonOpts fields according to their type
type DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigCommonOpts_FieldPath
}

func ParseDeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CommonOpts field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts_Nameservers) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes:
		for _, v := range fpaov.values.([][]*Device_Spec_NetworkConfig_CommonOpts_Routes) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts_Auth) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsRendererArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsDhcp4ArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsDhcp6ArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsIpv6PrivacyArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsLinkLocalArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsCriticalArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsDhcpIdentifierArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsDhcp4OverridesArrayOfValues() ([]*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsDhcp6OverridesArrayOfValues() ([]*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsAcceptRaArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsAddressesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsGateway4ArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsGateway6ArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsNameserversArrayOfValues() ([]*Device_Spec_NetworkConfig_CommonOpts_Nameservers, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts_Nameservers)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsMacaddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsMtuArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsOptionalArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsOptionalAddressesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsRoutesArrayOfValues() ([][]*Device_Spec_NetworkConfig_CommonOpts_Routes, bool) {
	res, ok := fpaov.values.([][]*Device_Spec_NetworkConfig_CommonOpts_Routes)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsRoutingPolicyArrayOfValues() ([]*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOpts_FieldTerminalPathArrayOfValues) AsAuthArrayOfValues() ([]*Device_Spec_NetworkConfig_CommonOpts_Auth, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts_Auth)
	return res, ok
}

type DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayOfValues struct {
	DeviceSpecNetworkConfigCommonOpts_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayOfValues) AsDhcp4OverridesPathArrayOfValues() (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayOfValues) AsDhcp6OverridesPathArrayOfValues() (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayOfValues) AsNameserversPathArrayOfValues() (DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayOfValues) AsRoutesPathArrayOfValues() (DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayOfValues) AsRoutingPolicyPathArrayOfValues() (DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfigCommonOpts_FieldSubPathArrayOfValues) AsAuthPathArrayOfValues() (DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigEthOpts_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigEthOpts_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_EthOpts) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_EthOpts) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_EthOpts)

	// Those methods build corresponding DeviceSpecNetworkConfigEthOpts_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigEthOpts_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigEthOpts_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch     DeviceSpecNetworkConfigEthOpts_FieldPathSelector = 0
	DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName   DeviceSpecNetworkConfigEthOpts_FieldPathSelector = 1
	DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan DeviceSpecNetworkConfigEthOpts_FieldPathSelector = 2
	DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts      DeviceSpecNetworkConfigEthOpts_FieldPathSelector = 3
	DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName      DeviceSpecNetworkConfigEthOpts_FieldPathSelector = 4
)

func (s DeviceSpecNetworkConfigEthOpts_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		return "match"
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName:
		return "set_name"
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan:
		return "wakeonlan"
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		return "opts"
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigEthOpts_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigEthOpts_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_EthOpts")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "match":
			return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch}, nil
		case "set_name", "setName", "set-name":
			return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName}, nil
		case "wakeonlan":
			return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan}, nil
		case "opts":
			return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts}, nil
		case "name":
			return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName}, nil
		}
	} else {
		switch fp[0] {
		case "match":
			if subpath, err := BuildDeviceSpecNetworkConfigEthOptsMatch_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigEthOpts_FieldSubPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch, subPath: subpath}, nil
			}
		case "opts":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigEthOpts_FieldSubPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_EthOpts", fp)
}

func ParseDeviceSpecNetworkConfigEthOpts_FieldPath(rawField string) (DeviceSpecNetworkConfigEthOpts_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigEthOpts_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigEthOpts_FieldPath(rawField string) DeviceSpecNetworkConfigEthOpts_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigEthOpts_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigEthOpts_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigEthOpts_FieldPathSelector
}

var _ DeviceSpecNetworkConfigEthOpts_FieldPath = (*DeviceSpecNetworkConfigEthOpts_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) Selector() DeviceSpecNetworkConfigEthOpts_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_EthOpts
func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_EthOpts) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
			if source.Match != nil {
				values = append(values, source.Match)
			}
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName:
			values = append(values, source.SetName)
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan:
			values = append(values, source.Wakeonlan)
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
			if source.Opts != nil {
				values = append(values, source.Opts)
			}
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName:
			values = append(values, source.Name)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_EthOpts))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_EthOpts
func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_EthOpts) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		res := source.GetMatch()
		return res, res != nil
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName:
		return source.GetSetName(), source != nil
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan:
		return source.GetWakeonlan(), source != nil
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		res := source.GetOpts()
		return res, res != nil
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName:
		return source.GetName(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_EthOpts))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		return (*Device_Spec_NetworkConfig_EthOpts_Match)(nil)
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName:
		return ""
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan:
		return false
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		return (*Device_Spec_NetworkConfig_CommonOpts)(nil)
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_EthOpts) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
			item.Match = nil
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName:
			item.SetName = ""
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan:
			item.Wakeonlan = false
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
			item.Opts = nil
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName:
			item.Name = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_EthOpts))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName ||
		fp.selector == DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan ||
		fp.selector == DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName
}

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigEthOpts_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigEthOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_EthOpts_Match)}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName:
		return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigEthOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan:
		return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigEthOpts_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigEthOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigEthOpts_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigEthOpts_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigEthOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_EthOpts_Match)}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName:
		return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigEthOpts_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan:
		return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigEthOpts_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigEthOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigEthOpts_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigEthOpts_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceSpecNetworkConfigEthOpts_FieldSubPath struct {
	selector DeviceSpecNetworkConfigEthOpts_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceSpecNetworkConfigEthOpts_FieldPath = (*DeviceSpecNetworkConfigEthOpts_FieldSubPath)(nil)

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) Selector() DeviceSpecNetworkConfigEthOpts_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) AsMatchSubPath() (DeviceSpecNetworkConfigEthOptsMatch_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigEthOptsMatch_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) AsOptsSubPath() (DeviceSpecNetworkConfigCommonOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOpts_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Spec_NetworkConfig_EthOpts
func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) Get(source *Device_Spec_NetworkConfig_EthOpts) (values []interface{}) {
	if asMatchFieldPath, ok := fps.AsMatchSubPath(); ok {
		values = append(values, asMatchFieldPath.Get(source.GetMatch())...)
	} else if asCommonOptsFieldPath, ok := fps.AsOptsSubPath(); ok {
		values = append(values, asCommonOptsFieldPath.Get(source.GetOpts())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fps.selector))
	}
	return
}

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Spec_NetworkConfig_EthOpts))
}

// GetSingle returns value of selected field from source Device_Spec_NetworkConfig_EthOpts
func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) GetSingle(source *Device_Spec_NetworkConfig_EthOpts) (interface{}, bool) {
	switch fps.selector {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		if source.GetMatch() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMatch())
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		if source.GetOpts() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpts())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fps.selector))
	}
}

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Spec_NetworkConfig_EthOpts))
}

// GetDefault returns a default value of the field type
func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) ClearValue(item *Device_Spec_NetworkConfig_EthOpts) {
	if item != nil {
		switch fps.selector {
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
			fps.subPath.ClearValueRaw(item.Match)
		case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
			fps.subPath.ClearValueRaw(item.Opts)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fps.selector))
		}
	}
}

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Spec_NetworkConfig_EthOpts))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceSpecNetworkConfigEthOpts_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) WithIValue(value interface{}) DeviceSpecNetworkConfigEthOpts_FieldPathValue {
	return &DeviceSpecNetworkConfigEthOpts_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues {
	return &DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue {
	return &DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceSpecNetworkConfigEthOpts_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigEthOpts_FieldPathValue allows storing values for EthOpts fields according to their type
type DeviceSpecNetworkConfigEthOpts_FieldPathValue interface {
	DeviceSpecNetworkConfigEthOpts_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_EthOpts)
	CompareWith(*Device_Spec_NetworkConfig_EthOpts) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigEthOpts_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigEthOpts_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigEthOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EthOpts field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigEthOpts_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigEthOpts_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigEthOpts_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigEthOpts_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigEthOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigEthOpts_FieldPathValue = (*DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'EthOpts' as interface{}
func (fpv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue) AsMatchValue() (*Device_Spec_NetworkConfig_EthOpts_Match, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_EthOpts_Match)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue) AsSetNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue) AsWakeonlanValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue) AsOptsValue() (*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object EthOpts
func (fpv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_EthOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_EthOpts)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		(*target).Match = fpv.value.(*Device_Spec_NetworkConfig_EthOpts_Match)
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName:
		(*target).SetName = fpv.value.(string)
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan:
		(*target).Wakeonlan = fpv.value.(bool)
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		(*target).Opts = fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_EthOpts)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_EthOpts'.
func (fpv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_EthOpts) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		return 0, false
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName:
		leftValue := fpv.value.(string)
		rightValue := source.GetSetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan:
		leftValue := fpv.value.(bool)
		rightValue := source.GetWakeonlan()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		return 0, false
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_EthOpts))
}

type DeviceSpecNetworkConfigEthOpts_FieldSubPathValue struct {
	DeviceSpecNetworkConfigEthOpts_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceSpecNetworkConfigEthOpts_FieldPathValue = (*DeviceSpecNetworkConfigEthOpts_FieldSubPathValue)(nil)

func (fpvs *DeviceSpecNetworkConfigEthOpts_FieldSubPathValue) AsMatchPathValue() (DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfigEthOpts_FieldSubPathValue) AsOptsPathValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceSpecNetworkConfigEthOpts_FieldSubPathValue) SetTo(target **Device_Spec_NetworkConfig_EthOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_EthOpts)
	}
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		fpvs.subPathValue.(DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue).SetTo(&(*target).Match)
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).SetTo(&(*target).Opts)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigEthOpts_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_EthOpts)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceSpecNetworkConfigEthOpts_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceSpecNetworkConfigEthOpts_FieldSubPathValue) CompareWith(source *Device_Spec_NetworkConfig_EthOpts) (int, bool) {
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue).CompareWith(source.GetMatch())
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).CompareWith(source.GetOpts())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigEthOpts_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Spec_NetworkConfig_EthOpts))
}

// DeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue allows storing single item in Path-specific values for EthOpts according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigEthOpts_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_EthOpts) bool
}

// ParseDeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigEthOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EthOpts field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigEthOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigEthOpts_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_EthOpts as interface{}
func (fpaiv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_EthOpts) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_EthOpts))
}

// Contains returns a boolean indicating if value that is being held is present in given 'EthOpts'
func (fpaiv *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_EthOpts) bool {
	slice := fpaiv.DeviceSpecNetworkConfigEthOpts_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayItemValue struct {
	DeviceSpecNetworkConfigEthOpts_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayItemValue) AsMatchPathItemValue() (DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayItemValue) AsOptsPathItemValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'EthOpts'
func (fpaivs *DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_EthOpts) bool {
	switch fpaivs.Selector() {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue).ContainsValue(source.GetMatch())
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue).ContainsValue(source.GetOpts())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts: %d", fpaivs.Selector()))
	}
}

// DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues allows storing slice of values for EthOpts fields according to their type
type DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigEthOpts_FieldPath
}

func ParseDeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigEthOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EthOpts field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigEthOpts_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_EthOpts_Match) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues) AsMatchArrayOfValues() ([]*Device_Spec_NetworkConfig_EthOpts_Match, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_EthOpts_Match)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues) AsSetNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues) AsWakeonlanArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues) AsOptsArrayOfValues() ([]*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigEthOpts_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayOfValues struct {
	DeviceSpecNetworkConfigEthOpts_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceSpecNetworkConfigEthOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayOfValues) AsMatchPathArrayOfValues() (DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfigEthOpts_FieldSubPathArrayOfValues) AsOptsPathArrayOfValues() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigWifiOpts_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigWifiOpts_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_WifiOpts) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_WifiOpts) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_WifiOpts)

	// Those methods build corresponding DeviceSpecNetworkConfigWifiOpts_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigWifiOpts_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigWifiOpts_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch        DeviceSpecNetworkConfigWifiOpts_FieldPathSelector = 0
	DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName      DeviceSpecNetworkConfigWifiOpts_FieldPathSelector = 1
	DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan    DeviceSpecNetworkConfigWifiOpts_FieldPathSelector = 2
	DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts         DeviceSpecNetworkConfigWifiOpts_FieldPathSelector = 3
	DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints DeviceSpecNetworkConfigWifiOpts_FieldPathSelector = 4
	DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName         DeviceSpecNetworkConfigWifiOpts_FieldPathSelector = 5
)

func (s DeviceSpecNetworkConfigWifiOpts_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		return "match"
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName:
		return "set_name"
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan:
		return "wakeonlan"
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		return "opts"
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		return "access_points"
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigWifiOpts_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigWifiOpts_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_WifiOpts")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "match":
			return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch}, nil
		case "set_name", "setName", "set-name":
			return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName}, nil
		case "wakeonlan":
			return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan}, nil
		case "opts":
			return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts}, nil
		case "access_points", "accessPoints", "access-points":
			return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints}, nil
		case "name":
			return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName}, nil
		}
	} else {
		switch fp[0] {
		case "match":
			if subpath, err := BuildDeviceSpecNetworkConfigWifiOptsMatch_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigWifiOpts_FieldSubPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch, subPath: subpath}, nil
			}
		case "opts":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigWifiOpts_FieldSubPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts, subPath: subpath}, nil
			}
		case "access_points", "accessPoints", "access-points":
			if subpath, err := BuildDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigWifiOpts_FieldSubPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_WifiOpts", fp)
}

func ParseDeviceSpecNetworkConfigWifiOpts_FieldPath(rawField string) (DeviceSpecNetworkConfigWifiOpts_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigWifiOpts_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigWifiOpts_FieldPath(rawField string) DeviceSpecNetworkConfigWifiOpts_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigWifiOpts_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigWifiOpts_FieldPathSelector
}

var _ DeviceSpecNetworkConfigWifiOpts_FieldPath = (*DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) Selector() DeviceSpecNetworkConfigWifiOpts_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_WifiOpts
func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_WifiOpts) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
			if source.Match != nil {
				values = append(values, source.Match)
			}
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName:
			values = append(values, source.SetName)
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan:
			values = append(values, source.Wakeonlan)
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
			if source.Opts != nil {
				values = append(values, source.Opts)
			}
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
			for _, value := range source.GetAccessPoints() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName:
			values = append(values, source.Name)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_WifiOpts))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_WifiOpts
func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_WifiOpts) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		res := source.GetMatch()
		return res, res != nil
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName:
		return source.GetSetName(), source != nil
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan:
		return source.GetWakeonlan(), source != nil
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		res := source.GetOpts()
		return res, res != nil
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		res := source.GetAccessPoints()
		return res, res != nil
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName:
		return source.GetName(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_WifiOpts))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		return (*Device_Spec_NetworkConfig_WifiOpts_Match)(nil)
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName:
		return ""
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan:
		return false
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		return (*Device_Spec_NetworkConfig_CommonOpts)(nil)
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		return ([]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint)(nil)
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_WifiOpts) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
			item.Match = nil
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName:
			item.SetName = ""
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan:
			item.Wakeonlan = false
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
			item.Opts = nil
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
			item.AccessPoints = nil
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName:
			item.Name = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_WifiOpts))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName ||
		fp.selector == DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan ||
		fp.selector == DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName
}

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigWifiOpts_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_WifiOpts_Match)}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, value: value.([]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint)}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_WifiOpts_Match)}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, values: values.([][]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint)}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		return &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceSpecNetworkConfigWifiOpts_FieldSubPath struct {
	selector DeviceSpecNetworkConfigWifiOpts_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceSpecNetworkConfigWifiOpts_FieldPath = (*DeviceSpecNetworkConfigWifiOpts_FieldSubPath)(nil)

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) Selector() DeviceSpecNetworkConfigWifiOpts_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) AsMatchSubPath() (DeviceSpecNetworkConfigWifiOptsMatch_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigWifiOptsMatch_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) AsOptsSubPath() (DeviceSpecNetworkConfigCommonOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOpts_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) AsAccessPointsSubPath() (DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Spec_NetworkConfig_WifiOpts
func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) Get(source *Device_Spec_NetworkConfig_WifiOpts) (values []interface{}) {
	if asMatchFieldPath, ok := fps.AsMatchSubPath(); ok {
		values = append(values, asMatchFieldPath.Get(source.GetMatch())...)
	} else if asCommonOptsFieldPath, ok := fps.AsOptsSubPath(); ok {
		values = append(values, asCommonOptsFieldPath.Get(source.GetOpts())...)
	} else if asAccessPointFieldPath, ok := fps.AsAccessPointsSubPath(); ok {
		for _, item := range source.GetAccessPoints() {
			values = append(values, asAccessPointFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fps.selector))
	}
	return
}

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Spec_NetworkConfig_WifiOpts))
}

// GetSingle returns value of selected field from source Device_Spec_NetworkConfig_WifiOpts
func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) GetSingle(source *Device_Spec_NetworkConfig_WifiOpts) (interface{}, bool) {
	switch fps.selector {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		if source.GetMatch() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMatch())
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		if source.GetOpts() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpts())
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		if len(source.GetAccessPoints()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAccessPoints()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fps.selector))
	}
}

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Spec_NetworkConfig_WifiOpts))
}

// GetDefault returns a default value of the field type
func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) ClearValue(item *Device_Spec_NetworkConfig_WifiOpts) {
	if item != nil {
		switch fps.selector {
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
			fps.subPath.ClearValueRaw(item.Match)
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
			fps.subPath.ClearValueRaw(item.Opts)
		case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
			for _, subItem := range item.AccessPoints {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fps.selector))
		}
	}
}

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Spec_NetworkConfig_WifiOpts))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) WithIValue(value interface{}) DeviceSpecNetworkConfigWifiOpts_FieldPathValue {
	return &DeviceSpecNetworkConfigWifiOpts_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues {
	return &DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue {
	return &DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceSpecNetworkConfigWifiOpts_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigWifiOpts_FieldPathValue allows storing values for WifiOpts fields according to their type
type DeviceSpecNetworkConfigWifiOpts_FieldPathValue interface {
	DeviceSpecNetworkConfigWifiOpts_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_WifiOpts)
	CompareWith(*Device_Spec_NetworkConfig_WifiOpts) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigWifiOpts_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigWifiOpts_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigWifiOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WifiOpts field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigWifiOpts_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigWifiOpts_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigWifiOpts_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigWifiOpts_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigWifiOpts_FieldPathValue = (*DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WifiOpts' as interface{}
func (fpv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue) AsMatchValue() (*Device_Spec_NetworkConfig_WifiOpts_Match, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_WifiOpts_Match)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue) AsSetNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue) AsWakeonlanValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue) AsOptsValue() (*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue) AsAccessPointsValue() ([]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint, bool) {
	res, ok := fpv.value.([]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object WifiOpts
func (fpv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_WifiOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_WifiOpts)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		(*target).Match = fpv.value.(*Device_Spec_NetworkConfig_WifiOpts_Match)
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName:
		(*target).SetName = fpv.value.(string)
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan:
		(*target).Wakeonlan = fpv.value.(bool)
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		(*target).Opts = fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		(*target).AccessPoints = fpv.value.([]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint)
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_WifiOpts)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_WifiOpts'.
func (fpv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_WifiOpts) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		return 0, false
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName:
		leftValue := fpv.value.(string)
		rightValue := source.GetSetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan:
		leftValue := fpv.value.(bool)
		rightValue := source.GetWakeonlan()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		return 0, false
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		return 0, false
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_WifiOpts))
}

type DeviceSpecNetworkConfigWifiOpts_FieldSubPathValue struct {
	DeviceSpecNetworkConfigWifiOpts_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceSpecNetworkConfigWifiOpts_FieldPathValue = (*DeviceSpecNetworkConfigWifiOpts_FieldSubPathValue)(nil)

func (fpvs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathValue) AsMatchPathValue() (DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathValue) AsOptsPathValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathValue) AsAccessPointsPathValue() (DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathValue) SetTo(target **Device_Spec_NetworkConfig_WifiOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_WifiOpts)
	}
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		fpvs.subPathValue.(DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue).SetTo(&(*target).Match)
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).SetTo(&(*target).Opts)
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_WifiOpts)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathValue) CompareWith(source *Device_Spec_NetworkConfig_WifiOpts) (int, bool) {
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue).CompareWith(source.GetMatch())
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).CompareWith(source.GetOpts())
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Spec_NetworkConfig_WifiOpts))
}

// DeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue allows storing single item in Path-specific values for WifiOpts according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigWifiOpts_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_WifiOpts) bool
}

// ParseDeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigWifiOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WifiOpts field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigWifiOpts_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_WifiOpts as interface{}
func (fpaiv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayItemValue) AsAccessPointsItemValue() (*Device_Spec_NetworkConfig_WifiOpts_AccessPoint, bool) {
	res, ok := fpaiv.value.(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint)
	return res, ok
}

func (fpaiv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_WifiOpts) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_WifiOpts))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WifiOpts'
func (fpaiv *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_WifiOpts) bool {
	slice := fpaiv.DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayItemValue struct {
	DeviceSpecNetworkConfigWifiOpts_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayItemValue) AsMatchPathItemValue() (DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayItemValue) AsOptsPathItemValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayItemValue) AsAccessPointsPathItemValue() (DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WifiOpts'
func (fpaivs *DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_WifiOpts) bool {
	switch fpaivs.Selector() {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue).ContainsValue(source.GetMatch())
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue).ContainsValue(source.GetOpts())
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts: %d", fpaivs.Selector()))
	}
}

// DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues allows storing slice of values for WifiOpts fields according to their type
type DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigWifiOpts_FieldPath
}

func ParseDeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigWifiOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WifiOpts field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_WifiOpts_Match) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints:
		for _, v := range fpaov.values.([][]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues) AsMatchArrayOfValues() ([]*Device_Spec_NetworkConfig_WifiOpts_Match, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_WifiOpts_Match)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues) AsSetNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues) AsWakeonlanArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues) AsOptsArrayOfValues() ([]*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues) AsAccessPointsArrayOfValues() ([][]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint, bool) {
	res, ok := fpaov.values.([][]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigWifiOpts_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayOfValues struct {
	DeviceSpecNetworkConfigWifiOpts_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceSpecNetworkConfigWifiOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayOfValues) AsMatchPathArrayOfValues() (DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayOfValues) AsOptsPathArrayOfValues() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfigWifiOpts_FieldSubPathArrayOfValues) AsAccessPointsPathArrayOfValues() (DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigBridgesOpts_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigBridgesOpts_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_BridgesOpts) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_BridgesOpts) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_BridgesOpts)

	// Those methods build corresponding DeviceSpecNetworkConfigBridgesOpts_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigBridgesOpts_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigBridgesOpts_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts       DeviceSpecNetworkConfigBridgesOpts_FieldPathSelector = 0
	DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces DeviceSpecNetworkConfigBridgesOpts_FieldPathSelector = 1
	DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters DeviceSpecNetworkConfigBridgesOpts_FieldPathSelector = 2
	DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName       DeviceSpecNetworkConfigBridgesOpts_FieldPathSelector = 3
)

func (s DeviceSpecNetworkConfigBridgesOpts_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		return "opts"
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces:
		return "interfaces"
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		return "parameters"
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigBridgesOpts_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigBridgesOpts_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_BridgesOpts")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "opts":
			return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts}, nil
		case "interfaces":
			return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces}, nil
		case "parameters":
			return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters}, nil
		case "name":
			return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName}, nil
		}
	} else {
		switch fp[0] {
		case "opts":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigBridgesOpts_FieldSubPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts, subPath: subpath}, nil
			}
		case "parameters":
			if subpath, err := BuildDeviceSpecNetworkConfigBridgesOptsParameters_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigBridgesOpts_FieldSubPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_BridgesOpts", fp)
}

func ParseDeviceSpecNetworkConfigBridgesOpts_FieldPath(rawField string) (DeviceSpecNetworkConfigBridgesOpts_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigBridgesOpts_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigBridgesOpts_FieldPath(rawField string) DeviceSpecNetworkConfigBridgesOpts_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigBridgesOpts_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigBridgesOpts_FieldPathSelector
}

var _ DeviceSpecNetworkConfigBridgesOpts_FieldPath = (*DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) Selector() DeviceSpecNetworkConfigBridgesOpts_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_BridgesOpts
func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_BridgesOpts) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
			if source.Opts != nil {
				values = append(values, source.Opts)
			}
		case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces:
			for _, value := range source.GetInterfaces() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
			if source.Parameters != nil {
				values = append(values, source.Parameters)
			}
		case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName:
			values = append(values, source.Name)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_BridgesOpts))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_BridgesOpts
func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_BridgesOpts) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		res := source.GetOpts()
		return res, res != nil
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces:
		res := source.GetInterfaces()
		return res, res != nil
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		res := source.GetParameters()
		return res, res != nil
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName:
		return source.GetName(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_BridgesOpts))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		return (*Device_Spec_NetworkConfig_CommonOpts)(nil)
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces:
		return ([]string)(nil)
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		return (*Device_Spec_NetworkConfig_BridgesOpts_Parameters)(nil)
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_BridgesOpts) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
			item.Opts = nil
		case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces:
			item.Interfaces = nil
		case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
			item.Parameters = nil
		case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName:
			item.Name = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_BridgesOpts))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces ||
		fp.selector == DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName
}

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigBridgesOpts_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces:
		return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath: *fp, value: value.([]string)}
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters)}
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces:
		return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath: *fp, values: values.([][]string)}
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_BridgesOpts_Parameters)}
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces:
		return &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceSpecNetworkConfigBridgesOpts_FieldSubPath struct {
	selector DeviceSpecNetworkConfigBridgesOpts_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceSpecNetworkConfigBridgesOpts_FieldPath = (*DeviceSpecNetworkConfigBridgesOpts_FieldSubPath)(nil)

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) Selector() DeviceSpecNetworkConfigBridgesOpts_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) AsOptsSubPath() (DeviceSpecNetworkConfigCommonOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOpts_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) AsParametersSubPath() (DeviceSpecNetworkConfigBridgesOptsParameters_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigBridgesOptsParameters_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Spec_NetworkConfig_BridgesOpts
func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) Get(source *Device_Spec_NetworkConfig_BridgesOpts) (values []interface{}) {
	if asCommonOptsFieldPath, ok := fps.AsOptsSubPath(); ok {
		values = append(values, asCommonOptsFieldPath.Get(source.GetOpts())...)
	} else if asParametersFieldPath, ok := fps.AsParametersSubPath(); ok {
		values = append(values, asParametersFieldPath.Get(source.GetParameters())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fps.selector))
	}
	return
}

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Spec_NetworkConfig_BridgesOpts))
}

// GetSingle returns value of selected field from source Device_Spec_NetworkConfig_BridgesOpts
func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) GetSingle(source *Device_Spec_NetworkConfig_BridgesOpts) (interface{}, bool) {
	switch fps.selector {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		if source.GetOpts() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpts())
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		if source.GetParameters() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetParameters())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fps.selector))
	}
}

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Spec_NetworkConfig_BridgesOpts))
}

// GetDefault returns a default value of the field type
func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) ClearValue(item *Device_Spec_NetworkConfig_BridgesOpts) {
	if item != nil {
		switch fps.selector {
		case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
			fps.subPath.ClearValueRaw(item.Opts)
		case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
			fps.subPath.ClearValueRaw(item.Parameters)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fps.selector))
		}
	}
}

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Spec_NetworkConfig_BridgesOpts))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) WithIValue(value interface{}) DeviceSpecNetworkConfigBridgesOpts_FieldPathValue {
	return &DeviceSpecNetworkConfigBridgesOpts_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues {
	return &DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue {
	return &DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceSpecNetworkConfigBridgesOpts_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigBridgesOpts_FieldPathValue allows storing values for BridgesOpts fields according to their type
type DeviceSpecNetworkConfigBridgesOpts_FieldPathValue interface {
	DeviceSpecNetworkConfigBridgesOpts_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_BridgesOpts)
	CompareWith(*Device_Spec_NetworkConfig_BridgesOpts) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigBridgesOpts_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigBridgesOpts_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigBridgesOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BridgesOpts field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigBridgesOpts_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigBridgesOpts_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigBridgesOpts_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigBridgesOpts_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigBridgesOpts_FieldPathValue = (*DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BridgesOpts' as interface{}
func (fpv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue) AsOptsValue() (*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue) AsInterfacesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue) AsParametersValue() (*Device_Spec_NetworkConfig_BridgesOpts_Parameters, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object BridgesOpts
func (fpv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_BridgesOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_BridgesOpts)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		(*target).Opts = fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces:
		(*target).Interfaces = fpv.value.([]string)
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		(*target).Parameters = fpv.value.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters)
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_BridgesOpts)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_BridgesOpts'.
func (fpv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_BridgesOpts) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		return 0, false
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces:
		return 0, false
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		return 0, false
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_BridgesOpts))
}

type DeviceSpecNetworkConfigBridgesOpts_FieldSubPathValue struct {
	DeviceSpecNetworkConfigBridgesOpts_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceSpecNetworkConfigBridgesOpts_FieldPathValue = (*DeviceSpecNetworkConfigBridgesOpts_FieldSubPathValue)(nil)

func (fpvs *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathValue) AsOptsPathValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathValue) AsParametersPathValue() (DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathValue) SetTo(target **Device_Spec_NetworkConfig_BridgesOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_BridgesOpts)
	}
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).SetTo(&(*target).Opts)
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		fpvs.subPathValue.(DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue).SetTo(&(*target).Parameters)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_BridgesOpts)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathValue) CompareWith(source *Device_Spec_NetworkConfig_BridgesOpts) (int, bool) {
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).CompareWith(source.GetOpts())
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue).CompareWith(source.GetParameters())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Spec_NetworkConfig_BridgesOpts))
}

// DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue allows storing single item in Path-specific values for BridgesOpts according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigBridgesOpts_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_BridgesOpts) bool
}

// ParseDeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigBridgesOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BridgesOpts field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_BridgesOpts as interface{}
func (fpaiv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayItemValue) AsInterfacesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_BridgesOpts) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_BridgesOpts))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BridgesOpts'
func (fpaiv *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_BridgesOpts) bool {
	slice := fpaiv.DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayItemValue struct {
	DeviceSpecNetworkConfigBridgesOpts_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayItemValue) AsOptsPathItemValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayItemValue) AsParametersPathItemValue() (DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BridgesOpts'
func (fpaivs *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_BridgesOpts) bool {
	switch fpaivs.Selector() {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue).ContainsValue(source.GetOpts())
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue).ContainsValue(source.GetParameters())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts: %d", fpaivs.Selector()))
	}
}

// DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues allows storing slice of values for BridgesOpts fields according to their type
type DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigBridgesOpts_FieldPath
}

func ParseDeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigBridgesOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BridgesOpts field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_BridgesOpts_Parameters) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues) AsOptsArrayOfValues() ([]*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues) AsInterfacesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues) AsParametersArrayOfValues() ([]*Device_Spec_NetworkConfig_BridgesOpts_Parameters, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_BridgesOpts_Parameters)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayOfValues struct {
	DeviceSpecNetworkConfigBridgesOpts_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceSpecNetworkConfigBridgesOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayOfValues) AsOptsPathArrayOfValues() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfigBridgesOpts_FieldSubPathArrayOfValues) AsParametersPathArrayOfValues() (DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigBondsOpts_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigBondsOpts_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_BondsOpts) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_BondsOpts) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_BondsOpts)

	// Those methods build corresponding DeviceSpecNetworkConfigBondsOpts_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigBondsOpts_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigBondsOpts_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts       DeviceSpecNetworkConfigBondsOpts_FieldPathSelector = 0
	DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces DeviceSpecNetworkConfigBondsOpts_FieldPathSelector = 1
	DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters DeviceSpecNetworkConfigBondsOpts_FieldPathSelector = 2
	DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName       DeviceSpecNetworkConfigBondsOpts_FieldPathSelector = 3
)

func (s DeviceSpecNetworkConfigBondsOpts_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		return "opts"
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces:
		return "interfaces"
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		return "parameters"
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigBondsOpts_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigBondsOpts_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_BondsOpts")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "opts":
			return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts}, nil
		case "interfaces":
			return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces}, nil
		case "parameters":
			return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters}, nil
		case "name":
			return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName}, nil
		}
	} else {
		switch fp[0] {
		case "opts":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigBondsOpts_FieldSubPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts, subPath: subpath}, nil
			}
		case "parameters":
			if subpath, err := BuildDeviceSpecNetworkConfigBondsOptsParameters_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigBondsOpts_FieldSubPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_BondsOpts", fp)
}

func ParseDeviceSpecNetworkConfigBondsOpts_FieldPath(rawField string) (DeviceSpecNetworkConfigBondsOpts_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigBondsOpts_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigBondsOpts_FieldPath(rawField string) DeviceSpecNetworkConfigBondsOpts_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigBondsOpts_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigBondsOpts_FieldPathSelector
}

var _ DeviceSpecNetworkConfigBondsOpts_FieldPath = (*DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) Selector() DeviceSpecNetworkConfigBondsOpts_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_BondsOpts
func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_BondsOpts) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
			if source.Opts != nil {
				values = append(values, source.Opts)
			}
		case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces:
			for _, value := range source.GetInterfaces() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
			if source.Parameters != nil {
				values = append(values, source.Parameters)
			}
		case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName:
			values = append(values, source.Name)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_BondsOpts))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_BondsOpts
func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_BondsOpts) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		res := source.GetOpts()
		return res, res != nil
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces:
		res := source.GetInterfaces()
		return res, res != nil
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		res := source.GetParameters()
		return res, res != nil
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName:
		return source.GetName(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_BondsOpts))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		return (*Device_Spec_NetworkConfig_CommonOpts)(nil)
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces:
		return ([]string)(nil)
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		return (*Device_Spec_NetworkConfig_BondsOpts_Parameters)(nil)
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_BondsOpts) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
			item.Opts = nil
		case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces:
			item.Interfaces = nil
		case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
			item.Parameters = nil
		case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName:
			item.Name = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_BondsOpts))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces ||
		fp.selector == DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName
}

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigBondsOpts_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces:
		return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath: *fp, value: value.([]string)}
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_BondsOpts_Parameters)}
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces:
		return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath: *fp, values: values.([][]string)}
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_BondsOpts_Parameters)}
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces:
		return &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceSpecNetworkConfigBondsOpts_FieldSubPath struct {
	selector DeviceSpecNetworkConfigBondsOpts_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceSpecNetworkConfigBondsOpts_FieldPath = (*DeviceSpecNetworkConfigBondsOpts_FieldSubPath)(nil)

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) Selector() DeviceSpecNetworkConfigBondsOpts_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) AsOptsSubPath() (DeviceSpecNetworkConfigCommonOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOpts_FieldPath)
	return res, ok
}
func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) AsParametersSubPath() (DeviceSpecNetworkConfigBondsOptsParameters_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigBondsOptsParameters_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Spec_NetworkConfig_BondsOpts
func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) Get(source *Device_Spec_NetworkConfig_BondsOpts) (values []interface{}) {
	if asCommonOptsFieldPath, ok := fps.AsOptsSubPath(); ok {
		values = append(values, asCommonOptsFieldPath.Get(source.GetOpts())...)
	} else if asParametersFieldPath, ok := fps.AsParametersSubPath(); ok {
		values = append(values, asParametersFieldPath.Get(source.GetParameters())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fps.selector))
	}
	return
}

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Spec_NetworkConfig_BondsOpts))
}

// GetSingle returns value of selected field from source Device_Spec_NetworkConfig_BondsOpts
func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) GetSingle(source *Device_Spec_NetworkConfig_BondsOpts) (interface{}, bool) {
	switch fps.selector {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		if source.GetOpts() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpts())
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		if source.GetParameters() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetParameters())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fps.selector))
	}
}

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Spec_NetworkConfig_BondsOpts))
}

// GetDefault returns a default value of the field type
func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) ClearValue(item *Device_Spec_NetworkConfig_BondsOpts) {
	if item != nil {
		switch fps.selector {
		case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
			fps.subPath.ClearValueRaw(item.Opts)
		case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
			fps.subPath.ClearValueRaw(item.Parameters)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fps.selector))
		}
	}
}

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Spec_NetworkConfig_BondsOpts))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) WithIValue(value interface{}) DeviceSpecNetworkConfigBondsOpts_FieldPathValue {
	return &DeviceSpecNetworkConfigBondsOpts_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues {
	return &DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue {
	return &DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceSpecNetworkConfigBondsOpts_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigBondsOpts_FieldPathValue allows storing values for BondsOpts fields according to their type
type DeviceSpecNetworkConfigBondsOpts_FieldPathValue interface {
	DeviceSpecNetworkConfigBondsOpts_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_BondsOpts)
	CompareWith(*Device_Spec_NetworkConfig_BondsOpts) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigBondsOpts_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigBondsOpts_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigBondsOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BondsOpts field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigBondsOpts_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigBondsOpts_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigBondsOpts_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigBondsOpts_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigBondsOpts_FieldPathValue = (*DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BondsOpts' as interface{}
func (fpv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue) AsOptsValue() (*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue) AsInterfacesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue) AsParametersValue() (*Device_Spec_NetworkConfig_BondsOpts_Parameters, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_BondsOpts_Parameters)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object BondsOpts
func (fpv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_BondsOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_BondsOpts)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		(*target).Opts = fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces:
		(*target).Interfaces = fpv.value.([]string)
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		(*target).Parameters = fpv.value.(*Device_Spec_NetworkConfig_BondsOpts_Parameters)
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_BondsOpts)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_BondsOpts'.
func (fpv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_BondsOpts) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		return 0, false
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces:
		return 0, false
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		return 0, false
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_BondsOpts))
}

type DeviceSpecNetworkConfigBondsOpts_FieldSubPathValue struct {
	DeviceSpecNetworkConfigBondsOpts_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceSpecNetworkConfigBondsOpts_FieldPathValue = (*DeviceSpecNetworkConfigBondsOpts_FieldSubPathValue)(nil)

func (fpvs *DeviceSpecNetworkConfigBondsOpts_FieldSubPathValue) AsOptsPathValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceSpecNetworkConfigBondsOpts_FieldSubPathValue) AsParametersPathValue() (DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceSpecNetworkConfigBondsOpts_FieldSubPathValue) SetTo(target **Device_Spec_NetworkConfig_BondsOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_BondsOpts)
	}
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).SetTo(&(*target).Opts)
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		fpvs.subPathValue.(DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue).SetTo(&(*target).Parameters)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigBondsOpts_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_BondsOpts)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceSpecNetworkConfigBondsOpts_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceSpecNetworkConfigBondsOpts_FieldSubPathValue) CompareWith(source *Device_Spec_NetworkConfig_BondsOpts) (int, bool) {
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).CompareWith(source.GetOpts())
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue).CompareWith(source.GetParameters())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigBondsOpts_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Spec_NetworkConfig_BondsOpts))
}

// DeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue allows storing single item in Path-specific values for BondsOpts according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigBondsOpts_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_BondsOpts) bool
}

// ParseDeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigBondsOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BondsOpts field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigBondsOpts_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_BondsOpts as interface{}
func (fpaiv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayItemValue) AsInterfacesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_BondsOpts) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_BondsOpts))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BondsOpts'
func (fpaiv *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_BondsOpts) bool {
	slice := fpaiv.DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayItemValue struct {
	DeviceSpecNetworkConfigBondsOpts_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayItemValue) AsOptsPathItemValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayItemValue) AsParametersPathItemValue() (DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BondsOpts'
func (fpaivs *DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_BondsOpts) bool {
	switch fpaivs.Selector() {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue).ContainsValue(source.GetOpts())
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue).ContainsValue(source.GetParameters())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts: %d", fpaivs.Selector()))
	}
}

// DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues allows storing slice of values for BondsOpts fields according to their type
type DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigBondsOpts_FieldPath
}

func ParseDeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigBondsOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BondsOpts field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_BondsOpts_Parameters) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues) AsOptsArrayOfValues() ([]*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues) AsInterfacesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues) AsParametersArrayOfValues() ([]*Device_Spec_NetworkConfig_BondsOpts_Parameters, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_BondsOpts_Parameters)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOpts_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayOfValues struct {
	DeviceSpecNetworkConfigBondsOpts_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceSpecNetworkConfigBondsOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayOfValues) AsOptsPathArrayOfValues() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceSpecNetworkConfigBondsOpts_FieldSubPathArrayOfValues) AsParametersPathArrayOfValues() (DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigTunnelsOpts_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_TunnelsOpts) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_TunnelsOpts) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_TunnelsOpts)

	// Those methods build corresponding DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts   DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector = 0
	DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode   DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector = 1
	DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal  DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector = 2
	DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector = 3
	DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey    DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector = 4
	DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName   DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector = 5
)

func (s DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		return "opts"
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode:
		return "mode"
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal:
		return "local"
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote:
		return "remote"
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey:
		return "key"
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigTunnelsOpts_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigTunnelsOpts_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_TunnelsOpts")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "opts":
			return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts}, nil
		case "mode":
			return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode}, nil
		case "local":
			return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal}, nil
		case "remote":
			return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote}, nil
		case "key":
			return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey}, nil
		case "name":
			return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName}, nil
		}
	} else {
		switch fp[0] {
		case "opts":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_TunnelsOpts", fp)
}

func ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPath(rawField string) (DeviceSpecNetworkConfigTunnelsOpts_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigTunnelsOpts_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigTunnelsOpts_FieldPath(rawField string) DeviceSpecNetworkConfigTunnelsOpts_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector
}

var _ DeviceSpecNetworkConfigTunnelsOpts_FieldPath = (*DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) Selector() DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_TunnelsOpts
func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_TunnelsOpts) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
			if source.Opts != nil {
				values = append(values, source.Opts)
			}
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode:
			values = append(values, source.Mode)
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal:
			values = append(values, source.Local)
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote:
			values = append(values, source.Remote)
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey:
			values = append(values, source.Key)
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName:
			values = append(values, source.Name)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_TunnelsOpts))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_TunnelsOpts
func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_TunnelsOpts) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		res := source.GetOpts()
		return res, res != nil
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode:
		return source.GetMode(), source != nil
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal:
		return source.GetLocal(), source != nil
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote:
		return source.GetRemote(), source != nil
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey:
		return source.GetKey(), source != nil
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName:
		return source.GetName(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_TunnelsOpts))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		return (*Device_Spec_NetworkConfig_CommonOpts)(nil)
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode:
		return ""
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal:
		return ""
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote:
		return ""
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey:
		return int32(0)
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_TunnelsOpts) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
			item.Opts = nil
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode:
			item.Mode = ""
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal:
			item.Local = ""
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote:
			item.Remote = ""
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey:
			item.Key = int32(0)
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName:
			item.Name = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_TunnelsOpts))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode ||
		fp.selector == DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal ||
		fp.selector == DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote ||
		fp.selector == DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey ||
		fp.selector == DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName
}

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath struct {
	selector DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceSpecNetworkConfigTunnelsOpts_FieldPath = (*DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath)(nil)

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) Selector() DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) AsOptsSubPath() (DeviceSpecNetworkConfigCommonOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOpts_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Spec_NetworkConfig_TunnelsOpts
func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) Get(source *Device_Spec_NetworkConfig_TunnelsOpts) (values []interface{}) {
	if asCommonOptsFieldPath, ok := fps.AsOptsSubPath(); ok {
		values = append(values, asCommonOptsFieldPath.Get(source.GetOpts())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fps.selector))
	}
	return
}

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Spec_NetworkConfig_TunnelsOpts))
}

// GetSingle returns value of selected field from source Device_Spec_NetworkConfig_TunnelsOpts
func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) GetSingle(source *Device_Spec_NetworkConfig_TunnelsOpts) (interface{}, bool) {
	switch fps.selector {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		if source.GetOpts() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpts())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fps.selector))
	}
}

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Spec_NetworkConfig_TunnelsOpts))
}

// GetDefault returns a default value of the field type
func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) ClearValue(item *Device_Spec_NetworkConfig_TunnelsOpts) {
	if item != nil {
		switch fps.selector {
		case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
			fps.subPath.ClearValueRaw(item.Opts)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fps.selector))
		}
	}
}

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Spec_NetworkConfig_TunnelsOpts))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) WithIValue(value interface{}) DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue {
	return &DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues {
	return &DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue {
	return &DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue allows storing values for TunnelsOpts fields according to their type
type DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue interface {
	DeviceSpecNetworkConfigTunnelsOpts_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_TunnelsOpts)
	CompareWith(*Device_Spec_NetworkConfig_TunnelsOpts) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TunnelsOpts field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigTunnelsOpts_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue = (*DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TunnelsOpts' as interface{}
func (fpv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue) AsOptsValue() (*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue) AsModeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue) AsLocalValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue) AsRemoteValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue) AsKeyValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object TunnelsOpts
func (fpv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_TunnelsOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_TunnelsOpts)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		(*target).Opts = fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode:
		(*target).Mode = fpv.value.(string)
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal:
		(*target).Local = fpv.value.(string)
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote:
		(*target).Remote = fpv.value.(string)
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey:
		(*target).Key = fpv.value.(int32)
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_TunnelsOpts)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_TunnelsOpts'.
func (fpv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_TunnelsOpts) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		return 0, false
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode:
		leftValue := fpv.value.(string)
		rightValue := source.GetMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal:
		leftValue := fpv.value.(string)
		rightValue := source.GetLocal()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote:
		leftValue := fpv.value.(string)
		rightValue := source.GetRemote()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey:
		leftValue := fpv.value.(int32)
		rightValue := source.GetKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_TunnelsOpts))
}

type DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathValue struct {
	DeviceSpecNetworkConfigTunnelsOpts_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceSpecNetworkConfigTunnelsOpts_FieldPathValue = (*DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathValue)(nil)

func (fpvs *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathValue) AsOptsPathValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathValue) SetTo(target **Device_Spec_NetworkConfig_TunnelsOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_TunnelsOpts)
	}
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).SetTo(&(*target).Opts)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_TunnelsOpts)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathValue) CompareWith(source *Device_Spec_NetworkConfig_TunnelsOpts) (int, bool) {
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).CompareWith(source.GetOpts())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Spec_NetworkConfig_TunnelsOpts))
}

// DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue allows storing single item in Path-specific values for TunnelsOpts according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigTunnelsOpts_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_TunnelsOpts) bool
}

// ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TunnelsOpts field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_TunnelsOpts as interface{}
func (fpaiv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_TunnelsOpts) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_TunnelsOpts))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TunnelsOpts'
func (fpaiv *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_TunnelsOpts) bool {
	slice := fpaiv.DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathArrayItemValue struct {
	DeviceSpecNetworkConfigTunnelsOpts_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathArrayItemValue) AsOptsPathItemValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'TunnelsOpts'
func (fpaivs *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_TunnelsOpts) bool {
	switch fpaivs.Selector() {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue).ContainsValue(source.GetOpts())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts: %d", fpaivs.Selector()))
	}
}

// DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues allows storing slice of values for TunnelsOpts fields according to their type
type DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigTunnelsOpts_FieldPath
}

func ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TunnelsOpts field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues) AsOptsArrayOfValues() ([]*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues) AsModeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues) AsLocalArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues) AsRemoteArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues) AsKeyArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathArrayOfValues struct {
	DeviceSpecNetworkConfigTunnelsOpts_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceSpecNetworkConfigTunnelsOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceSpecNetworkConfigTunnelsOpts_FieldSubPathArrayOfValues) AsOptsPathArrayOfValues() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigVlansOpts_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigVlansOpts_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_VlansOpts) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_VlansOpts) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_VlansOpts)

	// Those methods build corresponding DeviceSpecNetworkConfigVlansOpts_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigVlansOpts_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigVlansOpts_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts DeviceSpecNetworkConfigVlansOpts_FieldPathSelector = 0
	DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId   DeviceSpecNetworkConfigVlansOpts_FieldPathSelector = 1
	DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink DeviceSpecNetworkConfigVlansOpts_FieldPathSelector = 2
	DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName DeviceSpecNetworkConfigVlansOpts_FieldPathSelector = 3
)

func (s DeviceSpecNetworkConfigVlansOpts_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		return "opts"
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId:
		return "id"
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink:
		return "link"
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigVlansOpts_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigVlansOpts_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_VlansOpts")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "opts":
			return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts}, nil
		case "id":
			return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId}, nil
		case "link":
			return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink}, nil
		case "name":
			return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName}, nil
		}
	} else {
		switch fp[0] {
		case "opts":
			if subpath, err := BuildDeviceSpecNetworkConfigCommonOpts_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceSpecNetworkConfigVlansOpts_FieldSubPath{selector: DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_VlansOpts", fp)
}

func ParseDeviceSpecNetworkConfigVlansOpts_FieldPath(rawField string) (DeviceSpecNetworkConfigVlansOpts_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigVlansOpts_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigVlansOpts_FieldPath(rawField string) DeviceSpecNetworkConfigVlansOpts_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigVlansOpts_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigVlansOpts_FieldPathSelector
}

var _ DeviceSpecNetworkConfigVlansOpts_FieldPath = (*DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) Selector() DeviceSpecNetworkConfigVlansOpts_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_VlansOpts
func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_VlansOpts) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
			if source.Opts != nil {
				values = append(values, source.Opts)
			}
		case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId:
			values = append(values, source.Id)
		case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink:
			values = append(values, source.Link)
		case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName:
			values = append(values, source.Name)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_VlansOpts))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_VlansOpts
func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_VlansOpts) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		res := source.GetOpts()
		return res, res != nil
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId:
		return source.GetId(), source != nil
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink:
		return source.GetLink(), source != nil
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName:
		return source.GetName(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_VlansOpts))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		return (*Device_Spec_NetworkConfig_CommonOpts)(nil)
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId:
		return int32(0)
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink:
		return ""
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_VlansOpts) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
			item.Opts = nil
		case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId:
			item.Id = int32(0)
		case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink:
			item.Link = ""
		case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName:
			item.Name = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_VlansOpts))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId ||
		fp.selector == DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink ||
		fp.selector == DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName
}

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigVlansOpts_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath: *fp, value: value.(*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId:
		return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink:
		return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue{DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath: *fp, values: values.([]*Device_Spec_NetworkConfig_CommonOpts)}
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId:
		return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink:
		return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceSpecNetworkConfigVlansOpts_FieldSubPath struct {
	selector DeviceSpecNetworkConfigVlansOpts_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceSpecNetworkConfigVlansOpts_FieldPath = (*DeviceSpecNetworkConfigVlansOpts_FieldSubPath)(nil)

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) Selector() DeviceSpecNetworkConfigVlansOpts_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) AsOptsSubPath() (DeviceSpecNetworkConfigCommonOpts_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceSpecNetworkConfigCommonOpts_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Spec_NetworkConfig_VlansOpts
func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) Get(source *Device_Spec_NetworkConfig_VlansOpts) (values []interface{}) {
	if asCommonOptsFieldPath, ok := fps.AsOptsSubPath(); ok {
		values = append(values, asCommonOptsFieldPath.Get(source.GetOpts())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fps.selector))
	}
	return
}

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Spec_NetworkConfig_VlansOpts))
}

// GetSingle returns value of selected field from source Device_Spec_NetworkConfig_VlansOpts
func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) GetSingle(source *Device_Spec_NetworkConfig_VlansOpts) (interface{}, bool) {
	switch fps.selector {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		if source.GetOpts() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpts())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fps.selector))
	}
}

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Spec_NetworkConfig_VlansOpts))
}

// GetDefault returns a default value of the field type
func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) ClearValue(item *Device_Spec_NetworkConfig_VlansOpts) {
	if item != nil {
		switch fps.selector {
		case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
			fps.subPath.ClearValueRaw(item.Opts)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fps.selector))
		}
	}
}

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Spec_NetworkConfig_VlansOpts))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) WithIValue(value interface{}) DeviceSpecNetworkConfigVlansOpts_FieldPathValue {
	return &DeviceSpecNetworkConfigVlansOpts_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues {
	return &DeviceSpecNetworkConfigVlansOpts_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue {
	return &DeviceSpecNetworkConfigVlansOpts_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceSpecNetworkConfigVlansOpts_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigVlansOpts_FieldPathValue allows storing values for VlansOpts fields according to their type
type DeviceSpecNetworkConfigVlansOpts_FieldPathValue interface {
	DeviceSpecNetworkConfigVlansOpts_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_VlansOpts)
	CompareWith(*Device_Spec_NetworkConfig_VlansOpts) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigVlansOpts_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigVlansOpts_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigVlansOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VlansOpts field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigVlansOpts_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigVlansOpts_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigVlansOpts_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigVlansOpts_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigVlansOpts_FieldPathValue = (*DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'VlansOpts' as interface{}
func (fpv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue) AsOptsValue() (*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue) AsIdValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue) AsLinkValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object VlansOpts
func (fpv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_VlansOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_VlansOpts)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		(*target).Opts = fpv.value.(*Device_Spec_NetworkConfig_CommonOpts)
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId:
		(*target).Id = fpv.value.(int32)
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink:
		(*target).Link = fpv.value.(string)
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_VlansOpts)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_VlansOpts'.
func (fpv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_VlansOpts) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		return 0, false
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId:
		leftValue := fpv.value.(int32)
		rightValue := source.GetId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink:
		leftValue := fpv.value.(string)
		rightValue := source.GetLink()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_VlansOpts))
}

type DeviceSpecNetworkConfigVlansOpts_FieldSubPathValue struct {
	DeviceSpecNetworkConfigVlansOpts_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceSpecNetworkConfigVlansOpts_FieldPathValue = (*DeviceSpecNetworkConfigVlansOpts_FieldSubPathValue)(nil)

func (fpvs *DeviceSpecNetworkConfigVlansOpts_FieldSubPathValue) AsOptsPathValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceSpecNetworkConfigVlansOpts_FieldSubPathValue) SetTo(target **Device_Spec_NetworkConfig_VlansOpts) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_VlansOpts)
	}
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).SetTo(&(*target).Opts)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigVlansOpts_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_VlansOpts)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceSpecNetworkConfigVlansOpts_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceSpecNetworkConfigVlansOpts_FieldSubPathValue) CompareWith(source *Device_Spec_NetworkConfig_VlansOpts) (int, bool) {
	switch fpvs.Selector() {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		return fpvs.subPathValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathValue).CompareWith(source.GetOpts())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceSpecNetworkConfigVlansOpts_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Spec_NetworkConfig_VlansOpts))
}

// DeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue allows storing single item in Path-specific values for VlansOpts according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigVlansOpts_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_VlansOpts) bool
}

// ParseDeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigVlansOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VlansOpts field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigVlansOpts_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_VlansOpts as interface{}
func (fpaiv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_VlansOpts) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_VlansOpts))
}

// Contains returns a boolean indicating if value that is being held is present in given 'VlansOpts'
func (fpaiv *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_VlansOpts) bool {
	slice := fpaiv.DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceSpecNetworkConfigVlansOpts_FieldSubPathArrayItemValue struct {
	DeviceSpecNetworkConfigVlansOpts_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceSpecNetworkConfigVlansOpts_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceSpecNetworkConfigVlansOpts_FieldSubPathArrayItemValue) AsOptsPathItemValue() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'VlansOpts'
func (fpaivs *DeviceSpecNetworkConfigVlansOpts_FieldSubPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_VlansOpts) bool {
	switch fpaivs.Selector() {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		return fpaivs.subPathItemValue.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayItemValue).ContainsValue(source.GetOpts())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_VlansOpts: %d", fpaivs.Selector()))
	}
}

// DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues allows storing slice of values for VlansOpts fields according to their type
type DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigVlansOpts_FieldPath
}

func ParseDeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigVlansOpts_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing VlansOpts field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts:
		for _, v := range fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues) AsOptsArrayOfValues() ([]*Device_Spec_NetworkConfig_CommonOpts, bool) {
	res, ok := fpaov.values.([]*Device_Spec_NetworkConfig_CommonOpts)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues) AsIdArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues) AsLinkArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigVlansOpts_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type DeviceSpecNetworkConfigVlansOpts_FieldSubPathArrayOfValues struct {
	DeviceSpecNetworkConfigVlansOpts_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceSpecNetworkConfigVlansOpts_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigVlansOpts_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceSpecNetworkConfigVlansOpts_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceSpecNetworkConfigVlansOpts_FieldSubPathArrayOfValues) AsOptsPathArrayOfValues() (DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceSpecNetworkConfigCommonOpts_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)

	// Those methods build corresponding DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns       DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector = 0
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp       DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector = 1
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector = 2
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname  DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector = 3
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu       DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector = 4
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname     DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector = 5
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes    DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector = 6
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric  DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector = 7
)

func (s DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns:
		return "use_dns"
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp:
		return "use_ntp"
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname:
		return "send_hostname"
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname:
		return "use_hostname"
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu:
		return "use_mtu"
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname:
		return "hostname"
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes:
		return "use_routes"
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric:
		return "route_metric"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "use_dns", "useDns", "use-dns":
			return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns}, nil
		case "use_ntp", "useNtp", "use-ntp":
			return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp}, nil
		case "send_hostname", "sendHostname", "send-hostname":
			return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname}, nil
		case "use_hostname", "useHostname", "use-hostname":
			return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname}, nil
		case "use_mtu", "useMtu", "use-mtu":
			return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu}, nil
		case "hostname":
			return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname}, nil
		case "use_routes", "useRoutes", "use-routes":
			return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes}, nil
		case "route_metric", "routeMetric", "route-metric":
			return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides", fp)
}

func ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath(rawField string) (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath(rawField string) DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector
}

var _ DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath = (*DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) Selector() DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides
func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns:
			values = append(values, source.UseDns)
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp:
			values = append(values, source.UseNtp)
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname:
			values = append(values, source.SendHostname)
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname:
			values = append(values, source.UseHostname)
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu:
			values = append(values, source.UseMtu)
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname:
			values = append(values, source.Hostname)
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes:
			values = append(values, source.UseRoutes)
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric:
			values = append(values, source.RouteMetric)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides
func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns:
		return source.GetUseDns(), source != nil
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp:
		return source.GetUseNtp(), source != nil
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname:
		return source.GetSendHostname(), source != nil
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname:
		return source.GetUseHostname(), source != nil
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu:
		return source.GetUseMtu(), source != nil
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname:
		return source.GetHostname(), source != nil
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes:
		return source.GetUseRoutes(), source != nil
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric:
		return source.GetRouteMetric(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns:
		return false
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp:
		return false
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname:
		return false
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname:
		return false
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu:
		return false
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname:
		return ""
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes:
		return false
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns:
			item.UseDns = false
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp:
			item.UseNtp = false
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname:
			item.SendHostname = false
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname:
			item.UseHostname = false
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu:
			item.UseMtu = false
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname:
			item.Hostname = ""
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes:
			item.UseRoutes = false
		case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric:
			item.RouteMetric = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric
}

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric:
		return &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue allows storing values for DHCPOverrides fields according to their type
type DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue interface {
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)
	CompareWith(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DHCPOverrides field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathValue = (*DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DHCPOverrides' as interface{}
func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) AsUseDnsValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) AsUseNtpValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) AsSendHostnameValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) AsUseHostnameValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) AsUseMtuValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) AsHostnameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) AsUseRoutesValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) AsRouteMetricValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object DHCPOverrides
func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns:
		(*target).UseDns = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp:
		(*target).UseNtp = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname:
		(*target).SendHostname = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname:
		(*target).UseHostname = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu:
		(*target).UseMtu = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname:
		(*target).Hostname = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes:
		(*target).UseRoutes = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric:
		(*target).RouteMetric = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides'.
func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns:
		leftValue := fpv.value.(bool)
		rightValue := source.GetUseDns()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp:
		leftValue := fpv.value.(bool)
		rightValue := source.GetUseNtp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname:
		leftValue := fpv.value.(bool)
		rightValue := source.GetSendHostname()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname:
		leftValue := fpv.value.(bool)
		rightValue := source.GetUseHostname()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu:
		leftValue := fpv.value.(bool)
		rightValue := source.GetUseMtu()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname:
		leftValue := fpv.value.(string)
		rightValue := source.GetHostname()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes:
		leftValue := fpv.value.(bool)
		rightValue := source.GetUseRoutes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric:
		leftValue := fpv.value.(string)
		rightValue := source.GetRouteMetric()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides))
}

// DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue allows storing single item in Path-specific values for DHCPOverrides according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) bool
}

// ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DHCPOverrides field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides as interface{}
func (fpaiv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DHCPOverrides'
func (fpaiv *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) bool {
	slice := fpaiv.DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues allows storing slice of values for DHCPOverrides fields according to their type
type DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath
}

func ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DHCPOverrides field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues) AsUseDnsArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues) AsUseNtpArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues) AsSendHostnameArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues) AsUseHostnameArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues) AsUseMtuArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues) AsHostnameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues) AsUseRoutesArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPathArrayOfValues) AsRouteMetricArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigCommonOptsNameservers_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_CommonOpts_Nameservers) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_Nameservers) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_CommonOpts_Nameservers)

	// Those methods build corresponding DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch    DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelector = 0
	DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelector = 1
)

func (s DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch:
		return "search"
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses:
		return "addresses"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Nameservers: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigCommonOptsNameservers_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigCommonOptsNameservers_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_CommonOpts_Nameservers")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "search":
			return &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch}, nil
		case "addresses":
			return &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_CommonOpts_Nameservers", fp)
}

func ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPath(rawField string) (DeviceSpecNetworkConfigCommonOptsNameservers_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigCommonOptsNameservers_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPath(rawField string) DeviceSpecNetworkConfigCommonOptsNameservers_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelector
}

var _ DeviceSpecNetworkConfigCommonOptsNameservers_FieldPath = (*DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) Selector() DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_CommonOpts_Nameservers
func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_CommonOpts_Nameservers) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch:
			for _, value := range source.GetSearch() {
				values = append(values, value)
			}
		case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses:
			for _, value := range source.GetAddresses() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Nameservers: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_CommonOpts_Nameservers
func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_Nameservers) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch:
		res := source.GetSearch()
		return res, res != nil
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses:
		res := source.GetAddresses()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Nameservers: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch:
		return ([]string)(nil)
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Nameservers: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_CommonOpts_Nameservers) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch:
			item.Search = nil
		case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses:
			item.Addresses = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Nameservers: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses
}

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch:
		return &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath: *fp, value: value.([]string)}
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses:
		return &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Nameservers: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch:
		return &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath: *fp, values: values.([][]string)}
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses:
		return &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Nameservers: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch:
		return &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses:
		return &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayItemValue{DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Nameservers: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue allows storing values for Nameservers fields according to their type
type DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue interface {
	DeviceSpecNetworkConfigCommonOptsNameservers_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_CommonOpts_Nameservers)
	CompareWith(*Device_Spec_NetworkConfig_CommonOpts_Nameservers) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Nameservers field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathValue = (*DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Nameservers' as interface{}
func (fpv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue) AsSearchValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue) AsAddressesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object Nameservers
func (fpv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_CommonOpts_Nameservers) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_CommonOpts_Nameservers)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch:
		(*target).Search = fpv.value.([]string)
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses:
		(*target).Addresses = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Nameservers: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_CommonOpts_Nameservers'.
func (fpv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_CommonOpts_Nameservers) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch:
		return 0, false
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Nameservers: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers))
}

// DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue allows storing single item in Path-specific values for Nameservers according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigCommonOptsNameservers_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_CommonOpts_Nameservers) bool
}

// ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Nameservers field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_CommonOpts_Nameservers as interface{}
func (fpaiv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayItemValue) AsSearchItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayItemValue) AsAddressesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_Nameservers) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Nameservers'
func (fpaiv *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_CommonOpts_Nameservers) bool {
	slice := fpaiv.DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues allows storing slice of values for Nameservers fields according to their type
type DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigCommonOptsNameservers_FieldPath
}

func ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Nameservers field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayOfValues) AsSearchArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPathArrayOfValues) AsAddressesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigCommonOptsRoutes_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_CommonOpts_Routes) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_Routes) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_CommonOpts_Routes)

	// Those methods build corresponding DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom   DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector = 0
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo     DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector = 1
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia    DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector = 2
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector = 3
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector = 4
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType   DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector = 5
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope  DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector = 6
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable  DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector = 7
)

func (s DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom:
		return "from"
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo:
		return "to"
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia:
		return "via"
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink:
		return "on_link"
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric:
		return "metric"
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType:
		return "type"
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope:
		return "scope"
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable:
		return "table"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Routes: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigCommonOptsRoutes_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigCommonOptsRoutes_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_CommonOpts_Routes")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "from":
			return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom}, nil
		case "to":
			return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo}, nil
		case "via":
			return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia}, nil
		case "on_link", "onLink", "on-link":
			return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink}, nil
		case "metric":
			return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric}, nil
		case "type":
			return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType}, nil
		case "scope":
			return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope}, nil
		case "table":
			return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_CommonOpts_Routes", fp)
}

func ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPath(rawField string) (DeviceSpecNetworkConfigCommonOptsRoutes_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigCommonOptsRoutes_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPath(rawField string) DeviceSpecNetworkConfigCommonOptsRoutes_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector
}

var _ DeviceSpecNetworkConfigCommonOptsRoutes_FieldPath = (*DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) Selector() DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_CommonOpts_Routes
func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_CommonOpts_Routes) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom:
			values = append(values, source.From)
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo:
			values = append(values, source.To)
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia:
			values = append(values, source.Via)
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink:
			values = append(values, source.OnLink)
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric:
			values = append(values, source.Metric)
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType:
			values = append(values, source.Type)
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope:
			values = append(values, source.Scope)
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable:
			values = append(values, source.Table)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Routes: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_CommonOpts_Routes))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_CommonOpts_Routes
func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_Routes) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom:
		return source.GetFrom(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo:
		return source.GetTo(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia:
		return source.GetVia(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink:
		return source.GetOnLink(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric:
		return source.GetMetric(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType:
		return source.GetType(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope:
		return source.GetScope(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable:
		return source.GetTable(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Routes: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts_Routes))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom:
		return ""
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo:
		return ""
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia:
		return ""
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink:
		return false
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric:
		return int32(0)
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType:
		return ""
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope:
		return ""
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Routes: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_CommonOpts_Routes) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom:
			item.From = ""
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo:
			item.To = ""
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia:
			item.Via = ""
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink:
			item.OnLink = false
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric:
			item.Metric = int32(0)
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType:
			item.Type = ""
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope:
			item.Scope = ""
		case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable:
			item.Table = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Routes: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_CommonOpts_Routes))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Routes: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable:
		return &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Routes: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Routes: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue allows storing values for Routes fields according to their type
type DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue interface {
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_CommonOpts_Routes)
	CompareWith(*Device_Spec_NetworkConfig_CommonOpts_Routes) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Routes field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathValue = (*DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Routes' as interface{}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) AsFromValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) AsToValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) AsViaValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) AsOnLinkValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) AsMetricValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) AsTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) AsScopeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) AsTableValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object Routes
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_CommonOpts_Routes) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_CommonOpts_Routes)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom:
		(*target).From = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo:
		(*target).To = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia:
		(*target).Via = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink:
		(*target).OnLink = fpv.value.(bool)
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric:
		(*target).Metric = fpv.value.(int32)
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType:
		(*target).Type = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope:
		(*target).Scope = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable:
		(*target).Table = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Routes: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_CommonOpts_Routes)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_CommonOpts_Routes'.
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_CommonOpts_Routes) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom:
		leftValue := fpv.value.(string)
		rightValue := source.GetFrom()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo:
		leftValue := fpv.value.(string)
		rightValue := source.GetTo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia:
		leftValue := fpv.value.(string)
		rightValue := source.GetVia()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink:
		leftValue := fpv.value.(bool)
		rightValue := source.GetOnLink()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMetric()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType:
		leftValue := fpv.value.(string)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope:
		leftValue := fpv.value.(string)
		rightValue := source.GetScope()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTable()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Routes: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_CommonOpts_Routes))
}

// DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue allows storing single item in Path-specific values for Routes according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_CommonOpts_Routes) bool
}

// ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Routes field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_CommonOpts_Routes as interface{}
func (fpaiv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_Routes) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts_Routes))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Routes'
func (fpaiv *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_CommonOpts_Routes) bool {
	slice := fpaiv.DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues allows storing slice of values for Routes fields according to their type
type DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldPath
}

func ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Routes field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues) AsFromArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues) AsToArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues) AsViaArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues) AsOnLinkArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues) AsMetricArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues) AsScopeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPathArrayOfValues) AsTableArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)

	// Those methods build corresponding DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom          DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelector = 0
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo            DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelector = 1
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable         DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelector = 2
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority      DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelector = 3
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark          DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelector = 4
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelector = 5
)

func (s DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom:
		return "from"
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo:
		return "to"
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable:
		return "table"
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority:
		return "priority"
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark:
		return "mark"
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService:
		return "type_of_service"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "from":
			return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom}, nil
		case "to":
			return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo}, nil
		case "table":
			return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable}, nil
		case "priority":
			return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority}, nil
		case "mark":
			return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark}, nil
		case "type_of_service", "typeOfService", "type-of-service":
			return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy", fp)
}

func ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath(rawField string) (DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath(rawField string) DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelector
}

var _ DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath = (*DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) Selector() DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy
func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom:
			values = append(values, source.From)
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo:
			values = append(values, source.To)
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable:
			values = append(values, source.Table)
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority:
			values = append(values, source.Priority)
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark:
			values = append(values, source.Mark)
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService:
			values = append(values, source.TypeOfService)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy
func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom:
		return source.GetFrom(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo:
		return source.GetTo(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable:
		return source.GetTable(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority:
		return source.GetPriority(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark:
		return source.GetMark(), source != nil
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService:
		return source.GetTypeOfService(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom:
		return ""
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo:
		return ""
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable:
		return int32(0)
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority:
		return int32(0)
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark:
		return int32(0)
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom:
			item.From = ""
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo:
			item.To = ""
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable:
			item.Table = int32(0)
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority:
			item.Priority = int32(0)
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark:
			item.Mark = int32(0)
		case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService:
			item.TypeOfService = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService:
		return &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue allows storing values for RoutingPolicy fields according to their type
type DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue interface {
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)
	CompareWith(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RoutingPolicy field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathValue = (*DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RoutingPolicy' as interface{}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue) AsFromValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue) AsToValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue) AsTableValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue) AsPriorityValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue) AsMarkValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue) AsTypeOfServiceValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object RoutingPolicy
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom:
		(*target).From = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo:
		(*target).To = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable:
		(*target).Table = fpv.value.(int32)
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority:
		(*target).Priority = fpv.value.(int32)
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark:
		(*target).Mark = fpv.value.(int32)
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService:
		(*target).TypeOfService = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy'.
func (fpv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom:
		leftValue := fpv.value.(string)
		rightValue := source.GetFrom()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo:
		leftValue := fpv.value.(string)
		rightValue := source.GetTo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTable()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPriority()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMark()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTypeOfService()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy))
}

// DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue allows storing single item in Path-specific values for RoutingPolicy according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) bool
}

// ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RoutingPolicy field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy as interface{}
func (fpaiv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RoutingPolicy'
func (fpaiv *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) bool {
	slice := fpaiv.DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues allows storing slice of values for RoutingPolicy fields according to their type
type DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath
}

func ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RoutingPolicy field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues) AsFromArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues) AsToArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues) AsTableArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues) AsPriorityArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues) AsMarkArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPathArrayOfValues) AsTypeOfServiceArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigCommonOptsAuth_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_CommonOpts_Auth) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_Auth) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_CommonOpts_Auth)

	// Those methods build corresponding DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey               DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector = 0
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword          DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector = 1
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod            DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector = 2
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity          DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector = 3
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector = 4
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate     DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector = 5
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector = 6
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey         DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector = 7
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector = 8
)

func (s DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey:
		return "key"
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword:
		return "password"
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod:
		return "method"
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity:
		return "identity"
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity:
		return "anonymous_identity"
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate:
		return "ca_certificate"
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate:
		return "client_certificate"
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey:
		return "client_key"
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword:
		return "client_key_password"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Auth: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigCommonOptsAuth_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigCommonOptsAuth_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_CommonOpts_Auth")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "key":
			return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey}, nil
		case "password":
			return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword}, nil
		case "method":
			return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod}, nil
		case "identity":
			return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity}, nil
		case "anonymous_identity", "anonymousIdentity", "anonymous-identity":
			return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity}, nil
		case "ca_certificate", "caCertificate", "ca-certificate":
			return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate}, nil
		case "client_certificate", "clientCertificate", "client-certificate":
			return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate}, nil
		case "client_key", "clientKey", "client-key":
			return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey}, nil
		case "client_key_password", "clientKeyPassword", "client-key-password":
			return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_CommonOpts_Auth", fp)
}

func ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPath(rawField string) (DeviceSpecNetworkConfigCommonOptsAuth_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigCommonOptsAuth_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPath(rawField string) DeviceSpecNetworkConfigCommonOptsAuth_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector
}

var _ DeviceSpecNetworkConfigCommonOptsAuth_FieldPath = (*DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) Selector() DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_CommonOpts_Auth
func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_CommonOpts_Auth) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey:
			values = append(values, source.Key)
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword:
			values = append(values, source.Password)
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod:
			values = append(values, source.Method)
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity:
			values = append(values, source.Identity)
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity:
			values = append(values, source.AnonymousIdentity)
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate:
			values = append(values, source.CaCertificate)
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate:
			values = append(values, source.ClientCertificate)
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey:
			values = append(values, source.ClientKey)
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword:
			values = append(values, source.ClientKeyPassword)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Auth: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_CommonOpts_Auth))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_CommonOpts_Auth
func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_Auth) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey:
		return source.GetKey(), source != nil
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword:
		return source.GetPassword(), source != nil
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod:
		return source.GetMethod(), source != nil
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity:
		return source.GetIdentity(), source != nil
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity:
		return source.GetAnonymousIdentity(), source != nil
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate:
		return source.GetCaCertificate(), source != nil
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate:
		return source.GetClientCertificate(), source != nil
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey:
		return source.GetClientKey(), source != nil
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword:
		return source.GetClientKeyPassword(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Auth: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts_Auth))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey:
		return ""
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword:
		return ""
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod:
		return ""
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity:
		return ""
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity:
		return ""
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate:
		return ""
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate:
		return ""
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey:
		return ""
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Auth: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_CommonOpts_Auth) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey:
			item.Key = ""
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword:
			item.Password = ""
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod:
			item.Method = ""
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity:
			item.Identity = ""
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity:
			item.AnonymousIdentity = ""
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate:
			item.CaCertificate = ""
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate:
			item.ClientCertificate = ""
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey:
			item.ClientKey = ""
		case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword:
			item.ClientKeyPassword = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Auth: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_CommonOpts_Auth))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey ||
		fp.selector == DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword
}

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Auth: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword:
		return &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Auth: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Auth: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue allows storing values for Auth fields according to their type
type DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue interface {
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_CommonOpts_Auth)
	CompareWith(*Device_Spec_NetworkConfig_CommonOpts_Auth) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Auth field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsAuth_FieldPathValue = (*DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Auth' as interface{}
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) AsKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) AsPasswordValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) AsMethodValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) AsIdentityValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) AsAnonymousIdentityValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) AsCaCertificateValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) AsClientCertificateValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) AsClientKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) AsClientKeyPasswordValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Auth
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_CommonOpts_Auth) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_CommonOpts_Auth)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey:
		(*target).Key = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword:
		(*target).Password = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod:
		(*target).Method = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity:
		(*target).Identity = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity:
		(*target).AnonymousIdentity = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate:
		(*target).CaCertificate = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate:
		(*target).ClientCertificate = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey:
		(*target).ClientKey = fpv.value.(string)
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword:
		(*target).ClientKeyPassword = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Auth: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_CommonOpts_Auth)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_CommonOpts_Auth'.
func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_CommonOpts_Auth) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword:
		leftValue := fpv.value.(string)
		rightValue := source.GetPassword()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod:
		leftValue := fpv.value.(string)
		rightValue := source.GetMethod()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity:
		leftValue := fpv.value.(string)
		rightValue := source.GetIdentity()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity:
		leftValue := fpv.value.(string)
		rightValue := source.GetAnonymousIdentity()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate:
		leftValue := fpv.value.(string)
		rightValue := source.GetCaCertificate()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate:
		leftValue := fpv.value.(string)
		rightValue := source.GetClientCertificate()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetClientKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword:
		leftValue := fpv.value.(string)
		rightValue := source.GetClientKeyPassword()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_CommonOpts_Auth: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_CommonOpts_Auth))
}

// DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue allows storing single item in Path-specific values for Auth according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_CommonOpts_Auth) bool
}

// ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Auth field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_CommonOpts_Auth as interface{}
func (fpaiv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_CommonOpts_Auth) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_CommonOpts_Auth))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Auth'
func (fpaiv *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_CommonOpts_Auth) bool {
	slice := fpaiv.DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues allows storing slice of values for Auth fields according to their type
type DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigCommonOptsAuth_FieldPath
}

func ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Auth field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigCommonOptsAuth_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues) AsKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues) AsPasswordArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues) AsMethodArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues) AsIdentityArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues) AsAnonymousIdentityArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues) AsCaCertificateArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues) AsClientCertificateArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues) AsClientKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPathArrayOfValues) AsClientKeyPasswordArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigEthOptsMatch_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_EthOpts_Match) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_EthOpts_Match) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_EthOpts_Match)

	// Those methods build corresponding DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName       DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelector = 0
	DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelector = 1
	DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver     DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelector = 2
)

func (s DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName:
		return "name"
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress:
		return "macaddress"
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver:
		return "driver"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts_Match: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigEthOptsMatch_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigEthOptsMatch_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_EthOpts_Match")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName}, nil
		case "macaddress":
			return &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress}, nil
		case "driver":
			return &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_EthOpts_Match", fp)
}

func ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPath(rawField string) (DeviceSpecNetworkConfigEthOptsMatch_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigEthOptsMatch_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigEthOptsMatch_FieldPath(rawField string) DeviceSpecNetworkConfigEthOptsMatch_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelector
}

var _ DeviceSpecNetworkConfigEthOptsMatch_FieldPath = (*DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) Selector() DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_EthOpts_Match
func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_EthOpts_Match) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName:
			values = append(values, source.Name)
		case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress:
			values = append(values, source.Macaddress)
		case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver:
			values = append(values, source.Driver)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts_Match: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_EthOpts_Match))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_EthOpts_Match
func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_EthOpts_Match) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName:
		return source.GetName(), source != nil
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress:
		return source.GetMacaddress(), source != nil
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver:
		return source.GetDriver(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts_Match: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_EthOpts_Match))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName:
		return ""
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress:
		return ""
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts_Match: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_EthOpts_Match) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName:
			item.Name = ""
		case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress:
			item.Macaddress = ""
		case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver:
			item.Driver = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts_Match: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_EthOpts_Match))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName ||
		fp.selector == DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress ||
		fp.selector == DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver
}

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue{DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress:
		return &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue{DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver:
		return &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue{DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts_Match: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress:
		return &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver:
		return &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts_Match: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts_Match: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue allows storing values for Match fields according to their type
type DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue interface {
	DeviceSpecNetworkConfigEthOptsMatch_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_EthOpts_Match)
	CompareWith(*Device_Spec_NetworkConfig_EthOpts_Match) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Match field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigEthOptsMatch_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigEthOptsMatch_FieldPathValue = (*DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Match' as interface{}
func (fpv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue) AsMacaddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue) AsDriverValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Match
func (fpv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_EthOpts_Match) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_EthOpts_Match)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress:
		(*target).Macaddress = fpv.value.(string)
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver:
		(*target).Driver = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts_Match: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_EthOpts_Match)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_EthOpts_Match'.
func (fpv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_EthOpts_Match) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetMacaddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver:
		leftValue := fpv.value.(string)
		rightValue := source.GetDriver()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_EthOpts_Match: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_EthOpts_Match))
}

// DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue allows storing single item in Path-specific values for Match according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigEthOptsMatch_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_EthOpts_Match) bool
}

// ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Match field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_EthOpts_Match as interface{}
func (fpaiv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_EthOpts_Match) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_EthOpts_Match))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Match'
func (fpaiv *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_EthOpts_Match) bool {
	slice := fpaiv.DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues allows storing slice of values for Match fields according to their type
type DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigEthOptsMatch_FieldPath
}

func ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Match field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigEthOptsMatch_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayOfValues) AsMacaddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPathArrayOfValues) AsDriverArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigWifiOptsMatch_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_WifiOpts_Match) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_WifiOpts_Match) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_WifiOpts_Match)

	// Those methods build corresponding DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName       DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelector = 0
	DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelector = 1
	DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver     DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelector = 2
)

func (s DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName:
		return "name"
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress:
		return "macaddress"
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver:
		return "driver"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_Match: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigWifiOptsMatch_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigWifiOptsMatch_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_WifiOpts_Match")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName}, nil
		case "macaddress":
			return &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress}, nil
		case "driver":
			return &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_WifiOpts_Match", fp)
}

func ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPath(rawField string) (DeviceSpecNetworkConfigWifiOptsMatch_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigWifiOptsMatch_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPath(rawField string) DeviceSpecNetworkConfigWifiOptsMatch_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelector
}

var _ DeviceSpecNetworkConfigWifiOptsMatch_FieldPath = (*DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) Selector() DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_WifiOpts_Match
func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_WifiOpts_Match) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName:
			values = append(values, source.Name)
		case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress:
			values = append(values, source.Macaddress)
		case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver:
			values = append(values, source.Driver)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_Match: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_WifiOpts_Match))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_WifiOpts_Match
func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_WifiOpts_Match) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName:
		return source.GetName(), source != nil
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress:
		return source.GetMacaddress(), source != nil
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver:
		return source.GetDriver(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_Match: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_WifiOpts_Match))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName:
		return ""
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress:
		return ""
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_Match: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_WifiOpts_Match) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName:
			item.Name = ""
		case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress:
			item.Macaddress = ""
		case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver:
			item.Driver = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_Match: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_WifiOpts_Match))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName ||
		fp.selector == DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress ||
		fp.selector == DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver
}

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress:
		return &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver:
		return &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_Match: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress:
		return &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver:
		return &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_Match: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_Match: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue allows storing values for Match fields according to their type
type DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue interface {
	DeviceSpecNetworkConfigWifiOptsMatch_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_WifiOpts_Match)
	CompareWith(*Device_Spec_NetworkConfig_WifiOpts_Match) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Match field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigWifiOptsMatch_FieldPathValue = (*DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Match' as interface{}
func (fpv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue) AsMacaddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue) AsDriverValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Match
func (fpv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_WifiOpts_Match) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_WifiOpts_Match)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress:
		(*target).Macaddress = fpv.value.(string)
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver:
		(*target).Driver = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_Match: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_WifiOpts_Match)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_WifiOpts_Match'.
func (fpv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_WifiOpts_Match) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetMacaddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver:
		leftValue := fpv.value.(string)
		rightValue := source.GetDriver()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_Match: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_WifiOpts_Match))
}

// DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue allows storing single item in Path-specific values for Match according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigWifiOptsMatch_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_WifiOpts_Match) bool
}

// ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Match field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_WifiOpts_Match as interface{}
func (fpaiv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_WifiOpts_Match) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_WifiOpts_Match))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Match'
func (fpaiv *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_WifiOpts_Match) bool {
	slice := fpaiv.DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues allows storing slice of values for Match fields according to their type
type DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigWifiOptsMatch_FieldPath
}

func ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Match field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigWifiOptsMatch_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayOfValues) AsMacaddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPathArrayOfValues) AsDriverArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_WifiOpts_AccessPoint)

	// Those methods build corresponding DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName     DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelector = 0
	DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelector = 1
	DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode     DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelector = 2
)

func (s DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName:
		return "name"
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword:
		return "password"
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode:
		return "mode"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_AccessPoint: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_WifiOpts_AccessPoint")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName}, nil
		case "password":
			return &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword}, nil
		case "mode":
			return &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_WifiOpts_AccessPoint", fp)
}

func ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath(rawField string) (DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath(rawField string) DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelector
}

var _ DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath = (*DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) Selector() DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_WifiOpts_AccessPoint
func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName:
			values = append(values, source.Name)
		case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword:
			values = append(values, source.Password)
		case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode:
			values = append(values, source.Mode)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_AccessPoint: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_WifiOpts_AccessPoint
func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName:
		return source.GetName(), source != nil
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword:
		return source.GetPassword(), source != nil
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode:
		return source.GetMode(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_AccessPoint: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName:
		return ""
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword:
		return ""
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_AccessPoint: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName:
			item.Name = ""
		case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword:
			item.Password = ""
		case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode:
			item.Mode = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_AccessPoint: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName ||
		fp.selector == DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword ||
		fp.selector == DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode
}

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword:
		return &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode:
		return &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue{DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_AccessPoint: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName:
		return &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword:
		return &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode:
		return &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_AccessPoint: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_AccessPoint: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue allows storing values for AccessPoint fields according to their type
type DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue interface {
	DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_WifiOpts_AccessPoint)
	CompareWith(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AccessPoint field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathValue = (*DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AccessPoint' as interface{}
func (fpv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue) AsPasswordValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue) AsModeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object AccessPoint
func (fpv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_WifiOpts_AccessPoint) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_WifiOpts_AccessPoint)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword:
		(*target).Password = fpv.value.(string)
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode:
		(*target).Mode = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_AccessPoint: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_WifiOpts_AccessPoint'.
func (fpv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword:
		leftValue := fpv.value.(string)
		rightValue := source.GetPassword()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode:
		leftValue := fpv.value.(string)
		rightValue := source.GetMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_WifiOpts_AccessPoint: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint))
}

// DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue allows storing single item in Path-specific values for AccessPoint according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) bool
}

// ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AccessPoint field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_WifiOpts_AccessPoint as interface{}
func (fpaiv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AccessPoint'
func (fpaiv *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) bool {
	slice := fpaiv.DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues allows storing slice of values for AccessPoint fields according to their type
type DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath
}

func ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AccessPoint field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayOfValues) AsPasswordArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPathArrayOfValues) AsModeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigBridgesOptsParameters_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_BridgesOpts_Parameters) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_BridgesOpts_Parameters) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_BridgesOpts_Parameters)

	// Those methods build corresponding DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime   DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector = 0
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority     DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector = 1
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector = 2
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector = 3
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime    DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector = 4
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge       DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector = 5
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost     DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector = 6
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp          DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector = 7
)

func (s DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime:
		return "ageing_time"
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority:
		return "priority"
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority:
		return "port_priority"
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay:
		return "forward_delay"
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime:
		return "hello_time"
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge:
		return "max_age"
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost:
		return "path_cost"
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp:
		return "stp"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts_Parameters: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigBridgesOptsParameters_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigBridgesOptsParameters_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_BridgesOpts_Parameters")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "ageing_time", "ageingTime", "ageing-time":
			return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime}, nil
		case "priority":
			return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority}, nil
		case "port_priority", "portPriority", "port-priority":
			return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority}, nil
		case "forward_delay", "forwardDelay", "forward-delay":
			return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay}, nil
		case "hello_time", "helloTime", "hello-time":
			return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime}, nil
		case "max_age", "maxAge", "max-age":
			return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge}, nil
		case "path_cost", "pathCost", "path-cost":
			return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost}, nil
		case "stp":
			return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_BridgesOpts_Parameters", fp)
}

func ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPath(rawField string) (DeviceSpecNetworkConfigBridgesOptsParameters_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigBridgesOptsParameters_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPath(rawField string) DeviceSpecNetworkConfigBridgesOptsParameters_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector
}

var _ DeviceSpecNetworkConfigBridgesOptsParameters_FieldPath = (*DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) Selector() DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_BridgesOpts_Parameters
func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_BridgesOpts_Parameters) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime:
			values = append(values, source.AgeingTime)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority:
			values = append(values, source.Priority)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority:
			values = append(values, source.PortPriority)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay:
			values = append(values, source.ForwardDelay)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime:
			values = append(values, source.HelloTime)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge:
			values = append(values, source.MaxAge)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost:
			values = append(values, source.PathCost)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp:
			values = append(values, source.Stp)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts_Parameters: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_BridgesOpts_Parameters
func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_BridgesOpts_Parameters) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime:
		return source.GetAgeingTime(), source != nil
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority:
		return source.GetPriority(), source != nil
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority:
		return source.GetPortPriority(), source != nil
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay:
		return source.GetForwardDelay(), source != nil
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime:
		return source.GetHelloTime(), source != nil
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge:
		return source.GetMaxAge(), source != nil
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost:
		return source.GetPathCost(), source != nil
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp:
		return source.GetStp(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts_Parameters: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime:
		return int32(0)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority:
		return int32(0)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority:
		return int32(0)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay:
		return int32(0)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime:
		return int32(0)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge:
		return int32(0)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost:
		return int32(0)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts_Parameters: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_BridgesOpts_Parameters) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime:
			item.AgeingTime = int32(0)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority:
			item.Priority = int32(0)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority:
			item.PortPriority = int32(0)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay:
			item.ForwardDelay = int32(0)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime:
			item.HelloTime = int32(0)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge:
			item.MaxAge = int32(0)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost:
			item.PathCost = int32(0)
		case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp:
			item.Stp = false
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts_Parameters: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime ||
		fp.selector == DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority ||
		fp.selector == DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority ||
		fp.selector == DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay ||
		fp.selector == DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime ||
		fp.selector == DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge ||
		fp.selector == DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost ||
		fp.selector == DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp
}

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts_Parameters: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp:
		return &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts_Parameters: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts_Parameters: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue allows storing values for Parameters fields according to their type
type DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue interface {
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_BridgesOpts_Parameters)
	CompareWith(*Device_Spec_NetworkConfig_BridgesOpts_Parameters) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Parameters field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathValue = (*DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Parameters' as interface{}
func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) AsAgeingTimeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) AsPriorityValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) AsPortPriorityValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) AsForwardDelayValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) AsHelloTimeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) AsMaxAgeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) AsPathCostValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) AsStpValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object Parameters
func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_BridgesOpts_Parameters) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_BridgesOpts_Parameters)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime:
		(*target).AgeingTime = fpv.value.(int32)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority:
		(*target).Priority = fpv.value.(int32)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority:
		(*target).PortPriority = fpv.value.(int32)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay:
		(*target).ForwardDelay = fpv.value.(int32)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime:
		(*target).HelloTime = fpv.value.(int32)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge:
		(*target).MaxAge = fpv.value.(int32)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost:
		(*target).PathCost = fpv.value.(int32)
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp:
		(*target).Stp = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts_Parameters: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_BridgesOpts_Parameters'.
func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_BridgesOpts_Parameters) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime:
		leftValue := fpv.value.(int32)
		rightValue := source.GetAgeingTime()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPriority()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPortPriority()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay:
		leftValue := fpv.value.(int32)
		rightValue := source.GetForwardDelay()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime:
		leftValue := fpv.value.(int32)
		rightValue := source.GetHelloTime()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxAge()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPathCost()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp:
		leftValue := fpv.value.(bool)
		rightValue := source.GetStp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BridgesOpts_Parameters: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters))
}

// DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue allows storing single item in Path-specific values for Parameters according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_BridgesOpts_Parameters) bool
}

// ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Parameters field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_BridgesOpts_Parameters as interface{}
func (fpaiv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_BridgesOpts_Parameters) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Parameters'
func (fpaiv *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_BridgesOpts_Parameters) bool {
	slice := fpaiv.DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues allows storing slice of values for Parameters fields according to their type
type DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldPath
}

func ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Parameters field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues) AsAgeingTimeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues) AsPriorityArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues) AsPortPriorityArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues) AsForwardDelayArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues) AsHelloTimeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues) AsMaxAgeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues) AsPathCostArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPathArrayOfValues) AsStpArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigBondsOptsParameters_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_BondsOpts_Parameters) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_BondsOpts_Parameters) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_BondsOpts_Parameters)

	// Those methods build corresponding DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode                  DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 0
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate              DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 1
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval    DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 2
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks              DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 3
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy    DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 4
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect              DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 5
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive       DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 6
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets          DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 7
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate           DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 8
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets         DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 9
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay               DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 10
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy     DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 11
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp         DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 12
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave       DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 13
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 14
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp            DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 15
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval   DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 16
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary               DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector = 17
)

func (s DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode:
		return "mode"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate:
		return "lacp_rate"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval:
		return "mii_monitor_interval"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks:
		return "min_links"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy:
		return "transmit_hash_policy"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect:
		return "ad_select"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive:
		return "all_slaves_active"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets:
		return "arp_ip_targets"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate:
		return "arp_validate"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets:
		return "arp_all_targets"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay:
		return "up_delay"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy:
		return "fail_over_mac_policy"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp:
		return "gratuitous_arp"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave:
		return "packets_per_slave"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy:
		return "primary_reselect_policy"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp:
		return "resend_igmp"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval:
		return "learn_packet_interval"
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary:
		return "primary"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts_Parameters: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigBondsOptsParameters_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigBondsOptsParameters_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_BondsOpts_Parameters")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "mode":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode}, nil
		case "lacp_rate", "lacpRate", "lacp-rate":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate}, nil
		case "mii_monitor_interval", "miiMonitorInterval", "mii-monitor-interval":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval}, nil
		case "min_links", "minLinks", "min-links":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks}, nil
		case "transmit_hash_policy", "transmitHashPolicy", "transmit-hash-policy":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy}, nil
		case "ad_select", "adSelect", "ad-select":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect}, nil
		case "all_slaves_active", "allSlavesActive", "all-slaves-active":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive}, nil
		case "arp_ip_targets", "arpIpTargets", "arp-ip-targets":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets}, nil
		case "arp_validate", "arpValidate", "arp-validate":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate}, nil
		case "arp_all_targets", "arpAllTargets", "arp-all-targets":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets}, nil
		case "up_delay", "upDelay", "up-delay":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay}, nil
		case "fail_over_mac_policy", "failOverMacPolicy", "fail-over-mac-policy":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy}, nil
		case "gratuitous_arp", "gratuitousArp", "gratuitous-arp":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp}, nil
		case "packets_per_slave", "packetsPerSlave", "packets-per-slave":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave}, nil
		case "primary_reselect_policy", "primaryReselectPolicy", "primary-reselect-policy":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy}, nil
		case "resend_igmp", "resendIgmp", "resend-igmp":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp}, nil
		case "learn_packet_interval", "learnPacketInterval", "learn-packet-interval":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval}, nil
		case "primary":
			return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_BondsOpts_Parameters", fp)
}

func ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPath(rawField string) (DeviceSpecNetworkConfigBondsOptsParameters_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigBondsOptsParameters_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPath(rawField string) DeviceSpecNetworkConfigBondsOptsParameters_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector
}

var _ DeviceSpecNetworkConfigBondsOptsParameters_FieldPath = (*DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) Selector() DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_BondsOpts_Parameters
func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_BondsOpts_Parameters) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode:
			values = append(values, source.Mode)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate:
			values = append(values, source.LacpRate)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval:
			values = append(values, source.MiiMonitorInterval)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks:
			values = append(values, source.MinLinks)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy:
			values = append(values, source.TransmitHashPolicy)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect:
			values = append(values, source.AdSelect)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive:
			values = append(values, source.AllSlavesActive)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets:
			values = append(values, source.ArpIpTargets)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate:
			values = append(values, source.ArpValidate)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets:
			values = append(values, source.ArpAllTargets)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay:
			values = append(values, source.UpDelay)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy:
			values = append(values, source.FailOverMacPolicy)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp:
			values = append(values, source.GratuitousArp)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave:
			values = append(values, source.PacketsPerSlave)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy:
			values = append(values, source.PrimaryReselectPolicy)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp:
			values = append(values, source.ResendIgmp)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval:
			values = append(values, source.LearnPacketInterval)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary:
			values = append(values, source.Primary)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts_Parameters: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_BondsOpts_Parameters))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_BondsOpts_Parameters
func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_BondsOpts_Parameters) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode:
		return source.GetMode(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate:
		return source.GetLacpRate(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval:
		return source.GetMiiMonitorInterval(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks:
		return source.GetMinLinks(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy:
		return source.GetTransmitHashPolicy(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect:
		return source.GetAdSelect(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive:
		return source.GetAllSlavesActive(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets:
		return source.GetArpIpTargets(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate:
		return source.GetArpValidate(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets:
		return source.GetArpAllTargets(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay:
		return source.GetUpDelay(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy:
		return source.GetFailOverMacPolicy(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp:
		return source.GetGratuitousArp(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave:
		return source.GetPacketsPerSlave(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy:
		return source.GetPrimaryReselectPolicy(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp:
		return source.GetResendIgmp(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval:
		return source.GetLearnPacketInterval(), source != nil
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary:
		return source.GetPrimary(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts_Parameters: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_BondsOpts_Parameters))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode:
		return ""
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate:
		return int32(0)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval:
		return int32(0)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks:
		return int32(0)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy:
		return int32(0)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect:
		return int32(0)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive:
		return int32(0)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets:
		return false
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate:
		return ""
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets:
		return ""
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay:
		return ""
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy:
		return ""
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp:
		return int32(0)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave:
		return ""
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy:
		return ""
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp:
		return ""
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval:
		return ""
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts_Parameters: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_BondsOpts_Parameters) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode:
			item.Mode = ""
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate:
			item.LacpRate = int32(0)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval:
			item.MiiMonitorInterval = int32(0)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks:
			item.MinLinks = int32(0)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy:
			item.TransmitHashPolicy = int32(0)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect:
			item.AdSelect = int32(0)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive:
			item.AllSlavesActive = int32(0)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets:
			item.ArpIpTargets = false
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate:
			item.ArpValidate = ""
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets:
			item.ArpAllTargets = ""
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay:
			item.UpDelay = ""
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy:
			item.FailOverMacPolicy = ""
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp:
			item.GratuitousArp = int32(0)
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave:
			item.PacketsPerSlave = ""
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy:
			item.PrimaryReselectPolicy = ""
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp:
			item.ResendIgmp = ""
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval:
			item.LearnPacketInterval = ""
		case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary:
			item.Primary = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts_Parameters: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_BondsOpts_Parameters))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval ||
		fp.selector == DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary
}

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts_Parameters: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary:
		return &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts_Parameters: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts_Parameters: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue allows storing values for Parameters fields according to their type
type DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue interface {
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_BondsOpts_Parameters)
	CompareWith(*Device_Spec_NetworkConfig_BondsOpts_Parameters) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Parameters field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigBondsOptsParameters_FieldPathValue = (*DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Parameters' as interface{}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsModeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsLacpRateValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsMiiMonitorIntervalValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsMinLinksValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsTransmitHashPolicyValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsAdSelectValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsAllSlavesActiveValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsArpIpTargetsValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsArpValidateValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsArpAllTargetsValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsUpDelayValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsFailOverMacPolicyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsGratuitousArpValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsPacketsPerSlaveValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsPrimaryReselectPolicyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsResendIgmpValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsLearnPacketIntervalValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) AsPrimaryValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Parameters
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_BondsOpts_Parameters) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_BondsOpts_Parameters)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode:
		(*target).Mode = fpv.value.(string)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate:
		(*target).LacpRate = fpv.value.(int32)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval:
		(*target).MiiMonitorInterval = fpv.value.(int32)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks:
		(*target).MinLinks = fpv.value.(int32)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy:
		(*target).TransmitHashPolicy = fpv.value.(int32)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect:
		(*target).AdSelect = fpv.value.(int32)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive:
		(*target).AllSlavesActive = fpv.value.(int32)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets:
		(*target).ArpIpTargets = fpv.value.(bool)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate:
		(*target).ArpValidate = fpv.value.(string)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets:
		(*target).ArpAllTargets = fpv.value.(string)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay:
		(*target).UpDelay = fpv.value.(string)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy:
		(*target).FailOverMacPolicy = fpv.value.(string)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp:
		(*target).GratuitousArp = fpv.value.(int32)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave:
		(*target).PacketsPerSlave = fpv.value.(string)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy:
		(*target).PrimaryReselectPolicy = fpv.value.(string)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp:
		(*target).ResendIgmp = fpv.value.(string)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval:
		(*target).LearnPacketInterval = fpv.value.(string)
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary:
		(*target).Primary = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts_Parameters: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_BondsOpts_Parameters)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_BondsOpts_Parameters'.
func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_BondsOpts_Parameters) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode:
		leftValue := fpv.value.(string)
		rightValue := source.GetMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate:
		leftValue := fpv.value.(int32)
		rightValue := source.GetLacpRate()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMiiMonitorInterval()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMinLinks()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTransmitHashPolicy()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect:
		leftValue := fpv.value.(int32)
		rightValue := source.GetAdSelect()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive:
		leftValue := fpv.value.(int32)
		rightValue := source.GetAllSlavesActive()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets:
		leftValue := fpv.value.(bool)
		rightValue := source.GetArpIpTargets()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate:
		leftValue := fpv.value.(string)
		rightValue := source.GetArpValidate()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets:
		leftValue := fpv.value.(string)
		rightValue := source.GetArpAllTargets()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay:
		leftValue := fpv.value.(string)
		rightValue := source.GetUpDelay()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy:
		leftValue := fpv.value.(string)
		rightValue := source.GetFailOverMacPolicy()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp:
		leftValue := fpv.value.(int32)
		rightValue := source.GetGratuitousArp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave:
		leftValue := fpv.value.(string)
		rightValue := source.GetPacketsPerSlave()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy:
		leftValue := fpv.value.(string)
		rightValue := source.GetPrimaryReselectPolicy()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp:
		leftValue := fpv.value.(string)
		rightValue := source.GetResendIgmp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval:
		leftValue := fpv.value.(string)
		rightValue := source.GetLearnPacketInterval()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary:
		leftValue := fpv.value.(string)
		rightValue := source.GetPrimary()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_BondsOpts_Parameters: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_BondsOpts_Parameters))
}

// DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue allows storing single item in Path-specific values for Parameters according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_BondsOpts_Parameters) bool
}

// ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Parameters field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_BondsOpts_Parameters as interface{}
func (fpaiv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_BondsOpts_Parameters) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_BondsOpts_Parameters))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Parameters'
func (fpaiv *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_BondsOpts_Parameters) bool {
	slice := fpaiv.DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues allows storing slice of values for Parameters fields according to their type
type DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigBondsOptsParameters_FieldPath
}

func ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Parameters field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigBondsOptsParameters_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsModeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsLacpRateArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsMiiMonitorIntervalArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsMinLinksArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsTransmitHashPolicyArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsAdSelectArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsAllSlavesActiveArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsArpIpTargetsArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsArpValidateArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsArpAllTargetsArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsUpDelayArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsFailOverMacPolicyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsGratuitousArpArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsPacketsPerSlaveArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsPrimaryReselectPolicyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsResendIgmpArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsLearnPacketIntervalArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPathArrayOfValues) AsPrimaryArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecNetworkConfigTunnelsOptsKey_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelector
	Get(source *Device_Spec_NetworkConfig_TunnelsOpts_Key) []interface{}
	GetSingle(source *Device_Spec_NetworkConfig_TunnelsOpts_Key) (interface{}, bool)
	ClearValue(item *Device_Spec_NetworkConfig_TunnelsOpts_Key)

	// Those methods build corresponding DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue
}

type DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelector int32

const (
	DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput  DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelector = 0
	DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelector = 1
)

func (s DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput:
		return "input"
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput:
		return "output"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts_Key: %d", s))
	}
}

func BuildDeviceSpecNetworkConfigTunnelsOptsKey_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecNetworkConfigTunnelsOptsKey_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_NetworkConfig_TunnelsOpts_Key")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "input":
			return &DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput}, nil
		case "output":
			return &DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_NetworkConfig_TunnelsOpts_Key", fp)
}

func ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPath(rawField string) (DeviceSpecNetworkConfigTunnelsOptsKey_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecNetworkConfigTunnelsOptsKey_FieldPath(fp)
}

func MustParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPath(rawField string) DeviceSpecNetworkConfigTunnelsOptsKey_FieldPath {
	fp, err := ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath struct {
	selector DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelector
}

var _ DeviceSpecNetworkConfigTunnelsOptsKey_FieldPath = (*DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath)(nil)

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) Selector() DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_NetworkConfig_TunnelsOpts_Key
func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) Get(source *Device_Spec_NetworkConfig_TunnelsOpts_Key) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput:
			values = append(values, source.Input)
		case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput:
			values = append(values, source.Output)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts_Key: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_NetworkConfig_TunnelsOpts_Key))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_NetworkConfig_TunnelsOpts_Key
func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) GetSingle(source *Device_Spec_NetworkConfig_TunnelsOpts_Key) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput:
		return source.GetInput(), source != nil
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput:
		return source.GetOutput(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts_Key: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_NetworkConfig_TunnelsOpts_Key))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput:
		return int32(0)
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts_Key: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) ClearValue(item *Device_Spec_NetworkConfig_TunnelsOpts_Key) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput:
			item.Input = int32(0)
		case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput:
			item.Output = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts_Key: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_NetworkConfig_TunnelsOpts_Key))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput ||
		fp.selector == DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput
}

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue {
	switch fp.selector {
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput:
		return &DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue{DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath: *fp, value: value.(int32)}
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput:
		return &DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue{DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts_Key: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayOfValues {
	fpaov := &DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput:
		return &DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath: *fp, values: values.([]int32)}
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput:
		return &DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayOfValues{DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts_Key: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts_Key: %d", fp.selector))
	}
}

func (fp *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue allows storing values for Key fields according to their type
type DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue interface {
	DeviceSpecNetworkConfigTunnelsOptsKey_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_NetworkConfig_TunnelsOpts_Key)
	CompareWith(*Device_Spec_NetworkConfig_TunnelsOpts_Key) (cmp int, comparable bool)
}

func ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue(pathStr, valueStr string) (DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Key field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue), nil
}

func MustParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue(pathStr, valueStr string) DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue {
	fpv, err := ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue struct {
	DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathValue = (*DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Key' as interface{}
func (fpv *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue) AsInputValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue) AsOutputValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object Key
func (fpv *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue) SetTo(target **Device_Spec_NetworkConfig_TunnelsOpts_Key) {
	if *target == nil {
		*target = new(Device_Spec_NetworkConfig_TunnelsOpts_Key)
	}
	switch fpv.selector {
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput:
		(*target).Input = fpv.value.(int32)
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput:
		(*target).Output = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts_Key: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_NetworkConfig_TunnelsOpts_Key)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue' with the value under path in 'Device_Spec_NetworkConfig_TunnelsOpts_Key'.
func (fpv *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue) CompareWith(source *Device_Spec_NetworkConfig_TunnelsOpts_Key) (int, bool) {
	switch fpv.selector {
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput:
		leftValue := fpv.value.(int32)
		rightValue := source.GetInput()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput:
		leftValue := fpv.value.(int32)
		rightValue := source.GetOutput()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_NetworkConfig_TunnelsOpts_Key: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_NetworkConfig_TunnelsOpts_Key))
}

// DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue allows storing single item in Path-specific values for Key according to their type
// Present only for array (repeated) types.
type DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecNetworkConfigTunnelsOptsKey_FieldPath
	ContainsValue(*Device_Spec_NetworkConfig_TunnelsOpts_Key) bool
}

// ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Key field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayItemValue struct {
	DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayItemValue = (*DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_NetworkConfig_TunnelsOpts_Key as interface{}
func (fpaiv *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_NetworkConfig_TunnelsOpts_Key) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_NetworkConfig_TunnelsOpts_Key))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Key'
func (fpaiv *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_NetworkConfig_TunnelsOpts_Key) bool {
	slice := fpaiv.DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayOfValues allows storing slice of values for Key fields according to their type
type DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecNetworkConfigTunnelsOptsKey_FieldPath
}

func ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Key field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayOfValues struct {
	DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathArrayOfValues = (*DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayOfValues) AsInputArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPathArrayOfValues) AsOutputArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceSpecSSHConfigAuthKey_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceSpecSSHConfigAuthKey_FieldPathSelector
	Get(source *Device_Spec_SSHConfig_AuthKey) []interface{}
	GetSingle(source *Device_Spec_SSHConfig_AuthKey) (interface{}, bool)
	ClearValue(item *Device_Spec_SSHConfig_AuthKey)

	// Those methods build corresponding DeviceSpecSSHConfigAuthKey_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceSpecSSHConfigAuthKey_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue
}

type DeviceSpecSSHConfigAuthKey_FieldPathSelector int32

const (
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey           DeviceSpecSSHConfigAuthKey_FieldPathSelector = 0
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority     DeviceSpecSSHConfigAuthKey_FieldPathSelector = 1
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand           DeviceSpecSSHConfigAuthKey_FieldPathSelector = 2
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment       DeviceSpecSSHConfigAuthKey_FieldPathSelector = 3
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom              DeviceSpecSSHConfigAuthKey_FieldPathSelector = 4
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding DeviceSpecSSHConfigAuthKey_FieldPathSelector = 5
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding  DeviceSpecSSHConfigAuthKey_FieldPathSelector = 6
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty             DeviceSpecSSHConfigAuthKey_FieldPathSelector = 7
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc          DeviceSpecSSHConfigAuthKey_FieldPathSelector = 8
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding   DeviceSpecSSHConfigAuthKey_FieldPathSelector = 9
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen        DeviceSpecSSHConfigAuthKey_FieldPathSelector = 10
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals        DeviceSpecSSHConfigAuthKey_FieldPathSelector = 11
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel            DeviceSpecSSHConfigAuthKey_FieldPathSelector = 12
	DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict          DeviceSpecSSHConfigAuthKey_FieldPathSelector = 13
)

func (s DeviceSpecSSHConfigAuthKey_FieldPathSelector) String() string {
	switch s {
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey:
		return "ssha_key"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority:
		return "cert_authority"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand:
		return "command"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment:
		return "environment"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom:
		return "from"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding:
		return "no_agent_forwarding"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding:
		return "no_port_forwarding"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty:
		return "no_pty"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc:
		return "no_user_rc"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding:
		return "no_x11_forwarding"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen:
		return "permitopen"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals:
		return "principals"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel:
		return "tunnel"
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict:
		return "restrict"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig_AuthKey: %d", s))
	}
}

func BuildDeviceSpecSSHConfigAuthKey_FieldPath(fp gotenobject.RawFieldPath) (DeviceSpecSSHConfigAuthKey_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Spec_SSHConfig_AuthKey")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "ssha_key", "sshaKey", "ssha-key":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey}, nil
		case "cert_authority", "certAuthority", "cert-authority":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority}, nil
		case "command":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand}, nil
		case "environment":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment}, nil
		case "from":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom}, nil
		case "no_agent_forwarding", "noAgentForwarding", "no-agent-forwarding":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding}, nil
		case "no_port_forwarding", "noPortForwarding", "no-port-forwarding":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding}, nil
		case "no_pty", "noPty", "no-pty":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty}, nil
		case "no_user_rc", "noUserRc", "no-user-rc":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc}, nil
		case "no_x11_forwarding", "noX11Forwarding", "no-x11-forwarding":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding}, nil
		case "permitopen":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen}, nil
		case "principals":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals}, nil
		case "tunnel":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel}, nil
		case "restrict":
			return &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Spec_SSHConfig_AuthKey", fp)
}

func ParseDeviceSpecSSHConfigAuthKey_FieldPath(rawField string) (DeviceSpecSSHConfigAuthKey_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceSpecSSHConfigAuthKey_FieldPath(fp)
}

func MustParseDeviceSpecSSHConfigAuthKey_FieldPath(rawField string) DeviceSpecSSHConfigAuthKey_FieldPath {
	fp, err := ParseDeviceSpecSSHConfigAuthKey_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceSpecSSHConfigAuthKey_FieldTerminalPath struct {
	selector DeviceSpecSSHConfigAuthKey_FieldPathSelector
}

var _ DeviceSpecSSHConfigAuthKey_FieldPath = (*DeviceSpecSSHConfigAuthKey_FieldTerminalPath)(nil)

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) Selector() DeviceSpecSSHConfigAuthKey_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Spec_SSHConfig_AuthKey
func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) Get(source *Device_Spec_SSHConfig_AuthKey) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey:
			values = append(values, source.SshaKey)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority:
			values = append(values, source.CertAuthority)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand:
			values = append(values, source.Command)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment:
			values = append(values, source.Environment)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom:
			values = append(values, source.From)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding:
			values = append(values, source.NoAgentForwarding)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding:
			values = append(values, source.NoPortForwarding)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty:
			values = append(values, source.NoPty)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc:
			values = append(values, source.NoUserRc)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding:
			values = append(values, source.NoX11Forwarding)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen:
			values = append(values, source.Permitopen)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals:
			values = append(values, source.Principals)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel:
			values = append(values, source.Tunnel)
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict:
			values = append(values, source.Restrict)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig_AuthKey: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Spec_SSHConfig_AuthKey))
}

// GetSingle returns value pointed by specific field of from source Device_Spec_SSHConfig_AuthKey
func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) GetSingle(source *Device_Spec_SSHConfig_AuthKey) (interface{}, bool) {
	switch fp.selector {
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey:
		return source.GetSshaKey(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority:
		return source.GetCertAuthority(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand:
		return source.GetCommand(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment:
		return source.GetEnvironment(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom:
		return source.GetFrom(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding:
		return source.GetNoAgentForwarding(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding:
		return source.GetNoPortForwarding(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty:
		return source.GetNoPty(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc:
		return source.GetNoUserRc(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding:
		return source.GetNoX11Forwarding(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen:
		return source.GetPermitopen(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals:
		return source.GetPrincipals(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel:
		return source.GetTunnel(), source != nil
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict:
		return source.GetRestrict(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig_AuthKey: %d", fp.selector))
	}
}

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Spec_SSHConfig_AuthKey))
}

// GetDefault returns a default value of the field type
func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey:
		return ""
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority:
		return false
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand:
		return ""
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment:
		return ""
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom:
		return ""
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding:
		return false
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding:
		return false
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty:
		return false
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc:
		return false
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding:
		return false
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen:
		return ""
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals:
		return ""
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel:
		return ""
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig_AuthKey: %d", fp.selector))
	}
}

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) ClearValue(item *Device_Spec_SSHConfig_AuthKey) {
	if item != nil {
		switch fp.selector {
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey:
			item.SshaKey = ""
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority:
			item.CertAuthority = false
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand:
			item.Command = ""
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment:
			item.Environment = ""
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom:
			item.From = ""
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding:
			item.NoAgentForwarding = false
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding:
			item.NoPortForwarding = false
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty:
			item.NoPty = false
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc:
			item.NoUserRc = false
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding:
			item.NoX11Forwarding = false
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen:
			item.Permitopen = ""
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals:
			item.Principals = ""
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel:
			item.Tunnel = ""
		case DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict:
			item.Restrict = false
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig_AuthKey: %d", fp.selector))
		}
	}
}

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Spec_SSHConfig_AuthKey))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel ||
		fp.selector == DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict
}

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) WithIValue(value interface{}) DeviceSpecSSHConfigAuthKey_FieldPathValue {
	switch fp.selector {
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig_AuthKey: %d", fp.selector))
	}
}

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues {
	fpaov := &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict:
		return &DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues{DeviceSpecSSHConfigAuthKey_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig_AuthKey: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig_AuthKey: %d", fp.selector))
	}
}

func (fp *DeviceSpecSSHConfigAuthKey_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceSpecSSHConfigAuthKey_FieldPathValue allows storing values for AuthKey fields according to their type
type DeviceSpecSSHConfigAuthKey_FieldPathValue interface {
	DeviceSpecSSHConfigAuthKey_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Spec_SSHConfig_AuthKey)
	CompareWith(*Device_Spec_SSHConfig_AuthKey) (cmp int, comparable bool)
}

func ParseDeviceSpecSSHConfigAuthKey_FieldPathValue(pathStr, valueStr string) (DeviceSpecSSHConfigAuthKey_FieldPathValue, error) {
	fp, err := ParseDeviceSpecSSHConfigAuthKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AuthKey field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceSpecSSHConfigAuthKey_FieldPathValue), nil
}

func MustParseDeviceSpecSSHConfigAuthKey_FieldPathValue(pathStr, valueStr string) DeviceSpecSSHConfigAuthKey_FieldPathValue {
	fpv, err := ParseDeviceSpecSSHConfigAuthKey_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue struct {
	DeviceSpecSSHConfigAuthKey_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecSSHConfigAuthKey_FieldPathValue = (*DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AuthKey' as interface{}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsSshaKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsCertAuthorityValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsCommandValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsEnvironmentValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsFromValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsNoAgentForwardingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsNoPortForwardingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsNoPtyValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsNoUserRcValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsNoX11ForwardingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsPermitopenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsPrincipalsValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsTunnelValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) AsRestrictValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object AuthKey
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) SetTo(target **Device_Spec_SSHConfig_AuthKey) {
	if *target == nil {
		*target = new(Device_Spec_SSHConfig_AuthKey)
	}
	switch fpv.selector {
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey:
		(*target).SshaKey = fpv.value.(string)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority:
		(*target).CertAuthority = fpv.value.(bool)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand:
		(*target).Command = fpv.value.(string)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment:
		(*target).Environment = fpv.value.(string)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom:
		(*target).From = fpv.value.(string)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding:
		(*target).NoAgentForwarding = fpv.value.(bool)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding:
		(*target).NoPortForwarding = fpv.value.(bool)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty:
		(*target).NoPty = fpv.value.(bool)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc:
		(*target).NoUserRc = fpv.value.(bool)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding:
		(*target).NoX11Forwarding = fpv.value.(bool)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen:
		(*target).Permitopen = fpv.value.(string)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals:
		(*target).Principals = fpv.value.(string)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel:
		(*target).Tunnel = fpv.value.(string)
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict:
		(*target).Restrict = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig_AuthKey: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Spec_SSHConfig_AuthKey)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue' with the value under path in 'Device_Spec_SSHConfig_AuthKey'.
func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) CompareWith(source *Device_Spec_SSHConfig_AuthKey) (int, bool) {
	switch fpv.selector {
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetSshaKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority:
		leftValue := fpv.value.(bool)
		rightValue := source.GetCertAuthority()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand:
		leftValue := fpv.value.(string)
		rightValue := source.GetCommand()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment:
		leftValue := fpv.value.(string)
		rightValue := source.GetEnvironment()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom:
		leftValue := fpv.value.(string)
		rightValue := source.GetFrom()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding:
		leftValue := fpv.value.(bool)
		rightValue := source.GetNoAgentForwarding()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding:
		leftValue := fpv.value.(bool)
		rightValue := source.GetNoPortForwarding()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty:
		leftValue := fpv.value.(bool)
		rightValue := source.GetNoPty()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc:
		leftValue := fpv.value.(bool)
		rightValue := source.GetNoUserRc()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding:
		leftValue := fpv.value.(bool)
		rightValue := source.GetNoX11Forwarding()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen:
		leftValue := fpv.value.(string)
		rightValue := source.GetPermitopen()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals:
		leftValue := fpv.value.(string)
		rightValue := source.GetPrincipals()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel:
		leftValue := fpv.value.(string)
		rightValue := source.GetTunnel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict:
		leftValue := fpv.value.(bool)
		rightValue := source.GetRestrict()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Spec_SSHConfig_AuthKey: %d", fpv.selector))
	}
}

func (fpv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Spec_SSHConfig_AuthKey))
}

// DeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue allows storing single item in Path-specific values for AuthKey according to their type
// Present only for array (repeated) types.
type DeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceSpecSSHConfigAuthKey_FieldPath
	ContainsValue(*Device_Spec_SSHConfig_AuthKey) bool
}

// ParseDeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceSpecSSHConfigAuthKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AuthKey field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue), nil
}

func MustParseDeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue(pathStr, valueStr string) DeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayItemValue struct {
	DeviceSpecSSHConfigAuthKey_FieldTerminalPath
	value interface{}
}

var _ DeviceSpecSSHConfigAuthKey_FieldPathArrayItemValue = (*DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Spec_SSHConfig_AuthKey as interface{}
func (fpaiv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Spec_SSHConfig_AuthKey) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Spec_SSHConfig_AuthKey))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AuthKey'
func (fpaiv *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Spec_SSHConfig_AuthKey) bool {
	slice := fpaiv.DeviceSpecSSHConfigAuthKey_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues allows storing slice of values for AuthKey fields according to their type
type DeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceSpecSSHConfigAuthKey_FieldPath
}

func ParseDeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceSpecSSHConfigAuthKey_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AuthKey field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues), nil
}

func MustParseDeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues struct {
	DeviceSpecSSHConfigAuthKey_FieldTerminalPath
	values interface{}
}

var _ DeviceSpecSSHConfigAuthKey_FieldPathArrayOfValues = (*DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsSshaKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsCertAuthorityArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsCommandArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsEnvironmentArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsFromArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsNoAgentForwardingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsNoPortForwardingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsNoPtyArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsNoUserRcArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsNoX11ForwardingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsPermitopenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsPrincipalsArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsTunnelArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceSpecSSHConfigAuthKey_FieldTerminalPathArrayOfValues) AsRestrictArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusAddress_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusAddress_FieldPathSelector
	Get(source *Device_Status_Address) []interface{}
	GetSingle(source *Device_Status_Address) (interface{}, bool)
	ClearValue(item *Device_Status_Address)

	// Those methods build corresponding DeviceStatusAddress_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusAddress_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusAddress_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusAddress_FieldPathArrayItemValue
}

type DeviceStatusAddress_FieldPathSelector int32

const (
	DeviceStatusAddress_FieldPathSelectorAddress DeviceStatusAddress_FieldPathSelector = 0
	DeviceStatusAddress_FieldPathSelectorType    DeviceStatusAddress_FieldPathSelector = 1
)

func (s DeviceStatusAddress_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusAddress_FieldPathSelectorAddress:
		return "address"
	case DeviceStatusAddress_FieldPathSelectorType:
		return "type"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Address: %d", s))
	}
}

func BuildDeviceStatusAddress_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusAddress_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_Address")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "address":
			return &DeviceStatusAddress_FieldTerminalPath{selector: DeviceStatusAddress_FieldPathSelectorAddress}, nil
		case "type":
			return &DeviceStatusAddress_FieldTerminalPath{selector: DeviceStatusAddress_FieldPathSelectorType}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_Address", fp)
}

func ParseDeviceStatusAddress_FieldPath(rawField string) (DeviceStatusAddress_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusAddress_FieldPath(fp)
}

func MustParseDeviceStatusAddress_FieldPath(rawField string) DeviceStatusAddress_FieldPath {
	fp, err := ParseDeviceStatusAddress_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusAddress_FieldTerminalPath struct {
	selector DeviceStatusAddress_FieldPathSelector
}

var _ DeviceStatusAddress_FieldPath = (*DeviceStatusAddress_FieldTerminalPath)(nil)

func (fp *DeviceStatusAddress_FieldTerminalPath) Selector() DeviceStatusAddress_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusAddress_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusAddress_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_Address
func (fp *DeviceStatusAddress_FieldTerminalPath) Get(source *Device_Status_Address) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusAddress_FieldPathSelectorAddress:
			values = append(values, source.Address)
		case DeviceStatusAddress_FieldPathSelectorType:
			values = append(values, source.Type)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_Address: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusAddress_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_Address))
}

// GetSingle returns value pointed by specific field of from source Device_Status_Address
func (fp *DeviceStatusAddress_FieldTerminalPath) GetSingle(source *Device_Status_Address) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusAddress_FieldPathSelectorAddress:
		return source.GetAddress(), source != nil
	case DeviceStatusAddress_FieldPathSelectorType:
		return source.GetType(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Address: %d", fp.selector))
	}
}

func (fp *DeviceStatusAddress_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_Address))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusAddress_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusAddress_FieldPathSelectorAddress:
		return ""
	case DeviceStatusAddress_FieldPathSelectorType:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Address: %d", fp.selector))
	}
}

func (fp *DeviceStatusAddress_FieldTerminalPath) ClearValue(item *Device_Status_Address) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusAddress_FieldPathSelectorAddress:
			item.Address = ""
		case DeviceStatusAddress_FieldPathSelectorType:
			item.Type = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_Address: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusAddress_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_Address))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusAddress_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusAddress_FieldPathSelectorAddress ||
		fp.selector == DeviceStatusAddress_FieldPathSelectorType
}

func (fp *DeviceStatusAddress_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusAddress_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusAddress_FieldPathValue {
	switch fp.selector {
	case DeviceStatusAddress_FieldPathSelectorAddress:
		return &DeviceStatusAddress_FieldTerminalPathValue{DeviceStatusAddress_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusAddress_FieldPathSelectorType:
		return &DeviceStatusAddress_FieldTerminalPathValue{DeviceStatusAddress_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Address: %d", fp.selector))
	}
}

func (fp *DeviceStatusAddress_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusAddress_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusAddress_FieldPathArrayOfValues {
	fpaov := &DeviceStatusAddress_FieldTerminalPathArrayOfValues{DeviceStatusAddress_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusAddress_FieldPathSelectorAddress:
		return &DeviceStatusAddress_FieldTerminalPathArrayOfValues{DeviceStatusAddress_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusAddress_FieldPathSelectorType:
		return &DeviceStatusAddress_FieldTerminalPathArrayOfValues{DeviceStatusAddress_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Address: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusAddress_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusAddress_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusAddress_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Address: %d", fp.selector))
	}
}

func (fp *DeviceStatusAddress_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceStatusAddress_FieldPathValue allows storing values for Address fields according to their type
type DeviceStatusAddress_FieldPathValue interface {
	DeviceStatusAddress_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_Address)
	CompareWith(*Device_Status_Address) (cmp int, comparable bool)
}

func ParseDeviceStatusAddress_FieldPathValue(pathStr, valueStr string) (DeviceStatusAddress_FieldPathValue, error) {
	fp, err := ParseDeviceStatusAddress_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Address field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusAddress_FieldPathValue), nil
}

func MustParseDeviceStatusAddress_FieldPathValue(pathStr, valueStr string) DeviceStatusAddress_FieldPathValue {
	fpv, err := ParseDeviceStatusAddress_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusAddress_FieldTerminalPathValue struct {
	DeviceStatusAddress_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusAddress_FieldPathValue = (*DeviceStatusAddress_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Address' as interface{}
func (fpv *DeviceStatusAddress_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusAddress_FieldTerminalPathValue) AsAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusAddress_FieldTerminalPathValue) AsTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Address
func (fpv *DeviceStatusAddress_FieldTerminalPathValue) SetTo(target **Device_Status_Address) {
	if *target == nil {
		*target = new(Device_Status_Address)
	}
	switch fpv.selector {
	case DeviceStatusAddress_FieldPathSelectorAddress:
		(*target).Address = fpv.value.(string)
	case DeviceStatusAddress_FieldPathSelectorType:
		(*target).Type = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Address: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusAddress_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_Address)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusAddress_FieldTerminalPathValue' with the value under path in 'Device_Status_Address'.
func (fpv *DeviceStatusAddress_FieldTerminalPathValue) CompareWith(source *Device_Status_Address) (int, bool) {
	switch fpv.selector {
	case DeviceStatusAddress_FieldPathSelectorAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusAddress_FieldPathSelectorType:
		leftValue := fpv.value.(string)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Address: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusAddress_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_Address))
}

// DeviceStatusAddress_FieldPathArrayItemValue allows storing single item in Path-specific values for Address according to their type
// Present only for array (repeated) types.
type DeviceStatusAddress_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusAddress_FieldPath
	ContainsValue(*Device_Status_Address) bool
}

// ParseDeviceStatusAddress_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusAddress_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusAddress_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusAddress_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Address field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusAddress_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusAddress_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusAddress_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusAddress_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusAddress_FieldTerminalPathArrayItemValue struct {
	DeviceStatusAddress_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusAddress_FieldPathArrayItemValue = (*DeviceStatusAddress_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_Address as interface{}
func (fpaiv *DeviceStatusAddress_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusAddress_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_Address) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusAddress_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_Address))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Address'
func (fpaiv *DeviceStatusAddress_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_Address) bool {
	slice := fpaiv.DeviceStatusAddress_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStatusAddress_FieldPathArrayOfValues allows storing slice of values for Address fields according to their type
type DeviceStatusAddress_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusAddress_FieldPath
}

func ParseDeviceStatusAddress_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusAddress_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusAddress_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Address field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusAddress_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusAddress_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusAddress_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusAddress_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusAddress_FieldTerminalPathArrayOfValues struct {
	DeviceStatusAddress_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusAddress_FieldPathArrayOfValues = (*DeviceStatusAddress_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusAddress_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusAddress_FieldPathSelectorAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusAddress_FieldPathSelectorType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusAddress_FieldTerminalPathArrayOfValues) AsAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusAddress_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusCondition_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusCondition_FieldPathSelector
	Get(source *Device_Status_Condition) []interface{}
	GetSingle(source *Device_Status_Condition) (interface{}, bool)
	ClearValue(item *Device_Status_Condition)

	// Those methods build corresponding DeviceStatusCondition_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusCondition_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusCondition_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusCondition_FieldPathArrayItemValue
}

type DeviceStatusCondition_FieldPathSelector int32

const (
	DeviceStatusCondition_FieldPathSelectorMessage            DeviceStatusCondition_FieldPathSelector = 0
	DeviceStatusCondition_FieldPathSelectorReason             DeviceStatusCondition_FieldPathSelector = 1
	DeviceStatusCondition_FieldPathSelectorStatus             DeviceStatusCondition_FieldPathSelector = 2
	DeviceStatusCondition_FieldPathSelectorType               DeviceStatusCondition_FieldPathSelector = 3
	DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime  DeviceStatusCondition_FieldPathSelector = 4
	DeviceStatusCondition_FieldPathSelectorLastTransitionTime DeviceStatusCondition_FieldPathSelector = 5
)

func (s DeviceStatusCondition_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusCondition_FieldPathSelectorMessage:
		return "message"
	case DeviceStatusCondition_FieldPathSelectorReason:
		return "reason"
	case DeviceStatusCondition_FieldPathSelectorStatus:
		return "status"
	case DeviceStatusCondition_FieldPathSelectorType:
		return "type"
	case DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime:
		return "last_heart_beat_time"
	case DeviceStatusCondition_FieldPathSelectorLastTransitionTime:
		return "last_transition_time"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Condition: %d", s))
	}
}

func BuildDeviceStatusCondition_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusCondition_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_Condition")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "message":
			return &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorMessage}, nil
		case "reason":
			return &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorReason}, nil
		case "status":
			return &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorStatus}, nil
		case "type":
			return &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorType}, nil
		case "last_heart_beat_time", "lastHeartBeatTime", "last-heart-beat-time":
			return &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime}, nil
		case "last_transition_time", "lastTransitionTime", "last-transition-time":
			return &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorLastTransitionTime}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_Condition", fp)
}

func ParseDeviceStatusCondition_FieldPath(rawField string) (DeviceStatusCondition_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusCondition_FieldPath(fp)
}

func MustParseDeviceStatusCondition_FieldPath(rawField string) DeviceStatusCondition_FieldPath {
	fp, err := ParseDeviceStatusCondition_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusCondition_FieldTerminalPath struct {
	selector DeviceStatusCondition_FieldPathSelector
}

var _ DeviceStatusCondition_FieldPath = (*DeviceStatusCondition_FieldTerminalPath)(nil)

func (fp *DeviceStatusCondition_FieldTerminalPath) Selector() DeviceStatusCondition_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusCondition_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusCondition_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_Condition
func (fp *DeviceStatusCondition_FieldTerminalPath) Get(source *Device_Status_Condition) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusCondition_FieldPathSelectorMessage:
			values = append(values, source.Message)
		case DeviceStatusCondition_FieldPathSelectorReason:
			values = append(values, source.Reason)
		case DeviceStatusCondition_FieldPathSelectorStatus:
			values = append(values, source.Status)
		case DeviceStatusCondition_FieldPathSelectorType:
			values = append(values, source.Type)
		case DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime:
			if source.LastHeartBeatTime != nil {
				values = append(values, source.LastHeartBeatTime)
			}
		case DeviceStatusCondition_FieldPathSelectorLastTransitionTime:
			if source.LastTransitionTime != nil {
				values = append(values, source.LastTransitionTime)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_Condition: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusCondition_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_Condition))
}

// GetSingle returns value pointed by specific field of from source Device_Status_Condition
func (fp *DeviceStatusCondition_FieldTerminalPath) GetSingle(source *Device_Status_Condition) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusCondition_FieldPathSelectorMessage:
		return source.GetMessage(), source != nil
	case DeviceStatusCondition_FieldPathSelectorReason:
		return source.GetReason(), source != nil
	case DeviceStatusCondition_FieldPathSelectorStatus:
		return source.GetStatus(), source != nil
	case DeviceStatusCondition_FieldPathSelectorType:
		return source.GetType(), source != nil
	case DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime:
		res := source.GetLastHeartBeatTime()
		return res, res != nil
	case DeviceStatusCondition_FieldPathSelectorLastTransitionTime:
		res := source.GetLastTransitionTime()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Condition: %d", fp.selector))
	}
}

func (fp *DeviceStatusCondition_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_Condition))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusCondition_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusCondition_FieldPathSelectorMessage:
		return ""
	case DeviceStatusCondition_FieldPathSelectorReason:
		return ""
	case DeviceStatusCondition_FieldPathSelectorStatus:
		return ""
	case DeviceStatusCondition_FieldPathSelectorType:
		return ""
	case DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime:
		return (*timestamp.Timestamp)(nil)
	case DeviceStatusCondition_FieldPathSelectorLastTransitionTime:
		return (*timestamp.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Condition: %d", fp.selector))
	}
}

func (fp *DeviceStatusCondition_FieldTerminalPath) ClearValue(item *Device_Status_Condition) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusCondition_FieldPathSelectorMessage:
			item.Message = ""
		case DeviceStatusCondition_FieldPathSelectorReason:
			item.Reason = ""
		case DeviceStatusCondition_FieldPathSelectorStatus:
			item.Status = ""
		case DeviceStatusCondition_FieldPathSelectorType:
			item.Type = ""
		case DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime:
			item.LastHeartBeatTime = nil
		case DeviceStatusCondition_FieldPathSelectorLastTransitionTime:
			item.LastTransitionTime = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_Condition: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusCondition_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_Condition))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusCondition_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusCondition_FieldPathSelectorMessage ||
		fp.selector == DeviceStatusCondition_FieldPathSelectorReason ||
		fp.selector == DeviceStatusCondition_FieldPathSelectorStatus ||
		fp.selector == DeviceStatusCondition_FieldPathSelectorType ||
		fp.selector == DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime ||
		fp.selector == DeviceStatusCondition_FieldPathSelectorLastTransitionTime
}

func (fp *DeviceStatusCondition_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusCondition_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusCondition_FieldPathValue {
	switch fp.selector {
	case DeviceStatusCondition_FieldPathSelectorMessage:
		return &DeviceStatusCondition_FieldTerminalPathValue{DeviceStatusCondition_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusCondition_FieldPathSelectorReason:
		return &DeviceStatusCondition_FieldTerminalPathValue{DeviceStatusCondition_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusCondition_FieldPathSelectorStatus:
		return &DeviceStatusCondition_FieldTerminalPathValue{DeviceStatusCondition_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusCondition_FieldPathSelectorType:
		return &DeviceStatusCondition_FieldTerminalPathValue{DeviceStatusCondition_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime:
		return &DeviceStatusCondition_FieldTerminalPathValue{DeviceStatusCondition_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case DeviceStatusCondition_FieldPathSelectorLastTransitionTime:
		return &DeviceStatusCondition_FieldTerminalPathValue{DeviceStatusCondition_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Condition: %d", fp.selector))
	}
}

func (fp *DeviceStatusCondition_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusCondition_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusCondition_FieldPathArrayOfValues {
	fpaov := &DeviceStatusCondition_FieldTerminalPathArrayOfValues{DeviceStatusCondition_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusCondition_FieldPathSelectorMessage:
		return &DeviceStatusCondition_FieldTerminalPathArrayOfValues{DeviceStatusCondition_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusCondition_FieldPathSelectorReason:
		return &DeviceStatusCondition_FieldTerminalPathArrayOfValues{DeviceStatusCondition_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusCondition_FieldPathSelectorStatus:
		return &DeviceStatusCondition_FieldTerminalPathArrayOfValues{DeviceStatusCondition_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusCondition_FieldPathSelectorType:
		return &DeviceStatusCondition_FieldTerminalPathArrayOfValues{DeviceStatusCondition_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime:
		return &DeviceStatusCondition_FieldTerminalPathArrayOfValues{DeviceStatusCondition_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case DeviceStatusCondition_FieldPathSelectorLastTransitionTime:
		return &DeviceStatusCondition_FieldTerminalPathArrayOfValues{DeviceStatusCondition_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Condition: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusCondition_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusCondition_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusCondition_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Condition: %d", fp.selector))
	}
}

func (fp *DeviceStatusCondition_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceStatusCondition_FieldPathValue allows storing values for Condition fields according to their type
type DeviceStatusCondition_FieldPathValue interface {
	DeviceStatusCondition_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_Condition)
	CompareWith(*Device_Status_Condition) (cmp int, comparable bool)
}

func ParseDeviceStatusCondition_FieldPathValue(pathStr, valueStr string) (DeviceStatusCondition_FieldPathValue, error) {
	fp, err := ParseDeviceStatusCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Condition field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusCondition_FieldPathValue), nil
}

func MustParseDeviceStatusCondition_FieldPathValue(pathStr, valueStr string) DeviceStatusCondition_FieldPathValue {
	fpv, err := ParseDeviceStatusCondition_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusCondition_FieldTerminalPathValue struct {
	DeviceStatusCondition_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusCondition_FieldPathValue = (*DeviceStatusCondition_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Condition' as interface{}
func (fpv *DeviceStatusCondition_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusCondition_FieldTerminalPathValue) AsMessageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusCondition_FieldTerminalPathValue) AsReasonValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusCondition_FieldTerminalPathValue) AsStatusValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusCondition_FieldTerminalPathValue) AsTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusCondition_FieldTerminalPathValue) AsLastHeartBeatTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *DeviceStatusCondition_FieldTerminalPathValue) AsLastTransitionTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object Condition
func (fpv *DeviceStatusCondition_FieldTerminalPathValue) SetTo(target **Device_Status_Condition) {
	if *target == nil {
		*target = new(Device_Status_Condition)
	}
	switch fpv.selector {
	case DeviceStatusCondition_FieldPathSelectorMessage:
		(*target).Message = fpv.value.(string)
	case DeviceStatusCondition_FieldPathSelectorReason:
		(*target).Reason = fpv.value.(string)
	case DeviceStatusCondition_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(string)
	case DeviceStatusCondition_FieldPathSelectorType:
		(*target).Type = fpv.value.(string)
	case DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime:
		(*target).LastHeartBeatTime = fpv.value.(*timestamp.Timestamp)
	case DeviceStatusCondition_FieldPathSelectorLastTransitionTime:
		(*target).LastTransitionTime = fpv.value.(*timestamp.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Condition: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusCondition_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_Condition)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusCondition_FieldTerminalPathValue' with the value under path in 'Device_Status_Condition'.
func (fpv *DeviceStatusCondition_FieldTerminalPathValue) CompareWith(source *Device_Status_Condition) (int, bool) {
	switch fpv.selector {
	case DeviceStatusCondition_FieldPathSelectorMessage:
		leftValue := fpv.value.(string)
		rightValue := source.GetMessage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusCondition_FieldPathSelectorReason:
		leftValue := fpv.value.(string)
		rightValue := source.GetReason()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusCondition_FieldPathSelectorStatus:
		leftValue := fpv.value.(string)
		rightValue := source.GetStatus()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusCondition_FieldPathSelectorType:
		leftValue := fpv.value.(string)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetLastHeartBeatTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusCondition_FieldPathSelectorLastTransitionTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetLastTransitionTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_Condition: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusCondition_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_Condition))
}

// DeviceStatusCondition_FieldPathArrayItemValue allows storing single item in Path-specific values for Condition according to their type
// Present only for array (repeated) types.
type DeviceStatusCondition_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusCondition_FieldPath
	ContainsValue(*Device_Status_Condition) bool
}

// ParseDeviceStatusCondition_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusCondition_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusCondition_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Condition field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusCondition_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusCondition_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusCondition_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusCondition_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusCondition_FieldTerminalPathArrayItemValue struct {
	DeviceStatusCondition_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusCondition_FieldPathArrayItemValue = (*DeviceStatusCondition_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_Condition as interface{}
func (fpaiv *DeviceStatusCondition_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusCondition_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_Condition) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusCondition_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_Condition))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Condition'
func (fpaiv *DeviceStatusCondition_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_Condition) bool {
	slice := fpaiv.DeviceStatusCondition_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStatusCondition_FieldPathArrayOfValues allows storing slice of values for Condition fields according to their type
type DeviceStatusCondition_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusCondition_FieldPath
}

func ParseDeviceStatusCondition_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusCondition_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusCondition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Condition field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusCondition_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusCondition_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusCondition_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusCondition_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusCondition_FieldTerminalPathArrayOfValues struct {
	DeviceStatusCondition_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusCondition_FieldPathArrayOfValues = (*DeviceStatusCondition_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusCondition_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusCondition_FieldPathSelectorMessage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusCondition_FieldPathSelectorReason:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusCondition_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusCondition_FieldPathSelectorType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case DeviceStatusCondition_FieldPathSelectorLastTransitionTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusCondition_FieldTerminalPathArrayOfValues) AsMessageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusCondition_FieldTerminalPathArrayOfValues) AsReasonArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusCondition_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusCondition_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusCondition_FieldTerminalPathArrayOfValues) AsLastHeartBeatTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *DeviceStatusCondition_FieldTerminalPathArrayOfValues) AsLastTransitionTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfo_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfo_FieldPathSelector
	Get(source *Device_Status_DeviceInfo) []interface{}
	GetSingle(source *Device_Status_DeviceInfo) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo)

	// Those methods build corresponding DeviceStatusDeviceInfo_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfo_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfo_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfo_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfo_FieldPathSelector int32

const (
	DeviceStatusDeviceInfo_FieldPathSelectorArchitecture            DeviceStatusDeviceInfo_FieldPathSelector = 0
	DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem         DeviceStatusDeviceInfo_FieldPathSelector = 1
	DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion           DeviceStatusDeviceInfo_FieldPathSelector = 2
	DeviceStatusDeviceInfo_FieldPathSelectorOsImage                 DeviceStatusDeviceInfo_FieldPathSelector = 3
	DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion DeviceStatusDeviceInfo_FieldPathSelector = 4
	DeviceStatusDeviceInfo_FieldPathSelectorOsVersion               DeviceStatusDeviceInfo_FieldPathSelector = 5
	DeviceStatusDeviceInfo_FieldPathSelectorDriver                  DeviceStatusDeviceInfo_FieldPathSelector = 6
	DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation     DeviceStatusDeviceInfo_FieldPathSelector = 7
)

func (s DeviceStatusDeviceInfo_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfo_FieldPathSelectorArchitecture:
		return "architecture"
	case DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem:
		return "operating_system"
	case DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion:
		return "kernel_version"
	case DeviceStatusDeviceInfo_FieldPathSelectorOsImage:
		return "os_image"
	case DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion:
		return "container_runtime_version"
	case DeviceStatusDeviceInfo_FieldPathSelectorOsVersion:
		return "os_version"
	case DeviceStatusDeviceInfo_FieldPathSelectorDriver:
		return "driver"
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		return "hardware_information"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", s))
	}
}

func BuildDeviceStatusDeviceInfo_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfo_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "architecture":
			return &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorArchitecture}, nil
		case "operating_system", "operatingSystem", "operating-system":
			return &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem}, nil
		case "kernel_version", "kernelVersion", "kernel-version":
			return &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion}, nil
		case "os_image", "osImage", "os-image":
			return &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorOsImage}, nil
		case "container_runtime_version", "containerRuntimeVersion", "container-runtime-version":
			return &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion}, nil
		case "os_version", "osVersion", "os-version":
			return &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorOsVersion}, nil
		case "driver":
			return &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorDriver}, nil
		case "hardware_information", "hardwareInformation", "hardware-information":
			return &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation}, nil
		}
	} else {
		switch fp[0] {
		case "hardware_information", "hardwareInformation", "hardware-information":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfo_FieldSubPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo", fp)
}

func ParseDeviceStatusDeviceInfo_FieldPath(rawField string) (DeviceStatusDeviceInfo_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfo_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfo_FieldPath(rawField string) DeviceStatusDeviceInfo_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfo_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfo_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfo_FieldPathSelector
}

var _ DeviceStatusDeviceInfo_FieldPath = (*DeviceStatusDeviceInfo_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) Selector() DeviceStatusDeviceInfo_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo
func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) Get(source *Device_Status_DeviceInfo) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfo_FieldPathSelectorArchitecture:
			values = append(values, source.Architecture)
		case DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem:
			values = append(values, source.OperatingSystem)
		case DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion:
			values = append(values, source.KernelVersion)
		case DeviceStatusDeviceInfo_FieldPathSelectorOsImage:
			values = append(values, source.OsImage)
		case DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion:
			values = append(values, source.ContainerRuntimeVersion)
		case DeviceStatusDeviceInfo_FieldPathSelectorOsVersion:
			values = append(values, source.OsVersion)
		case DeviceStatusDeviceInfo_FieldPathSelectorDriver:
			values = append(values, source.Driver)
		case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
			if source.HardwareInformation != nil {
				values = append(values, source.HardwareInformation)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo
func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfo_FieldPathSelectorArchitecture:
		return source.GetArchitecture(), source != nil
	case DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem:
		return source.GetOperatingSystem(), source != nil
	case DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion:
		return source.GetKernelVersion(), source != nil
	case DeviceStatusDeviceInfo_FieldPathSelectorOsImage:
		return source.GetOsImage(), source != nil
	case DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion:
		return source.GetContainerRuntimeVersion(), source != nil
	case DeviceStatusDeviceInfo_FieldPathSelectorOsVersion:
		return source.GetOsVersion(), source != nil
	case DeviceStatusDeviceInfo_FieldPathSelectorDriver:
		return source.GetDriver(), source != nil
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		res := source.GetHardwareInformation()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfo_FieldPathSelectorArchitecture:
		return ""
	case DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem:
		return ""
	case DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion:
		return ""
	case DeviceStatusDeviceInfo_FieldPathSelectorOsImage:
		return ""
	case DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion:
		return ""
	case DeviceStatusDeviceInfo_FieldPathSelectorOsVersion:
		return ""
	case DeviceStatusDeviceInfo_FieldPathSelectorDriver:
		return ""
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		return (*Device_Status_DeviceInfo_HardwareInformation)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfo_FieldPathSelectorArchitecture:
			item.Architecture = ""
		case DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem:
			item.OperatingSystem = ""
		case DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion:
			item.KernelVersion = ""
		case DeviceStatusDeviceInfo_FieldPathSelectorOsImage:
			item.OsImage = ""
		case DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion:
			item.ContainerRuntimeVersion = ""
		case DeviceStatusDeviceInfo_FieldPathSelectorOsVersion:
			item.OsVersion = ""
		case DeviceStatusDeviceInfo_FieldPathSelectorDriver:
			item.Driver = ""
		case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
			item.HardwareInformation = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfo_FieldPathSelectorArchitecture ||
		fp.selector == DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem ||
		fp.selector == DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion ||
		fp.selector == DeviceStatusDeviceInfo_FieldPathSelectorOsImage ||
		fp.selector == DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion ||
		fp.selector == DeviceStatusDeviceInfo_FieldPathSelectorOsVersion ||
		fp.selector == DeviceStatusDeviceInfo_FieldPathSelectorDriver
}

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfo_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfo_FieldPathSelectorArchitecture:
		return &DeviceStatusDeviceInfo_FieldTerminalPathValue{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem:
		return &DeviceStatusDeviceInfo_FieldTerminalPathValue{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion:
		return &DeviceStatusDeviceInfo_FieldTerminalPathValue{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorOsImage:
		return &DeviceStatusDeviceInfo_FieldTerminalPathValue{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion:
		return &DeviceStatusDeviceInfo_FieldTerminalPathValue{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorOsVersion:
		return &DeviceStatusDeviceInfo_FieldTerminalPathValue{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorDriver:
		return &DeviceStatusDeviceInfo_FieldTerminalPathValue{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		return &DeviceStatusDeviceInfo_FieldTerminalPathValue{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfo_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfo_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfo_FieldPathSelectorArchitecture:
		return &DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem:
		return &DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion:
		return &DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorOsImage:
		return &DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion:
		return &DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorOsVersion:
		return &DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorDriver:
		return &DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		return &DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfo_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo_HardwareInformation)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfo_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfo_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfo_FieldSubPath struct {
	selector DeviceStatusDeviceInfo_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfo_FieldPath = (*DeviceStatusDeviceInfo_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfo_FieldSubPath) Selector() DeviceStatusDeviceInfo_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfo_FieldSubPath) AsHardwareInformationSubPath() (DeviceStatusDeviceInfoHardwareInformation_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfo_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfo_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo
func (fps *DeviceStatusDeviceInfo_FieldSubPath) Get(source *Device_Status_DeviceInfo) (values []interface{}) {
	if asHardwareInformationFieldPath, ok := fps.AsHardwareInformationSubPath(); ok {
		values = append(values, asHardwareInformationFieldPath.Get(source.GetHardwareInformation())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfo_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo
func (fps *DeviceStatusDeviceInfo_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		if source.GetHardwareInformation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetHardwareInformation())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfo_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfo_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfo_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
			fps.subPath.ClearValueRaw(item.HardwareInformation)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfo_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfo_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfo_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfo_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfo_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfo_FieldPathValue {
	return &DeviceStatusDeviceInfo_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfo_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfo_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfo_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfo_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfo_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfo_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfo_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfo_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfo_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfo_FieldPathValue allows storing values for DeviceInfo fields according to their type
type DeviceStatusDeviceInfo_FieldPathValue interface {
	DeviceStatusDeviceInfo_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo)
	CompareWith(*Device_Status_DeviceInfo) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfo_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfo_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeviceInfo field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfo_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfo_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfo_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfo_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfo_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfo_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfo_FieldPathValue = (*DeviceStatusDeviceInfo_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeviceInfo' as interface{}
func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) AsArchitectureValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) AsOperatingSystemValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) AsKernelVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) AsOsImageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) AsContainerRuntimeVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) AsOsVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) AsDriverValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) AsHardwareInformationValue() (*Device_Status_DeviceInfo_HardwareInformation, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo_HardwareInformation)
	return res, ok
}

// SetTo stores value for selected field for object DeviceInfo
func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfo_FieldPathSelectorArchitecture:
		(*target).Architecture = fpv.value.(string)
	case DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem:
		(*target).OperatingSystem = fpv.value.(string)
	case DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion:
		(*target).KernelVersion = fpv.value.(string)
	case DeviceStatusDeviceInfo_FieldPathSelectorOsImage:
		(*target).OsImage = fpv.value.(string)
	case DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion:
		(*target).ContainerRuntimeVersion = fpv.value.(string)
	case DeviceStatusDeviceInfo_FieldPathSelectorOsVersion:
		(*target).OsVersion = fpv.value.(string)
	case DeviceStatusDeviceInfo_FieldPathSelectorDriver:
		(*target).Driver = fpv.value.(string)
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		(*target).HardwareInformation = fpv.value.(*Device_Status_DeviceInfo_HardwareInformation)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfo_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo'.
func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfo_FieldPathSelectorArchitecture:
		leftValue := fpv.value.(string)
		rightValue := source.GetArchitecture()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem:
		leftValue := fpv.value.(string)
		rightValue := source.GetOperatingSystem()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetKernelVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorOsImage:
		leftValue := fpv.value.(string)
		rightValue := source.GetOsImage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetContainerRuntimeVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorOsVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetOsVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorDriver:
		leftValue := fpv.value.(string)
		rightValue := source.GetDriver()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfo_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo))
}

type DeviceStatusDeviceInfo_FieldSubPathValue struct {
	DeviceStatusDeviceInfo_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfo_FieldPathValue = (*DeviceStatusDeviceInfo_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfo_FieldSubPathValue) AsHardwareInformationPathValue() (DeviceStatusDeviceInfoHardwareInformation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformation_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfo_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformation_FieldPathValue).SetTo(&(*target).HardwareInformation)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfo_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfo_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfo_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		return fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformation_FieldPathValue).CompareWith(source.GetHardwareInformation())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfo_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo))
}

// DeviceStatusDeviceInfo_FieldPathArrayItemValue allows storing single item in Path-specific values for DeviceInfo according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfo_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfo_FieldPath
	ContainsValue(*Device_Status_DeviceInfo) bool
}

// ParseDeviceStatusDeviceInfo_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfo_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfo_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeviceInfo field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfo_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfo_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfo_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfo_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfo_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfo_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfo_FieldPathArrayItemValue = (*DeviceStatusDeviceInfo_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo as interface{}
func (fpaiv *DeviceStatusDeviceInfo_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfo_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfo_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeviceInfo'
func (fpaiv *DeviceStatusDeviceInfo_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo) bool {
	slice := fpaiv.DeviceStatusDeviceInfo_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfo_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfo_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfo_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfo_FieldSubPathArrayItemValue) AsHardwareInformationPathItemValue() (DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeviceInfo'
func (fpaivs *DeviceStatusDeviceInfo_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue).ContainsValue(source.GetHardwareInformation())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfo_FieldPathArrayOfValues allows storing slice of values for DeviceInfo fields according to their type
type DeviceStatusDeviceInfo_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfo_FieldPath
}

func ParseDeviceStatusDeviceInfo_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfo_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeviceInfo field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfo_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfo_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfo_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfo_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfo_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfo_FieldPathArrayOfValues = (*DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfo_FieldPathSelectorArchitecture:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorOsImage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorOsVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorDriver:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues) AsArchitectureArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues) AsOperatingSystemArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues) AsKernelVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues) AsOsImageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues) AsContainerRuntimeVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues) AsOsVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues) AsDriverArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfo_FieldTerminalPathArrayOfValues) AsHardwareInformationArrayOfValues() ([]*Device_Status_DeviceInfo_HardwareInformation, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation)
	return res, ok
}

type DeviceStatusDeviceInfo_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfo_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfo_FieldPathArrayOfValues = (*DeviceStatusDeviceInfo_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfo_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfo_FieldSubPathArrayOfValues) AsHardwareInformationPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformation_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformation_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformation_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs         DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios       DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem     DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector = 2
	DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu        DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector = 3
	DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock      DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector = 4
	DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork    DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector = 5
	DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu        DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector = 6
	DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector = 7
)

func (s DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		return "os"
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		return "bios"
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		return "system"
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		return "cpu"
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		return "block"
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		return "network"
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		return "gpu"
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		return "memory_info"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformation_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformation_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "os":
			return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs}, nil
		case "bios":
			return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios}, nil
		case "system":
			return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem}, nil
		case "cpu":
			return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu}, nil
		case "block":
			return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock}, nil
		case "network":
			return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork}, nil
		case "gpu":
			return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu}, nil
		case "memory_info", "memoryInfo", "memory-info":
			return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo}, nil
		}
	} else {
		switch fp[0] {
		case "os":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationOS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs, subPath: subpath}, nil
			}
		case "bios":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios, subPath: subpath}, nil
			}
		case "system":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationSystem_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem, subPath: subpath}, nil
			}
		case "cpu":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationCPU_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu, subPath: subpath}, nil
			}
		case "block":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationBlock_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock, subPath: subpath}, nil
			}
		case "network":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork, subPath: subpath}, nil
			}
		case "gpu":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationGPU_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu, subPath: subpath}, nil
			}
		case "memory_info", "memoryInfo", "memory-info":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformation_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformation_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformation_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformation_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformation_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformation_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformation_FieldPath = (*DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation
func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
			if source.Os != nil {
				values = append(values, source.Os)
			}
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
			if source.Bios != nil {
				values = append(values, source.Bios)
			}
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
			if source.System != nil {
				values = append(values, source.System)
			}
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
			if source.Cpu != nil {
				values = append(values, source.Cpu)
			}
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
			if source.Block != nil {
				values = append(values, source.Block)
			}
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
			if source.Network != nil {
				values = append(values, source.Network)
			}
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
			if source.Gpu != nil {
				values = append(values, source.Gpu)
			}
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
			if source.MemoryInfo != nil {
				values = append(values, source.MemoryInfo)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation
func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		res := source.GetOs()
		return res, res != nil
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		res := source.GetBios()
		return res, res != nil
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		res := source.GetSystem()
		return res, res != nil
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		res := source.GetCpu()
		return res, res != nil
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		res := source.GetBlock()
		return res, res != nil
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		res := source.GetNetwork()
		return res, res != nil
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		res := source.GetGpu()
		return res, res != nil
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		res := source.GetMemoryInfo()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		return (*Device_Status_DeviceInfo_HardwareInformation_OS)(nil)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		return (*Device_Status_DeviceInfo_HardwareInformation_BIOS)(nil)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		return (*Device_Status_DeviceInfo_HardwareInformation_System)(nil)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		return (*Device_Status_DeviceInfo_HardwareInformation_CPU)(nil)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		return (*Device_Status_DeviceInfo_HardwareInformation_Block)(nil)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		return (*Device_Status_DeviceInfo_HardwareInformation_Network)(nil)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		return (*Device_Status_DeviceInfo_HardwareInformation_GPU)(nil)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		return (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
			item.Os = nil
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
			item.Bios = nil
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
			item.System = nil
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
			item.Cpu = nil
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
			item.Block = nil
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
			item.Network = nil
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
			item.Gpu = nil
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
			item.MemoryInfo = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformation_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_OS)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_BIOS)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_System)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_CPU)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_Block)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_Network)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_GPU)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo_HardwareInformation_OS)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo_HardwareInformation_BIOS)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo_HardwareInformation_System)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo_HardwareInformation_CPU)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo_HardwareInformation_Block)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo_HardwareInformation_Network)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo_HardwareInformation_GPU)}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		return &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfoHardwareInformation_FieldSubPath struct {
	selector DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfoHardwareInformation_FieldPath = (*DeviceStatusDeviceInfoHardwareInformation_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) Selector() DeviceStatusDeviceInfoHardwareInformation_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) AsOsSubPath() (DeviceStatusDeviceInfoHardwareInformationOS_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationOS_FieldPath)
	return res, ok
}
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) AsBiosSubPath() (DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath)
	return res, ok
}
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) AsSystemSubPath() (DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath)
	return res, ok
}
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) AsCpuSubPath() (DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath)
	return res, ok
}
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) AsBlockSubPath() (DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath)
	return res, ok
}
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) AsNetworkSubPath() (DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath)
	return res, ok
}
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) AsGpuSubPath() (DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath)
	return res, ok
}
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) AsMemoryInfoSubPath() (DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo_HardwareInformation
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) Get(source *Device_Status_DeviceInfo_HardwareInformation) (values []interface{}) {
	if asOSFieldPath, ok := fps.AsOsSubPath(); ok {
		values = append(values, asOSFieldPath.Get(source.GetOs())...)
	} else if asBIOSFieldPath, ok := fps.AsBiosSubPath(); ok {
		values = append(values, asBIOSFieldPath.Get(source.GetBios())...)
	} else if asSystemFieldPath, ok := fps.AsSystemSubPath(); ok {
		values = append(values, asSystemFieldPath.Get(source.GetSystem())...)
	} else if asCPUFieldPath, ok := fps.AsCpuSubPath(); ok {
		values = append(values, asCPUFieldPath.Get(source.GetCpu())...)
	} else if asBlockFieldPath, ok := fps.AsBlockSubPath(); ok {
		values = append(values, asBlockFieldPath.Get(source.GetBlock())...)
	} else if asNetworkFieldPath, ok := fps.AsNetworkSubPath(); ok {
		values = append(values, asNetworkFieldPath.Get(source.GetNetwork())...)
	} else if asGPUFieldPath, ok := fps.AsGpuSubPath(); ok {
		values = append(values, asGPUFieldPath.Get(source.GetGpu())...)
	} else if asMemoryInfoFieldPath, ok := fps.AsMemoryInfoSubPath(); ok {
		values = append(values, asMemoryInfoFieldPath.Get(source.GetMemoryInfo())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo_HardwareInformation))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo_HardwareInformation
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		if source.GetOs() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOs())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		if source.GetBios() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBios())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		if source.GetSystem() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSystem())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		if source.GetCpu() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCpu())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		if source.GetBlock() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBlock())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		if source.GetNetwork() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNetwork())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		if source.GetGpu() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGpu())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		if source.GetMemoryInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMemoryInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
			fps.subPath.ClearValueRaw(item.Os)
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
			fps.subPath.ClearValueRaw(item.Bios)
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
			fps.subPath.ClearValueRaw(item.System)
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
			fps.subPath.ClearValueRaw(item.Cpu)
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
			fps.subPath.ClearValueRaw(item.Block)
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
			fps.subPath.ClearValueRaw(item.Network)
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
			fps.subPath.ClearValueRaw(item.Gpu)
		case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
			fps.subPath.ClearValueRaw(item.MemoryInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformation_FieldPathValue {
	return &DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformation_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformation_FieldPathValue allows storing values for HardwareInformation fields according to their type
type DeviceStatusDeviceInfoHardwareInformation_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformation_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformation_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformation_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HardwareInformation field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformation_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformation_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformation_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformation_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformation_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'HardwareInformation' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) AsOsValue() (*Device_Status_DeviceInfo_HardwareInformation_OS, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_OS)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) AsBiosValue() (*Device_Status_DeviceInfo_HardwareInformation_BIOS, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_BIOS)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) AsSystemValue() (*Device_Status_DeviceInfo_HardwareInformation_System, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_System)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) AsCpuValue() (*Device_Status_DeviceInfo_HardwareInformation_CPU, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_CPU)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) AsBlockValue() (*Device_Status_DeviceInfo_HardwareInformation_Block, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_Block)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) AsNetworkValue() (*Device_Status_DeviceInfo_HardwareInformation_Network, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_Network)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) AsGpuValue() (*Device_Status_DeviceInfo_HardwareInformation_GPU, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_GPU)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) AsMemoryInfoValue() (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)
	return res, ok
}

// SetTo stores value for selected field for object HardwareInformation
func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		(*target).Os = fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_OS)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		(*target).Bios = fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_BIOS)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		(*target).System = fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_System)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		(*target).Cpu = fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_CPU)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		(*target).Block = fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_Block)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		(*target).Network = fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_Network)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		(*target).Gpu = fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_GPU)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		(*target).MemoryInfo = fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation'.
func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		return 0, false
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		return 0, false
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		return 0, false
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		return 0, false
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		return 0, false
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		return 0, false
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		return 0, false
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation))
}

type DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue struct {
	DeviceStatusDeviceInfoHardwareInformation_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfoHardwareInformation_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) AsOsPathValue() (DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) AsBiosPathValue() (DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) AsSystemPathValue() (DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) AsCpuPathValue() (DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) AsBlockPathValue() (DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) AsNetworkPathValue() (DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) AsGpuPathValue() (DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) AsMemoryInfoPathValue() (DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue).SetTo(&(*target).Os)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue).SetTo(&(*target).Bios)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue).SetTo(&(*target).System)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue).SetTo(&(*target).Cpu)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue).SetTo(&(*target).Block)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue).SetTo(&(*target).Network)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue).SetTo(&(*target).Gpu)
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue).SetTo(&(*target).MemoryInfo)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		return fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue).CompareWith(source.GetOs())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		return fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue).CompareWith(source.GetBios())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		return fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue).CompareWith(source.GetSystem())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		return fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue).CompareWith(source.GetCpu())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		return fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue).CompareWith(source.GetBlock())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		return fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue).CompareWith(source.GetNetwork())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		return fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue).CompareWith(source.GetGpu())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		return fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue).CompareWith(source.GetMemoryInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation))
}

// DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue allows storing single item in Path-specific values for HardwareInformation according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformation_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HardwareInformation field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation))
}

// Contains returns a boolean indicating if value that is being held is present in given 'HardwareInformation'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformation_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue) AsOsPathItemValue() (DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue) AsBiosPathItemValue() (DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue) AsSystemPathItemValue() (DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue) AsCpuPathItemValue() (DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue) AsBlockPathItemValue() (DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue) AsNetworkPathItemValue() (DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue) AsGpuPathItemValue() (DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue) AsMemoryInfoPathItemValue() (DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'HardwareInformation'
func (fpaivs *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue).ContainsValue(source.GetOs())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue).ContainsValue(source.GetBios())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue).ContainsValue(source.GetSystem())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue).ContainsValue(source.GetCpu())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue).ContainsValue(source.GetBlock())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue).ContainsValue(source.GetNetwork())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue).ContainsValue(source.GetGpu())
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue).ContainsValue(source.GetMemoryInfo())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues allows storing slice of values for HardwareInformation fields according to their type
type DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformation_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing HardwareInformation field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_OS) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_BIOS) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_System) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_CPU) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_Block) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_Network) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_GPU) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues) AsOsArrayOfValues() ([]*Device_Status_DeviceInfo_HardwareInformation_OS, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_OS)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues) AsBiosArrayOfValues() ([]*Device_Status_DeviceInfo_HardwareInformation_BIOS, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_BIOS)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues) AsSystemArrayOfValues() ([]*Device_Status_DeviceInfo_HardwareInformation_System, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_System)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues) AsCpuArrayOfValues() ([]*Device_Status_DeviceInfo_HardwareInformation_CPU, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_CPU)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues) AsBlockArrayOfValues() ([]*Device_Status_DeviceInfo_HardwareInformation_Block, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_Block)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues) AsNetworkArrayOfValues() ([]*Device_Status_DeviceInfo_HardwareInformation_Network, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_Network)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues) AsGpuArrayOfValues() ([]*Device_Status_DeviceInfo_HardwareInformation_GPU, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_GPU)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPathArrayOfValues) AsMemoryInfoArrayOfValues() ([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformation_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfoHardwareInformation_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues) AsOsPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues) AsBiosPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues) AsSystemPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues) AsCpuPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues) AsBlockPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues) AsNetworkPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues) AsGpuPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformation_FieldSubPathArrayOfValues) AsMemoryInfoPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationCapability_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_Capability) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Capability) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Capability)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName        DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelector = 1
)

func (s DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName:
		return "name"
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription:
		return "description"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Capability: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationCapability_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationCapability_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_Capability")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName}, nil
		case "description":
			return &DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_Capability", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationCapability_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationCapability_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationCapability_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationCapability_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_Capability
func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_Capability) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName:
			values = append(values, source.Name)
		case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription:
			values = append(values, source.Description)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Capability: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_Capability))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_Capability
func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Capability) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName:
		return source.GetName(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Capability: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Capability))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Capability: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Capability) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName:
			item.Name = ""
		case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription:
			item.Description = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Capability: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_Capability))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription:
		return &DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Capability: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription:
		return &DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Capability: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Capability: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue allows storing values for Capability fields according to their type
type DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationCapability_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Capability)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_Capability) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Capability field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Capability' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Capability
func (fpv *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Capability) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_Capability)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Capability: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_Capability)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_Capability'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_Capability) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Capability: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_Capability))
}

// DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue allows storing single item in Path-specific values for Capability according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationCapability_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_Capability) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Capability field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_Capability as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Capability) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Capability))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Capability'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_Capability) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues allows storing slice of values for Capability fields according to their type
type DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationCapability_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Capability field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationOS_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_OS) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_OS) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_OS)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem         DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion           DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage                 DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelector = 2
	DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelector = 3
)

func (s DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem:
		return "operating_system"
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion:
		return "kernel_version"
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage:
		return "os_image"
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion:
		return "container_runtime_version"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_OS: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationOS_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationOS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_OS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "operating_system", "operatingSystem", "operating-system":
			return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem}, nil
		case "kernel_version", "kernelVersion", "kernel-version":
			return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion}, nil
		case "os_image", "osImage", "os-image":
			return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage}, nil
		case "container_runtime_version", "containerRuntimeVersion", "container-runtime-version":
			return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_OS", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationOS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationOS_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationOS_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationOS_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_OS
func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_OS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem:
			values = append(values, source.OperatingSystem)
		case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion:
			values = append(values, source.KernelVersion)
		case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage:
			values = append(values, source.OsImage)
		case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion:
			values = append(values, source.ContainerRuntimeVersion)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_OS: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_OS))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_OS
func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_OS) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem:
		return source.GetOperatingSystem(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion:
		return source.GetKernelVersion(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage:
		return source.GetOsImage(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion:
		return source.GetContainerRuntimeVersion(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_OS: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_OS))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_OS: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_OS) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem:
			item.OperatingSystem = ""
		case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion:
			item.KernelVersion = ""
		case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage:
			item.OsImage = ""
		case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion:
			item.ContainerRuntimeVersion = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_OS: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_OS))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion
}

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem:
		return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion:
		return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage:
		return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion:
		return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_OS: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem:
		return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion:
		return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage:
		return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion:
		return &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_OS: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_OS: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue allows storing values for OS fields according to their type
type DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationOS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_OS)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_OS) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OS field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationOS_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OS' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue) AsOperatingSystemValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue) AsKernelVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue) AsOsImageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue) AsContainerRuntimeVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object OS
func (fpv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_OS) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_OS)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem:
		(*target).OperatingSystem = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion:
		(*target).KernelVersion = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage:
		(*target).OsImage = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion:
		(*target).ContainerRuntimeVersion = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_OS: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_OS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_OS'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_OS) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem:
		leftValue := fpv.value.(string)
		rightValue := source.GetOperatingSystem()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetKernelVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage:
		leftValue := fpv.value.(string)
		rightValue := source.GetOsImage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetContainerRuntimeVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_OS: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_OS))
}

// DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue allows storing single item in Path-specific values for OS according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationOS_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_OS) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_OS as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_OS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_OS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OS'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_OS) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues allows storing slice of values for OS fields according to their type
type DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationOS_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationOS_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues) AsOperatingSystemArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues) AsKernelVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues) AsOsImageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPathArrayOfValues) AsContainerRuntimeVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_BIOS) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_BIOS) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_BIOS)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor      DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelector = 2
)

func (s DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor:
		return "vendor"
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion:
		return "bios_version"
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate:
		return "release_date"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_BIOS: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_BIOS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "vendor":
			return &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor}, nil
		case "bios_version", "biosVersion", "bios-version":
			return &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion}, nil
		case "release_date", "releaseDate", "release-date":
			return &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_BIOS", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_BIOS
func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_BIOS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor:
			values = append(values, source.Vendor)
		case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion:
			values = append(values, source.BiosVersion)
		case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate:
			values = append(values, source.ReleaseDate)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_BIOS: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_BIOS))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_BIOS
func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_BIOS) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor:
		return source.GetVendor(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion:
		return source.GetBiosVersion(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate:
		return source.GetReleaseDate(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_BIOS: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_BIOS))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_BIOS: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_BIOS) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor:
			item.Vendor = ""
		case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion:
			item.BiosVersion = ""
		case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate:
			item.ReleaseDate = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_BIOS: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_BIOS))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion:
		return &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate:
		return &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_BIOS: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion:
		return &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate:
		return &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_BIOS: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_BIOS: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue allows storing values for BIOS fields according to their type
type DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_BIOS)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_BIOS) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BIOS field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BIOS' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue) AsVendorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue) AsBiosVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue) AsReleaseDateValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object BIOS
func (fpv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_BIOS) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_BIOS)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor:
		(*target).Vendor = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion:
		(*target).BiosVersion = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate:
		(*target).ReleaseDate = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_BIOS: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_BIOS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_BIOS'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_BIOS) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor:
		leftValue := fpv.value.(string)
		rightValue := source.GetVendor()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetBiosVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate:
		leftValue := fpv.value.(string)
		rightValue := source.GetReleaseDate()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_BIOS: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_BIOS))
}

// DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue allows storing single item in Path-specific values for BIOS according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_BIOS) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BIOS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_BIOS as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_BIOS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_BIOS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BIOS'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_BIOS) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues allows storing slice of values for BIOS fields according to their type
type DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BIOS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayOfValues) AsVendorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayOfValues) AsBiosVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPathArrayOfValues) AsReleaseDateArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_System) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_System) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_System)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer  DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName   DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion       DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector = 2
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber  DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector = 3
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector = 4
)

func (s DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer:
		return "manufacturer"
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName:
		return "product_name"
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion:
		return "version"
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber:
		return "serial_number"
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		return "configuration"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationSystem_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_System")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "manufacturer":
			return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer}, nil
		case "product_name", "productName", "product-name":
			return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName}, nil
		case "version":
			return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion}, nil
		case "serial_number", "serialNumber", "serial-number":
			return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber}, nil
		case "configuration":
			return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration}, nil
		}
	} else {
		switch fp[0] {
		case "configuration":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_System", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationSystem_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_System
func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_System) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer:
			values = append(values, source.Manufacturer)
		case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName:
			values = append(values, source.ProductName)
		case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion:
			values = append(values, source.Version)
		case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber:
			values = append(values, source.SerialNumber)
		case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
			if source.Configuration != nil {
				values = append(values, source.Configuration)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_System))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_System
func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_System) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer:
		return source.GetManufacturer(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName:
		return source.GetProductName(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion:
		return source.GetVersion(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber:
		return source.GetSerialNumber(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		res := source.GetConfiguration()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_System))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		return (*Device_Status_DeviceInfo_HardwareInformation_System_Configuration)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_System) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer:
			item.Manufacturer = ""
		case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName:
			item.ProductName = ""
		case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion:
			item.Version = ""
		case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber:
			item.SerialNumber = ""
		case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
			item.Configuration = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_System))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer:
		return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName:
		return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion:
		return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber:
		return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer:
		return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName:
		return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion:
		return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber:
		return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo_HardwareInformation_System_Configuration)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) Selector() DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) AsConfigurationSubPath() (DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo_HardwareInformation_System
func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_System) (values []interface{}) {
	if asConfigurationFieldPath, ok := fps.AsConfigurationSubPath(); ok {
		values = append(values, asConfigurationFieldPath.Get(source.GetConfiguration())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_System))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo_HardwareInformation_System
func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_System) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		if source.GetConfiguration() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConfiguration())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_System))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_System) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
			fps.subPath.ClearValueRaw(item.Configuration)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_System))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue {
	return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue allows storing values for System fields according to their type
type DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_System)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_System) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing System field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'System' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue) AsManufacturerValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue) AsProductNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue) AsVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue) AsSerialNumberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue) AsConfigurationValue() (*Device_Status_DeviceInfo_HardwareInformation_System_Configuration, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration)
	return res, ok
}

// SetTo stores value for selected field for object System
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_System) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_System)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer:
		(*target).Manufacturer = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName:
		(*target).ProductName = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion:
		(*target).Version = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber:
		(*target).SerialNumber = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		(*target).Configuration = fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_System)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_System'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_System) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer:
		leftValue := fpv.value.(string)
		rightValue := source.GetManufacturer()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName:
		leftValue := fpv.value.(string)
		rightValue := source.GetProductName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber:
		leftValue := fpv.value.(string)
		rightValue := source.GetSerialNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_System))
}

type DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathValue) AsConfigurationPathValue() (DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_System) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_System)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue).SetTo(&(*target).Configuration)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_System)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_System) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		return fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue).CompareWith(source.GetConfiguration())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_System))
}

// DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue allows storing single item in Path-specific values for System according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_System) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing System field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_System as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_System) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_System))
}

// Contains returns a boolean indicating if value that is being held is present in given 'System'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_System) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathArrayItemValue) AsConfigurationPathItemValue() (DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'System'
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_System) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue).ContainsValue(source.GetConfiguration())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues allows storing slice of values for System fields according to their type
type DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing System field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues) AsManufacturerArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues) AsProductNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues) AsVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues) AsSerialNumberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPathArrayOfValues) AsConfigurationArrayOfValues() ([]*Device_Status_DeviceInfo_HardwareInformation_System_Configuration, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_System_Configuration)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationSystem_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPathArrayOfValues) AsConfigurationPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_CPU) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_CPU) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_CPU)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelector = 0
)

func (s DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		return "processors"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationCPU_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_CPU")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "processors":
			return &DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors}, nil
		}
	} else {
		switch fp[0] {
		case "processors":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_CPU", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationCPU_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_CPU
func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_CPU) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
			for _, value := range source.GetProcessors() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_CPU
func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_CPU) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		res := source.GetProcessors()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		return ([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_CPU) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
			item.Processors = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_CPU))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		return &DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath: *fp, value: value.([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		return &DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath: *fp, values: values.([][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		return &DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayItemValue{DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) Selector() DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) AsProcessorsSubPath() (DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo_HardwareInformation_CPU
func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_CPU) (values []interface{}) {
	if asProcessorFieldPath, ok := fps.AsProcessorsSubPath(); ok {
		for _, item := range source.GetProcessors() {
			values = append(values, asProcessorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo_HardwareInformation_CPU
func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_CPU) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		if len(source.GetProcessors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProcessors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_CPU) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
			for _, subItem := range item.Processors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_CPU))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue {
	return &DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue allows storing values for CPU fields according to their type
type DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_CPU)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_CPU) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CPU field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CPU' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathValue) AsProcessorsValue() ([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor, bool) {
	res, ok := fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)
	return res, ok
}

// SetTo stores value for selected field for object CPU
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_CPU) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_CPU)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		(*target).Processors = fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_CPU)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_CPU'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_CPU) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU))
}

type DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathValue) AsProcessorsPathValue() (DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_CPU) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_CPU)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_CPU)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_CPU) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU))
}

// DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue allows storing single item in Path-specific values for CPU according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_CPU) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CPU field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_CPU as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayItemValue) AsProcessorsItemValue() (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor, bool) {
	res, ok := fpaiv.value.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)
	return res, ok
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_CPU) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CPU'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_CPU) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathArrayItemValue) AsProcessorsPathItemValue() (DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CPU'
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_CPU) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues allows storing slice of values for CPU fields according to their type
type DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CPU field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors:
		for _, v := range fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPathArrayOfValues) AsProcessorsArrayOfValues() ([][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor, bool) {
	res, ok := fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationCPU_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformationCPU_FieldSubPathArrayOfValues) AsProcessorsPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_Block) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Block) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Block)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelector = 0
)

func (s DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		return "disks"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationBlock_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_Block")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "disks":
			return &DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks}, nil
		}
	} else {
		switch fp[0] {
		case "disks":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_Block", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationBlock_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_Block
func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_Block) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
			for _, value := range source.GetDisks() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_Block))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_Block
func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Block) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		res := source.GetDisks()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Block))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		return ([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Block) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
			item.Disks = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_Block))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		return &DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath: *fp, value: value.([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		return &DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath: *fp, values: values.([][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		return &DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayItemValue{DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) Selector() DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) AsDisksSubPath() (DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo_HardwareInformation_Block
func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_Block) (values []interface{}) {
	if asDiskFieldPath, ok := fps.AsDisksSubPath(); ok {
		for _, item := range source.GetDisks() {
			values = append(values, asDiskFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_Block))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo_HardwareInformation_Block
func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Block) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		if len(source.GetDisks()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDisks()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Block))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Block) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
			for _, subItem := range item.Disks {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_Block))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue {
	return &DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue allows storing values for Block fields according to their type
type DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Block)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_Block) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Block field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Block' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathValue) AsDisksValue() ([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk, bool) {
	res, ok := fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)
	return res, ok
}

// SetTo stores value for selected field for object Block
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Block) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_Block)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		(*target).Disks = fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_Block)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_Block'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_Block) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_Block))
}

type DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathValue) AsDisksPathValue() (DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Block) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_Block)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_Block)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_Block) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_Block))
}

// DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue allows storing single item in Path-specific values for Block according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_Block) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Block field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_Block as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayItemValue) AsDisksItemValue() (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk, bool) {
	res, ok := fpaiv.value.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)
	return res, ok
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Block) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Block))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Block'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_Block) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathArrayItemValue) AsDisksPathItemValue() (DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Block'
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_Block) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues allows storing slice of values for Block fields according to their type
type DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Block field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks:
		for _, v := range fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPathArrayOfValues) AsDisksArrayOfValues() ([][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk, bool) {
	res, ok := fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationBlock_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformationBlock_FieldSubPathArrayOfValues) AsDisksPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_Network) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Network) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Network)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelector = 0
)

func (s DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		return "nics"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_Network")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "nics":
			return &DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics}, nil
		}
	} else {
		switch fp[0] {
		case "nics":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_Network", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_Network
func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_Network) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
			for _, value := range source.GetNics() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_Network))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_Network
func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Network) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		res := source.GetNics()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Network))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		return ([]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Network) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
			item.Nics = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_Network))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		return &DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath: *fp, value: value.([]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		return &DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath: *fp, values: values.([][]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		return &DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayItemValue{DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) Selector() DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) AsNicsSubPath() (DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo_HardwareInformation_Network
func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_Network) (values []interface{}) {
	if asNICFieldPath, ok := fps.AsNicsSubPath(); ok {
		for _, item := range source.GetNics() {
			values = append(values, asNICFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_Network))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo_HardwareInformation_Network
func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Network) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		if len(source.GetNics()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNics()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Network))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Network) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
			for _, subItem := range item.Nics {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_Network))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue {
	return &DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue allows storing values for Network fields according to their type
type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Network)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_Network) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Network field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Network' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathValue) AsNicsValue() ([]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC, bool) {
	res, ok := fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)
	return res, ok
}

// SetTo stores value for selected field for object Network
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Network) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_Network)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		(*target).Nics = fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_Network)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_Network'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_Network) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_Network))
}

type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathValue) AsNicsPathValue() (DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Network) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_Network)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_Network)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_Network) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_Network))
}

// DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue allows storing single item in Path-specific values for Network according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_Network) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Network field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_Network as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayItemValue) AsNicsItemValue() (*Device_Status_DeviceInfo_HardwareInformation_Network_NIC, bool) {
	res, ok := fpaiv.value.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)
	return res, ok
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Network) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Network))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Network'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_Network) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathArrayItemValue) AsNicsPathItemValue() (DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Network'
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_Network) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues allows storing slice of values for Network fields according to their type
type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Network field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics:
		for _, v := range fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPathArrayOfValues) AsNicsArrayOfValues() ([][]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC, bool) {
	res, ok := fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformationNetwork_FieldSubPathArrayOfValues) AsNicsPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_GPU) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_GPU) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_GPU)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelector = 0
)

func (s DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		return "graphic_cards"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationGPU_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_GPU")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "graphic_cards", "graphicCards", "graphic-cards":
			return &DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards}, nil
		}
	} else {
		switch fp[0] {
		case "graphic_cards", "graphicCards", "graphic-cards":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_GPU", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationGPU_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_GPU
func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_GPU) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
			for _, value := range source.GetGraphicCards() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_GPU
func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_GPU) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		res := source.GetGraphicCards()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		return ([]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_GPU) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
			item.GraphicCards = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_GPU))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		return &DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath: *fp, value: value.([]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		return &DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath: *fp, values: values.([][]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		return &DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayItemValue{DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) Selector() DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) AsGraphicCardsSubPath() (DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo_HardwareInformation_GPU
func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_GPU) (values []interface{}) {
	if asGraphicCardFieldPath, ok := fps.AsGraphicCardsSubPath(); ok {
		for _, item := range source.GetGraphicCards() {
			values = append(values, asGraphicCardFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo_HardwareInformation_GPU
func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_GPU) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		if len(source.GetGraphicCards()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGraphicCards()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_GPU) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
			for _, subItem := range item.GraphicCards {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_GPU))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue {
	return &DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue allows storing values for GPU fields according to their type
type DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_GPU)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_GPU) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GPU field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GPU' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathValue) AsGraphicCardsValue() ([]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard, bool) {
	res, ok := fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)
	return res, ok
}

// SetTo stores value for selected field for object GPU
func (fpv *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_GPU) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_GPU)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		(*target).GraphicCards = fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_GPU)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_GPU'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_GPU) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU))
}

type DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathValue) AsGraphicCardsPathValue() (DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_GPU) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_GPU)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_GPU)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_GPU) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU))
}

// DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue allows storing single item in Path-specific values for GPU according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_GPU) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GPU field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_GPU as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayItemValue) AsGraphicCardsItemValue() (*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard, bool) {
	res, ok := fpaiv.value.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)
	return res, ok
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_GPU) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GPU'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_GPU) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathArrayItemValue) AsGraphicCardsPathItemValue() (DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GPU'
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_GPU) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues allows storing slice of values for GPU fields according to their type
type DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GPU field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards:
		for _, v := range fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPathArrayOfValues) AsGraphicCardsArrayOfValues() ([][]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard, bool) {
	res, ok := fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationGPU_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformationGPU_FieldSubPathArrayOfValues) AsGraphicCardsPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_PCIDevice)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress   DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor    DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct   DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelector = 2
	DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName      DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelector = 3
	DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelector = 4
)

func (s DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress:
		return "address"
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor:
		return "vendor"
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct:
		return "product"
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName:
		return "name"
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor:
		return "subvendor"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_PCIDevice: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_PCIDevice")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "address":
			return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress}, nil
		case "vendor":
			return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor}, nil
		case "product":
			return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct}, nil
		case "name":
			return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName}, nil
		case "subvendor":
			return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_PCIDevice", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_PCIDevice
func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress:
			values = append(values, source.Address)
		case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor:
			values = append(values, source.Vendor)
		case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct:
			values = append(values, source.Product)
		case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName:
			values = append(values, source.Name)
		case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor:
			values = append(values, source.Subvendor)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_PCIDevice: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_PCIDevice
func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress:
		return source.GetAddress(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor:
		return source.GetVendor(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct:
		return source.GetProduct(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName:
		return source.GetName(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor:
		return source.GetSubvendor(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_PCIDevice: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_PCIDevice: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress:
			item.Address = ""
		case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor:
			item.Vendor = ""
		case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct:
			item.Product = ""
		case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName:
			item.Name = ""
		case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor:
			item.Subvendor = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_PCIDevice: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor
}

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress:
		return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct:
		return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor:
		return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_PCIDevice: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress:
		return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct:
		return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor:
		return &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_PCIDevice: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_PCIDevice: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue allows storing values for PCIDevice fields according to their type
type DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_PCIDevice)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PCIDevice field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PCIDevice' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue) AsAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue) AsVendorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue) AsProductValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue) AsSubvendorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object PCIDevice
func (fpv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_PCIDevice) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_PCIDevice)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress:
		(*target).Address = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor:
		(*target).Vendor = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct:
		(*target).Product = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor:
		(*target).Subvendor = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_PCIDevice: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_PCIDevice'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor:
		leftValue := fpv.value.(string)
		rightValue := source.GetVendor()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct:
		leftValue := fpv.value.(string)
		rightValue := source.GetProduct()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor:
		leftValue := fpv.value.(string)
		rightValue := source.GetSubvendor()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_PCIDevice: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice))
}

// DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue allows storing single item in Path-specific values for PCIDevice according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PCIDevice field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_PCIDevice as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PCIDevice'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues allows storing slice of values for PCIDevice fields according to their type
type DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PCIDevice field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues) AsAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues) AsVendorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues) AsProductArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPathArrayOfValues) AsSubvendorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelector = 0
)

func (s DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		return "memory"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_MemoryInfo")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "memory":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory}, nil
		}
	} else {
		switch fp[0] {
		case "memory":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_MemoryInfo", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_MemoryInfo
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
			for _, value := range source.GetMemory() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_MemoryInfo
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		res := source.GetMemory()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		return ([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
			item.Memory = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath: *fp, value: value.([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath: *fp, values: values.([][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayItemValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) Selector() DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) AsMemorySubPath() (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo_HardwareInformation_MemoryInfo
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) (values []interface{}) {
	if asMemoryFieldPath, ok := fps.AsMemorySubPath(); ok {
		for _, item := range source.GetMemory() {
			values = append(values, asMemoryFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo_HardwareInformation_MemoryInfo
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		if len(source.GetMemory()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMemory()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
			for _, subItem := range item.Memory {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue {
	return &DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue allows storing values for MemoryInfo fields according to their type
type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MemoryInfo field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'MemoryInfo' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathValue) AsMemoryValue() ([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory, bool) {
	res, ok := fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)
	return res, ok
}

// SetTo stores value for selected field for object MemoryInfo
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		(*target).Memory = fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_MemoryInfo'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo))
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathValue) AsMemoryPathValue() (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo))
}

// DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue allows storing single item in Path-specific values for MemoryInfo according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MemoryInfo field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_MemoryInfo as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayItemValue) AsMemoryItemValue() (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory, bool) {
	res, ok := fpaiv.value.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)
	return res, ok
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo))
}

// Contains returns a boolean indicating if value that is being held is present in given 'MemoryInfo'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathArrayItemValue) AsMemoryPathItemValue() (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'MemoryInfo'
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues allows storing slice of values for MemoryInfo fields according to their type
type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MemoryInfo field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory:
		for _, v := range fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPathArrayOfValues) AsMemoryArrayOfValues() ([][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory, bool) {
	res, ok := fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldSubPathArrayOfValues) AsMemoryPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_System_Configuration)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis   DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid      DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelector = 2
	DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily    DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelector = 3
)

func (s DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis:
		return "chassis"
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid:
		return "uuid"
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber:
		return "sku_number"
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily:
		return "family"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System_Configuration: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_System_Configuration")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "chassis":
			return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis}, nil
		case "uuid":
			return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid}, nil
		case "sku_number", "skuNumber", "sku-number":
			return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber}, nil
		case "family":
			return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_System_Configuration", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_System_Configuration
func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis:
			values = append(values, source.Chassis)
		case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid:
			values = append(values, source.Uuid)
		case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber:
			values = append(values, source.SkuNumber)
		case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily:
			values = append(values, source.Family)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System_Configuration: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_System_Configuration
func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis:
		return source.GetChassis(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid:
		return source.GetUuid(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber:
		return source.GetSkuNumber(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily:
		return source.GetFamily(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System_Configuration: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System_Configuration: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis:
			item.Chassis = ""
		case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid:
			item.Uuid = ""
		case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber:
			item.SkuNumber = ""
		case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily:
			item.Family = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System_Configuration: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis:
		return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid:
		return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber:
		return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily:
		return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System_Configuration: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis:
		return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid:
		return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber:
		return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily:
		return &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System_Configuration: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System_Configuration: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue allows storing values for Configuration fields according to their type
type DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_System_Configuration)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Configuration field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Configuration' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue) AsChassisValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue) AsUuidValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue) AsSkuNumberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue) AsFamilyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Configuration
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_System_Configuration) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_System_Configuration)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis:
		(*target).Chassis = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid:
		(*target).Uuid = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber:
		(*target).SkuNumber = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily:
		(*target).Family = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System_Configuration: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_System_Configuration'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis:
		leftValue := fpv.value.(string)
		rightValue := source.GetChassis()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid:
		leftValue := fpv.value.(string)
		rightValue := source.GetUuid()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber:
		leftValue := fpv.value.(string)
		rightValue := source.GetSkuNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily:
		leftValue := fpv.value.(string)
		rightValue := source.GetFamily()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_System_Configuration: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration))
}

// DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue allows storing single item in Path-specific values for Configuration according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Configuration field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_System_Configuration as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Configuration'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues allows storing slice of values for Configuration fields according to their type
type DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Configuration field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues) AsChassisArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues) AsUuidArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues) AsSkuNumberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPathArrayOfValues) AsFamilyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor          DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel           DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities    DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector = 2
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads      DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector = 3
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores        DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector = 4
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector = 5
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName            DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector = 6
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial          DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector = 7
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz    DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector = 8
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector = 9
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo       DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector = 10
)

func (s DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor:
		return "vendor"
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel:
		return "model"
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		return "capabilities"
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads:
		return "num_threads"
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores:
		return "num_cores"
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores:
		return "num_enabled_cores"
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName:
		return "name"
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial:
		return "serial"
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz:
		return "frequency_mhz"
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz:
		return "max_frequency_mhz"
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		return "cache_info"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_CPU_Processor")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "vendor":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor}, nil
		case "model":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel}, nil
		case "capabilities":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities}, nil
		case "num_threads", "numThreads", "num-threads":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads}, nil
		case "num_cores", "numCores", "num-cores":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores}, nil
		case "num_enabled_cores", "numEnabledCores", "num-enabled-cores":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores}, nil
		case "name":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName}, nil
		case "serial":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial}, nil
		case "frequency_mhz", "frequencyMhz", "frequency-mhz":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz}, nil
		case "max_frequency_mhz", "maxFrequencyMhz", "max-frequency-mhz":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz}, nil
		case "cache_info", "cacheInfo", "cache-info":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo}, nil
		}
	} else {
		switch fp[0] {
		case "capabilities":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationCapability_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities, subPath: subpath}, nil
			}
		case "cache_info", "cacheInfo", "cache-info":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_CPU_Processor", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_CPU_Processor
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor:
			values = append(values, source.Vendor)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel:
			values = append(values, source.Model)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
			for _, value := range source.GetCapabilities() {
				values = append(values, value)
			}
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads:
			values = append(values, source.NumThreads)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores:
			values = append(values, source.NumCores)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores:
			values = append(values, source.NumEnabledCores)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName:
			values = append(values, source.Name)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial:
			values = append(values, source.Serial)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz:
			values = append(values, source.FrequencyMhz)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz:
			values = append(values, source.MaxFrequencyMhz)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
			for _, value := range source.GetCacheInfo() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_CPU_Processor
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor:
		return source.GetVendor(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel:
		return source.GetModel(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		res := source.GetCapabilities()
		return res, res != nil
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads:
		return source.GetNumThreads(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores:
		return source.GetNumCores(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores:
		return source.GetNumEnabledCores(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName:
		return source.GetName(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial:
		return source.GetSerial(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz:
		return source.GetFrequencyMhz(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz:
		return source.GetMaxFrequencyMhz(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		res := source.GetCacheInfo()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		return ([]*Device_Status_DeviceInfo_HardwareInformation_Capability)(nil)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads:
		return uint32(0)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores:
		return uint32(0)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores:
		return uint32(0)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz:
		return int64(0)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz:
		return int64(0)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		return ([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor:
			item.Vendor = ""
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel:
			item.Model = ""
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
			item.Capabilities = nil
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads:
			item.NumThreads = uint32(0)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores:
			item.NumCores = uint32(0)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores:
			item.NumEnabledCores = uint32(0)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName:
			item.Name = ""
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial:
			item.Serial = ""
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz:
			item.FrequencyMhz = int64(0)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz:
			item.MaxFrequencyMhz = int64(0)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
			item.CacheInfo = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.([]*Device_Status_DeviceInfo_HardwareInformation_Capability)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.(uint32)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.(uint32)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.(uint32)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.(int64)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.(int64)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, values: values.([][]*Device_Status_DeviceInfo_HardwareInformation_Capability)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, values: values.([]uint32)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, values: values.([]uint32)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, values: values.([]uint32)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, values: values.([]int64)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, values: values.([]int64)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, values: values.([][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayItemValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_Capability)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayItemValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) Selector() DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) AsCapabilitiesSubPath() (DeviceStatusDeviceInfoHardwareInformationCapability_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationCapability_FieldPath)
	return res, ok
}
func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) AsCacheInfoSubPath() (DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo_HardwareInformation_CPU_Processor
func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) (values []interface{}) {
	if asCapabilityFieldPath, ok := fps.AsCapabilitiesSubPath(); ok {
		for _, item := range source.GetCapabilities() {
			values = append(values, asCapabilityFieldPath.Get(item)...)
		}
	} else if asCacheFieldPath, ok := fps.AsCacheInfoSubPath(); ok {
		for _, item := range source.GetCacheInfo() {
			values = append(values, asCacheFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo_HardwareInformation_CPU_Processor
func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		if len(source.GetCapabilities()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCapabilities()[0])
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		if len(source.GetCacheInfo()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCacheInfo()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
			for _, subItem := range item.Capabilities {
				fps.subPath.ClearValueRaw(subItem)
			}
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
			for _, subItem := range item.CacheInfo {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue {
	return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue allows storing values for Processor fields according to their type
type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Processor field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Processor' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) AsVendorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) AsModelValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) AsCapabilitiesValue() ([]*Device_Status_DeviceInfo_HardwareInformation_Capability, bool) {
	res, ok := fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_Capability)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) AsNumThreadsValue() (uint32, bool) {
	res, ok := fpv.value.(uint32)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) AsNumCoresValue() (uint32, bool) {
	res, ok := fpv.value.(uint32)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) AsNumEnabledCoresValue() (uint32, bool) {
	res, ok := fpv.value.(uint32)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) AsSerialValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) AsFrequencyMhzValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) AsMaxFrequencyMhzValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) AsCacheInfoValue() ([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache, bool) {
	res, ok := fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)
	return res, ok
}

// SetTo stores value for selected field for object Processor
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor:
		(*target).Vendor = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel:
		(*target).Model = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		(*target).Capabilities = fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_Capability)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads:
		(*target).NumThreads = fpv.value.(uint32)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores:
		(*target).NumCores = fpv.value.(uint32)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores:
		(*target).NumEnabledCores = fpv.value.(uint32)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial:
		(*target).Serial = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz:
		(*target).FrequencyMhz = fpv.value.(int64)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz:
		(*target).MaxFrequencyMhz = fpv.value.(int64)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		(*target).CacheInfo = fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_CPU_Processor'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor:
		leftValue := fpv.value.(string)
		rightValue := source.GetVendor()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel:
		leftValue := fpv.value.(string)
		rightValue := source.GetModel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		return 0, false
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads:
		leftValue := fpv.value.(uint32)
		rightValue := source.GetNumThreads()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores:
		leftValue := fpv.value.(uint32)
		rightValue := source.GetNumCores()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores:
		leftValue := fpv.value.(uint32)
		rightValue := source.GetNumEnabledCores()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial:
		leftValue := fpv.value.(string)
		rightValue := source.GetSerial()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz:
		leftValue := fpv.value.(int64)
		rightValue := source.GetFrequencyMhz()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz:
		leftValue := fpv.value.(int64)
		rightValue := source.GetMaxFrequencyMhz()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor))
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathValue) AsCapabilitiesPathValue() (DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathValue) AsCacheInfoPathValue() (DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		panic("FieldPath setter is unsupported for array subpaths")
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		return 0, false // repeated field
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor))
}

// DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue allows storing single item in Path-specific values for Processor according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Processor field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_CPU_Processor as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayItemValue) AsCapabilitiesItemValue() (*Device_Status_DeviceInfo_HardwareInformation_Capability, bool) {
	res, ok := fpaiv.value.(*Device_Status_DeviceInfo_HardwareInformation_Capability)
	return res, ok
}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayItemValue) AsCacheInfoItemValue() (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache, bool) {
	res, ok := fpaiv.value.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)
	return res, ok
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Processor'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayItemValue) AsCapabilitiesPathItemValue() (DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayItemValue) AsCacheInfoPathItemValue() (DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Processor'
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		return false // repeated/map field
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues allows storing slice of values for Processor fields according to their type
type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Processor field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities:
		for _, v := range fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_Capability) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads:
		for _, v := range fpaov.values.([]uint32) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores:
		for _, v := range fpaov.values.([]uint32) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores:
		for _, v := range fpaov.values.([]uint32) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo:
		for _, v := range fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) AsVendorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) AsModelArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) AsCapabilitiesArrayOfValues() ([][]*Device_Status_DeviceInfo_HardwareInformation_Capability, bool) {
	res, ok := fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_Capability)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) AsNumThreadsArrayOfValues() ([]uint32, bool) {
	res, ok := fpaov.values.([]uint32)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) AsNumCoresArrayOfValues() ([]uint32, bool) {
	res, ok := fpaov.values.([]uint32)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) AsNumEnabledCoresArrayOfValues() ([]uint32, bool) {
	res, ok := fpaov.values.([]uint32)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) AsSerialArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) AsFrequencyMhzArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) AsMaxFrequencyMhzArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPathArrayOfValues) AsCacheInfoArrayOfValues() ([][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache, bool) {
	res, ok := fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayOfValues) AsCapabilitiesPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldSubPathArrayOfValues) AsCacheInfoPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType      DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelector = 1
)

func (s DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType:
		return "type"
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes:
		return "size_bytes"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType}, nil
		case "size_bytes", "sizeBytes", "size-bytes":
			return &DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType:
			values = append(values, source.Type)
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes:
			values = append(values, source.SizeBytes)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType:
		return source.GetType(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes:
		return source.GetSizeBytes(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes:
		return int64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType:
			item.Type = ""
		case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes:
			item.SizeBytes = int64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath: *fp, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes:
		return &DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath: *fp, values: values.([]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue allows storing values for Cache fields according to their type
type DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Cache field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Cache' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue) AsTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue) AsSizeBytesValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}

// SetTo stores value for selected field for object Cache
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType:
		(*target).Type = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes:
		(*target).SizeBytes = fpv.value.(int64)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType:
		leftValue := fpv.value.(string)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSizeBytes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache))
}

// DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue allows storing single item in Path-specific values for Cache according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Cache field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Cache'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues allows storing slice of values for Cache fields according to their type
type DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Cache field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPathArrayOfValues) AsSizeBytesArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Block_Disk)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName         DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes    DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType    DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector = 2
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor       DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector = 3
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel        DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector = 4
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector = 5
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn          DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector = 6
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions   DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector = 7
)

func (s DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName:
		return "name"
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes:
		return "size_bytes"
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType:
		return "drive_type"
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor:
		return "vendor"
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel:
		return "model"
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber:
		return "serial_number"
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn:
		return "wwn"
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		return "partitions"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_Block_Disk")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName}, nil
		case "size_bytes", "sizeBytes", "size-bytes":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes}, nil
		case "drive_type", "driveType", "drive-type":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType}, nil
		case "vendor":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor}, nil
		case "model":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel}, nil
		case "serial_number", "serialNumber", "serial-number":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber}, nil
		case "wwn":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn}, nil
		case "partitions":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions}, nil
		}
	} else {
		switch fp[0] {
		case "partitions":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_Block_Disk", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_Block_Disk
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName:
			values = append(values, source.Name)
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes:
			values = append(values, source.SizeBytes)
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType:
			values = append(values, source.DriveType)
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor:
			values = append(values, source.Vendor)
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel:
			values = append(values, source.Model)
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber:
			values = append(values, source.SerialNumber)
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn:
			values = append(values, source.Wwn)
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
			for _, value := range source.GetPartitions() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_Block_Disk
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName:
		return source.GetName(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes:
		return source.GetSizeBytes(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType:
		return source.GetDriveType(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor:
		return source.GetVendor(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel:
		return source.GetModel(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber:
		return source.GetSerialNumber(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn:
		return source.GetWwn(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		res := source.GetPartitions()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes:
		return int64(0)
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		return ([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName:
			item.Name = ""
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes:
			item.SizeBytes = int64(0)
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType:
			item.DriveType = ""
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor:
			item.Vendor = ""
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel:
			item.Model = ""
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber:
			item.SerialNumber = ""
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn:
			item.Wwn = ""
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
			item.Partitions = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, value: value.(int64)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, value: value.([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, values: values.([]int64)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, values: values.([][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayItemValue{DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) Selector() DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) AsPartitionsSubPath() (DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo_HardwareInformation_Block_Disk
func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) (values []interface{}) {
	if asPartitionFieldPath, ok := fps.AsPartitionsSubPath(); ok {
		for _, item := range source.GetPartitions() {
			values = append(values, asPartitionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo_HardwareInformation_Block_Disk
func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		if len(source.GetPartitions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPartitions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
			for _, subItem := range item.Partitions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue {
	return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue allows storing values for Disk fields according to their type
type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Block_Disk)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Disk field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Disk' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) AsSizeBytesValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) AsDriveTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) AsVendorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) AsModelValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) AsSerialNumberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) AsWwnValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) AsPartitionsValue() ([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition, bool) {
	res, ok := fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)
	return res, ok
}

// SetTo stores value for selected field for object Disk
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Block_Disk) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_Block_Disk)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes:
		(*target).SizeBytes = fpv.value.(int64)
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType:
		(*target).DriveType = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor:
		(*target).Vendor = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel:
		(*target).Model = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber:
		(*target).SerialNumber = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn:
		(*target).Wwn = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		(*target).Partitions = fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_Block_Disk'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSizeBytes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType:
		leftValue := fpv.value.(string)
		rightValue := source.GetDriveType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor:
		leftValue := fpv.value.(string)
		rightValue := source.GetVendor()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel:
		leftValue := fpv.value.(string)
		rightValue := source.GetModel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber:
		leftValue := fpv.value.(string)
		rightValue := source.GetSerialNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn:
		leftValue := fpv.value.(string)
		rightValue := source.GetWwn()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk))
}

type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathValue) AsPartitionsPathValue() (DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Block_Disk) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_Block_Disk)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk))
}

// DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue allows storing single item in Path-specific values for Disk according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Disk field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_Block_Disk as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayItemValue) AsPartitionsItemValue() (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition, bool) {
	res, ok := fpaiv.value.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)
	return res, ok
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Disk'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathArrayItemValue) AsPartitionsPathItemValue() (DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Disk'
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues allows storing slice of values for Disk fields according to their type
type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Disk field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions:
		for _, v := range fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues) AsSizeBytesArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues) AsDriveTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues) AsVendorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues) AsModelArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues) AsSerialNumberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues) AsWwnArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPathArrayOfValues) AsPartitionsArrayOfValues() ([][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition, bool) {
	res, ok := fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldSubPathArrayOfValues) AsPartitionsPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName       DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes  DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelector = 2
	DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType       DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelector = 3
)

func (s DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName:
		return "name"
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes:
		return "size_bytes"
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint:
		return "mount_point"
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType:
		return "type"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName}, nil
		case "size_bytes", "sizeBytes", "size-bytes":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes}, nil
		case "mount_point", "mountPoint", "mount-point":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint}, nil
		case "type":
			return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName:
			values = append(values, source.Name)
		case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes:
			values = append(values, source.SizeBytes)
		case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint:
			values = append(values, source.MountPoint)
		case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType:
			values = append(values, source.Type)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName:
		return source.GetName(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes:
		return source.GetSizeBytes(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint:
		return source.GetMountPoint(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType:
		return source.GetType(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes:
		return int64(0)
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName:
			item.Name = ""
		case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes:
			item.SizeBytes = int64(0)
		case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint:
			item.MountPoint = ""
		case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType:
			item.Type = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath: *fp, value: value.(int64)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath: *fp, values: values.([]int64)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType:
		return &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue allows storing values for Partition fields according to their type
type DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Partition field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Partition' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue) AsSizeBytesValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue) AsMountPointValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue) AsTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Partition
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes:
		(*target).SizeBytes = fpv.value.(int64)
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint:
		(*target).MountPoint = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType:
		(*target).Type = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSizeBytes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint:
		leftValue := fpv.value.(string)
		rightValue := source.GetMountPoint()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType:
		leftValue := fpv.value.(string)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition))
}

// DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue allows storing single item in Path-specific values for Partition according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Partition field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Partition'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues allows storing slice of values for Partition fields according to their type
type DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Partition field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues) AsSizeBytesArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues) AsMountPointArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Network_NIC)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName        DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress  DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual     DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector = 2
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector = 3
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector = 4
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor      DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector = 5
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor   DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector = 6
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting     DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector = 7
)

func (s DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName:
		return "name"
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress:
		return "mac_address"
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual:
		return "virtual"
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription:
		return "description"
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName:
		return "product_name"
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor:
		return "vendor"
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor:
		return "subvendor"
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		return "setting"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_Network_NIC")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName}, nil
		case "mac_address", "macAddress", "mac-address":
			return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress}, nil
		case "virtual":
			return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual}, nil
		case "description":
			return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription}, nil
		case "product_name", "productName", "product-name":
			return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName}, nil
		case "vendor":
			return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor}, nil
		case "subvendor":
			return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor}, nil
		case "setting":
			return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting}, nil
		}
	} else {
		switch fp[0] {
		case "setting":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object Device_Status_DeviceInfo_HardwareInformation_Network_NIC)", fp)
			}
			return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_Network_NIC", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_Network_NIC
func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName:
			values = append(values, source.Name)
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress:
			values = append(values, source.MacAddress)
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual:
			values = append(values, source.Virtual)
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName:
			values = append(values, source.ProductName)
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor:
			values = append(values, source.Vendor)
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor:
			values = append(values, source.Subvendor)
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
			values = append(values, source.Setting)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_Network_NIC
func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName:
		return source.GetName(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress:
		return source.GetMacAddress(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual:
		return source.GetVirtual(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName:
		return source.GetProductName(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor:
		return source.GetVendor(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor:
		return source.GetSubvendor(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		res := source.GetSetting()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual:
		return false
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		return (map[string]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName:
			item.Name = ""
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress:
			item.MacAddress = ""
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual:
			item.Virtual = false
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription:
			item.Description = ""
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName:
			item.ProductName = ""
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor:
			item.Vendor = ""
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor:
			item.Subvendor = ""
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
			item.Setting = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, value: value.(map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap struct {
	key      string
	selector DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap)(nil)

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) Selector() DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelector {
	return fpm.selector
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source Device_Status_DeviceInfo_HardwareInformation_Network_NIC
func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) Get(source *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) (values []interface{}) {
	switch fpm.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		if value, ok := source.GetSetting()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fpm.selector))
	}
	return
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC))
}

// GetSingle returns value by selected field map key from source Device_Status_DeviceInfo_HardwareInformation_Network_NIC
func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) (interface{}, bool) {
	switch fpm.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		res, ok := source.GetSetting()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fpm.selector))
	}
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC))
}

// GetDefault returns a default value of the field type
func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fpm.selector))
	}
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) {
	if item != nil {
		switch fpm.selector {
		case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
			delete(item.Setting, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fpm.selector))
		}
	}
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC))
}

// IsLeaf - whether field path is holds simple value
func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fpm.selector))
	}
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue {
	switch fpm.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapValue{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fpm.selector))
	}
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues {
	switch fpm.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		return &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapArrayOfValues{DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fpm.selector))
	}
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue allows storing values for NIC fields according to their type
type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Network_NIC)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NIC field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'NIC' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) AsMacAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) AsVirtualValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) AsProductNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) AsVendorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) AsSubvendorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) AsSettingValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}

// SetTo stores value for selected field for object NIC
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Network_NIC) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_Network_NIC)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress:
		(*target).MacAddress = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual:
		(*target).Virtual = fpv.value.(bool)
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName:
		(*target).ProductName = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor:
		(*target).Vendor = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor:
		(*target).Subvendor = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		(*target).Setting = fpv.value.(map[string]string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_Network_NIC'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetMacAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual:
		leftValue := fpv.value.(bool)
		rightValue := source.GetVirtual()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName:
		leftValue := fpv.value.(string)
		rightValue := source.GetProductName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor:
		leftValue := fpv.value.(string)
		rightValue := source.GetVendor()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor:
		leftValue := fpv.value.(string)
		rightValue := source.GetSubvendor()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC))
}

type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapValue struct {
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in NIC as interface{}
func (fpmv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapValue) AsSettingElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in NIC
func (fpmv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_Network_NIC) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_Network_NIC)
	}
	switch fpmv.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		if (*target).Setting == nil {
			(*target).Setting = make(map[string]string)
		}
		(*target).Setting[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fpmv.selector))
	}
}

func (fpmv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_Network_NIC'.
func (fpmv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) (int, bool) {
	switch fpmv.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		leftValue := fpmv.value.(string)
		rightValue := source.GetSetting()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_Network_NIC: %d", fpmv.selector))
	}
}

func (fpmv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC))
}

// DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue allows storing single item in Path-specific values for NIC according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NIC field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_Network_NIC as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC))
}

// Contains returns a boolean indicating if value that is being held is present in given 'NIC'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues allows storing slice of values for NIC fields according to their type
type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NIC field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues) AsMacAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues) AsVirtualArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues) AsProductNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues) AsVendorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues) AsSubvendorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPathArrayOfValues) AsSettingArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMap
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapArrayOfValues)(nil)

func (fpmaov *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathMapArrayOfValues) AsSettingArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex  DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelector = 1
)

func (s DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex:
		return "index"
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		return "device"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "index":
			return &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex}, nil
		case "device":
			return &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice}, nil
		}
	} else {
		switch fp[0] {
		case "device":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard
func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex:
			values = append(values, source.Index)
		case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
			if source.Device != nil {
				values = append(values, source.Device)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard
func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex:
		return source.GetIndex(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		res := source.GetDevice()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex:
		return int64(0)
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		return (*Device_Status_DeviceInfo_HardwareInformation_PCIDevice)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex:
			item.Index = int64(0)
		case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
			item.Device = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex:
		return &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath: *fp, value: value.(int64)}
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		return &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex:
		return &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath: *fp, values: values.([]int64)}
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		return &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath: *fp, values: values.([]*Device_Status_DeviceInfo_HardwareInformation_PCIDevice)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) Selector() DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) AsDeviceSubPath() (DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard
func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) (values []interface{}) {
	if asPCIDeviceFieldPath, ok := fps.AsDeviceSubPath(); ok {
		values = append(values, asPCIDeviceFieldPath.Get(source.GetDevice())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard
func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		if source.GetDevice() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDevice())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
			fps.subPath.ClearValueRaw(item.Device)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue {
	return &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue allows storing values for GraphicCard fields according to their type
type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GraphicCard field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GraphicCard' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue) AsIndexValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue) AsDeviceValue() (*Device_Status_DeviceInfo_HardwareInformation_PCIDevice, bool) {
	res, ok := fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice)
	return res, ok
}

// SetTo stores value for selected field for object GraphicCard
func (fpv *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex:
		(*target).Index = fpv.value.(int64)
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		(*target).Device = fpv.value.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex:
		leftValue := fpv.value.(int64)
		rightValue := source.GetIndex()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard))
}

type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathValue) AsDevicePathValue() (DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue).SetTo(&(*target).Device)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		return fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathValue).CompareWith(source.GetDevice())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard))
}

// DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue allows storing single item in Path-specific values for GraphicCard according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GraphicCard field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GraphicCard'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathArrayItemValue) AsDevicePathItemValue() (DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'GraphicCard'
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		return fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayItemValue).ContainsValue(source.GetDevice())
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues allows storing slice of values for GraphicCard fields according to their type
type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GraphicCard field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice:
		for _, v := range fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayOfValues) AsIndexArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPathArrayOfValues) AsDeviceArrayOfValues() ([]*Device_Status_DeviceInfo_HardwareInformation_PCIDevice, bool) {
	res, ok := fpaov.values.([]*Device_Status_DeviceInfo_HardwareInformation_PCIDevice)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPathArrayOfValues) AsDevicePathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes   DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelector = 2
)

func (s DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription:
		return "description"
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes:
		return "size_bytes"
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		return "memory_banks"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "description":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription}, nil
		case "size_bytes", "sizeBytes", "size-bytes":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes}, nil
		case "memory_banks", "memoryBanks", "memory-banks":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks}, nil
		}
	} else {
		switch fp[0] {
		case "memory_banks", "memoryBanks", "memory-banks":
			if subpath, err := BuildDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes:
			values = append(values, source.SizeBytes)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
			for _, value := range source.GetMemoryBanks() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes:
		return source.GetSizeBytes(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		res := source.GetMemoryBanks()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes:
		return int64(0)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		return ([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription:
			item.Description = ""
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes:
			item.SizeBytes = int64(0)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
			item.MemoryBanks = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath: *fp, value: value.(int64)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath: *fp, value: value.([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath: *fp, values: values.([]int64)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath: *fp, values: values.([][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayItemValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath: *fp, value: value.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath)(nil)

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) Selector() DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) AsMemoryBanksSubPath() (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) (values []interface{}) {
	if asMemoryBankFieldPath, ok := fps.AsMemoryBanksSubPath(); ok {
		for _, item := range source.GetMemoryBanks() {
			values = append(values, asMemoryBankFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fps.selector))
	}
	return
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory))
}

// GetSingle returns value of selected field from source Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) (interface{}, bool) {
	switch fps.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		if len(source.GetMemoryBanks()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMemoryBanks()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fps.selector))
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory))
}

// GetDefault returns a default value of the field type
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) {
	if item != nil {
		switch fps.selector {
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
			for _, subItem := range item.MemoryBanks {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fps.selector))
		}
	}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue {
	return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues {
	return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue {
	return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue allows storing values for Memory fields according to their type
type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Memory field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Memory' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue) AsSizeBytesValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue) AsMemoryBanksValue() ([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank, bool) {
	res, ok := fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)
	return res, ok
}

// SetTo stores value for selected field for object Memory
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes:
		(*target).SizeBytes = fpv.value.(int64)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		(*target).MemoryBanks = fpv.value.([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSizeBytes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory))
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathValue)(nil)

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathValue) AsMemoryBanksPathValue() (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)
	}
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) (int, bool) {
	switch fpvs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory))
}

// DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue allows storing single item in Path-specific values for Memory according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Memory field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayItemValue) AsMemoryBanksItemValue() (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank, bool) {
	res, ok := fpaiv.value.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)
	return res, ok
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Memory'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathArrayItemValue) AsMemoryBanksPathItemValue() (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Memory'
func (fpaivs *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) bool {
	switch fpaivs.Selector() {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory: %d", fpaivs.Selector()))
	}
}

// DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues allows storing slice of values for Memory fields according to their type
type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Memory field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks:
		for _, v := range fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayOfValues) AsSizeBytesArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPathArrayOfValues) AsMemoryBanksArrayOfValues() ([][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank, bool) {
	res, ok := fpaov.values.([][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)
	return res, ok
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldSubPathArrayOfValues) AsMemoryBanksPathArrayOfValues() (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector
	Get(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) []interface{}
	GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) (interface{}, bool)
	ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)

	// Those methods build corresponding DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector int32

const (
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector = 0
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct     DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector = 1
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor      DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector = 2
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial      DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector = 3
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot        DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector = 4
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes   DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector = 5
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector = 6
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits   DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector = 7
)

func (s DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector) String() string {
	switch s {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription:
		return "description"
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct:
		return "product"
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor:
		return "vendor"
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial:
		return "serial"
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot:
		return "slot"
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes:
		return "size_bytes"
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz:
		return "frequency_hz"
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits:
		return "width_bits"
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank: %d", s))
	}
}

func BuildDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath(fp gotenobject.RawFieldPath) (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "description":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription}, nil
		case "product":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct}, nil
		case "vendor":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor}, nil
		case "serial":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial}, nil
		case "slot":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot}, nil
		case "size_bytes", "sizeBytes", "size-bytes":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes}, nil
		case "frequency_hz", "frequencyHz", "frequency-hz":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz}, nil
		case "width_bits", "widthBits", "width-bits":
			return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank", fp)
}

func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath(rawField string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath(fp)
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath(rawField string) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath struct {
	selector DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath)(nil)

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) Selector() DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) Get(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct:
			values = append(values, source.Product)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor:
			values = append(values, source.Vendor)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial:
			values = append(values, source.Serial)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot:
			values = append(values, source.Slot)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes:
			values = append(values, source.SizeBytes)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz:
			values = append(values, source.FrequencyHz)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits:
			values = append(values, source.WidthBits)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank))
}

// GetSingle returns value pointed by specific field of from source Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) (interface{}, bool) {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct:
		return source.GetProduct(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor:
		return source.GetVendor(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial:
		return source.GetSerial(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot:
		return source.GetSlot(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes:
		return source.GetSizeBytes(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz:
		return source.GetFrequencyHz(), source != nil
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits:
		return source.GetWidthBits(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank))
}

// GetDefault returns a default value of the field type
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot:
		return ""
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes:
		return int64(0)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz:
		return int64(0)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) ClearValue(item *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) {
	if item != nil {
		switch fp.selector {
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription:
			item.Description = ""
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct:
			item.Product = ""
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor:
			item.Vendor = ""
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial:
			item.Serial = ""
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot:
			item.Slot = ""
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes:
			item.SizeBytes = int64(0)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz:
			item.FrequencyHz = int64(0)
		case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits:
			item.WidthBits = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank: %d", fp.selector))
		}
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz ||
		fp.selector == DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) WithIValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue {
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, value: value.(int64)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, value: value.(int64)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues {
	fpaov := &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, values: values.([]int64)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, values: values.([]int64)}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits:
		return &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues{DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank: %d", fp.selector))
	}
}

func (fp *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue allows storing values for MemoryBank fields according to their type
type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue interface {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)
	CompareWith(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) (cmp int, comparable bool)
}

func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MemoryBank field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue {
	fpv, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathValue = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'MemoryBank' as interface{}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) AsProductValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) AsVendorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) AsSerialValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) AsSlotValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) AsSizeBytesValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) AsFrequencyHzValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) AsWidthBitsValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object MemoryBank
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) SetTo(target **Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) {
	if *target == nil {
		*target = new(Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)
	}
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct:
		(*target).Product = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor:
		(*target).Vendor = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial:
		(*target).Serial = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot:
		(*target).Slot = fpv.value.(string)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes:
		(*target).SizeBytes = fpv.value.(int64)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz:
		(*target).FrequencyHz = fpv.value.(int64)
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits:
		(*target).WidthBits = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue' with the value under path in 'Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank'.
func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) CompareWith(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) (int, bool) {
	switch fpv.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct:
		leftValue := fpv.value.(string)
		rightValue := source.GetProduct()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor:
		leftValue := fpv.value.(string)
		rightValue := source.GetVendor()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial:
		leftValue := fpv.value.(string)
		rightValue := source.GetSerial()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot:
		leftValue := fpv.value.(string)
		rightValue := source.GetSlot()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSizeBytes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz:
		leftValue := fpv.value.(int64)
		rightValue := source.GetFrequencyHz()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits:
		leftValue := fpv.value.(int32)
		rightValue := source.GetWidthBits()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank: %d", fpv.selector))
	}
}

func (fpv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank))
}

// DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue allows storing single item in Path-specific values for MemoryBank according to their type
// Present only for array (repeated) types.
type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath
	ContainsValue(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) bool
}

// ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MemoryBank field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue(pathStr, valueStr string) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayItemValue struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath
	value interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayItemValue = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank as interface{}
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayItemValue) GetSingle(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank))
}

// Contains returns a boolean indicating if value that is being held is present in given 'MemoryBank'
func (fpaiv *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayItemValue) ContainsValue(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) bool {
	slice := fpaiv.DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues allows storing slice of values for MemoryBank fields according to their type
type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath
}

func ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MemoryBank field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues), nil
}

func MustParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues struct {
	DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath
	values interface{}
}

var _ DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathArrayOfValues = (*DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues) AsProductArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues) AsVendorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues) AsSerialArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues) AsSlotArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues) AsSizeBytesArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues) AsFrequencyHzArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPathArrayOfValues) AsWidthBitsArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
