// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha/device.proto
// DO NOT EDIT!!!

package device

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/project"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/service_account"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
)

func (o *Device) GotenObjectExt() {}

func (o *Device) MakeFullFieldMask() *Device_FieldMask {
	return FullDevice_FieldMask()
}

func (o *Device) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_FieldMask()
}

func (o *Device) MakeDiffFieldMask(other *Device) *Device_FieldMask {
	if o == nil && other == nil {
		return &Device_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_FieldMask()
	}

	res := &Device_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Device_FieldSubPath{selector: Device_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Device_FieldSubPath{selector: Device_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetStatus().MakeDiffFieldMask(other.GetStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Device_FieldSubPath{selector: Device_FieldPathSelectorStatus, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetPublicListingSpec().MakeDiffFieldMask(other.GetPublicListingSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorPublicListingSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Device_FieldSubPath{selector: Device_FieldPathSelectorPublicListingSpec, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Device_FieldTerminalPath{selector: Device_FieldPathSelectorDisplayName})
	}
	return res
}

func (o *Device) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device))
}

func (o *Device) Clone() *Device {
	if o == nil {
		return nil
	}
	result := &Device{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.Spec = o.Spec.Clone()
	result.Status = o.Status.Clone()
	result.PublicListingSpec = o.PublicListingSpec.Clone()
	result.DisplayName = o.DisplayName
	return result
}

func (o *Device) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device) Merge(source *Device) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(Device_Spec)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetStatus() != nil {
		if o.Status == nil {
			o.Status = new(Device_Status)
		}
		o.Status.Merge(source.GetStatus())
	}
	if source.GetPublicListingSpec() != nil {
		if o.PublicListingSpec == nil {
			o.PublicListingSpec = new(Device_PublicListingSpec)
		}
		o.PublicListingSpec.Merge(source.GetPublicListingSpec())
	}
	o.DisplayName = source.GetDisplayName()
}

func (o *Device) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device))
}

func (o *Device_Spec) GotenObjectExt() {}

func (o *Device_Spec) MakeFullFieldMask() *Device_Spec_FieldMask {
	return FullDevice_Spec_FieldMask()
}

func (o *Device_Spec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_FieldMask()
}

func (o *Device_Spec) MakeDiffFieldMask(other *Device_Spec) *Device_Spec_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_FieldMask()
	}

	res := &Device_Spec_FieldMask{}
	if o.GetServiceAccount().String() != other.GetServiceAccount().String() {
		res.Paths = append(res.Paths, &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorServiceAccount})
	}
	if o.GetOsVersion() != other.GetOsVersion() {
		res.Paths = append(res.Paths, &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorOsVersion})
	}
	{
		subMask := o.GetNetConfig().MakeDiffFieldMask(other.GetNetConfig())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorNetConfig})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpec_FieldSubPath{selector: DeviceSpec_FieldPathSelectorNetConfig, subPath: subpath})
			}
		}
	}
	if o.GetNetConfigMode() != other.GetNetConfigMode() {
		res.Paths = append(res.Paths, &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorNetConfigMode})
	}
	if o.GetOsImageUrl() != other.GetOsImageUrl() {
		res.Paths = append(res.Paths, &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorOsImageUrl})
	}
	{
		subMask := o.GetSshConfig().MakeDiffFieldMask(other.GetSshConfig())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpec_FieldTerminalPath{selector: DeviceSpec_FieldPathSelectorSshConfig})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpec_FieldSubPath{selector: DeviceSpec_FieldPathSelectorSshConfig, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Device_Spec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec))
}

func (o *Device_Spec) Clone() *Device_Spec {
	if o == nil {
		return nil
	}
	result := &Device_Spec{}
	if o.ServiceAccount == nil {
		result.ServiceAccount = nil
	} else if data, err := o.ServiceAccount.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ServiceAccount = &iam_service_account.Reference{}
		if err := result.ServiceAccount.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.OsVersion = o.OsVersion
	result.NetConfig = o.NetConfig.Clone()
	result.NetConfigMode = o.NetConfigMode
	result.OsImageUrl = o.OsImageUrl
	result.SshConfig = o.SshConfig.Clone()
	return result
}

func (o *Device_Spec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec) Merge(source *Device_Spec) {
	if source.GetServiceAccount() != nil {
		if data, err := source.GetServiceAccount().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ServiceAccount = &iam_service_account.Reference{}
			if err := o.ServiceAccount.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ServiceAccount = nil
	}
	o.OsVersion = source.GetOsVersion()
	if source.GetNetConfig() != nil {
		if o.NetConfig == nil {
			o.NetConfig = new(Device_Spec_NetworkConfig)
		}
		o.NetConfig.Merge(source.GetNetConfig())
	}
	o.NetConfigMode = source.GetNetConfigMode()
	o.OsImageUrl = source.GetOsImageUrl()
	if source.GetSshConfig() != nil {
		if o.SshConfig == nil {
			o.SshConfig = new(Device_Spec_SSHConfig)
		}
		o.SshConfig.Merge(source.GetSshConfig())
	}
}

func (o *Device_Spec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec))
}

func (o *Device_Status) GotenObjectExt() {}

func (o *Device_Status) MakeFullFieldMask() *Device_Status_FieldMask {
	return FullDevice_Status_FieldMask()
}

func (o *Device_Status) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_FieldMask()
}

func (o *Device_Status) MakeDiffFieldMask(other *Device_Status) *Device_Status_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_FieldMask()
	}

	res := &Device_Status_FieldMask{}

	if len(o.GetAddresses()) == len(other.GetAddresses()) {
		for i, lValue := range o.GetAddresses() {
			rValue := other.GetAddresses()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceStatus_FieldTerminalPath{selector: DeviceStatus_FieldPathSelectorAddresses})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatus_FieldTerminalPath{selector: DeviceStatus_FieldPathSelectorAddresses})
	}

	if len(o.GetConditions()) == len(other.GetConditions()) {
		for i, lValue := range o.GetConditions() {
			rValue := other.GetConditions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceStatus_FieldTerminalPath{selector: DeviceStatus_FieldPathSelectorConditions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatus_FieldTerminalPath{selector: DeviceStatus_FieldPathSelectorConditions})
	}
	{
		subMask := o.GetDeviceInfo().MakeDiffFieldMask(other.GetDeviceInfo())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatus_FieldTerminalPath{selector: DeviceStatus_FieldPathSelectorDeviceInfo})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatus_FieldSubPath{selector: DeviceStatus_FieldPathSelectorDeviceInfo, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Device_Status) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status))
}

func (o *Device_Status) Clone() *Device_Status {
	if o == nil {
		return nil
	}
	result := &Device_Status{}
	result.Addresses = make([]*Device_Status_Address, len(o.Addresses))
	for i, sourceValue := range o.Addresses {
		result.Addresses[i] = sourceValue.Clone()
	}
	result.Conditions = make([]*Device_Status_Condition, len(o.Conditions))
	for i, sourceValue := range o.Conditions {
		result.Conditions[i] = sourceValue.Clone()
	}
	result.DeviceInfo = o.DeviceInfo.Clone()
	return result
}

func (o *Device_Status) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status) Merge(source *Device_Status) {
	for _, sourceValue := range source.GetAddresses() {
		exists := false
		for _, currentValue := range o.Addresses {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Status_Address
			if sourceValue != nil {
				newDstElement = new(Device_Status_Address)
				newDstElement.Merge(sourceValue)
			}
			o.Addresses = append(o.Addresses, newDstElement)
		}
	}

	for _, sourceValue := range source.GetConditions() {
		exists := false
		for _, currentValue := range o.Conditions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Status_Condition
			if sourceValue != nil {
				newDstElement = new(Device_Status_Condition)
				newDstElement.Merge(sourceValue)
			}
			o.Conditions = append(o.Conditions, newDstElement)
		}
	}

	if source.GetDeviceInfo() != nil {
		if o.DeviceInfo == nil {
			o.DeviceInfo = new(Device_Status_DeviceInfo)
		}
		o.DeviceInfo.Merge(source.GetDeviceInfo())
	}
}

func (o *Device_Status) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status))
}

func (o *Device_PublicListingSpec) GotenObjectExt() {}

func (o *Device_PublicListingSpec) MakeFullFieldMask() *Device_PublicListingSpec_FieldMask {
	return FullDevice_PublicListingSpec_FieldMask()
}

func (o *Device_PublicListingSpec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_PublicListingSpec_FieldMask()
}

func (o *Device_PublicListingSpec) MakeDiffFieldMask(other *Device_PublicListingSpec) *Device_PublicListingSpec_FieldMask {
	if o == nil && other == nil {
		return &Device_PublicListingSpec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_PublicListingSpec_FieldMask()
	}

	res := &Device_PublicListingSpec_FieldMask{}
	if o.GetEnabled() != other.GetEnabled() {
		res.Paths = append(res.Paths, &DevicePublicListingSpec_FieldTerminalPath{selector: DevicePublicListingSpec_FieldPathSelectorEnabled})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &DevicePublicListingSpec_FieldTerminalPath{selector: DevicePublicListingSpec_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *Device_PublicListingSpec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_PublicListingSpec))
}

func (o *Device_PublicListingSpec) Clone() *Device_PublicListingSpec {
	if o == nil {
		return nil
	}
	result := &Device_PublicListingSpec{}
	result.Enabled = o.Enabled
	result.FieldMask = proto.Clone(o.FieldMask).(*Device_FieldMask)
	return result
}

func (o *Device_PublicListingSpec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_PublicListingSpec) Merge(source *Device_PublicListingSpec) {
	o.Enabled = source.GetEnabled()
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(Device_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *Device_PublicListingSpec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_PublicListingSpec))
}

func (o *Device_Spec_NetworkConfig) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig) MakeFullFieldMask() *Device_Spec_NetworkConfig_FieldMask {
	return FullDevice_Spec_NetworkConfig_FieldMask()
}

func (o *Device_Spec_NetworkConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_FieldMask()
}

func (o *Device_Spec_NetworkConfig) MakeDiffFieldMask(other *Device_Spec_NetworkConfig) *Device_Spec_NetworkConfig_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_FieldMask{}
	if o.GetVersion() != other.GetVersion() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorVersion})
	}

	if len(o.GetEthernets()) == len(other.GetEthernets()) {
		for i, lValue := range o.GetEthernets() {
			rValue := other.GetEthernets()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorEthernets})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorEthernets})
	}

	if len(o.GetWifis()) == len(other.GetWifis()) {
		for i, lValue := range o.GetWifis() {
			rValue := other.GetWifis()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorWifis})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorWifis})
	}

	if len(o.GetBridges()) == len(other.GetBridges()) {
		for i, lValue := range o.GetBridges() {
			rValue := other.GetBridges()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorBridges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorBridges})
	}

	if len(o.GetBonds()) == len(other.GetBonds()) {
		for i, lValue := range o.GetBonds() {
			rValue := other.GetBonds()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorBonds})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorBonds})
	}

	if len(o.GetTunnels()) == len(other.GetTunnels()) {
		for i, lValue := range o.GetTunnels() {
			rValue := other.GetTunnels()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorTunnels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorTunnels})
	}

	if len(o.GetVlans()) == len(other.GetVlans()) {
		for i, lValue := range o.GetVlans() {
			rValue := other.GetVlans()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorVlans})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfig_FieldTerminalPath{selector: DeviceSpecNetworkConfig_FieldPathSelectorVlans})
	}
	return res
}

func (o *Device_Spec_NetworkConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig))
}

func (o *Device_Spec_NetworkConfig) Clone() *Device_Spec_NetworkConfig {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig{}
	result.Version = o.Version
	result.Ethernets = make([]*Device_Spec_NetworkConfig_EthOpts, len(o.Ethernets))
	for i, sourceValue := range o.Ethernets {
		result.Ethernets[i] = sourceValue.Clone()
	}
	result.Wifis = make([]*Device_Spec_NetworkConfig_WifiOpts, len(o.Wifis))
	for i, sourceValue := range o.Wifis {
		result.Wifis[i] = sourceValue.Clone()
	}
	result.Bridges = make([]*Device_Spec_NetworkConfig_BridgesOpts, len(o.Bridges))
	for i, sourceValue := range o.Bridges {
		result.Bridges[i] = sourceValue.Clone()
	}
	result.Bonds = make([]*Device_Spec_NetworkConfig_BondsOpts, len(o.Bonds))
	for i, sourceValue := range o.Bonds {
		result.Bonds[i] = sourceValue.Clone()
	}
	result.Tunnels = make([]*Device_Spec_NetworkConfig_TunnelsOpts, len(o.Tunnels))
	for i, sourceValue := range o.Tunnels {
		result.Tunnels[i] = sourceValue.Clone()
	}
	result.Vlans = make([]*Device_Spec_NetworkConfig_VlansOpts, len(o.Vlans))
	for i, sourceValue := range o.Vlans {
		result.Vlans[i] = sourceValue.Clone()
	}
	return result
}

func (o *Device_Spec_NetworkConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig) Merge(source *Device_Spec_NetworkConfig) {
	o.Version = source.GetVersion()
	for _, sourceValue := range source.GetEthernets() {
		exists := false
		for _, currentValue := range o.Ethernets {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Spec_NetworkConfig_EthOpts
			if sourceValue != nil {
				newDstElement = new(Device_Spec_NetworkConfig_EthOpts)
				newDstElement.Merge(sourceValue)
			}
			o.Ethernets = append(o.Ethernets, newDstElement)
		}
	}

	for _, sourceValue := range source.GetWifis() {
		exists := false
		for _, currentValue := range o.Wifis {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Spec_NetworkConfig_WifiOpts
			if sourceValue != nil {
				newDstElement = new(Device_Spec_NetworkConfig_WifiOpts)
				newDstElement.Merge(sourceValue)
			}
			o.Wifis = append(o.Wifis, newDstElement)
		}
	}

	for _, sourceValue := range source.GetBridges() {
		exists := false
		for _, currentValue := range o.Bridges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Spec_NetworkConfig_BridgesOpts
			if sourceValue != nil {
				newDstElement = new(Device_Spec_NetworkConfig_BridgesOpts)
				newDstElement.Merge(sourceValue)
			}
			o.Bridges = append(o.Bridges, newDstElement)
		}
	}

	for _, sourceValue := range source.GetBonds() {
		exists := false
		for _, currentValue := range o.Bonds {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Spec_NetworkConfig_BondsOpts
			if sourceValue != nil {
				newDstElement = new(Device_Spec_NetworkConfig_BondsOpts)
				newDstElement.Merge(sourceValue)
			}
			o.Bonds = append(o.Bonds, newDstElement)
		}
	}

	for _, sourceValue := range source.GetTunnels() {
		exists := false
		for _, currentValue := range o.Tunnels {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Spec_NetworkConfig_TunnelsOpts
			if sourceValue != nil {
				newDstElement = new(Device_Spec_NetworkConfig_TunnelsOpts)
				newDstElement.Merge(sourceValue)
			}
			o.Tunnels = append(o.Tunnels, newDstElement)
		}
	}

	for _, sourceValue := range source.GetVlans() {
		exists := false
		for _, currentValue := range o.Vlans {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Spec_NetworkConfig_VlansOpts
			if sourceValue != nil {
				newDstElement = new(Device_Spec_NetworkConfig_VlansOpts)
				newDstElement.Merge(sourceValue)
			}
			o.Vlans = append(o.Vlans, newDstElement)
		}
	}

}

func (o *Device_Spec_NetworkConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig))
}

func (o *Device_Spec_SSHConfig) GotenObjectExt() {}

func (o *Device_Spec_SSHConfig) MakeFullFieldMask() *Device_Spec_SSHConfig_FieldMask {
	return FullDevice_Spec_SSHConfig_FieldMask()
}

func (o *Device_Spec_SSHConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_SSHConfig_FieldMask()
}

func (o *Device_Spec_SSHConfig) MakeDiffFieldMask(other *Device_Spec_SSHConfig) *Device_Spec_SSHConfig_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_SSHConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_SSHConfig_FieldMask()
	}

	res := &Device_Spec_SSHConfig_FieldMask{}
	if o.GetDisableSshServer() != other.GetDisableSshServer() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorDisableSshServer})
	}
	if o.GetDisableSshPassword() != other.GetDisableSshPassword() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorDisableSshPassword})
	}

	if len(o.GetSshAuthorized()) == len(other.GetSshAuthorized()) {
		for i, lValue := range o.GetSshAuthorized() {
			rValue := other.GetSshAuthorized()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorSshAuthorized})
	}

	if len(o.GetIpAllowList()) == len(other.GetIpAllowList()) {
		for i, lValue := range o.GetIpAllowList() {
			rValue := other.GetIpAllowList()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorIpAllowList})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorIpAllowList})
	}

	if len(o.GetIpDenyList()) == len(other.GetIpDenyList()) {
		for i, lValue := range o.GetIpDenyList() {
			rValue := other.GetIpDenyList()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorIpDenyList})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorIpDenyList})
	}
	if !proto.Equal(o.GetRejectPeriod(), other.GetRejectPeriod()) {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorRejectPeriod})
	}
	if o.GetDisableSshAuthkey() != other.GetDisableSshAuthkey() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfig_FieldTerminalPath{selector: DeviceSpecSSHConfig_FieldPathSelectorDisableSshAuthkey})
	}
	return res
}

func (o *Device_Spec_SSHConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_SSHConfig))
}

func (o *Device_Spec_SSHConfig) Clone() *Device_Spec_SSHConfig {
	if o == nil {
		return nil
	}
	result := &Device_Spec_SSHConfig{}
	result.DisableSshServer = o.DisableSshServer
	result.DisableSshPassword = o.DisableSshPassword
	result.SshAuthorized = make([]*Device_Spec_SSHConfig_AuthKey, len(o.SshAuthorized))
	for i, sourceValue := range o.SshAuthorized {
		result.SshAuthorized[i] = sourceValue.Clone()
	}
	result.IpAllowList = make([]string, len(o.IpAllowList))
	for i, sourceValue := range o.IpAllowList {
		result.IpAllowList[i] = sourceValue
	}
	result.IpDenyList = make([]string, len(o.IpDenyList))
	for i, sourceValue := range o.IpDenyList {
		result.IpDenyList[i] = sourceValue
	}
	result.RejectPeriod = proto.Clone(o.RejectPeriod).(*duration.Duration)
	result.DisableSshAuthkey = o.DisableSshAuthkey
	return result
}

func (o *Device_Spec_SSHConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_SSHConfig) Merge(source *Device_Spec_SSHConfig) {
	o.DisableSshServer = source.GetDisableSshServer()
	o.DisableSshPassword = source.GetDisableSshPassword()
	for _, sourceValue := range source.GetSshAuthorized() {
		exists := false
		for _, currentValue := range o.SshAuthorized {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Spec_SSHConfig_AuthKey
			if sourceValue != nil {
				newDstElement = new(Device_Spec_SSHConfig_AuthKey)
				newDstElement.Merge(sourceValue)
			}
			o.SshAuthorized = append(o.SshAuthorized, newDstElement)
		}
	}

	for _, sourceValue := range source.GetIpAllowList() {
		exists := false
		for _, currentValue := range o.IpAllowList {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.IpAllowList = append(o.IpAllowList, newDstElement)
		}
	}

	for _, sourceValue := range source.GetIpDenyList() {
		exists := false
		for _, currentValue := range o.IpDenyList {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.IpDenyList = append(o.IpDenyList, newDstElement)
		}
	}

	if source.GetRejectPeriod() != nil {
		if o.RejectPeriod == nil {
			o.RejectPeriod = new(duration.Duration)
		}
		proto.Merge(o.RejectPeriod, source.GetRejectPeriod())
	}
	o.DisableSshAuthkey = source.GetDisableSshAuthkey()
}

func (o *Device_Spec_SSHConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_SSHConfig))
}

func (o *Device_Spec_NetworkConfig_CommonOpts) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_CommonOpts) MakeFullFieldMask() *Device_Spec_NetworkConfig_CommonOpts_FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_CommonOpts) *Device_Spec_NetworkConfig_CommonOpts_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_CommonOpts_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_CommonOpts_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_CommonOpts_FieldMask{}
	if o.GetRenderer() != other.GetRenderer() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRenderer})
	}
	if o.GetDhcp4() != other.GetDhcp4() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4})
	}
	if o.GetDhcp6() != other.GetDhcp6() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6})
	}
	if o.GetIpv6Privacy() != other.GetIpv6Privacy() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorIpv6Privacy})
	}

	if len(o.GetLinkLocal()) == len(other.GetLinkLocal()) {
		for i, lValue := range o.GetLinkLocal() {
			rValue := other.GetLinkLocal()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorLinkLocal})
	}
	if o.GetCritical() != other.GetCritical() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorCritical})
	}
	if o.GetDhcpIdentifier() != other.GetDhcpIdentifier() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcpIdentifier})
	}
	{
		subMask := o.GetDhcp4Overrides().MakeDiffFieldMask(other.GetDhcp4Overrides())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldSubPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp4Overrides, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetDhcp6Overrides().MakeDiffFieldMask(other.GetDhcp6Overrides())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldSubPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorDhcp6Overrides, subPath: subpath})
			}
		}
	}
	if o.GetAcceptRa() != other.GetAcceptRa() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAcceptRa})
	}

	if len(o.GetAddresses()) == len(other.GetAddresses()) {
		for i, lValue := range o.GetAddresses() {
			rValue := other.GetAddresses()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAddresses})
	}
	if o.GetGateway4() != other.GetGateway4() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway4})
	}
	if o.GetGateway6() != other.GetGateway6() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorGateway6})
	}
	{
		subMask := o.GetNameservers().MakeDiffFieldMask(other.GetNameservers())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldSubPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorNameservers, subPath: subpath})
			}
		}
	}
	if o.GetMacaddress() != other.GetMacaddress() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMacaddress})
	}
	if o.GetMtu() != other.GetMtu() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorMtu})
	}
	if o.GetOptional() != other.GetOptional() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptional})
	}

	if len(o.GetOptionalAddresses()) == len(other.GetOptionalAddresses()) {
		for i, lValue := range o.GetOptionalAddresses() {
			rValue := other.GetOptionalAddresses()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorOptionalAddresses})
	}

	if len(o.GetRoutes()) == len(other.GetRoutes()) {
		for i, lValue := range o.GetRoutes() {
			rValue := other.GetRoutes()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutes})
	}
	{
		subMask := o.GetRoutingPolicy().MakeDiffFieldMask(other.GetRoutingPolicy())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldSubPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorRoutingPolicy, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetAuth().MakeDiffFieldMask(other.GetAuth())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOpts_FieldSubPath{selector: DeviceSpecNetworkConfigCommonOpts_FieldPathSelectorAuth, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Device_Spec_NetworkConfig_CommonOpts) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_CommonOpts))
}

func (o *Device_Spec_NetworkConfig_CommonOpts) Clone() *Device_Spec_NetworkConfig_CommonOpts {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_CommonOpts{}
	result.Renderer = o.Renderer
	result.Dhcp4 = o.Dhcp4
	result.Dhcp6 = o.Dhcp6
	result.Ipv6Privacy = o.Ipv6Privacy
	result.LinkLocal = make([]string, len(o.LinkLocal))
	for i, sourceValue := range o.LinkLocal {
		result.LinkLocal[i] = sourceValue
	}
	result.Critical = o.Critical
	result.DhcpIdentifier = o.DhcpIdentifier
	result.Dhcp4Overrides = o.Dhcp4Overrides.Clone()
	result.Dhcp6Overrides = o.Dhcp6Overrides.Clone()
	result.AcceptRa = o.AcceptRa
	result.Addresses = make([]string, len(o.Addresses))
	for i, sourceValue := range o.Addresses {
		result.Addresses[i] = sourceValue
	}
	result.Gateway4 = o.Gateway4
	result.Gateway6 = o.Gateway6
	result.Nameservers = o.Nameservers.Clone()
	result.Macaddress = o.Macaddress
	result.Mtu = o.Mtu
	result.Optional = o.Optional
	result.OptionalAddresses = make([]string, len(o.OptionalAddresses))
	for i, sourceValue := range o.OptionalAddresses {
		result.OptionalAddresses[i] = sourceValue
	}
	result.Routes = make([]*Device_Spec_NetworkConfig_CommonOpts_Routes, len(o.Routes))
	for i, sourceValue := range o.Routes {
		result.Routes[i] = sourceValue.Clone()
	}
	result.RoutingPolicy = o.RoutingPolicy.Clone()
	result.Auth = o.Auth.Clone()
	return result
}

func (o *Device_Spec_NetworkConfig_CommonOpts) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_CommonOpts) Merge(source *Device_Spec_NetworkConfig_CommonOpts) {
	o.Renderer = source.GetRenderer()
	o.Dhcp4 = source.GetDhcp4()
	o.Dhcp6 = source.GetDhcp6()
	o.Ipv6Privacy = source.GetIpv6Privacy()
	for _, sourceValue := range source.GetLinkLocal() {
		exists := false
		for _, currentValue := range o.LinkLocal {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.LinkLocal = append(o.LinkLocal, newDstElement)
		}
	}

	o.Critical = source.GetCritical()
	o.DhcpIdentifier = source.GetDhcpIdentifier()
	if source.GetDhcp4Overrides() != nil {
		if o.Dhcp4Overrides == nil {
			o.Dhcp4Overrides = new(Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)
		}
		o.Dhcp4Overrides.Merge(source.GetDhcp4Overrides())
	}
	if source.GetDhcp6Overrides() != nil {
		if o.Dhcp6Overrides == nil {
			o.Dhcp6Overrides = new(Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)
		}
		o.Dhcp6Overrides.Merge(source.GetDhcp6Overrides())
	}
	o.AcceptRa = source.GetAcceptRa()
	for _, sourceValue := range source.GetAddresses() {
		exists := false
		for _, currentValue := range o.Addresses {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Addresses = append(o.Addresses, newDstElement)
		}
	}

	o.Gateway4 = source.GetGateway4()
	o.Gateway6 = source.GetGateway6()
	if source.GetNameservers() != nil {
		if o.Nameservers == nil {
			o.Nameservers = new(Device_Spec_NetworkConfig_CommonOpts_Nameservers)
		}
		o.Nameservers.Merge(source.GetNameservers())
	}
	o.Macaddress = source.GetMacaddress()
	o.Mtu = source.GetMtu()
	o.Optional = source.GetOptional()
	for _, sourceValue := range source.GetOptionalAddresses() {
		exists := false
		for _, currentValue := range o.OptionalAddresses {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.OptionalAddresses = append(o.OptionalAddresses, newDstElement)
		}
	}

	for _, sourceValue := range source.GetRoutes() {
		exists := false
		for _, currentValue := range o.Routes {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Spec_NetworkConfig_CommonOpts_Routes
			if sourceValue != nil {
				newDstElement = new(Device_Spec_NetworkConfig_CommonOpts_Routes)
				newDstElement.Merge(sourceValue)
			}
			o.Routes = append(o.Routes, newDstElement)
		}
	}

	if source.GetRoutingPolicy() != nil {
		if o.RoutingPolicy == nil {
			o.RoutingPolicy = new(Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)
		}
		o.RoutingPolicy.Merge(source.GetRoutingPolicy())
	}
	if source.GetAuth() != nil {
		if o.Auth == nil {
			o.Auth = new(Device_Spec_NetworkConfig_CommonOpts_Auth)
		}
		o.Auth.Merge(source.GetAuth())
	}
}

func (o *Device_Spec_NetworkConfig_CommonOpts) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_CommonOpts))
}

func (o *Device_Spec_NetworkConfig_EthOpts) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_EthOpts) MakeFullFieldMask() *Device_Spec_NetworkConfig_EthOpts_FieldMask {
	return FullDevice_Spec_NetworkConfig_EthOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_EthOpts) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_EthOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_EthOpts) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_EthOpts) *Device_Spec_NetworkConfig_EthOpts_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_EthOpts_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_EthOpts_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_EthOpts_FieldMask{}
	{
		subMask := o.GetMatch().MakeDiffFieldMask(other.GetMatch())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigEthOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigEthOpts_FieldSubPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorMatch, subPath: subpath})
			}
		}
	}
	if o.GetSetName() != other.GetSetName() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigEthOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorSetName})
	}
	if o.GetWakeonlan() != other.GetWakeonlan() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigEthOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorWakeonlan})
	}
	{
		subMask := o.GetOpts().MakeDiffFieldMask(other.GetOpts())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigEthOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigEthOpts_FieldSubPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorOpts, subPath: subpath})
			}
		}
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigEthOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOpts_FieldPathSelectorName})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_EthOpts) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_EthOpts))
}

func (o *Device_Spec_NetworkConfig_EthOpts) Clone() *Device_Spec_NetworkConfig_EthOpts {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_EthOpts{}
	result.Match = o.Match.Clone()
	result.SetName = o.SetName
	result.Wakeonlan = o.Wakeonlan
	result.Opts = o.Opts.Clone()
	result.Name = o.Name
	return result
}

func (o *Device_Spec_NetworkConfig_EthOpts) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_EthOpts) Merge(source *Device_Spec_NetworkConfig_EthOpts) {
	if source.GetMatch() != nil {
		if o.Match == nil {
			o.Match = new(Device_Spec_NetworkConfig_EthOpts_Match)
		}
		o.Match.Merge(source.GetMatch())
	}
	o.SetName = source.GetSetName()
	o.Wakeonlan = source.GetWakeonlan()
	if source.GetOpts() != nil {
		if o.Opts == nil {
			o.Opts = new(Device_Spec_NetworkConfig_CommonOpts)
		}
		o.Opts.Merge(source.GetOpts())
	}
	o.Name = source.GetName()
}

func (o *Device_Spec_NetworkConfig_EthOpts) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_EthOpts))
}

func (o *Device_Spec_NetworkConfig_WifiOpts) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_WifiOpts) MakeFullFieldMask() *Device_Spec_NetworkConfig_WifiOpts_FieldMask {
	return FullDevice_Spec_NetworkConfig_WifiOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_WifiOpts) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_WifiOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_WifiOpts) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_WifiOpts) *Device_Spec_NetworkConfig_WifiOpts_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_WifiOpts_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_WifiOpts_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_WifiOpts_FieldMask{}
	{
		subMask := o.GetMatch().MakeDiffFieldMask(other.GetMatch())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOpts_FieldSubPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorMatch, subPath: subpath})
			}
		}
	}
	if o.GetSetName() != other.GetSetName() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorSetName})
	}
	if o.GetWakeonlan() != other.GetWakeonlan() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorWakeonlan})
	}
	{
		subMask := o.GetOpts().MakeDiffFieldMask(other.GetOpts())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOpts_FieldSubPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorOpts, subPath: subpath})
			}
		}
	}

	if len(o.GetAccessPoints()) == len(other.GetAccessPoints()) {
		for i, lValue := range o.GetAccessPoints() {
			rValue := other.GetAccessPoints()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorAccessPoints})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOpts_FieldPathSelectorName})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_WifiOpts) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_WifiOpts))
}

func (o *Device_Spec_NetworkConfig_WifiOpts) Clone() *Device_Spec_NetworkConfig_WifiOpts {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_WifiOpts{}
	result.Match = o.Match.Clone()
	result.SetName = o.SetName
	result.Wakeonlan = o.Wakeonlan
	result.Opts = o.Opts.Clone()
	result.AccessPoints = make([]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint, len(o.AccessPoints))
	for i, sourceValue := range o.AccessPoints {
		result.AccessPoints[i] = sourceValue.Clone()
	}
	result.Name = o.Name
	return result
}

func (o *Device_Spec_NetworkConfig_WifiOpts) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_WifiOpts) Merge(source *Device_Spec_NetworkConfig_WifiOpts) {
	if source.GetMatch() != nil {
		if o.Match == nil {
			o.Match = new(Device_Spec_NetworkConfig_WifiOpts_Match)
		}
		o.Match.Merge(source.GetMatch())
	}
	o.SetName = source.GetSetName()
	o.Wakeonlan = source.GetWakeonlan()
	if source.GetOpts() != nil {
		if o.Opts == nil {
			o.Opts = new(Device_Spec_NetworkConfig_CommonOpts)
		}
		o.Opts.Merge(source.GetOpts())
	}
	for _, sourceValue := range source.GetAccessPoints() {
		exists := false
		for _, currentValue := range o.AccessPoints {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Spec_NetworkConfig_WifiOpts_AccessPoint
			if sourceValue != nil {
				newDstElement = new(Device_Spec_NetworkConfig_WifiOpts_AccessPoint)
				newDstElement.Merge(sourceValue)
			}
			o.AccessPoints = append(o.AccessPoints, newDstElement)
		}
	}

	o.Name = source.GetName()
}

func (o *Device_Spec_NetworkConfig_WifiOpts) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_WifiOpts))
}

func (o *Device_Spec_NetworkConfig_BridgesOpts) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_BridgesOpts) MakeFullFieldMask() *Device_Spec_NetworkConfig_BridgesOpts_FieldMask {
	return FullDevice_Spec_NetworkConfig_BridgesOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_BridgesOpts) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_BridgesOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_BridgesOpts) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_BridgesOpts) *Device_Spec_NetworkConfig_BridgesOpts_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_BridgesOpts_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_BridgesOpts_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_BridgesOpts_FieldMask{}
	{
		subMask := o.GetOpts().MakeDiffFieldMask(other.GetOpts())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOpts_FieldSubPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorOpts, subPath: subpath})
			}
		}
	}

	if len(o.GetInterfaces()) == len(other.GetInterfaces()) {
		for i, lValue := range o.GetInterfaces() {
			rValue := other.GetInterfaces()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorInterfaces})
	}
	{
		subMask := o.GetParameters().MakeDiffFieldMask(other.GetParameters())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOpts_FieldSubPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorParameters, subPath: subpath})
			}
		}
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOpts_FieldPathSelectorName})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_BridgesOpts) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_BridgesOpts))
}

func (o *Device_Spec_NetworkConfig_BridgesOpts) Clone() *Device_Spec_NetworkConfig_BridgesOpts {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_BridgesOpts{}
	result.Opts = o.Opts.Clone()
	result.Interfaces = make([]string, len(o.Interfaces))
	for i, sourceValue := range o.Interfaces {
		result.Interfaces[i] = sourceValue
	}
	result.Parameters = o.Parameters.Clone()
	result.Name = o.Name
	return result
}

func (o *Device_Spec_NetworkConfig_BridgesOpts) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_BridgesOpts) Merge(source *Device_Spec_NetworkConfig_BridgesOpts) {
	if source.GetOpts() != nil {
		if o.Opts == nil {
			o.Opts = new(Device_Spec_NetworkConfig_CommonOpts)
		}
		o.Opts.Merge(source.GetOpts())
	}
	for _, sourceValue := range source.GetInterfaces() {
		exists := false
		for _, currentValue := range o.Interfaces {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Interfaces = append(o.Interfaces, newDstElement)
		}
	}

	if source.GetParameters() != nil {
		if o.Parameters == nil {
			o.Parameters = new(Device_Spec_NetworkConfig_BridgesOpts_Parameters)
		}
		o.Parameters.Merge(source.GetParameters())
	}
	o.Name = source.GetName()
}

func (o *Device_Spec_NetworkConfig_BridgesOpts) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_BridgesOpts))
}

func (o *Device_Spec_NetworkConfig_BondsOpts) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_BondsOpts) MakeFullFieldMask() *Device_Spec_NetworkConfig_BondsOpts_FieldMask {
	return FullDevice_Spec_NetworkConfig_BondsOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_BondsOpts) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_BondsOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_BondsOpts) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_BondsOpts) *Device_Spec_NetworkConfig_BondsOpts_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_BondsOpts_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_BondsOpts_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_BondsOpts_FieldMask{}
	{
		subMask := o.GetOpts().MakeDiffFieldMask(other.GetOpts())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOpts_FieldSubPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorOpts, subPath: subpath})
			}
		}
	}

	if len(o.GetInterfaces()) == len(other.GetInterfaces()) {
		for i, lValue := range o.GetInterfaces() {
			rValue := other.GetInterfaces()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorInterfaces})
	}
	{
		subMask := o.GetParameters().MakeDiffFieldMask(other.GetParameters())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOpts_FieldSubPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorParameters, subPath: subpath})
			}
		}
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOpts_FieldPathSelectorName})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_BondsOpts) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_BondsOpts))
}

func (o *Device_Spec_NetworkConfig_BondsOpts) Clone() *Device_Spec_NetworkConfig_BondsOpts {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_BondsOpts{}
	result.Opts = o.Opts.Clone()
	result.Interfaces = make([]string, len(o.Interfaces))
	for i, sourceValue := range o.Interfaces {
		result.Interfaces[i] = sourceValue
	}
	result.Parameters = o.Parameters.Clone()
	result.Name = o.Name
	return result
}

func (o *Device_Spec_NetworkConfig_BondsOpts) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_BondsOpts) Merge(source *Device_Spec_NetworkConfig_BondsOpts) {
	if source.GetOpts() != nil {
		if o.Opts == nil {
			o.Opts = new(Device_Spec_NetworkConfig_CommonOpts)
		}
		o.Opts.Merge(source.GetOpts())
	}
	for _, sourceValue := range source.GetInterfaces() {
		exists := false
		for _, currentValue := range o.Interfaces {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Interfaces = append(o.Interfaces, newDstElement)
		}
	}

	if source.GetParameters() != nil {
		if o.Parameters == nil {
			o.Parameters = new(Device_Spec_NetworkConfig_BondsOpts_Parameters)
		}
		o.Parameters.Merge(source.GetParameters())
	}
	o.Name = source.GetName()
}

func (o *Device_Spec_NetworkConfig_BondsOpts) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_BondsOpts))
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_TunnelsOpts) MakeFullFieldMask() *Device_Spec_NetworkConfig_TunnelsOpts_FieldMask {
	return FullDevice_Spec_NetworkConfig_TunnelsOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_TunnelsOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_TunnelsOpts) *Device_Spec_NetworkConfig_TunnelsOpts_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_TunnelsOpts_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_TunnelsOpts_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_TunnelsOpts_FieldMask{}
	{
		subMask := o.GetOpts().MakeDiffFieldMask(other.GetOpts())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigTunnelsOpts_FieldSubPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorOpts, subPath: subpath})
			}
		}
	}
	if o.GetMode() != other.GetMode() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorMode})
	}
	if o.GetLocal() != other.GetLocal() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorLocal})
	}
	if o.GetRemote() != other.GetRemote() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorRemote})
	}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorKey})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigTunnelsOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOpts_FieldPathSelectorName})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_TunnelsOpts))
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts) Clone() *Device_Spec_NetworkConfig_TunnelsOpts {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_TunnelsOpts{}
	result.Opts = o.Opts.Clone()
	result.Mode = o.Mode
	result.Local = o.Local
	result.Remote = o.Remote
	result.Key = o.Key
	result.Name = o.Name
	return result
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts) Merge(source *Device_Spec_NetworkConfig_TunnelsOpts) {
	if source.GetOpts() != nil {
		if o.Opts == nil {
			o.Opts = new(Device_Spec_NetworkConfig_CommonOpts)
		}
		o.Opts.Merge(source.GetOpts())
	}
	o.Mode = source.GetMode()
	o.Local = source.GetLocal()
	o.Remote = source.GetRemote()
	o.Key = source.GetKey()
	o.Name = source.GetName()
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_TunnelsOpts))
}

func (o *Device_Spec_NetworkConfig_VlansOpts) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_VlansOpts) MakeFullFieldMask() *Device_Spec_NetworkConfig_VlansOpts_FieldMask {
	return FullDevice_Spec_NetworkConfig_VlansOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_VlansOpts) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_VlansOpts_FieldMask()
}

func (o *Device_Spec_NetworkConfig_VlansOpts) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_VlansOpts) *Device_Spec_NetworkConfig_VlansOpts_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_VlansOpts_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_VlansOpts_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_VlansOpts_FieldMask{}
	{
		subMask := o.GetOpts().MakeDiffFieldMask(other.GetOpts())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigVlansOpts_FieldSubPath{selector: DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorOpts, subPath: subpath})
			}
		}
	}
	if o.GetId() != other.GetId() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorId})
	}
	if o.GetLink() != other.GetLink() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorLink})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigVlansOpts_FieldTerminalPath{selector: DeviceSpecNetworkConfigVlansOpts_FieldPathSelectorName})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_VlansOpts) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_VlansOpts))
}

func (o *Device_Spec_NetworkConfig_VlansOpts) Clone() *Device_Spec_NetworkConfig_VlansOpts {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_VlansOpts{}
	result.Opts = o.Opts.Clone()
	result.Id = o.Id
	result.Link = o.Link
	result.Name = o.Name
	return result
}

func (o *Device_Spec_NetworkConfig_VlansOpts) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_VlansOpts) Merge(source *Device_Spec_NetworkConfig_VlansOpts) {
	if source.GetOpts() != nil {
		if o.Opts == nil {
			o.Opts = new(Device_Spec_NetworkConfig_CommonOpts)
		}
		o.Opts.Merge(source.GetOpts())
	}
	o.Id = source.GetId()
	o.Link = source.GetLink()
	o.Name = source.GetName()
}

func (o *Device_Spec_NetworkConfig_VlansOpts) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_VlansOpts))
}

func (o *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) MakeFullFieldMask() *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides_FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_DHCPOverrides_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_DHCPOverrides_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_CommonOpts_DHCPOverrides_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides_FieldMask{}
	if o.GetUseDns() != other.GetUseDns() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseDns})
	}
	if o.GetUseNtp() != other.GetUseNtp() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseNtp})
	}
	if o.GetSendHostname() != other.GetSendHostname() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorSendHostname})
	}
	if o.GetUseHostname() != other.GetUseHostname() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseHostname})
	}
	if o.GetUseMtu() != other.GetUseMtu() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseMtu})
	}
	if o.GetHostname() != other.GetHostname() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorHostname})
	}
	if o.GetUseRoutes() != other.GetUseRoutes() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorUseRoutes})
	}
	if o.GetRouteMetric() != other.GetRouteMetric() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsDHCPOverrides_FieldPathSelectorRouteMetric})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides))
}

func (o *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) Clone() *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides{}
	result.UseDns = o.UseDns
	result.UseNtp = o.UseNtp
	result.SendHostname = o.SendHostname
	result.UseHostname = o.UseHostname
	result.UseMtu = o.UseMtu
	result.Hostname = o.Hostname
	result.UseRoutes = o.UseRoutes
	result.RouteMetric = o.RouteMetric
	return result
}

func (o *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) Merge(source *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) {
	o.UseDns = source.GetUseDns()
	o.UseNtp = source.GetUseNtp()
	o.SendHostname = source.GetSendHostname()
	o.UseHostname = source.GetUseHostname()
	o.UseMtu = source.GetUseMtu()
	o.Hostname = source.GetHostname()
	o.UseRoutes = source.GetUseRoutes()
	o.RouteMetric = source.GetRouteMetric()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides))
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Nameservers) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_CommonOpts_Nameservers) MakeFullFieldMask() *Device_Spec_NetworkConfig_CommonOpts_Nameservers_FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_Nameservers_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Nameservers) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_Nameservers_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Nameservers) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *Device_Spec_NetworkConfig_CommonOpts_Nameservers_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_CommonOpts_Nameservers_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_CommonOpts_Nameservers_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_CommonOpts_Nameservers_FieldMask{}

	if len(o.GetSearch()) == len(other.GetSearch()) {
		for i, lValue := range o.GetSearch() {
			rValue := other.GetSearch()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorSearch})
	}

	if len(o.GetAddresses()) == len(other.GetAddresses()) {
		for i, lValue := range o.GetAddresses() {
			rValue := other.GetAddresses()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsNameservers_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsNameservers_FieldPathSelectorAddresses})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Nameservers) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers))
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Nameservers) Clone() *Device_Spec_NetworkConfig_CommonOpts_Nameservers {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_CommonOpts_Nameservers{}
	result.Search = make([]string, len(o.Search))
	for i, sourceValue := range o.Search {
		result.Search[i] = sourceValue
	}
	result.Addresses = make([]string, len(o.Addresses))
	for i, sourceValue := range o.Addresses {
		result.Addresses[i] = sourceValue
	}
	return result
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Nameservers) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Nameservers) Merge(source *Device_Spec_NetworkConfig_CommonOpts_Nameservers) {
	for _, sourceValue := range source.GetSearch() {
		exists := false
		for _, currentValue := range o.Search {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Search = append(o.Search, newDstElement)
		}
	}

	for _, sourceValue := range source.GetAddresses() {
		exists := false
		for _, currentValue := range o.Addresses {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Addresses = append(o.Addresses, newDstElement)
		}
	}

}

func (o *Device_Spec_NetworkConfig_CommonOpts_Nameservers) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers))
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Routes) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_CommonOpts_Routes) MakeFullFieldMask() *Device_Spec_NetworkConfig_CommonOpts_Routes_FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_Routes_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Routes) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_Routes_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Routes) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_CommonOpts_Routes) *Device_Spec_NetworkConfig_CommonOpts_Routes_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_CommonOpts_Routes_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_CommonOpts_Routes_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_CommonOpts_Routes_FieldMask{}
	if o.GetFrom() != other.GetFrom() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorFrom})
	}
	if o.GetTo() != other.GetTo() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTo})
	}
	if o.GetVia() != other.GetVia() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorVia})
	}
	if o.GetOnLink() != other.GetOnLink() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorOnLink})
	}
	if o.GetMetric() != other.GetMetric() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorMetric})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorType})
	}
	if o.GetScope() != other.GetScope() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorScope})
	}
	if o.GetTable() != other.GetTable() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutes_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutes_FieldPathSelectorTable})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Routes) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_CommonOpts_Routes))
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Routes) Clone() *Device_Spec_NetworkConfig_CommonOpts_Routes {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_CommonOpts_Routes{}
	result.From = o.From
	result.To = o.To
	result.Via = o.Via
	result.OnLink = o.OnLink
	result.Metric = o.Metric
	result.Type = o.Type
	result.Scope = o.Scope
	result.Table = o.Table
	return result
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Routes) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Routes) Merge(source *Device_Spec_NetworkConfig_CommonOpts_Routes) {
	o.From = source.GetFrom()
	o.To = source.GetTo()
	o.Via = source.GetVia()
	o.OnLink = source.GetOnLink()
	o.Metric = source.GetMetric()
	o.Type = source.GetType()
	o.Scope = source.GetScope()
	o.Table = source.GetTable()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Routes) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_CommonOpts_Routes))
}

func (o *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) MakeFullFieldMask() *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy_FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_RoutingPolicy_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_RoutingPolicy_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_CommonOpts_RoutingPolicy_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy_FieldMask{}
	if o.GetFrom() != other.GetFrom() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorFrom})
	}
	if o.GetTo() != other.GetTo() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTo})
	}
	if o.GetTable() != other.GetTable() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTable})
	}
	if o.GetPriority() != other.GetPriority() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorPriority})
	}
	if o.GetMark() != other.GetMark() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorMark})
	}
	if o.GetTypeOfService() != other.GetTypeOfService() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsRoutingPolicy_FieldPathSelectorTypeOfService})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy))
}

func (o *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) Clone() *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy{}
	result.From = o.From
	result.To = o.To
	result.Table = o.Table
	result.Priority = o.Priority
	result.Mark = o.Mark
	result.TypeOfService = o.TypeOfService
	return result
}

func (o *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) Merge(source *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) {
	o.From = source.GetFrom()
	o.To = source.GetTo()
	o.Table = source.GetTable()
	o.Priority = source.GetPriority()
	o.Mark = source.GetMark()
	o.TypeOfService = source.GetTypeOfService()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy))
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Auth) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_CommonOpts_Auth) MakeFullFieldMask() *Device_Spec_NetworkConfig_CommonOpts_Auth_FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_Auth_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Auth) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_CommonOpts_Auth_FieldMask()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Auth) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_CommonOpts_Auth) *Device_Spec_NetworkConfig_CommonOpts_Auth_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_CommonOpts_Auth_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_CommonOpts_Auth_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_CommonOpts_Auth_FieldMask{}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorKey})
	}
	if o.GetPassword() != other.GetPassword() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorPassword})
	}
	if o.GetMethod() != other.GetMethod() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorMethod})
	}
	if o.GetIdentity() != other.GetIdentity() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorIdentity})
	}
	if o.GetAnonymousIdentity() != other.GetAnonymousIdentity() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorAnonymousIdentity})
	}
	if o.GetCaCertificate() != other.GetCaCertificate() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorCaCertificate})
	}
	if o.GetClientCertificate() != other.GetClientCertificate() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientCertificate})
	}
	if o.GetClientKey() != other.GetClientKey() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKey})
	}
	if o.GetClientKeyPassword() != other.GetClientKeyPassword() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigCommonOptsAuth_FieldTerminalPath{selector: DeviceSpecNetworkConfigCommonOptsAuth_FieldPathSelectorClientKeyPassword})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Auth) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_CommonOpts_Auth))
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Auth) Clone() *Device_Spec_NetworkConfig_CommonOpts_Auth {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_CommonOpts_Auth{}
	result.Key = o.Key
	result.Password = o.Password
	result.Method = o.Method
	result.Identity = o.Identity
	result.AnonymousIdentity = o.AnonymousIdentity
	result.CaCertificate = o.CaCertificate
	result.ClientCertificate = o.ClientCertificate
	result.ClientKey = o.ClientKey
	result.ClientKeyPassword = o.ClientKeyPassword
	return result
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Auth) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Auth) Merge(source *Device_Spec_NetworkConfig_CommonOpts_Auth) {
	o.Key = source.GetKey()
	o.Password = source.GetPassword()
	o.Method = source.GetMethod()
	o.Identity = source.GetIdentity()
	o.AnonymousIdentity = source.GetAnonymousIdentity()
	o.CaCertificate = source.GetCaCertificate()
	o.ClientCertificate = source.GetClientCertificate()
	o.ClientKey = source.GetClientKey()
	o.ClientKeyPassword = source.GetClientKeyPassword()
}

func (o *Device_Spec_NetworkConfig_CommonOpts_Auth) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_CommonOpts_Auth))
}

func (o *Device_Spec_NetworkConfig_EthOpts_Match) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_EthOpts_Match) MakeFullFieldMask() *Device_Spec_NetworkConfig_EthOpts_Match_FieldMask {
	return FullDevice_Spec_NetworkConfig_EthOpts_Match_FieldMask()
}

func (o *Device_Spec_NetworkConfig_EthOpts_Match) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_EthOpts_Match_FieldMask()
}

func (o *Device_Spec_NetworkConfig_EthOpts_Match) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_EthOpts_Match) *Device_Spec_NetworkConfig_EthOpts_Match_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_EthOpts_Match_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_EthOpts_Match_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_EthOpts_Match_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorName})
	}
	if o.GetMacaddress() != other.GetMacaddress() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorMacaddress})
	}
	if o.GetDriver() != other.GetDriver() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigEthOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigEthOptsMatch_FieldPathSelectorDriver})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_EthOpts_Match) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_EthOpts_Match))
}

func (o *Device_Spec_NetworkConfig_EthOpts_Match) Clone() *Device_Spec_NetworkConfig_EthOpts_Match {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_EthOpts_Match{}
	result.Name = o.Name
	result.Macaddress = o.Macaddress
	result.Driver = o.Driver
	return result
}

func (o *Device_Spec_NetworkConfig_EthOpts_Match) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_EthOpts_Match) Merge(source *Device_Spec_NetworkConfig_EthOpts_Match) {
	o.Name = source.GetName()
	o.Macaddress = source.GetMacaddress()
	o.Driver = source.GetDriver()
}

func (o *Device_Spec_NetworkConfig_EthOpts_Match) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_EthOpts_Match))
}

func (o *Device_Spec_NetworkConfig_WifiOpts_Match) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_WifiOpts_Match) MakeFullFieldMask() *Device_Spec_NetworkConfig_WifiOpts_Match_FieldMask {
	return FullDevice_Spec_NetworkConfig_WifiOpts_Match_FieldMask()
}

func (o *Device_Spec_NetworkConfig_WifiOpts_Match) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_WifiOpts_Match_FieldMask()
}

func (o *Device_Spec_NetworkConfig_WifiOpts_Match) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_WifiOpts_Match) *Device_Spec_NetworkConfig_WifiOpts_Match_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_WifiOpts_Match_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_WifiOpts_Match_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_WifiOpts_Match_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorName})
	}
	if o.GetMacaddress() != other.GetMacaddress() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorMacaddress})
	}
	if o.GetDriver() != other.GetDriver() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOptsMatch_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsMatch_FieldPathSelectorDriver})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_WifiOpts_Match) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_WifiOpts_Match))
}

func (o *Device_Spec_NetworkConfig_WifiOpts_Match) Clone() *Device_Spec_NetworkConfig_WifiOpts_Match {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_WifiOpts_Match{}
	result.Name = o.Name
	result.Macaddress = o.Macaddress
	result.Driver = o.Driver
	return result
}

func (o *Device_Spec_NetworkConfig_WifiOpts_Match) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_WifiOpts_Match) Merge(source *Device_Spec_NetworkConfig_WifiOpts_Match) {
	o.Name = source.GetName()
	o.Macaddress = source.GetMacaddress()
	o.Driver = source.GetDriver()
}

func (o *Device_Spec_NetworkConfig_WifiOpts_Match) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_WifiOpts_Match))
}

func (o *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) MakeFullFieldMask() *Device_Spec_NetworkConfig_WifiOpts_AccessPoint_FieldMask {
	return FullDevice_Spec_NetworkConfig_WifiOpts_AccessPoint_FieldMask()
}

func (o *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_WifiOpts_AccessPoint_FieldMask()
}

func (o *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *Device_Spec_NetworkConfig_WifiOpts_AccessPoint_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_WifiOpts_AccessPoint_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_WifiOpts_AccessPoint_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_WifiOpts_AccessPoint_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorName})
	}
	if o.GetPassword() != other.GetPassword() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorPassword})
	}
	if o.GetMode() != other.GetMode() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldTerminalPath{selector: DeviceSpecNetworkConfigWifiOptsAccessPoint_FieldPathSelectorMode})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint))
}

func (o *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) Clone() *Device_Spec_NetworkConfig_WifiOpts_AccessPoint {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_WifiOpts_AccessPoint{}
	result.Name = o.Name
	result.Password = o.Password
	result.Mode = o.Mode
	return result
}

func (o *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) Merge(source *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) {
	o.Name = source.GetName()
	o.Password = source.GetPassword()
	o.Mode = source.GetMode()
}

func (o *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint))
}

func (o *Device_Spec_NetworkConfig_BridgesOpts_Parameters) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_BridgesOpts_Parameters) MakeFullFieldMask() *Device_Spec_NetworkConfig_BridgesOpts_Parameters_FieldMask {
	return FullDevice_Spec_NetworkConfig_BridgesOpts_Parameters_FieldMask()
}

func (o *Device_Spec_NetworkConfig_BridgesOpts_Parameters) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_BridgesOpts_Parameters_FieldMask()
}

func (o *Device_Spec_NetworkConfig_BridgesOpts_Parameters) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_BridgesOpts_Parameters) *Device_Spec_NetworkConfig_BridgesOpts_Parameters_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_BridgesOpts_Parameters_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_BridgesOpts_Parameters_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_BridgesOpts_Parameters_FieldMask{}
	if o.GetAgeingTime() != other.GetAgeingTime() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorAgeingTime})
	}
	if o.GetPriority() != other.GetPriority() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPriority})
	}
	if o.GetPortPriority() != other.GetPortPriority() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPortPriority})
	}
	if o.GetForwardDelay() != other.GetForwardDelay() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorForwardDelay})
	}
	if o.GetHelloTime() != other.GetHelloTime() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorHelloTime})
	}
	if o.GetMaxAge() != other.GetMaxAge() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorMaxAge})
	}
	if o.GetPathCost() != other.GetPathCost() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorPathCost})
	}
	if o.GetStp() != other.GetStp() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBridgesOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBridgesOptsParameters_FieldPathSelectorStp})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_BridgesOpts_Parameters) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters))
}

func (o *Device_Spec_NetworkConfig_BridgesOpts_Parameters) Clone() *Device_Spec_NetworkConfig_BridgesOpts_Parameters {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_BridgesOpts_Parameters{}
	result.AgeingTime = o.AgeingTime
	result.Priority = o.Priority
	result.PortPriority = o.PortPriority
	result.ForwardDelay = o.ForwardDelay
	result.HelloTime = o.HelloTime
	result.MaxAge = o.MaxAge
	result.PathCost = o.PathCost
	result.Stp = o.Stp
	return result
}

func (o *Device_Spec_NetworkConfig_BridgesOpts_Parameters) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_BridgesOpts_Parameters) Merge(source *Device_Spec_NetworkConfig_BridgesOpts_Parameters) {
	o.AgeingTime = source.GetAgeingTime()
	o.Priority = source.GetPriority()
	o.PortPriority = source.GetPortPriority()
	o.ForwardDelay = source.GetForwardDelay()
	o.HelloTime = source.GetHelloTime()
	o.MaxAge = source.GetMaxAge()
	o.PathCost = source.GetPathCost()
	o.Stp = source.GetStp()
}

func (o *Device_Spec_NetworkConfig_BridgesOpts_Parameters) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters))
}

func (o *Device_Spec_NetworkConfig_BondsOpts_Parameters) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_BondsOpts_Parameters) MakeFullFieldMask() *Device_Spec_NetworkConfig_BondsOpts_Parameters_FieldMask {
	return FullDevice_Spec_NetworkConfig_BondsOpts_Parameters_FieldMask()
}

func (o *Device_Spec_NetworkConfig_BondsOpts_Parameters) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_BondsOpts_Parameters_FieldMask()
}

func (o *Device_Spec_NetworkConfig_BondsOpts_Parameters) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_BondsOpts_Parameters) *Device_Spec_NetworkConfig_BondsOpts_Parameters_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_BondsOpts_Parameters_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_BondsOpts_Parameters_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_BondsOpts_Parameters_FieldMask{}
	if o.GetMode() != other.GetMode() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMode})
	}
	if o.GetLacpRate() != other.GetLacpRate() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLacpRate})
	}
	if o.GetMiiMonitorInterval() != other.GetMiiMonitorInterval() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMiiMonitorInterval})
	}
	if o.GetMinLinks() != other.GetMinLinks() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorMinLinks})
	}
	if o.GetTransmitHashPolicy() != other.GetTransmitHashPolicy() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorTransmitHashPolicy})
	}
	if o.GetAdSelect() != other.GetAdSelect() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAdSelect})
	}
	if o.GetAllSlavesActive() != other.GetAllSlavesActive() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorAllSlavesActive})
	}
	if o.GetArpIpTargets() != other.GetArpIpTargets() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpIpTargets})
	}
	if o.GetArpValidate() != other.GetArpValidate() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpValidate})
	}
	if o.GetArpAllTargets() != other.GetArpAllTargets() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorArpAllTargets})
	}
	if o.GetUpDelay() != other.GetUpDelay() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorUpDelay})
	}
	if o.GetFailOverMacPolicy() != other.GetFailOverMacPolicy() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorFailOverMacPolicy})
	}
	if o.GetGratuitousArp() != other.GetGratuitousArp() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorGratuitousArp})
	}
	if o.GetPacketsPerSlave() != other.GetPacketsPerSlave() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPacketsPerSlave})
	}
	if o.GetPrimaryReselectPolicy() != other.GetPrimaryReselectPolicy() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimaryReselectPolicy})
	}
	if o.GetResendIgmp() != other.GetResendIgmp() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorResendIgmp})
	}
	if o.GetLearnPacketInterval() != other.GetLearnPacketInterval() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorLearnPacketInterval})
	}
	if o.GetPrimary() != other.GetPrimary() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigBondsOptsParameters_FieldTerminalPath{selector: DeviceSpecNetworkConfigBondsOptsParameters_FieldPathSelectorPrimary})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_BondsOpts_Parameters) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_BondsOpts_Parameters))
}

func (o *Device_Spec_NetworkConfig_BondsOpts_Parameters) Clone() *Device_Spec_NetworkConfig_BondsOpts_Parameters {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_BondsOpts_Parameters{}
	result.Mode = o.Mode
	result.LacpRate = o.LacpRate
	result.MiiMonitorInterval = o.MiiMonitorInterval
	result.MinLinks = o.MinLinks
	result.TransmitHashPolicy = o.TransmitHashPolicy
	result.AdSelect = o.AdSelect
	result.AllSlavesActive = o.AllSlavesActive
	result.ArpIpTargets = o.ArpIpTargets
	result.ArpValidate = o.ArpValidate
	result.ArpAllTargets = o.ArpAllTargets
	result.UpDelay = o.UpDelay
	result.FailOverMacPolicy = o.FailOverMacPolicy
	result.GratuitousArp = o.GratuitousArp
	result.PacketsPerSlave = o.PacketsPerSlave
	result.PrimaryReselectPolicy = o.PrimaryReselectPolicy
	result.ResendIgmp = o.ResendIgmp
	result.LearnPacketInterval = o.LearnPacketInterval
	result.Primary = o.Primary
	return result
}

func (o *Device_Spec_NetworkConfig_BondsOpts_Parameters) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_BondsOpts_Parameters) Merge(source *Device_Spec_NetworkConfig_BondsOpts_Parameters) {
	o.Mode = source.GetMode()
	o.LacpRate = source.GetLacpRate()
	o.MiiMonitorInterval = source.GetMiiMonitorInterval()
	o.MinLinks = source.GetMinLinks()
	o.TransmitHashPolicy = source.GetTransmitHashPolicy()
	o.AdSelect = source.GetAdSelect()
	o.AllSlavesActive = source.GetAllSlavesActive()
	o.ArpIpTargets = source.GetArpIpTargets()
	o.ArpValidate = source.GetArpValidate()
	o.ArpAllTargets = source.GetArpAllTargets()
	o.UpDelay = source.GetUpDelay()
	o.FailOverMacPolicy = source.GetFailOverMacPolicy()
	o.GratuitousArp = source.GetGratuitousArp()
	o.PacketsPerSlave = source.GetPacketsPerSlave()
	o.PrimaryReselectPolicy = source.GetPrimaryReselectPolicy()
	o.ResendIgmp = source.GetResendIgmp()
	o.LearnPacketInterval = source.GetLearnPacketInterval()
	o.Primary = source.GetPrimary()
}

func (o *Device_Spec_NetworkConfig_BondsOpts_Parameters) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_BondsOpts_Parameters))
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts_Key) GotenObjectExt() {}

func (o *Device_Spec_NetworkConfig_TunnelsOpts_Key) MakeFullFieldMask() *Device_Spec_NetworkConfig_TunnelsOpts_Key_FieldMask {
	return FullDevice_Spec_NetworkConfig_TunnelsOpts_Key_FieldMask()
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts_Key) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_NetworkConfig_TunnelsOpts_Key_FieldMask()
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts_Key) MakeDiffFieldMask(other *Device_Spec_NetworkConfig_TunnelsOpts_Key) *Device_Spec_NetworkConfig_TunnelsOpts_Key_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_NetworkConfig_TunnelsOpts_Key_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_NetworkConfig_TunnelsOpts_Key_FieldMask()
	}

	res := &Device_Spec_NetworkConfig_TunnelsOpts_Key_FieldMask{}
	if o.GetInput() != other.GetInput() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorInput})
	}
	if o.GetOutput() != other.GetOutput() {
		res.Paths = append(res.Paths, &DeviceSpecNetworkConfigTunnelsOptsKey_FieldTerminalPath{selector: DeviceSpecNetworkConfigTunnelsOptsKey_FieldPathSelectorOutput})
	}
	return res
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts_Key) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_NetworkConfig_TunnelsOpts_Key))
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts_Key) Clone() *Device_Spec_NetworkConfig_TunnelsOpts_Key {
	if o == nil {
		return nil
	}
	result := &Device_Spec_NetworkConfig_TunnelsOpts_Key{}
	result.Input = o.Input
	result.Output = o.Output
	return result
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts_Key) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts_Key) Merge(source *Device_Spec_NetworkConfig_TunnelsOpts_Key) {
	o.Input = source.GetInput()
	o.Output = source.GetOutput()
}

func (o *Device_Spec_NetworkConfig_TunnelsOpts_Key) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_NetworkConfig_TunnelsOpts_Key))
}

func (o *Device_Spec_SSHConfig_AuthKey) GotenObjectExt() {}

func (o *Device_Spec_SSHConfig_AuthKey) MakeFullFieldMask() *Device_Spec_SSHConfig_AuthKey_FieldMask {
	return FullDevice_Spec_SSHConfig_AuthKey_FieldMask()
}

func (o *Device_Spec_SSHConfig_AuthKey) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Spec_SSHConfig_AuthKey_FieldMask()
}

func (o *Device_Spec_SSHConfig_AuthKey) MakeDiffFieldMask(other *Device_Spec_SSHConfig_AuthKey) *Device_Spec_SSHConfig_AuthKey_FieldMask {
	if o == nil && other == nil {
		return &Device_Spec_SSHConfig_AuthKey_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Spec_SSHConfig_AuthKey_FieldMask()
	}

	res := &Device_Spec_SSHConfig_AuthKey_FieldMask{}
	if o.GetSshaKey() != other.GetSshaKey() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorSshaKey})
	}
	if o.GetCertAuthority() != other.GetCertAuthority() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorCertAuthority})
	}
	if o.GetCommand() != other.GetCommand() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorCommand})
	}
	if o.GetEnvironment() != other.GetEnvironment() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorEnvironment})
	}
	if o.GetFrom() != other.GetFrom() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorFrom})
	}
	if o.GetNoAgentForwarding() != other.GetNoAgentForwarding() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoAgentForwarding})
	}
	if o.GetNoPortForwarding() != other.GetNoPortForwarding() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPortForwarding})
	}
	if o.GetNoPty() != other.GetNoPty() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoPty})
	}
	if o.GetNoUserRc() != other.GetNoUserRc() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoUserRc})
	}
	if o.GetNoX11Forwarding() != other.GetNoX11Forwarding() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorNoX11Forwarding})
	}
	if o.GetPermitopen() != other.GetPermitopen() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorPermitopen})
	}
	if o.GetPrincipals() != other.GetPrincipals() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorPrincipals})
	}
	if o.GetTunnel() != other.GetTunnel() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorTunnel})
	}
	if o.GetRestrict() != other.GetRestrict() {
		res.Paths = append(res.Paths, &DeviceSpecSSHConfigAuthKey_FieldTerminalPath{selector: DeviceSpecSSHConfigAuthKey_FieldPathSelectorRestrict})
	}
	return res
}

func (o *Device_Spec_SSHConfig_AuthKey) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Spec_SSHConfig_AuthKey))
}

func (o *Device_Spec_SSHConfig_AuthKey) Clone() *Device_Spec_SSHConfig_AuthKey {
	if o == nil {
		return nil
	}
	result := &Device_Spec_SSHConfig_AuthKey{}
	result.SshaKey = o.SshaKey
	result.CertAuthority = o.CertAuthority
	result.Command = o.Command
	result.Environment = o.Environment
	result.From = o.From
	result.NoAgentForwarding = o.NoAgentForwarding
	result.NoPortForwarding = o.NoPortForwarding
	result.NoPty = o.NoPty
	result.NoUserRc = o.NoUserRc
	result.NoX11Forwarding = o.NoX11Forwarding
	result.Permitopen = o.Permitopen
	result.Principals = o.Principals
	result.Tunnel = o.Tunnel
	result.Restrict = o.Restrict
	return result
}

func (o *Device_Spec_SSHConfig_AuthKey) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Spec_SSHConfig_AuthKey) Merge(source *Device_Spec_SSHConfig_AuthKey) {
	o.SshaKey = source.GetSshaKey()
	o.CertAuthority = source.GetCertAuthority()
	o.Command = source.GetCommand()
	o.Environment = source.GetEnvironment()
	o.From = source.GetFrom()
	o.NoAgentForwarding = source.GetNoAgentForwarding()
	o.NoPortForwarding = source.GetNoPortForwarding()
	o.NoPty = source.GetNoPty()
	o.NoUserRc = source.GetNoUserRc()
	o.NoX11Forwarding = source.GetNoX11Forwarding()
	o.Permitopen = source.GetPermitopen()
	o.Principals = source.GetPrincipals()
	o.Tunnel = source.GetTunnel()
	o.Restrict = source.GetRestrict()
}

func (o *Device_Spec_SSHConfig_AuthKey) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Spec_SSHConfig_AuthKey))
}

func (o *Device_Status_Address) GotenObjectExt() {}

func (o *Device_Status_Address) MakeFullFieldMask() *Device_Status_Address_FieldMask {
	return FullDevice_Status_Address_FieldMask()
}

func (o *Device_Status_Address) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_Address_FieldMask()
}

func (o *Device_Status_Address) MakeDiffFieldMask(other *Device_Status_Address) *Device_Status_Address_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_Address_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_Address_FieldMask()
	}

	res := &Device_Status_Address_FieldMask{}
	if o.GetAddress() != other.GetAddress() {
		res.Paths = append(res.Paths, &DeviceStatusAddress_FieldTerminalPath{selector: DeviceStatusAddress_FieldPathSelectorAddress})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &DeviceStatusAddress_FieldTerminalPath{selector: DeviceStatusAddress_FieldPathSelectorType})
	}
	return res
}

func (o *Device_Status_Address) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_Address))
}

func (o *Device_Status_Address) Clone() *Device_Status_Address {
	if o == nil {
		return nil
	}
	result := &Device_Status_Address{}
	result.Address = o.Address
	result.Type = o.Type
	return result
}

func (o *Device_Status_Address) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_Address) Merge(source *Device_Status_Address) {
	o.Address = source.GetAddress()
	o.Type = source.GetType()
}

func (o *Device_Status_Address) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_Address))
}

func (o *Device_Status_Condition) GotenObjectExt() {}

func (o *Device_Status_Condition) MakeFullFieldMask() *Device_Status_Condition_FieldMask {
	return FullDevice_Status_Condition_FieldMask()
}

func (o *Device_Status_Condition) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_Condition_FieldMask()
}

func (o *Device_Status_Condition) MakeDiffFieldMask(other *Device_Status_Condition) *Device_Status_Condition_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_Condition_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_Condition_FieldMask()
	}

	res := &Device_Status_Condition_FieldMask{}
	if o.GetMessage() != other.GetMessage() {
		res.Paths = append(res.Paths, &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorMessage})
	}
	if o.GetReason() != other.GetReason() {
		res.Paths = append(res.Paths, &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorReason})
	}
	if o.GetStatus() != other.GetStatus() {
		res.Paths = append(res.Paths, &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorStatus})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorType})
	}
	if !proto.Equal(o.GetLastHeartBeatTime(), other.GetLastHeartBeatTime()) {
		res.Paths = append(res.Paths, &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorLastHeartBeatTime})
	}
	if !proto.Equal(o.GetLastTransitionTime(), other.GetLastTransitionTime()) {
		res.Paths = append(res.Paths, &DeviceStatusCondition_FieldTerminalPath{selector: DeviceStatusCondition_FieldPathSelectorLastTransitionTime})
	}
	return res
}

func (o *Device_Status_Condition) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_Condition))
}

func (o *Device_Status_Condition) Clone() *Device_Status_Condition {
	if o == nil {
		return nil
	}
	result := &Device_Status_Condition{}
	result.Message = o.Message
	result.Reason = o.Reason
	result.Status = o.Status
	result.Type = o.Type
	result.LastHeartBeatTime = proto.Clone(o.LastHeartBeatTime).(*timestamp.Timestamp)
	result.LastTransitionTime = proto.Clone(o.LastTransitionTime).(*timestamp.Timestamp)
	return result
}

func (o *Device_Status_Condition) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_Condition) Merge(source *Device_Status_Condition) {
	o.Message = source.GetMessage()
	o.Reason = source.GetReason()
	o.Status = source.GetStatus()
	o.Type = source.GetType()
	if source.GetLastHeartBeatTime() != nil {
		if o.LastHeartBeatTime == nil {
			o.LastHeartBeatTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.LastHeartBeatTime, source.GetLastHeartBeatTime())
	}
	if source.GetLastTransitionTime() != nil {
		if o.LastTransitionTime == nil {
			o.LastTransitionTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.LastTransitionTime, source.GetLastTransitionTime())
	}
}

func (o *Device_Status_Condition) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_Condition))
}

func (o *Device_Status_DeviceInfo) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo) MakeFullFieldMask() *Device_Status_DeviceInfo_FieldMask {
	return FullDevice_Status_DeviceInfo_FieldMask()
}

func (o *Device_Status_DeviceInfo) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_FieldMask()
}

func (o *Device_Status_DeviceInfo) MakeDiffFieldMask(other *Device_Status_DeviceInfo) *Device_Status_DeviceInfo_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_FieldMask()
	}

	res := &Device_Status_DeviceInfo_FieldMask{}
	if o.GetArchitecture() != other.GetArchitecture() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorArchitecture})
	}
	if o.GetOperatingSystem() != other.GetOperatingSystem() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorOperatingSystem})
	}
	if o.GetKernelVersion() != other.GetKernelVersion() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorKernelVersion})
	}
	if o.GetOsImage() != other.GetOsImage() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorOsImage})
	}
	if o.GetContainerRuntimeVersion() != other.GetContainerRuntimeVersion() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorContainerRuntimeVersion})
	}
	if o.GetOsVersion() != other.GetOsVersion() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorOsVersion})
	}
	if o.GetDriver() != other.GetDriver() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorDriver})
	}
	{
		subMask := o.GetHardwareInformation().MakeDiffFieldMask(other.GetHardwareInformation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatusDeviceInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfo_FieldSubPath{selector: DeviceStatusDeviceInfo_FieldPathSelectorHardwareInformation, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Device_Status_DeviceInfo) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo))
}

func (o *Device_Status_DeviceInfo) Clone() *Device_Status_DeviceInfo {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo{}
	result.Architecture = o.Architecture
	result.OperatingSystem = o.OperatingSystem
	result.KernelVersion = o.KernelVersion
	result.OsImage = o.OsImage
	result.ContainerRuntimeVersion = o.ContainerRuntimeVersion
	result.OsVersion = o.OsVersion
	result.Driver = o.Driver
	result.HardwareInformation = o.HardwareInformation.Clone()
	return result
}

func (o *Device_Status_DeviceInfo) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo) Merge(source *Device_Status_DeviceInfo) {
	o.Architecture = source.GetArchitecture()
	o.OperatingSystem = source.GetOperatingSystem()
	o.KernelVersion = source.GetKernelVersion()
	o.OsImage = source.GetOsImage()
	o.ContainerRuntimeVersion = source.GetContainerRuntimeVersion()
	o.OsVersion = source.GetOsVersion()
	o.Driver = source.GetDriver()
	if source.GetHardwareInformation() != nil {
		if o.HardwareInformation == nil {
			o.HardwareInformation = new(Device_Status_DeviceInfo_HardwareInformation)
		}
		o.HardwareInformation.Merge(source.GetHardwareInformation())
	}
}

func (o *Device_Status_DeviceInfo) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo))
}

func (o *Device_Status_DeviceInfo_HardwareInformation) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation) *Device_Status_DeviceInfo_HardwareInformation_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_FieldMask{}
	{
		subMask := o.GetOs().MakeDiffFieldMask(other.GetOs())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorOs, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetBios().MakeDiffFieldMask(other.GetBios())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBios, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSystem().MakeDiffFieldMask(other.GetSystem())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorSystem, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetCpu().MakeDiffFieldMask(other.GetCpu())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorCpu, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetBlock().MakeDiffFieldMask(other.GetBlock())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorBlock, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetNetwork().MakeDiffFieldMask(other.GetNetwork())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorNetwork, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetGpu().MakeDiffFieldMask(other.GetGpu())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorGpu, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMemoryInfo().MakeDiffFieldMask(other.GetMemoryInfo())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformation_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformation_FieldPathSelectorMemoryInfo, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation))
}

func (o *Device_Status_DeviceInfo_HardwareInformation) Clone() *Device_Status_DeviceInfo_HardwareInformation {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation{}
	result.Os = o.Os.Clone()
	result.Bios = o.Bios.Clone()
	result.System = o.System.Clone()
	result.Cpu = o.Cpu.Clone()
	result.Block = o.Block.Clone()
	result.Network = o.Network.Clone()
	result.Gpu = o.Gpu.Clone()
	result.MemoryInfo = o.MemoryInfo.Clone()
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation) Merge(source *Device_Status_DeviceInfo_HardwareInformation) {
	if source.GetOs() != nil {
		if o.Os == nil {
			o.Os = new(Device_Status_DeviceInfo_HardwareInformation_OS)
		}
		o.Os.Merge(source.GetOs())
	}
	if source.GetBios() != nil {
		if o.Bios == nil {
			o.Bios = new(Device_Status_DeviceInfo_HardwareInformation_BIOS)
		}
		o.Bios.Merge(source.GetBios())
	}
	if source.GetSystem() != nil {
		if o.System == nil {
			o.System = new(Device_Status_DeviceInfo_HardwareInformation_System)
		}
		o.System.Merge(source.GetSystem())
	}
	if source.GetCpu() != nil {
		if o.Cpu == nil {
			o.Cpu = new(Device_Status_DeviceInfo_HardwareInformation_CPU)
		}
		o.Cpu.Merge(source.GetCpu())
	}
	if source.GetBlock() != nil {
		if o.Block == nil {
			o.Block = new(Device_Status_DeviceInfo_HardwareInformation_Block)
		}
		o.Block.Merge(source.GetBlock())
	}
	if source.GetNetwork() != nil {
		if o.Network == nil {
			o.Network = new(Device_Status_DeviceInfo_HardwareInformation_Network)
		}
		o.Network.Merge(source.GetNetwork())
	}
	if source.GetGpu() != nil {
		if o.Gpu == nil {
			o.Gpu = new(Device_Status_DeviceInfo_HardwareInformation_GPU)
		}
		o.Gpu.Merge(source.GetGpu())
	}
	if source.GetMemoryInfo() != nil {
		if o.MemoryInfo == nil {
			o.MemoryInfo = new(Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)
		}
		o.MemoryInfo.Merge(source.GetMemoryInfo())
	}
}

func (o *Device_Status_DeviceInfo_HardwareInformation) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Capability) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_Capability) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_Capability_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Capability_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Capability) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Capability_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Capability) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_Capability) *Device_Status_DeviceInfo_HardwareInformation_Capability_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_Capability_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_Capability_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_Capability_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCapability_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCapability_FieldPathSelectorDescription})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Capability) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_Capability))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Capability) Clone() *Device_Status_DeviceInfo_HardwareInformation_Capability {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_Capability{}
	result.Name = o.Name
	result.Description = o.Description
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Capability) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Capability) Merge(source *Device_Status_DeviceInfo_HardwareInformation_Capability) {
	o.Name = source.GetName()
	o.Description = source.GetDescription()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Capability) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_Capability))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_OS) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_OS) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_OS_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_OS_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_OS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_OS_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_OS) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_OS) *Device_Status_DeviceInfo_HardwareInformation_OS_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_OS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_OS_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_OS_FieldMask{}
	if o.GetOperatingSystem() != other.GetOperatingSystem() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOperatingSystem})
	}
	if o.GetKernelVersion() != other.GetKernelVersion() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorKernelVersion})
	}
	if o.GetOsImage() != other.GetOsImage() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorOsImage})
	}
	if o.GetContainerRuntimeVersion() != other.GetContainerRuntimeVersion() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationOS_FieldPathSelectorContainerRuntimeVersion})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_OS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_OS))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_OS) Clone() *Device_Status_DeviceInfo_HardwareInformation_OS {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_OS{}
	result.OperatingSystem = o.OperatingSystem
	result.KernelVersion = o.KernelVersion
	result.OsImage = o.OsImage
	result.ContainerRuntimeVersion = o.ContainerRuntimeVersion
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_OS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_OS) Merge(source *Device_Status_DeviceInfo_HardwareInformation_OS) {
	o.OperatingSystem = source.GetOperatingSystem()
	o.KernelVersion = source.GetKernelVersion()
	o.OsImage = source.GetOsImage()
	o.ContainerRuntimeVersion = source.GetContainerRuntimeVersion()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_OS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_OS))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_BIOS) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_BIOS) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_BIOS_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_BIOS_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_BIOS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_BIOS_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_BIOS) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_BIOS) *Device_Status_DeviceInfo_HardwareInformation_BIOS_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_BIOS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_BIOS_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_BIOS_FieldMask{}
	if o.GetVendor() != other.GetVendor() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorVendor})
	}
	if o.GetBiosVersion() != other.GetBiosVersion() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorBiosVersion})
	}
	if o.GetReleaseDate() != other.GetReleaseDate() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBIOS_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBIOS_FieldPathSelectorReleaseDate})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_BIOS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_BIOS))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_BIOS) Clone() *Device_Status_DeviceInfo_HardwareInformation_BIOS {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_BIOS{}
	result.Vendor = o.Vendor
	result.BiosVersion = o.BiosVersion
	result.ReleaseDate = o.ReleaseDate
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_BIOS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_BIOS) Merge(source *Device_Status_DeviceInfo_HardwareInformation_BIOS) {
	o.Vendor = source.GetVendor()
	o.BiosVersion = source.GetBiosVersion()
	o.ReleaseDate = source.GetReleaseDate()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_BIOS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_BIOS))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_System) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_System_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_System_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_System_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_System) *Device_Status_DeviceInfo_HardwareInformation_System_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_System_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_System_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_System_FieldMask{}
	if o.GetManufacturer() != other.GetManufacturer() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorManufacturer})
	}
	if o.GetProductName() != other.GetProductName() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorProductName})
	}
	if o.GetVersion() != other.GetVersion() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorVersion})
	}
	if o.GetSerialNumber() != other.GetSerialNumber() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorSerialNumber})
	}
	{
		subMask := o.GetConfiguration().MakeDiffFieldMask(other.GetConfiguration())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationSystem_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationSystem_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationSystem_FieldPathSelectorConfiguration, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_System))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System) Clone() *Device_Status_DeviceInfo_HardwareInformation_System {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_System{}
	result.Manufacturer = o.Manufacturer
	result.ProductName = o.ProductName
	result.Version = o.Version
	result.SerialNumber = o.SerialNumber
	result.Configuration = o.Configuration.Clone()
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System) Merge(source *Device_Status_DeviceInfo_HardwareInformation_System) {
	o.Manufacturer = source.GetManufacturer()
	o.ProductName = source.GetProductName()
	o.Version = source.GetVersion()
	o.SerialNumber = source.GetSerialNumber()
	if source.GetConfiguration() != nil {
		if o.Configuration == nil {
			o.Configuration = new(Device_Status_DeviceInfo_HardwareInformation_System_Configuration)
		}
		o.Configuration.Merge(source.GetConfiguration())
	}
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_System))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_CPU_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_CPU_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_CPU_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_CPU) *Device_Status_DeviceInfo_HardwareInformation_CPU_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_CPU_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_CPU_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_CPU_FieldMask{}

	if len(o.GetProcessors()) == len(other.GetProcessors()) {
		for i, lValue := range o.GetProcessors() {
			rValue := other.GetProcessors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPU_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPU_FieldPathSelectorProcessors})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_CPU))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU) Clone() *Device_Status_DeviceInfo_HardwareInformation_CPU {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_CPU{}
	result.Processors = make([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor, len(o.Processors))
	for i, sourceValue := range o.Processors {
		result.Processors[i] = sourceValue.Clone()
	}
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU) Merge(source *Device_Status_DeviceInfo_HardwareInformation_CPU) {
	for _, sourceValue := range source.GetProcessors() {
		exists := false
		for _, currentValue := range o.Processors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor
			if sourceValue != nil {
				newDstElement = new(Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)
				newDstElement.Merge(sourceValue)
			}
			o.Processors = append(o.Processors, newDstElement)
		}
	}

}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_Block_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Block_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Block_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_Block) *Device_Status_DeviceInfo_HardwareInformation_Block_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_Block_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_Block_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_Block_FieldMask{}

	if len(o.GetDisks()) == len(other.GetDisks()) {
		for i, lValue := range o.GetDisks() {
			rValue := other.GetDisks()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlock_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlock_FieldPathSelectorDisks})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_Block))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block) Clone() *Device_Status_DeviceInfo_HardwareInformation_Block {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_Block{}
	result.Disks = make([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk, len(o.Disks))
	for i, sourceValue := range o.Disks {
		result.Disks[i] = sourceValue.Clone()
	}
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block) Merge(source *Device_Status_DeviceInfo_HardwareInformation_Block) {
	for _, sourceValue := range source.GetDisks() {
		exists := false
		for _, currentValue := range o.Disks {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Status_DeviceInfo_HardwareInformation_Block_Disk
			if sourceValue != nil {
				newDstElement = new(Device_Status_DeviceInfo_HardwareInformation_Block_Disk)
				newDstElement.Merge(sourceValue)
			}
			o.Disks = append(o.Disks, newDstElement)
		}
	}

}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_Block))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_Network_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Network_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Network_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_Network) *Device_Status_DeviceInfo_HardwareInformation_Network_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_Network_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_Network_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_Network_FieldMask{}

	if len(o.GetNics()) == len(other.GetNics()) {
		for i, lValue := range o.GetNics() {
			rValue := other.GetNics()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationNetwork_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetwork_FieldPathSelectorNics})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_Network))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network) Clone() *Device_Status_DeviceInfo_HardwareInformation_Network {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_Network{}
	result.Nics = make([]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC, len(o.Nics))
	for i, sourceValue := range o.Nics {
		result.Nics[i] = sourceValue.Clone()
	}
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network) Merge(source *Device_Status_DeviceInfo_HardwareInformation_Network) {
	for _, sourceValue := range source.GetNics() {
		exists := false
		for _, currentValue := range o.Nics {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Status_DeviceInfo_HardwareInformation_Network_NIC
			if sourceValue != nil {
				newDstElement = new(Device_Status_DeviceInfo_HardwareInformation_Network_NIC)
				newDstElement.Merge(sourceValue)
			}
			o.Nics = append(o.Nics, newDstElement)
		}
	}

}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_Network))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_GPU_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_GPU_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_GPU_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_GPU) *Device_Status_DeviceInfo_HardwareInformation_GPU_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_GPU_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_GPU_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_GPU_FieldMask{}

	if len(o.GetGraphicCards()) == len(other.GetGraphicCards()) {
		for i, lValue := range o.GetGraphicCards() {
			rValue := other.GetGraphicCards()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationGPU_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationGPU_FieldPathSelectorGraphicCards})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_GPU))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU) Clone() *Device_Status_DeviceInfo_HardwareInformation_GPU {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_GPU{}
	result.GraphicCards = make([]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard, len(o.GraphicCards))
	for i, sourceValue := range o.GraphicCards {
		result.GraphicCards[i] = sourceValue.Clone()
	}
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU) Merge(source *Device_Status_DeviceInfo_HardwareInformation_GPU) {
	for _, sourceValue := range source.GetGraphicCards() {
		exists := false
		for _, currentValue := range o.GraphicCards {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard
			if sourceValue != nil {
				newDstElement = new(Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)
				newDstElement.Merge(sourceValue)
			}
			o.GraphicCards = append(o.GraphicCards, newDstElement)
		}
	}

}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_PCIDevice_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_PCIDevice_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_PCIDevice_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) *Device_Status_DeviceInfo_HardwareInformation_PCIDevice_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_PCIDevice_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_PCIDevice_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_PCIDevice_FieldMask{}
	if o.GetAddress() != other.GetAddress() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorAddress})
	}
	if o.GetVendor() != other.GetVendor() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorVendor})
	}
	if o.GetProduct() != other.GetProduct() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorProduct})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorName})
	}
	if o.GetSubvendor() != other.GetSubvendor() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationPCIDevice_FieldPathSelectorSubvendor})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Clone() *Device_Status_DeviceInfo_HardwareInformation_PCIDevice {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_PCIDevice{}
	result.Address = o.Address
	result.Vendor = o.Vendor
	result.Product = o.Product
	result.Name = o.Name
	result.Subvendor = o.Subvendor
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Merge(source *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) {
	o.Address = source.GetAddress()
	o.Vendor = source.GetVendor()
	o.Product = source.GetProduct()
	o.Name = source.GetName()
	o.Subvendor = source.GetSubvendor()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_MemoryInfo_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_MemoryInfo_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_MemoryInfo_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_FieldMask{}

	if len(o.GetMemory()) == len(other.GetMemory()) {
		for i, lValue := range o.GetMemory() {
			rValue := other.GetMemory()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfo_FieldPathSelectorMemory})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Clone() *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_MemoryInfo{}
	result.Memory = make([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory, len(o.Memory))
	for i, sourceValue := range o.Memory {
		result.Memory[i] = sourceValue.Clone()
	}
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Merge(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) {
	for _, sourceValue := range source.GetMemory() {
		exists := false
		for _, currentValue := range o.Memory {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory
			if sourceValue != nil {
				newDstElement = new(Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)
				newDstElement.Merge(sourceValue)
			}
			o.Memory = append(o.Memory, newDstElement)
		}
	}

}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_System_Configuration_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_System_Configuration_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_System_Configuration_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) *Device_Status_DeviceInfo_HardwareInformation_System_Configuration_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_System_Configuration_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_System_Configuration_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_System_Configuration_FieldMask{}
	if o.GetChassis() != other.GetChassis() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorChassis})
	}
	if o.GetUuid() != other.GetUuid() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorUuid})
	}
	if o.GetSkuNumber() != other.GetSkuNumber() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorSkuNumber})
	}
	if o.GetFamily() != other.GetFamily() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationSystemConfiguration_FieldPathSelectorFamily})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Clone() *Device_Status_DeviceInfo_HardwareInformation_System_Configuration {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_System_Configuration{}
	result.Chassis = o.Chassis
	result.Uuid = o.Uuid
	result.SkuNumber = o.SkuNumber
	result.Family = o.Family
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Merge(source *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) {
	o.Chassis = source.GetChassis()
	o.Uuid = source.GetUuid()
	o.SkuNumber = source.GetSkuNumber()
	o.Family = source.GetFamily()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_CPU_Processor_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_CPU_Processor_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_CPU_Processor_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_FieldMask{}
	if o.GetVendor() != other.GetVendor() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorVendor})
	}
	if o.GetModel() != other.GetModel() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorModel})
	}

	if len(o.GetCapabilities()) == len(other.GetCapabilities()) {
		for i, lValue := range o.GetCapabilities() {
			rValue := other.GetCapabilities()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCapabilities})
	}
	if o.GetNumThreads() != other.GetNumThreads() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumThreads})
	}
	if o.GetNumCores() != other.GetNumCores() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumCores})
	}
	if o.GetNumEnabledCores() != other.GetNumEnabledCores() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorNumEnabledCores})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorName})
	}
	if o.GetSerial() != other.GetSerial() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorSerial})
	}
	if o.GetFrequencyMhz() != other.GetFrequencyMhz() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorFrequencyMhz})
	}
	if o.GetMaxFrequencyMhz() != other.GetMaxFrequencyMhz() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorMaxFrequencyMhz})
	}

	if len(o.GetCacheInfo()) == len(other.GetCacheInfo()) {
		for i, lValue := range o.GetCacheInfo() {
			rValue := other.GetCacheInfo()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessor_FieldPathSelectorCacheInfo})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Clone() *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_CPU_Processor{}
	result.Vendor = o.Vendor
	result.Model = o.Model
	result.Capabilities = make([]*Device_Status_DeviceInfo_HardwareInformation_Capability, len(o.Capabilities))
	for i, sourceValue := range o.Capabilities {
		result.Capabilities[i] = sourceValue.Clone()
	}
	result.NumThreads = o.NumThreads
	result.NumCores = o.NumCores
	result.NumEnabledCores = o.NumEnabledCores
	result.Name = o.Name
	result.Serial = o.Serial
	result.FrequencyMhz = o.FrequencyMhz
	result.MaxFrequencyMhz = o.MaxFrequencyMhz
	result.CacheInfo = make([]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache, len(o.CacheInfo))
	for i, sourceValue := range o.CacheInfo {
		result.CacheInfo[i] = sourceValue.Clone()
	}
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Merge(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) {
	o.Vendor = source.GetVendor()
	o.Model = source.GetModel()
	for _, sourceValue := range source.GetCapabilities() {
		exists := false
		for _, currentValue := range o.Capabilities {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Status_DeviceInfo_HardwareInformation_Capability
			if sourceValue != nil {
				newDstElement = new(Device_Status_DeviceInfo_HardwareInformation_Capability)
				newDstElement.Merge(sourceValue)
			}
			o.Capabilities = append(o.Capabilities, newDstElement)
		}
	}

	o.NumThreads = source.GetNumThreads()
	o.NumCores = source.GetNumCores()
	o.NumEnabledCores = source.GetNumEnabledCores()
	o.Name = source.GetName()
	o.Serial = source.GetSerial()
	o.FrequencyMhz = source.GetFrequencyMhz()
	o.MaxFrequencyMhz = source.GetMaxFrequencyMhz()
	for _, sourceValue := range source.GetCacheInfo() {
		exists := false
		for _, currentValue := range o.CacheInfo {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache
			if sourceValue != nil {
				newDstElement = new(Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)
				newDstElement.Merge(sourceValue)
			}
			o.CacheInfo = append(o.CacheInfo, newDstElement)
		}
	}

}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorType})
	}
	if o.GetSizeBytes() != other.GetSizeBytes() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationCPUProcessorCache_FieldPathSelectorSizeBytes})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Clone() *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache{}
	result.Type = o.Type
	result.SizeBytes = o.SizeBytes
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Merge(source *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) {
	o.Type = source.GetType()
	o.SizeBytes = source.GetSizeBytes()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Block_Disk_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Block_Disk_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_Block_Disk_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_Block_Disk_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_Block_Disk_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorName})
	}
	if o.GetSizeBytes() != other.GetSizeBytes() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSizeBytes})
	}
	if o.GetDriveType() != other.GetDriveType() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorDriveType})
	}
	if o.GetVendor() != other.GetVendor() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorVendor})
	}
	if o.GetModel() != other.GetModel() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorModel})
	}
	if o.GetSerialNumber() != other.GetSerialNumber() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorSerialNumber})
	}
	if o.GetWwn() != other.GetWwn() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorWwn})
	}

	if len(o.GetPartitions()) == len(other.GetPartitions()) {
		for i, lValue := range o.GetPartitions() {
			rValue := other.GetPartitions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDisk_FieldPathSelectorPartitions})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Clone() *Device_Status_DeviceInfo_HardwareInformation_Block_Disk {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_Block_Disk{}
	result.Name = o.Name
	result.SizeBytes = o.SizeBytes
	result.DriveType = o.DriveType
	result.Vendor = o.Vendor
	result.Model = o.Model
	result.SerialNumber = o.SerialNumber
	result.Wwn = o.Wwn
	result.Partitions = make([]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition, len(o.Partitions))
	for i, sourceValue := range o.Partitions {
		result.Partitions[i] = sourceValue.Clone()
	}
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Merge(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) {
	o.Name = source.GetName()
	o.SizeBytes = source.GetSizeBytes()
	o.DriveType = source.GetDriveType()
	o.Vendor = source.GetVendor()
	o.Model = source.GetModel()
	o.SerialNumber = source.GetSerialNumber()
	o.Wwn = source.GetWwn()
	for _, sourceValue := range source.GetPartitions() {
		exists := false
		for _, currentValue := range o.Partitions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition
			if sourceValue != nil {
				newDstElement = new(Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)
				newDstElement.Merge(sourceValue)
			}
			o.Partitions = append(o.Partitions, newDstElement)
		}
	}

}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorName})
	}
	if o.GetSizeBytes() != other.GetSizeBytes() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorSizeBytes})
	}
	if o.GetMountPoint() != other.GetMountPoint() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorMountPoint})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationBlockDiskPartition_FieldPathSelectorType})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Clone() *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition{}
	result.Name = o.Name
	result.SizeBytes = o.SizeBytes
	result.MountPoint = o.MountPoint
	result.Type = o.Type
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Merge(source *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) {
	o.Name = source.GetName()
	o.SizeBytes = source.GetSizeBytes()
	o.MountPoint = source.GetMountPoint()
	o.Type = source.GetType()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_Network_NIC_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Network_NIC_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_Network_NIC_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *Device_Status_DeviceInfo_HardwareInformation_Network_NIC_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_Network_NIC_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_Network_NIC_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_Network_NIC_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorName})
	}
	if o.GetMacAddress() != other.GetMacAddress() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorMacAddress})
	}
	if o.GetVirtual() != other.GetVirtual() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVirtual})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorDescription})
	}
	if o.GetProductName() != other.GetProductName() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorProductName})
	}
	if o.GetVendor() != other.GetVendor() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorVendor})
	}
	if o.GetSubvendor() != other.GetSubvendor() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSubvendor})
	}

	if len(o.GetSetting()) == len(other.GetSetting()) {
		for i, lValue := range o.GetSetting() {
			rValue := other.GetSetting()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationNetworkNIC_FieldPathSelectorSetting})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Clone() *Device_Status_DeviceInfo_HardwareInformation_Network_NIC {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_Network_NIC{}
	result.Name = o.Name
	result.MacAddress = o.MacAddress
	result.Virtual = o.Virtual
	result.Description = o.Description
	result.ProductName = o.ProductName
	result.Vendor = o.Vendor
	result.Subvendor = o.Subvendor
	result.Setting = map[string]string{}
	for key, sourceValue := range o.Setting {
		result.Setting[key] = sourceValue
	}
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Merge(source *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) {
	o.Name = source.GetName()
	o.MacAddress = source.GetMacAddress()
	o.Virtual = source.GetVirtual()
	o.Description = source.GetDescription()
	o.ProductName = source.GetProductName()
	o.Vendor = source.GetVendor()
	o.Subvendor = source.GetSubvendor()
	if source.GetSetting() != nil {
		if o.Setting == nil {
			o.Setting = make(map[string]string, len(source.GetSetting()))
		}
		for key, sourceValue := range source.GetSetting() {
			o.Setting[key] = sourceValue
		}
	}
}

func (o *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard_FieldMask{}
	if o.GetIndex() != other.GetIndex() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorIndex})
	}
	{
		subMask := o.GetDevice().MakeDiffFieldMask(other.GetDevice())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldSubPath{selector: DeviceStatusDeviceInfoHardwareInformationGPUGraphicCard_FieldPathSelectorDevice, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Clone() *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard{}
	result.Index = o.Index
	result.Device = o.Device.Clone()
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Merge(source *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) {
	o.Index = source.GetIndex()
	if source.GetDevice() != nil {
		if o.Device == nil {
			o.Device = new(Device_Status_DeviceInfo_HardwareInformation_PCIDevice)
		}
		o.Device.Merge(source.GetDevice())
	}
}

func (o *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GotenObjectExt() {}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_FieldMask{}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorDescription})
	}
	if o.GetSizeBytes() != other.GetSizeBytes() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorSizeBytes})
	}

	if len(o.GetMemoryBanks()) == len(other.GetMemoryBanks()) {
		for i, lValue := range o.GetMemoryBanks() {
			rValue := other.GetMemoryBanks()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemory_FieldPathSelectorMemoryBanks})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Clone() *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory{}
	result.Description = o.Description
	result.SizeBytes = o.SizeBytes
	result.MemoryBanks = make([]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank, len(o.MemoryBanks))
	for i, sourceValue := range o.MemoryBanks {
		result.MemoryBanks[i] = sourceValue.Clone()
	}
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Merge(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) {
	o.Description = source.GetDescription()
	o.SizeBytes = source.GetSizeBytes()
	for _, sourceValue := range source.GetMemoryBanks() {
		exists := false
		for _, currentValue := range o.MemoryBanks {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank
			if sourceValue != nil {
				newDstElement = new(Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)
				newDstElement.Merge(sourceValue)
			}
			o.MemoryBanks = append(o.MemoryBanks, newDstElement)
		}
	}

}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GotenObjectExt() {
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) MakeFullFieldMask() *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank_FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDevice_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank_FieldMask()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) MakeDiffFieldMask(other *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank_FieldMask {
	if o == nil && other == nil {
		return &Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDevice_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank_FieldMask()
	}

	res := &Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank_FieldMask{}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorDescription})
	}
	if o.GetProduct() != other.GetProduct() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorProduct})
	}
	if o.GetVendor() != other.GetVendor() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorVendor})
	}
	if o.GetSerial() != other.GetSerial() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSerial})
	}
	if o.GetSlot() != other.GetSlot() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSlot})
	}
	if o.GetSizeBytes() != other.GetSizeBytes() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorSizeBytes})
	}
	if o.GetFrequencyHz() != other.GetFrequencyHz() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorFrequencyHz})
	}
	if o.GetWidthBits() != other.GetWidthBits() {
		res.Paths = append(res.Paths, &DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldTerminalPath{selector: DeviceStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBank_FieldPathSelectorWidthBits})
	}
	return res
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank))
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Clone() *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank {
	if o == nil {
		return nil
	}
	result := &Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank{}
	result.Description = o.Description
	result.Product = o.Product
	result.Vendor = o.Vendor
	result.Serial = o.Serial
	result.Slot = o.Slot
	result.SizeBytes = o.SizeBytes
	result.FrequencyHz = o.FrequencyHz
	result.WidthBits = o.WidthBits
	return result
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Merge(source *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) {
	o.Description = source.GetDescription()
	o.Product = source.GetProduct()
	o.Vendor = source.GetVendor()
	o.Serial = source.GetSerial()
	o.Slot = source.GetSlot()
	o.SizeBytes = source.GetSizeBytes()
	o.FrequencyHz = source.GetFrequencyHz()
	o.WidthBits = source.GetWidthBits()
}

func (o *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank))
}
