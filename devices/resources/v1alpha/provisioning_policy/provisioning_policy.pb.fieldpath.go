// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha/provisioning_policy.proto
// DO NOT EDIT!!!

package provisioning_policy

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/project"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/service_account"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &iam_service_account.ServiceAccount{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProvisioningPolicy_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProvisioningPolicy_FieldPathSelector
	Get(source *ProvisioningPolicy) []interface{}
	GetSingle(source *ProvisioningPolicy) (interface{}, bool)
	ClearValue(item *ProvisioningPolicy)

	// Those methods build corresponding ProvisioningPolicy_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProvisioningPolicy_FieldPathValue
	WithIArrayOfValues(values interface{}) ProvisioningPolicy_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProvisioningPolicy_FieldPathArrayItemValue
}

type ProvisioningPolicy_FieldPathSelector int32

const (
	ProvisioningPolicy_FieldPathSelectorName     ProvisioningPolicy_FieldPathSelector = 0
	ProvisioningPolicy_FieldPathSelectorSpec     ProvisioningPolicy_FieldPathSelector = 1
	ProvisioningPolicy_FieldPathSelectorStatus   ProvisioningPolicy_FieldPathSelector = 2
	ProvisioningPolicy_FieldPathSelectorMetadata ProvisioningPolicy_FieldPathSelector = 3
)

func (s ProvisioningPolicy_FieldPathSelector) String() string {
	switch s {
	case ProvisioningPolicy_FieldPathSelectorName:
		return "name"
	case ProvisioningPolicy_FieldPathSelectorSpec:
		return "spec"
	case ProvisioningPolicy_FieldPathSelectorStatus:
		return "status"
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", s))
	}
}

func BuildProvisioningPolicy_FieldPath(fp gotenobject.RawFieldPath) (ProvisioningPolicy_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProvisioningPolicy")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProvisioningPolicy_FieldTerminalPath{selector: ProvisioningPolicy_FieldPathSelectorName}, nil
		case "spec":
			return &ProvisioningPolicy_FieldTerminalPath{selector: ProvisioningPolicy_FieldPathSelectorSpec}, nil
		case "status":
			return &ProvisioningPolicy_FieldTerminalPath{selector: ProvisioningPolicy_FieldPathSelectorStatus}, nil
		case "metadata":
			return &ProvisioningPolicy_FieldTerminalPath{selector: ProvisioningPolicy_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "spec":
			if subpath, err := BuildProvisioningPolicySpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisioningPolicy_FieldSubPath{selector: ProvisioningPolicy_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildProvisioningPolicyStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisioningPolicy_FieldSubPath{selector: ProvisioningPolicy_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisioningPolicy_FieldSubPath{selector: ProvisioningPolicy_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProvisioningPolicy", fp)
}

func ParseProvisioningPolicy_FieldPath(rawField string) (ProvisioningPolicy_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProvisioningPolicy_FieldPath(fp)
}

func MustParseProvisioningPolicy_FieldPath(rawField string) ProvisioningPolicy_FieldPath {
	fp, err := ParseProvisioningPolicy_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProvisioningPolicy_FieldTerminalPath struct {
	selector ProvisioningPolicy_FieldPathSelector
}

var _ ProvisioningPolicy_FieldPath = (*ProvisioningPolicy_FieldTerminalPath)(nil)

func (fp *ProvisioningPolicy_FieldTerminalPath) Selector() ProvisioningPolicy_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProvisioningPolicy_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProvisioningPolicy_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProvisioningPolicy
func (fp *ProvisioningPolicy_FieldTerminalPath) Get(source *ProvisioningPolicy) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProvisioningPolicy_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ProvisioningPolicy_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case ProvisioningPolicy_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		case ProvisioningPolicy_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fp.selector))
		}
	}
	return
}

func (fp *ProvisioningPolicy_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProvisioningPolicy))
}

// GetSingle returns value pointed by specific field of from source ProvisioningPolicy
func (fp *ProvisioningPolicy_FieldTerminalPath) GetSingle(source *ProvisioningPolicy) (interface{}, bool) {
	switch fp.selector {
	case ProvisioningPolicy_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ProvisioningPolicy_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case ProvisioningPolicy_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicy_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProvisioningPolicy))
}

// GetDefault returns a default value of the field type
func (fp *ProvisioningPolicy_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProvisioningPolicy_FieldPathSelectorName:
		return (*Name)(nil)
	case ProvisioningPolicy_FieldPathSelectorSpec:
		return (*ProvisioningPolicy_Spec)(nil)
	case ProvisioningPolicy_FieldPathSelectorStatus:
		return (*ProvisioningPolicy_Status)(nil)
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicy_FieldTerminalPath) ClearValue(item *ProvisioningPolicy) {
	if item != nil {
		switch fp.selector {
		case ProvisioningPolicy_FieldPathSelectorName:
			item.Name = nil
		case ProvisioningPolicy_FieldPathSelectorSpec:
			item.Spec = nil
		case ProvisioningPolicy_FieldPathSelectorStatus:
			item.Status = nil
		case ProvisioningPolicy_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fp.selector))
		}
	}
}

func (fp *ProvisioningPolicy_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProvisioningPolicy))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProvisioningPolicy_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProvisioningPolicy_FieldPathSelectorName
}

func (fp *ProvisioningPolicy_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProvisioningPolicy_FieldTerminalPath) WithIValue(value interface{}) ProvisioningPolicy_FieldPathValue {
	switch fp.selector {
	case ProvisioningPolicy_FieldPathSelectorName:
		return &ProvisioningPolicy_FieldTerminalPathValue{ProvisioningPolicy_FieldTerminalPath: *fp, value: value.(*Name)}
	case ProvisioningPolicy_FieldPathSelectorSpec:
		return &ProvisioningPolicy_FieldTerminalPathValue{ProvisioningPolicy_FieldTerminalPath: *fp, value: value.(*ProvisioningPolicy_Spec)}
	case ProvisioningPolicy_FieldPathSelectorStatus:
		return &ProvisioningPolicy_FieldTerminalPathValue{ProvisioningPolicy_FieldTerminalPath: *fp, value: value.(*ProvisioningPolicy_Status)}
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		return &ProvisioningPolicy_FieldTerminalPathValue{ProvisioningPolicy_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicy_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProvisioningPolicy_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProvisioningPolicy_FieldPathArrayOfValues {
	fpaov := &ProvisioningPolicy_FieldTerminalPathArrayOfValues{ProvisioningPolicy_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProvisioningPolicy_FieldPathSelectorName:
		return &ProvisioningPolicy_FieldTerminalPathArrayOfValues{ProvisioningPolicy_FieldTerminalPath: *fp, values: values.([]*Name)}
	case ProvisioningPolicy_FieldPathSelectorSpec:
		return &ProvisioningPolicy_FieldTerminalPathArrayOfValues{ProvisioningPolicy_FieldTerminalPath: *fp, values: values.([]*ProvisioningPolicy_Spec)}
	case ProvisioningPolicy_FieldPathSelectorStatus:
		return &ProvisioningPolicy_FieldTerminalPathArrayOfValues{ProvisioningPolicy_FieldTerminalPath: *fp, values: values.([]*ProvisioningPolicy_Status)}
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		return &ProvisioningPolicy_FieldTerminalPathArrayOfValues{ProvisioningPolicy_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProvisioningPolicy_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProvisioningPolicy_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProvisioningPolicy_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicy_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProvisioningPolicy_FieldSubPath struct {
	selector ProvisioningPolicy_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProvisioningPolicy_FieldPath = (*ProvisioningPolicy_FieldSubPath)(nil)

func (fps *ProvisioningPolicy_FieldSubPath) Selector() ProvisioningPolicy_FieldPathSelector {
	return fps.selector
}
func (fps *ProvisioningPolicy_FieldSubPath) AsSpecSubPath() (ProvisioningPolicySpec_FieldPath, bool) {
	res, ok := fps.subPath.(ProvisioningPolicySpec_FieldPath)
	return res, ok
}
func (fps *ProvisioningPolicy_FieldSubPath) AsStatusSubPath() (ProvisioningPolicyStatus_FieldPath, bool) {
	res, ok := fps.subPath.(ProvisioningPolicyStatus_FieldPath)
	return res, ok
}
func (fps *ProvisioningPolicy_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProvisioningPolicy_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProvisioningPolicy_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProvisioningPolicy
func (fps *ProvisioningPolicy_FieldSubPath) Get(source *ProvisioningPolicy) (values []interface{}) {
	if asSpecFieldPath, ok := fps.AsSpecSubPath(); ok {
		values = append(values, asSpecFieldPath.Get(source.GetSpec())...)
	} else if asStatusFieldPath, ok := fps.AsStatusSubPath(); ok {
		values = append(values, asStatusFieldPath.Get(source.GetStatus())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fps.selector))
	}
	return
}

func (fps *ProvisioningPolicy_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProvisioningPolicy))
}

// GetSingle returns value of selected field from source ProvisioningPolicy
func (fps *ProvisioningPolicy_FieldSubPath) GetSingle(source *ProvisioningPolicy) (interface{}, bool) {
	switch fps.selector {
	case ProvisioningPolicy_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case ProvisioningPolicy_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fps.selector))
	}
}

func (fps *ProvisioningPolicy_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProvisioningPolicy))
}

// GetDefault returns a default value of the field type
func (fps *ProvisioningPolicy_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProvisioningPolicy_FieldSubPath) ClearValue(item *ProvisioningPolicy) {
	if item != nil {
		switch fps.selector {
		case ProvisioningPolicy_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case ProvisioningPolicy_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		case ProvisioningPolicy_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fps.selector))
		}
	}
}

func (fps *ProvisioningPolicy_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProvisioningPolicy))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProvisioningPolicy_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProvisioningPolicy_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProvisioningPolicy_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProvisioningPolicy_FieldSubPath) WithIValue(value interface{}) ProvisioningPolicy_FieldPathValue {
	return &ProvisioningPolicy_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProvisioningPolicy_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProvisioningPolicy_FieldSubPath) WithIArrayOfValues(values interface{}) ProvisioningPolicy_FieldPathArrayOfValues {
	return &ProvisioningPolicy_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProvisioningPolicy_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProvisioningPolicy_FieldSubPath) WithIArrayItemValue(value interface{}) ProvisioningPolicy_FieldPathArrayItemValue {
	return &ProvisioningPolicy_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProvisioningPolicy_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProvisioningPolicy_FieldPathValue allows storing values for ProvisioningPolicy fields according to their type
type ProvisioningPolicy_FieldPathValue interface {
	ProvisioningPolicy_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProvisioningPolicy)
	CompareWith(*ProvisioningPolicy) (cmp int, comparable bool)
}

func ParseProvisioningPolicy_FieldPathValue(pathStr, valueStr string) (ProvisioningPolicy_FieldPathValue, error) {
	fp, err := ParseProvisioningPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisioningPolicy field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProvisioningPolicy_FieldPathValue), nil
}

func MustParseProvisioningPolicy_FieldPathValue(pathStr, valueStr string) ProvisioningPolicy_FieldPathValue {
	fpv, err := ParseProvisioningPolicy_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProvisioningPolicy_FieldTerminalPathValue struct {
	ProvisioningPolicy_FieldTerminalPath
	value interface{}
}

var _ ProvisioningPolicy_FieldPathValue = (*ProvisioningPolicy_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProvisioningPolicy' as interface{}
func (fpv *ProvisioningPolicy_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProvisioningPolicy_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *ProvisioningPolicy_FieldTerminalPathValue) AsSpecValue() (*ProvisioningPolicy_Spec, bool) {
	res, ok := fpv.value.(*ProvisioningPolicy_Spec)
	return res, ok
}
func (fpv *ProvisioningPolicy_FieldTerminalPathValue) AsStatusValue() (*ProvisioningPolicy_Status, bool) {
	res, ok := fpv.value.(*ProvisioningPolicy_Status)
	return res, ok
}
func (fpv *ProvisioningPolicy_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object ProvisioningPolicy
func (fpv *ProvisioningPolicy_FieldTerminalPathValue) SetTo(target **ProvisioningPolicy) {
	if *target == nil {
		*target = new(ProvisioningPolicy)
	}
	switch fpv.selector {
	case ProvisioningPolicy_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case ProvisioningPolicy_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*ProvisioningPolicy_Spec)
	case ProvisioningPolicy_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*ProvisioningPolicy_Status)
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fpv.selector))
	}
}

func (fpv *ProvisioningPolicy_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningPolicy)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisioningPolicy_FieldTerminalPathValue' with the value under path in 'ProvisioningPolicy'.
func (fpv *ProvisioningPolicy_FieldTerminalPathValue) CompareWith(source *ProvisioningPolicy) (int, bool) {
	switch fpv.selector {
	case ProvisioningPolicy_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProvisioningPolicy_FieldPathSelectorSpec:
		return 0, false
	case ProvisioningPolicy_FieldPathSelectorStatus:
		return 0, false
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fpv.selector))
	}
}

func (fpv *ProvisioningPolicy_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProvisioningPolicy))
}

type ProvisioningPolicy_FieldSubPathValue struct {
	ProvisioningPolicy_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProvisioningPolicy_FieldPathValue = (*ProvisioningPolicy_FieldSubPathValue)(nil)

func (fpvs *ProvisioningPolicy_FieldSubPathValue) AsSpecPathValue() (ProvisioningPolicySpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProvisioningPolicySpec_FieldPathValue)
	return res, ok
}
func (fpvs *ProvisioningPolicy_FieldSubPathValue) AsStatusPathValue() (ProvisioningPolicyStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProvisioningPolicyStatus_FieldPathValue)
	return res, ok
}
func (fpvs *ProvisioningPolicy_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *ProvisioningPolicy_FieldSubPathValue) SetTo(target **ProvisioningPolicy) {
	if *target == nil {
		*target = new(ProvisioningPolicy)
	}
	switch fpvs.Selector() {
	case ProvisioningPolicy_FieldPathSelectorSpec:
		fpvs.subPathValue.(ProvisioningPolicySpec_FieldPathValue).SetTo(&(*target).Spec)
	case ProvisioningPolicy_FieldPathSelectorStatus:
		fpvs.subPathValue.(ProvisioningPolicyStatus_FieldPathValue).SetTo(&(*target).Status)
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisioningPolicy_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningPolicy)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProvisioningPolicy_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProvisioningPolicy_FieldSubPathValue) CompareWith(source *ProvisioningPolicy) (int, bool) {
	switch fpvs.Selector() {
	case ProvisioningPolicy_FieldPathSelectorSpec:
		return fpvs.subPathValue.(ProvisioningPolicySpec_FieldPathValue).CompareWith(source.GetSpec())
	case ProvisioningPolicy_FieldPathSelectorStatus:
		return fpvs.subPathValue.(ProvisioningPolicyStatus_FieldPathValue).CompareWith(source.GetStatus())
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisioningPolicy_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProvisioningPolicy))
}

// ProvisioningPolicy_FieldPathArrayItemValue allows storing single item in Path-specific values for ProvisioningPolicy according to their type
// Present only for array (repeated) types.
type ProvisioningPolicy_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProvisioningPolicy_FieldPath
	ContainsValue(*ProvisioningPolicy) bool
}

// ParseProvisioningPolicy_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProvisioningPolicy_FieldPathArrayItemValue(pathStr, valueStr string) (ProvisioningPolicy_FieldPathArrayItemValue, error) {
	fp, err := ParseProvisioningPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisioningPolicy field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProvisioningPolicy_FieldPathArrayItemValue), nil
}

func MustParseProvisioningPolicy_FieldPathArrayItemValue(pathStr, valueStr string) ProvisioningPolicy_FieldPathArrayItemValue {
	fpaiv, err := ParseProvisioningPolicy_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProvisioningPolicy_FieldTerminalPathArrayItemValue struct {
	ProvisioningPolicy_FieldTerminalPath
	value interface{}
}

var _ ProvisioningPolicy_FieldPathArrayItemValue = (*ProvisioningPolicy_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProvisioningPolicy as interface{}
func (fpaiv *ProvisioningPolicy_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProvisioningPolicy_FieldTerminalPathArrayItemValue) GetSingle(source *ProvisioningPolicy) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProvisioningPolicy_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProvisioningPolicy))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProvisioningPolicy'
func (fpaiv *ProvisioningPolicy_FieldTerminalPathArrayItemValue) ContainsValue(source *ProvisioningPolicy) bool {
	slice := fpaiv.ProvisioningPolicy_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProvisioningPolicy_FieldSubPathArrayItemValue struct {
	ProvisioningPolicy_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProvisioningPolicy_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProvisioningPolicy_FieldSubPathArrayItemValue) AsSpecPathItemValue() (ProvisioningPolicySpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProvisioningPolicySpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProvisioningPolicy_FieldSubPathArrayItemValue) AsStatusPathItemValue() (ProvisioningPolicyStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProvisioningPolicyStatus_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProvisioningPolicy_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProvisioningPolicy'
func (fpaivs *ProvisioningPolicy_FieldSubPathArrayItemValue) ContainsValue(source *ProvisioningPolicy) bool {
	switch fpaivs.Selector() {
	case ProvisioningPolicy_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(ProvisioningPolicySpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case ProvisioningPolicy_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(ProvisioningPolicyStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy: %d", fpaivs.Selector()))
	}
}

// ProvisioningPolicy_FieldPathArrayOfValues allows storing slice of values for ProvisioningPolicy fields according to their type
type ProvisioningPolicy_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProvisioningPolicy_FieldPath
}

func ParseProvisioningPolicy_FieldPathArrayOfValues(pathStr, valuesStr string) (ProvisioningPolicy_FieldPathArrayOfValues, error) {
	fp, err := ParseProvisioningPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisioningPolicy field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProvisioningPolicy_FieldPathArrayOfValues), nil
}

func MustParseProvisioningPolicy_FieldPathArrayOfValues(pathStr, valuesStr string) ProvisioningPolicy_FieldPathArrayOfValues {
	fpaov, err := ParseProvisioningPolicy_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProvisioningPolicy_FieldTerminalPathArrayOfValues struct {
	ProvisioningPolicy_FieldTerminalPath
	values interface{}
}

var _ ProvisioningPolicy_FieldPathArrayOfValues = (*ProvisioningPolicy_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProvisioningPolicy_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProvisioningPolicy_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case ProvisioningPolicy_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*ProvisioningPolicy_Spec) {
			values = append(values, v)
		}
	case ProvisioningPolicy_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*ProvisioningPolicy_Status) {
			values = append(values, v)
		}
	case ProvisioningPolicy_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProvisioningPolicy_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *ProvisioningPolicy_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*ProvisioningPolicy_Spec, bool) {
	res, ok := fpaov.values.([]*ProvisioningPolicy_Spec)
	return res, ok
}
func (fpaov *ProvisioningPolicy_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*ProvisioningPolicy_Status, bool) {
	res, ok := fpaov.values.([]*ProvisioningPolicy_Status)
	return res, ok
}
func (fpaov *ProvisioningPolicy_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type ProvisioningPolicy_FieldSubPathArrayOfValues struct {
	ProvisioningPolicy_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProvisioningPolicy_FieldPathArrayOfValues = (*ProvisioningPolicy_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProvisioningPolicy_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProvisioningPolicy_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (ProvisioningPolicySpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProvisioningPolicySpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProvisioningPolicy_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (ProvisioningPolicyStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProvisioningPolicyStatus_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProvisioningPolicy_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProvisioningPolicySpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProvisioningPolicySpec_FieldPathSelector
	Get(source *ProvisioningPolicy_Spec) []interface{}
	GetSingle(source *ProvisioningPolicy_Spec) (interface{}, bool)
	ClearValue(item *ProvisioningPolicy_Spec)

	// Those methods build corresponding ProvisioningPolicySpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProvisioningPolicySpec_FieldPathValue
	WithIArrayOfValues(values interface{}) ProvisioningPolicySpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProvisioningPolicySpec_FieldPathArrayItemValue
}

type ProvisioningPolicySpec_FieldPathSelector int32

const (
	ProvisioningPolicySpec_FieldPathSelectorMode               ProvisioningPolicySpec_FieldPathSelector = 0
	ProvisioningPolicySpec_FieldPathSelectorServiceAccount     ProvisioningPolicySpec_FieldPathSelector = 1
	ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat   ProvisioningPolicySpec_FieldPathSelector = 2
	ProvisioningPolicySpec_FieldPathSelectorLabels             ProvisioningPolicySpec_FieldPathSelector = 3
	ProvisioningPolicySpec_FieldPathSelectorTemplate           ProvisioningPolicySpec_FieldPathSelector = 4
	ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths ProvisioningPolicySpec_FieldPathSelector = 5
)

func (s ProvisioningPolicySpec_FieldPathSelector) String() string {
	switch s {
	case ProvisioningPolicySpec_FieldPathSelectorMode:
		return "mode"
	case ProvisioningPolicySpec_FieldPathSelectorServiceAccount:
		return "service_account"
	case ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat:
		return "device_name_format"
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		return "labels"
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		return "template"
	case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
		return "identity_field_paths"
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", s))
	}
}

func BuildProvisioningPolicySpec_FieldPath(fp gotenobject.RawFieldPath) (ProvisioningPolicySpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProvisioningPolicy_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "mode":
			return &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorMode}, nil
		case "service_account", "serviceAccount", "service-account":
			return &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorServiceAccount}, nil
		case "device_name_format", "deviceNameFormat", "device-name-format":
			return &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat}, nil
		case "labels":
			return &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorLabels}, nil
		case "template":
			return &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorTemplate}, nil
		case "identity_field_paths", "identityFieldPaths", "identity-field-paths":
			return &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths}, nil
		}
	} else {
		switch fp[0] {
		case "template":
			if subpath, err := BuildProvisioningPolicySpecTemplate_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisioningPolicySpec_FieldSubPath{selector: ProvisioningPolicySpec_FieldPathSelectorTemplate, subPath: subpath}, nil
			}
		case "labels":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object ProvisioningPolicy_Spec)", fp)
			}
			return &ProvisioningPolicySpec_FieldPathMap{selector: ProvisioningPolicySpec_FieldPathSelectorLabels, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProvisioningPolicy_Spec", fp)
}

func ParseProvisioningPolicySpec_FieldPath(rawField string) (ProvisioningPolicySpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProvisioningPolicySpec_FieldPath(fp)
}

func MustParseProvisioningPolicySpec_FieldPath(rawField string) ProvisioningPolicySpec_FieldPath {
	fp, err := ParseProvisioningPolicySpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProvisioningPolicySpec_FieldTerminalPath struct {
	selector ProvisioningPolicySpec_FieldPathSelector
}

var _ ProvisioningPolicySpec_FieldPath = (*ProvisioningPolicySpec_FieldTerminalPath)(nil)

func (fp *ProvisioningPolicySpec_FieldTerminalPath) Selector() ProvisioningPolicySpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProvisioningPolicySpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProvisioningPolicySpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProvisioningPolicy_Spec
func (fp *ProvisioningPolicySpec_FieldTerminalPath) Get(source *ProvisioningPolicy_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProvisioningPolicySpec_FieldPathSelectorMode:
			values = append(values, source.Mode)
		case ProvisioningPolicySpec_FieldPathSelectorServiceAccount:
			if source.ServiceAccount != nil {
				values = append(values, source.ServiceAccount)
			}
		case ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat:
			values = append(values, source.DeviceNameFormat)
		case ProvisioningPolicySpec_FieldPathSelectorLabels:
			values = append(values, source.Labels)
		case ProvisioningPolicySpec_FieldPathSelectorTemplate:
			if source.Template != nil {
				values = append(values, source.Template)
			}
		case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
			for _, value := range source.GetIdentityFieldPaths() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *ProvisioningPolicySpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProvisioningPolicy_Spec))
}

// GetSingle returns value pointed by specific field of from source ProvisioningPolicy_Spec
func (fp *ProvisioningPolicySpec_FieldTerminalPath) GetSingle(source *ProvisioningPolicy_Spec) (interface{}, bool) {
	switch fp.selector {
	case ProvisioningPolicySpec_FieldPathSelectorMode:
		return source.GetMode(), source != nil
	case ProvisioningPolicySpec_FieldPathSelectorServiceAccount:
		res := source.GetServiceAccount()
		return res, res != nil
	case ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat:
		return source.GetDeviceNameFormat(), source != nil
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		res := source.GetLabels()
		return res, res != nil
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		res := source.GetTemplate()
		return res, res != nil
	case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
		res := source.GetIdentityFieldPaths()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicySpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProvisioningPolicy_Spec))
}

// GetDefault returns a default value of the field type
func (fp *ProvisioningPolicySpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProvisioningPolicySpec_FieldPathSelectorMode:
		return ProvisioningPolicy_MODE_UNSPECIFIED
	case ProvisioningPolicySpec_FieldPathSelectorServiceAccount:
		return (*iam_service_account.Reference)(nil)
	case ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat:
		return ""
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		return (map[string]string)(nil)
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		return (*ProvisioningPolicy_Spec_Template)(nil)
	case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicySpec_FieldTerminalPath) ClearValue(item *ProvisioningPolicy_Spec) {
	if item != nil {
		switch fp.selector {
		case ProvisioningPolicySpec_FieldPathSelectorMode:
			item.Mode = ProvisioningPolicy_MODE_UNSPECIFIED
		case ProvisioningPolicySpec_FieldPathSelectorServiceAccount:
			item.ServiceAccount = nil
		case ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat:
			item.DeviceNameFormat = ""
		case ProvisioningPolicySpec_FieldPathSelectorLabels:
			item.Labels = nil
		case ProvisioningPolicySpec_FieldPathSelectorTemplate:
			item.Template = nil
		case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
			item.IdentityFieldPaths = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fp.selector))
		}
	}
}

func (fp *ProvisioningPolicySpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProvisioningPolicy_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProvisioningPolicySpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProvisioningPolicySpec_FieldPathSelectorMode ||
		fp.selector == ProvisioningPolicySpec_FieldPathSelectorServiceAccount ||
		fp.selector == ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat ||
		fp.selector == ProvisioningPolicySpec_FieldPathSelectorLabels ||
		fp.selector == ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths
}

func (fp *ProvisioningPolicySpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProvisioningPolicySpec_FieldTerminalPath) WithIValue(value interface{}) ProvisioningPolicySpec_FieldPathValue {
	switch fp.selector {
	case ProvisioningPolicySpec_FieldPathSelectorMode:
		return &ProvisioningPolicySpec_FieldTerminalPathValue{ProvisioningPolicySpec_FieldTerminalPath: *fp, value: value.(ProvisioningPolicy_Mode)}
	case ProvisioningPolicySpec_FieldPathSelectorServiceAccount:
		return &ProvisioningPolicySpec_FieldTerminalPathValue{ProvisioningPolicySpec_FieldTerminalPath: *fp, value: value.(*iam_service_account.Reference)}
	case ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat:
		return &ProvisioningPolicySpec_FieldTerminalPathValue{ProvisioningPolicySpec_FieldTerminalPath: *fp, value: value.(string)}
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		return &ProvisioningPolicySpec_FieldTerminalPathValue{ProvisioningPolicySpec_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		return &ProvisioningPolicySpec_FieldTerminalPathValue{ProvisioningPolicySpec_FieldTerminalPath: *fp, value: value.(*ProvisioningPolicy_Spec_Template)}
	case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
		return &ProvisioningPolicySpec_FieldTerminalPathValue{ProvisioningPolicySpec_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicySpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProvisioningPolicySpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProvisioningPolicySpec_FieldPathArrayOfValues {
	fpaov := &ProvisioningPolicySpec_FieldTerminalPathArrayOfValues{ProvisioningPolicySpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProvisioningPolicySpec_FieldPathSelectorMode:
		return &ProvisioningPolicySpec_FieldTerminalPathArrayOfValues{ProvisioningPolicySpec_FieldTerminalPath: *fp, values: values.([]ProvisioningPolicy_Mode)}
	case ProvisioningPolicySpec_FieldPathSelectorServiceAccount:
		return &ProvisioningPolicySpec_FieldTerminalPathArrayOfValues{ProvisioningPolicySpec_FieldTerminalPath: *fp, values: values.([]*iam_service_account.Reference)}
	case ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat:
		return &ProvisioningPolicySpec_FieldTerminalPathArrayOfValues{ProvisioningPolicySpec_FieldTerminalPath: *fp, values: values.([]string)}
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		return &ProvisioningPolicySpec_FieldTerminalPathArrayOfValues{ProvisioningPolicySpec_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		return &ProvisioningPolicySpec_FieldTerminalPathArrayOfValues{ProvisioningPolicySpec_FieldTerminalPath: *fp, values: values.([]*ProvisioningPolicy_Spec_Template)}
	case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
		return &ProvisioningPolicySpec_FieldTerminalPathArrayOfValues{ProvisioningPolicySpec_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProvisioningPolicySpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProvisioningPolicySpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProvisioningPolicySpec_FieldPathArrayItemValue {
	switch fp.selector {
	case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
		return &ProvisioningPolicySpec_FieldTerminalPathArrayItemValue{ProvisioningPolicySpec_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicySpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type ProvisioningPolicySpec_FieldPathMap struct {
	key      string
	selector ProvisioningPolicySpec_FieldPathSelector
}

var _ ProvisioningPolicySpec_FieldPath = (*ProvisioningPolicySpec_FieldPathMap)(nil)

func (fpm *ProvisioningPolicySpec_FieldPathMap) Selector() ProvisioningPolicySpec_FieldPathSelector {
	return fpm.selector
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *ProvisioningPolicySpec_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *ProvisioningPolicySpec_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source ProvisioningPolicy_Spec
func (fpm *ProvisioningPolicySpec_FieldPathMap) Get(source *ProvisioningPolicy_Spec) (values []interface{}) {
	switch fpm.selector {
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		if value, ok := source.GetLabels()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpm.selector))
	}
	return
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*ProvisioningPolicy_Spec))
}

// GetSingle returns value by selected field map key from source ProvisioningPolicy_Spec
func (fpm *ProvisioningPolicySpec_FieldPathMap) GetSingle(source *ProvisioningPolicy_Spec) (interface{}, bool) {
	switch fpm.selector {
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		res, ok := source.GetLabels()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpm.selector))
	}
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*ProvisioningPolicy_Spec))
}

// GetDefault returns a default value of the field type
func (fpm *ProvisioningPolicySpec_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpm.selector))
	}
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) ClearValue(item *ProvisioningPolicy_Spec) {
	if item != nil {
		switch fpm.selector {
		case ProvisioningPolicySpec_FieldPathSelectorLabels:
			delete(item.Labels, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpm.selector))
		}
	}
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*ProvisioningPolicy_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fpm *ProvisioningPolicySpec_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpm.selector))
	}
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) WithIValue(value interface{}) ProvisioningPolicySpec_FieldPathValue {
	switch fpm.selector {
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		return &ProvisioningPolicySpec_FieldPathMapValue{ProvisioningPolicySpec_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpm.selector))
	}
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) WithIArrayOfValues(values interface{}) ProvisioningPolicySpec_FieldPathArrayOfValues {
	switch fpm.selector {
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		return &ProvisioningPolicySpec_FieldPathMapArrayOfValues{ProvisioningPolicySpec_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpm.selector))
	}
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) WithIArrayItemValue(value interface{}) ProvisioningPolicySpec_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *ProvisioningPolicySpec_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type ProvisioningPolicySpec_FieldSubPath struct {
	selector ProvisioningPolicySpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProvisioningPolicySpec_FieldPath = (*ProvisioningPolicySpec_FieldSubPath)(nil)

func (fps *ProvisioningPolicySpec_FieldSubPath) Selector() ProvisioningPolicySpec_FieldPathSelector {
	return fps.selector
}
func (fps *ProvisioningPolicySpec_FieldSubPath) AsTemplateSubPath() (ProvisioningPolicySpecTemplate_FieldPath, bool) {
	res, ok := fps.subPath.(ProvisioningPolicySpecTemplate_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProvisioningPolicySpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProvisioningPolicySpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProvisioningPolicy_Spec
func (fps *ProvisioningPolicySpec_FieldSubPath) Get(source *ProvisioningPolicy_Spec) (values []interface{}) {
	if asTemplateFieldPath, ok := fps.AsTemplateSubPath(); ok {
		values = append(values, asTemplateFieldPath.Get(source.GetTemplate())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fps.selector))
	}
	return
}

func (fps *ProvisioningPolicySpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProvisioningPolicy_Spec))
}

// GetSingle returns value of selected field from source ProvisioningPolicy_Spec
func (fps *ProvisioningPolicySpec_FieldSubPath) GetSingle(source *ProvisioningPolicy_Spec) (interface{}, bool) {
	switch fps.selector {
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		if source.GetTemplate() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTemplate())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fps.selector))
	}
}

func (fps *ProvisioningPolicySpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProvisioningPolicy_Spec))
}

// GetDefault returns a default value of the field type
func (fps *ProvisioningPolicySpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProvisioningPolicySpec_FieldSubPath) ClearValue(item *ProvisioningPolicy_Spec) {
	if item != nil {
		switch fps.selector {
		case ProvisioningPolicySpec_FieldPathSelectorTemplate:
			fps.subPath.ClearValueRaw(item.Template)
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fps.selector))
		}
	}
}

func (fps *ProvisioningPolicySpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProvisioningPolicy_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProvisioningPolicySpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProvisioningPolicySpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProvisioningPolicySpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProvisioningPolicySpec_FieldSubPath) WithIValue(value interface{}) ProvisioningPolicySpec_FieldPathValue {
	return &ProvisioningPolicySpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProvisioningPolicySpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProvisioningPolicySpec_FieldSubPath) WithIArrayOfValues(values interface{}) ProvisioningPolicySpec_FieldPathArrayOfValues {
	return &ProvisioningPolicySpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProvisioningPolicySpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProvisioningPolicySpec_FieldSubPath) WithIArrayItemValue(value interface{}) ProvisioningPolicySpec_FieldPathArrayItemValue {
	return &ProvisioningPolicySpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProvisioningPolicySpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProvisioningPolicySpec_FieldPathValue allows storing values for Spec fields according to their type
type ProvisioningPolicySpec_FieldPathValue interface {
	ProvisioningPolicySpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProvisioningPolicy_Spec)
	CompareWith(*ProvisioningPolicy_Spec) (cmp int, comparable bool)
}

func ParseProvisioningPolicySpec_FieldPathValue(pathStr, valueStr string) (ProvisioningPolicySpec_FieldPathValue, error) {
	fp, err := ParseProvisioningPolicySpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProvisioningPolicySpec_FieldPathValue), nil
}

func MustParseProvisioningPolicySpec_FieldPathValue(pathStr, valueStr string) ProvisioningPolicySpec_FieldPathValue {
	fpv, err := ParseProvisioningPolicySpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProvisioningPolicySpec_FieldTerminalPathValue struct {
	ProvisioningPolicySpec_FieldTerminalPath
	value interface{}
}

var _ ProvisioningPolicySpec_FieldPathValue = (*ProvisioningPolicySpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *ProvisioningPolicySpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProvisioningPolicySpec_FieldTerminalPathValue) AsModeValue() (ProvisioningPolicy_Mode, bool) {
	res, ok := fpv.value.(ProvisioningPolicy_Mode)
	return res, ok
}
func (fpv *ProvisioningPolicySpec_FieldTerminalPathValue) AsServiceAccountValue() (*iam_service_account.Reference, bool) {
	res, ok := fpv.value.(*iam_service_account.Reference)
	return res, ok
}
func (fpv *ProvisioningPolicySpec_FieldTerminalPathValue) AsDeviceNameFormatValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProvisioningPolicySpec_FieldTerminalPathValue) AsLabelsValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *ProvisioningPolicySpec_FieldTerminalPathValue) AsTemplateValue() (*ProvisioningPolicy_Spec_Template, bool) {
	res, ok := fpv.value.(*ProvisioningPolicy_Spec_Template)
	return res, ok
}
func (fpv *ProvisioningPolicySpec_FieldTerminalPathValue) AsIdentityFieldPathsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *ProvisioningPolicySpec_FieldTerminalPathValue) SetTo(target **ProvisioningPolicy_Spec) {
	if *target == nil {
		*target = new(ProvisioningPolicy_Spec)
	}
	switch fpv.selector {
	case ProvisioningPolicySpec_FieldPathSelectorMode:
		(*target).Mode = fpv.value.(ProvisioningPolicy_Mode)
	case ProvisioningPolicySpec_FieldPathSelectorServiceAccount:
		(*target).ServiceAccount = fpv.value.(*iam_service_account.Reference)
	case ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat:
		(*target).DeviceNameFormat = fpv.value.(string)
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		(*target).Labels = fpv.value.(map[string]string)
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		(*target).Template = fpv.value.(*ProvisioningPolicy_Spec_Template)
	case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
		(*target).IdentityFieldPaths = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpv.selector))
	}
}

func (fpv *ProvisioningPolicySpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningPolicy_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisioningPolicySpec_FieldTerminalPathValue' with the value under path in 'ProvisioningPolicy_Spec'.
func (fpv *ProvisioningPolicySpec_FieldTerminalPathValue) CompareWith(source *ProvisioningPolicy_Spec) (int, bool) {
	switch fpv.selector {
	case ProvisioningPolicySpec_FieldPathSelectorMode:
		leftValue := fpv.value.(ProvisioningPolicy_Mode)
		rightValue := source.GetMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProvisioningPolicySpec_FieldPathSelectorServiceAccount:
		leftValue := fpv.value.(*iam_service_account.Reference)
		rightValue := source.GetServiceAccount()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat:
		leftValue := fpv.value.(string)
		rightValue := source.GetDeviceNameFormat()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		return 0, false
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		return 0, false
	case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpv.selector))
	}
}

func (fpv *ProvisioningPolicySpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProvisioningPolicy_Spec))
}

type ProvisioningPolicySpec_FieldPathMapValue struct {
	ProvisioningPolicySpec_FieldPathMap
	value interface{}
}

var _ ProvisioningPolicySpec_FieldPathValue = (*ProvisioningPolicySpec_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in Spec as interface{}
func (fpmv *ProvisioningPolicySpec_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *ProvisioningPolicySpec_FieldPathMapValue) AsLabelsElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in Spec
func (fpmv *ProvisioningPolicySpec_FieldPathMapValue) SetTo(target **ProvisioningPolicy_Spec) {
	if *target == nil {
		*target = new(ProvisioningPolicy_Spec)
	}
	switch fpmv.selector {
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		if (*target).Labels == nil {
			(*target).Labels = make(map[string]string)
		}
		(*target).Labels[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpmv.selector))
	}
}

func (fpmv *ProvisioningPolicySpec_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningPolicy_Spec)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisioningPolicySpec_FieldPathMapValue' with the value under path in 'ProvisioningPolicy_Spec'.
func (fpmv *ProvisioningPolicySpec_FieldPathMapValue) CompareWith(source *ProvisioningPolicy_Spec) (int, bool) {
	switch fpmv.selector {
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		leftValue := fpmv.value.(string)
		rightValue := source.GetLabels()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpmv.selector))
	}
}

func (fpmv *ProvisioningPolicySpec_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*ProvisioningPolicy_Spec))
}

type ProvisioningPolicySpec_FieldSubPathValue struct {
	ProvisioningPolicySpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProvisioningPolicySpec_FieldPathValue = (*ProvisioningPolicySpec_FieldSubPathValue)(nil)

func (fpvs *ProvisioningPolicySpec_FieldSubPathValue) AsTemplatePathValue() (ProvisioningPolicySpecTemplate_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProvisioningPolicySpecTemplate_FieldPathValue)
	return res, ok
}

func (fpvs *ProvisioningPolicySpec_FieldSubPathValue) SetTo(target **ProvisioningPolicy_Spec) {
	if *target == nil {
		*target = new(ProvisioningPolicy_Spec)
	}
	switch fpvs.Selector() {
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		fpvs.subPathValue.(ProvisioningPolicySpecTemplate_FieldPathValue).SetTo(&(*target).Template)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisioningPolicySpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningPolicy_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProvisioningPolicySpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProvisioningPolicySpec_FieldSubPathValue) CompareWith(source *ProvisioningPolicy_Spec) (int, bool) {
	switch fpvs.Selector() {
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		return fpvs.subPathValue.(ProvisioningPolicySpecTemplate_FieldPathValue).CompareWith(source.GetTemplate())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisioningPolicySpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProvisioningPolicy_Spec))
}

// ProvisioningPolicySpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type ProvisioningPolicySpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProvisioningPolicySpec_FieldPath
	ContainsValue(*ProvisioningPolicy_Spec) bool
}

// ParseProvisioningPolicySpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProvisioningPolicySpec_FieldPathArrayItemValue(pathStr, valueStr string) (ProvisioningPolicySpec_FieldPathArrayItemValue, error) {
	fp, err := ParseProvisioningPolicySpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProvisioningPolicySpec_FieldPathArrayItemValue), nil
}

func MustParseProvisioningPolicySpec_FieldPathArrayItemValue(pathStr, valueStr string) ProvisioningPolicySpec_FieldPathArrayItemValue {
	fpaiv, err := ParseProvisioningPolicySpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProvisioningPolicySpec_FieldTerminalPathArrayItemValue struct {
	ProvisioningPolicySpec_FieldTerminalPath
	value interface{}
}

var _ ProvisioningPolicySpec_FieldPathArrayItemValue = (*ProvisioningPolicySpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProvisioningPolicy_Spec as interface{}
func (fpaiv *ProvisioningPolicySpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProvisioningPolicySpec_FieldTerminalPathArrayItemValue) AsIdentityFieldPathsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ProvisioningPolicySpec_FieldTerminalPathArrayItemValue) GetSingle(source *ProvisioningPolicy_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProvisioningPolicySpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProvisioningPolicy_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *ProvisioningPolicySpec_FieldTerminalPathArrayItemValue) ContainsValue(source *ProvisioningPolicy_Spec) bool {
	slice := fpaiv.ProvisioningPolicySpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProvisioningPolicySpec_FieldSubPathArrayItemValue struct {
	ProvisioningPolicySpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProvisioningPolicySpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProvisioningPolicySpec_FieldSubPathArrayItemValue) AsTemplatePathItemValue() (ProvisioningPolicySpecTemplate_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProvisioningPolicySpecTemplate_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *ProvisioningPolicySpec_FieldSubPathArrayItemValue) ContainsValue(source *ProvisioningPolicy_Spec) bool {
	switch fpaivs.Selector() {
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		return fpaivs.subPathItemValue.(ProvisioningPolicySpecTemplate_FieldPathArrayItemValue).ContainsValue(source.GetTemplate())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec: %d", fpaivs.Selector()))
	}
}

// ProvisioningPolicySpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type ProvisioningPolicySpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProvisioningPolicySpec_FieldPath
}

func ParseProvisioningPolicySpec_FieldPathArrayOfValues(pathStr, valuesStr string) (ProvisioningPolicySpec_FieldPathArrayOfValues, error) {
	fp, err := ParseProvisioningPolicySpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProvisioningPolicySpec_FieldPathArrayOfValues), nil
}

func MustParseProvisioningPolicySpec_FieldPathArrayOfValues(pathStr, valuesStr string) ProvisioningPolicySpec_FieldPathArrayOfValues {
	fpaov, err := ParseProvisioningPolicySpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProvisioningPolicySpec_FieldTerminalPathArrayOfValues struct {
	ProvisioningPolicySpec_FieldTerminalPath
	values interface{}
}

var _ ProvisioningPolicySpec_FieldPathArrayOfValues = (*ProvisioningPolicySpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProvisioningPolicySpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProvisioningPolicySpec_FieldPathSelectorMode:
		for _, v := range fpaov.values.([]ProvisioningPolicy_Mode) {
			values = append(values, v)
		}
	case ProvisioningPolicySpec_FieldPathSelectorServiceAccount:
		for _, v := range fpaov.values.([]*iam_service_account.Reference) {
			values = append(values, v)
		}
	case ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case ProvisioningPolicySpec_FieldPathSelectorTemplate:
		for _, v := range fpaov.values.([]*ProvisioningPolicy_Spec_Template) {
			values = append(values, v)
		}
	case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProvisioningPolicySpec_FieldTerminalPathArrayOfValues) AsModeArrayOfValues() ([]ProvisioningPolicy_Mode, bool) {
	res, ok := fpaov.values.([]ProvisioningPolicy_Mode)
	return res, ok
}
func (fpaov *ProvisioningPolicySpec_FieldTerminalPathArrayOfValues) AsServiceAccountArrayOfValues() ([]*iam_service_account.Reference, bool) {
	res, ok := fpaov.values.([]*iam_service_account.Reference)
	return res, ok
}
func (fpaov *ProvisioningPolicySpec_FieldTerminalPathArrayOfValues) AsDeviceNameFormatArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProvisioningPolicySpec_FieldTerminalPathArrayOfValues) AsLabelsArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *ProvisioningPolicySpec_FieldTerminalPathArrayOfValues) AsTemplateArrayOfValues() ([]*ProvisioningPolicy_Spec_Template, bool) {
	res, ok := fpaov.values.([]*ProvisioningPolicy_Spec_Template)
	return res, ok
}
func (fpaov *ProvisioningPolicySpec_FieldTerminalPathArrayOfValues) AsIdentityFieldPathsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

type ProvisioningPolicySpec_FieldPathMapArrayOfValues struct {
	ProvisioningPolicySpec_FieldPathMap
	values interface{}
}

var _ ProvisioningPolicySpec_FieldPathArrayOfValues = (*ProvisioningPolicySpec_FieldPathMapArrayOfValues)(nil)

func (fpmaov *ProvisioningPolicySpec_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case ProvisioningPolicySpec_FieldPathSelectorLabels:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *ProvisioningPolicySpec_FieldPathMapArrayOfValues) AsLabelsArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

type ProvisioningPolicySpec_FieldSubPathArrayOfValues struct {
	ProvisioningPolicySpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProvisioningPolicySpec_FieldPathArrayOfValues = (*ProvisioningPolicySpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProvisioningPolicySpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProvisioningPolicySpec_FieldSubPathArrayOfValues) AsTemplatePathArrayOfValues() (ProvisioningPolicySpecTemplate_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProvisioningPolicySpecTemplate_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProvisioningPolicyStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProvisioningPolicyStatus_FieldPathSelector
	Get(source *ProvisioningPolicy_Status) []interface{}
	GetSingle(source *ProvisioningPolicy_Status) (interface{}, bool)
	ClearValue(item *ProvisioningPolicy_Status)

	// Those methods build corresponding ProvisioningPolicyStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProvisioningPolicyStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) ProvisioningPolicyStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProvisioningPolicyStatus_FieldPathArrayItemValue
}

type ProvisioningPolicyStatus_FieldPathSelector int32

func (s ProvisioningPolicyStatus_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Status: %d", s))
	}
}

func BuildProvisioningPolicyStatus_FieldPath(fp gotenobject.RawFieldPath) (ProvisioningPolicyStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProvisioningPolicy_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProvisioningPolicy_Status", fp)
}

func ParseProvisioningPolicyStatus_FieldPath(rawField string) (ProvisioningPolicyStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProvisioningPolicyStatus_FieldPath(fp)
}

func MustParseProvisioningPolicyStatus_FieldPath(rawField string) ProvisioningPolicyStatus_FieldPath {
	fp, err := ParseProvisioningPolicyStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProvisioningPolicyStatus_FieldTerminalPath struct {
	selector ProvisioningPolicyStatus_FieldPathSelector
}

var _ ProvisioningPolicyStatus_FieldPath = (*ProvisioningPolicyStatus_FieldTerminalPath)(nil)

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) Selector() ProvisioningPolicyStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProvisioningPolicyStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProvisioningPolicyStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProvisioningPolicy_Status
func (fp *ProvisioningPolicyStatus_FieldTerminalPath) Get(source *ProvisioningPolicy_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProvisioningPolicy_Status))
}

// GetSingle returns value pointed by specific field of from source ProvisioningPolicy_Status
func (fp *ProvisioningPolicyStatus_FieldTerminalPath) GetSingle(source *ProvisioningPolicy_Status) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Status: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProvisioningPolicy_Status))
}

// GetDefault returns a default value of the field type
func (fp *ProvisioningPolicyStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Status: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) ClearValue(item *ProvisioningPolicy_Status) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Status: %d", fp.selector))
		}
	}
}

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProvisioningPolicy_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProvisioningPolicyStatus_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) WithIValue(value interface{}) ProvisioningPolicyStatus_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Status: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProvisioningPolicyStatus_FieldPathArrayOfValues {
	fpaov := &ProvisioningPolicyStatus_FieldTerminalPathArrayOfValues{ProvisioningPolicyStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProvisioningPolicyStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Status: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicyStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProvisioningPolicyStatus_FieldPathValue allows storing values for Status fields according to their type
type ProvisioningPolicyStatus_FieldPathValue interface {
	ProvisioningPolicyStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProvisioningPolicy_Status)
	CompareWith(*ProvisioningPolicy_Status) (cmp int, comparable bool)
}

func ParseProvisioningPolicyStatus_FieldPathValue(pathStr, valueStr string) (ProvisioningPolicyStatus_FieldPathValue, error) {
	fp, err := ParseProvisioningPolicyStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProvisioningPolicyStatus_FieldPathValue), nil
}

func MustParseProvisioningPolicyStatus_FieldPathValue(pathStr, valueStr string) ProvisioningPolicyStatus_FieldPathValue {
	fpv, err := ParseProvisioningPolicyStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProvisioningPolicyStatus_FieldTerminalPathValue struct {
	ProvisioningPolicyStatus_FieldTerminalPath
	value interface{}
}

var _ ProvisioningPolicyStatus_FieldPathValue = (*ProvisioningPolicyStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *ProvisioningPolicyStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object Status
func (fpv *ProvisioningPolicyStatus_FieldTerminalPathValue) SetTo(target **ProvisioningPolicy_Status) {
	if *target == nil {
		*target = new(ProvisioningPolicy_Status)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Status: %d", fpv.selector))
	}
}

func (fpv *ProvisioningPolicyStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningPolicy_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisioningPolicyStatus_FieldTerminalPathValue' with the value under path in 'ProvisioningPolicy_Status'.
func (fpv *ProvisioningPolicyStatus_FieldTerminalPathValue) CompareWith(source *ProvisioningPolicy_Status) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Status: %d", fpv.selector))
	}
}

func (fpv *ProvisioningPolicyStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProvisioningPolicy_Status))
}

// ProvisioningPolicyStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type ProvisioningPolicyStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProvisioningPolicyStatus_FieldPath
	ContainsValue(*ProvisioningPolicy_Status) bool
}

// ParseProvisioningPolicyStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProvisioningPolicyStatus_FieldPathArrayItemValue(pathStr, valueStr string) (ProvisioningPolicyStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseProvisioningPolicyStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProvisioningPolicyStatus_FieldPathArrayItemValue), nil
}

func MustParseProvisioningPolicyStatus_FieldPathArrayItemValue(pathStr, valueStr string) ProvisioningPolicyStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseProvisioningPolicyStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProvisioningPolicyStatus_FieldTerminalPathArrayItemValue struct {
	ProvisioningPolicyStatus_FieldTerminalPath
	value interface{}
}

var _ ProvisioningPolicyStatus_FieldPathArrayItemValue = (*ProvisioningPolicyStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProvisioningPolicy_Status as interface{}
func (fpaiv *ProvisioningPolicyStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProvisioningPolicyStatus_FieldTerminalPathArrayItemValue) GetSingle(source *ProvisioningPolicy_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProvisioningPolicyStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProvisioningPolicy_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *ProvisioningPolicyStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *ProvisioningPolicy_Status) bool {
	slice := fpaiv.ProvisioningPolicyStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProvisioningPolicyStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type ProvisioningPolicyStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProvisioningPolicyStatus_FieldPath
}

func ParseProvisioningPolicyStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (ProvisioningPolicyStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseProvisioningPolicyStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProvisioningPolicyStatus_FieldPathArrayOfValues), nil
}

func MustParseProvisioningPolicyStatus_FieldPathArrayOfValues(pathStr, valuesStr string) ProvisioningPolicyStatus_FieldPathArrayOfValues {
	fpaov, err := ParseProvisioningPolicyStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProvisioningPolicyStatus_FieldTerminalPathArrayOfValues struct {
	ProvisioningPolicyStatus_FieldTerminalPath
	values interface{}
}

var _ ProvisioningPolicyStatus_FieldPathArrayOfValues = (*ProvisioningPolicyStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProvisioningPolicyStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProvisioningPolicySpecTemplate_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProvisioningPolicySpecTemplate_FieldPathSelector
	Get(source *ProvisioningPolicy_Spec_Template) []interface{}
	GetSingle(source *ProvisioningPolicy_Spec_Template) (interface{}, bool)
	ClearValue(item *ProvisioningPolicy_Spec_Template)

	// Those methods build corresponding ProvisioningPolicySpecTemplate_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProvisioningPolicySpecTemplate_FieldPathValue
	WithIArrayOfValues(values interface{}) ProvisioningPolicySpecTemplate_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProvisioningPolicySpecTemplate_FieldPathArrayItemValue
}

type ProvisioningPolicySpecTemplate_FieldPathSelector int32

const (
	ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata          ProvisioningPolicySpecTemplate_FieldPathSelector = 0
	ProvisioningPolicySpecTemplate_FieldPathSelectorSpec              ProvisioningPolicySpecTemplate_FieldPathSelector = 1
	ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec ProvisioningPolicySpecTemplate_FieldPathSelector = 2
)

func (s ProvisioningPolicySpecTemplate_FieldPathSelector) String() string {
	switch s {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		return "metadata"
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		return "spec"
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		return "public_listing_spec"
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", s))
	}
}

func BuildProvisioningPolicySpecTemplate_FieldPath(fp gotenobject.RawFieldPath) (ProvisioningPolicySpecTemplate_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProvisioningPolicy_Spec_Template")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "metadata":
			return &ProvisioningPolicySpecTemplate_FieldTerminalPath{selector: ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata}, nil
		case "spec":
			return &ProvisioningPolicySpecTemplate_FieldTerminalPath{selector: ProvisioningPolicySpecTemplate_FieldPathSelectorSpec}, nil
		case "public_listing_spec", "publicListingSpec", "public-listing-spec":
			return &ProvisioningPolicySpecTemplate_FieldTerminalPath{selector: ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisioningPolicySpecTemplate_FieldSubPath{selector: ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := device.BuildDeviceSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisioningPolicySpecTemplate_FieldSubPath{selector: ProvisioningPolicySpecTemplate_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "public_listing_spec", "publicListingSpec", "public-listing-spec":
			if subpath, err := device.BuildDevicePublicListingSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisioningPolicySpecTemplate_FieldSubPath{selector: ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProvisioningPolicy_Spec_Template", fp)
}

func ParseProvisioningPolicySpecTemplate_FieldPath(rawField string) (ProvisioningPolicySpecTemplate_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProvisioningPolicySpecTemplate_FieldPath(fp)
}

func MustParseProvisioningPolicySpecTemplate_FieldPath(rawField string) ProvisioningPolicySpecTemplate_FieldPath {
	fp, err := ParseProvisioningPolicySpecTemplate_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProvisioningPolicySpecTemplate_FieldTerminalPath struct {
	selector ProvisioningPolicySpecTemplate_FieldPathSelector
}

var _ ProvisioningPolicySpecTemplate_FieldPath = (*ProvisioningPolicySpecTemplate_FieldTerminalPath)(nil)

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) Selector() ProvisioningPolicySpecTemplate_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProvisioningPolicy_Spec_Template
func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) Get(source *ProvisioningPolicy_Spec_Template) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
			if source.PublicListingSpec != nil {
				values = append(values, source.PublicListingSpec)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fp.selector))
		}
	}
	return
}

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProvisioningPolicy_Spec_Template))
}

// GetSingle returns value pointed by specific field of from source ProvisioningPolicy_Spec_Template
func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) GetSingle(source *ProvisioningPolicy_Spec_Template) (interface{}, bool) {
	switch fp.selector {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		res := source.GetPublicListingSpec()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProvisioningPolicy_Spec_Template))
}

// GetDefault returns a default value of the field type
func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		return (*device.Device_Spec)(nil)
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		return (*device.Device_PublicListingSpec)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) ClearValue(item *ProvisioningPolicy_Spec_Template) {
	if item != nil {
		switch fp.selector {
		case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
			item.Metadata = nil
		case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
			item.Spec = nil
		case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
			item.PublicListingSpec = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fp.selector))
		}
	}
}

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProvisioningPolicy_Spec_Template))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) WithIValue(value interface{}) ProvisioningPolicySpecTemplate_FieldPathValue {
	switch fp.selector {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		return &ProvisioningPolicySpecTemplate_FieldTerminalPathValue{ProvisioningPolicySpecTemplate_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		return &ProvisioningPolicySpecTemplate_FieldTerminalPathValue{ProvisioningPolicySpecTemplate_FieldTerminalPath: *fp, value: value.(*device.Device_Spec)}
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		return &ProvisioningPolicySpecTemplate_FieldTerminalPathValue{ProvisioningPolicySpecTemplate_FieldTerminalPath: *fp, value: value.(*device.Device_PublicListingSpec)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProvisioningPolicySpecTemplate_FieldPathArrayOfValues {
	fpaov := &ProvisioningPolicySpecTemplate_FieldTerminalPathArrayOfValues{ProvisioningPolicySpecTemplate_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		return &ProvisioningPolicySpecTemplate_FieldTerminalPathArrayOfValues{ProvisioningPolicySpecTemplate_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		return &ProvisioningPolicySpecTemplate_FieldTerminalPathArrayOfValues{ProvisioningPolicySpecTemplate_FieldTerminalPath: *fp, values: values.([]*device.Device_Spec)}
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		return &ProvisioningPolicySpecTemplate_FieldTerminalPathArrayOfValues{ProvisioningPolicySpecTemplate_FieldTerminalPath: *fp, values: values.([]*device.Device_PublicListingSpec)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProvisioningPolicySpecTemplate_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fp.selector))
	}
}

func (fp *ProvisioningPolicySpecTemplate_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProvisioningPolicySpecTemplate_FieldSubPath struct {
	selector ProvisioningPolicySpecTemplate_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProvisioningPolicySpecTemplate_FieldPath = (*ProvisioningPolicySpecTemplate_FieldSubPath)(nil)

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) Selector() ProvisioningPolicySpecTemplate_FieldPathSelector {
	return fps.selector
}
func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) AsSpecSubPath() (device.DeviceSpec_FieldPath, bool) {
	res, ok := fps.subPath.(device.DeviceSpec_FieldPath)
	return res, ok
}
func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) AsPublicListingSpecSubPath() (device.DevicePublicListingSpec_FieldPath, bool) {
	res, ok := fps.subPath.(device.DevicePublicListingSpec_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProvisioningPolicy_Spec_Template
func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) Get(source *ProvisioningPolicy_Spec_Template) (values []interface{}) {
	if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else if asSpecFieldPath, ok := fps.AsSpecSubPath(); ok {
		values = append(values, asSpecFieldPath.Get(source.GetSpec())...)
	} else if asPublicListingSpecFieldPath, ok := fps.AsPublicListingSpecSubPath(); ok {
		values = append(values, asPublicListingSpecFieldPath.Get(source.GetPublicListingSpec())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fps.selector))
	}
	return
}

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProvisioningPolicy_Spec_Template))
}

// GetSingle returns value of selected field from source ProvisioningPolicy_Spec_Template
func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) GetSingle(source *ProvisioningPolicy_Spec_Template) (interface{}, bool) {
	switch fps.selector {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		if source.GetPublicListingSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPublicListingSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fps.selector))
	}
}

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProvisioningPolicy_Spec_Template))
}

// GetDefault returns a default value of the field type
func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) ClearValue(item *ProvisioningPolicy_Spec_Template) {
	if item != nil {
		switch fps.selector {
		case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
			fps.subPath.ClearValueRaw(item.PublicListingSpec)
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fps.selector))
		}
	}
}

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProvisioningPolicy_Spec_Template))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProvisioningPolicySpecTemplate_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) WithIValue(value interface{}) ProvisioningPolicySpecTemplate_FieldPathValue {
	return &ProvisioningPolicySpecTemplate_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) WithIArrayOfValues(values interface{}) ProvisioningPolicySpecTemplate_FieldPathArrayOfValues {
	return &ProvisioningPolicySpecTemplate_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) WithIArrayItemValue(value interface{}) ProvisioningPolicySpecTemplate_FieldPathArrayItemValue {
	return &ProvisioningPolicySpecTemplate_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProvisioningPolicySpecTemplate_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProvisioningPolicySpecTemplate_FieldPathValue allows storing values for Template fields according to their type
type ProvisioningPolicySpecTemplate_FieldPathValue interface {
	ProvisioningPolicySpecTemplate_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProvisioningPolicy_Spec_Template)
	CompareWith(*ProvisioningPolicy_Spec_Template) (cmp int, comparable bool)
}

func ParseProvisioningPolicySpecTemplate_FieldPathValue(pathStr, valueStr string) (ProvisioningPolicySpecTemplate_FieldPathValue, error) {
	fp, err := ParseProvisioningPolicySpecTemplate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Template field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProvisioningPolicySpecTemplate_FieldPathValue), nil
}

func MustParseProvisioningPolicySpecTemplate_FieldPathValue(pathStr, valueStr string) ProvisioningPolicySpecTemplate_FieldPathValue {
	fpv, err := ParseProvisioningPolicySpecTemplate_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProvisioningPolicySpecTemplate_FieldTerminalPathValue struct {
	ProvisioningPolicySpecTemplate_FieldTerminalPath
	value interface{}
}

var _ ProvisioningPolicySpecTemplate_FieldPathValue = (*ProvisioningPolicySpecTemplate_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Template' as interface{}
func (fpv *ProvisioningPolicySpecTemplate_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProvisioningPolicySpecTemplate_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *ProvisioningPolicySpecTemplate_FieldTerminalPathValue) AsSpecValue() (*device.Device_Spec, bool) {
	res, ok := fpv.value.(*device.Device_Spec)
	return res, ok
}
func (fpv *ProvisioningPolicySpecTemplate_FieldTerminalPathValue) AsPublicListingSpecValue() (*device.Device_PublicListingSpec, bool) {
	res, ok := fpv.value.(*device.Device_PublicListingSpec)
	return res, ok
}

// SetTo stores value for selected field for object Template
func (fpv *ProvisioningPolicySpecTemplate_FieldTerminalPathValue) SetTo(target **ProvisioningPolicy_Spec_Template) {
	if *target == nil {
		*target = new(ProvisioningPolicy_Spec_Template)
	}
	switch fpv.selector {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*device.Device_Spec)
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		(*target).PublicListingSpec = fpv.value.(*device.Device_PublicListingSpec)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fpv.selector))
	}
}

func (fpv *ProvisioningPolicySpecTemplate_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningPolicy_Spec_Template)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisioningPolicySpecTemplate_FieldTerminalPathValue' with the value under path in 'ProvisioningPolicy_Spec_Template'.
func (fpv *ProvisioningPolicySpecTemplate_FieldTerminalPathValue) CompareWith(source *ProvisioningPolicy_Spec_Template) (int, bool) {
	switch fpv.selector {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		return 0, false
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		return 0, false
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fpv.selector))
	}
}

func (fpv *ProvisioningPolicySpecTemplate_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProvisioningPolicy_Spec_Template))
}

type ProvisioningPolicySpecTemplate_FieldSubPathValue struct {
	ProvisioningPolicySpecTemplate_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProvisioningPolicySpecTemplate_FieldPathValue = (*ProvisioningPolicySpecTemplate_FieldSubPathValue)(nil)

func (fpvs *ProvisioningPolicySpecTemplate_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *ProvisioningPolicySpecTemplate_FieldSubPathValue) AsSpecPathValue() (device.DeviceSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device.DeviceSpec_FieldPathValue)
	return res, ok
}
func (fpvs *ProvisioningPolicySpecTemplate_FieldSubPathValue) AsPublicListingSpecPathValue() (device.DevicePublicListingSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device.DevicePublicListingSpec_FieldPathValue)
	return res, ok
}

func (fpvs *ProvisioningPolicySpecTemplate_FieldSubPathValue) SetTo(target **ProvisioningPolicy_Spec_Template) {
	if *target == nil {
		*target = new(ProvisioningPolicy_Spec_Template)
	}
	switch fpvs.Selector() {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		fpvs.subPathValue.(device.DeviceSpec_FieldPathValue).SetTo(&(*target).Spec)
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		fpvs.subPathValue.(device.DevicePublicListingSpec_FieldPathValue).SetTo(&(*target).PublicListingSpec)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisioningPolicySpecTemplate_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningPolicy_Spec_Template)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProvisioningPolicySpecTemplate_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProvisioningPolicySpecTemplate_FieldSubPathValue) CompareWith(source *ProvisioningPolicy_Spec_Template) (int, bool) {
	switch fpvs.Selector() {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		return fpvs.subPathValue.(device.DeviceSpec_FieldPathValue).CompareWith(source.GetSpec())
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		return fpvs.subPathValue.(device.DevicePublicListingSpec_FieldPathValue).CompareWith(source.GetPublicListingSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisioningPolicySpecTemplate_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProvisioningPolicy_Spec_Template))
}

// ProvisioningPolicySpecTemplate_FieldPathArrayItemValue allows storing single item in Path-specific values for Template according to their type
// Present only for array (repeated) types.
type ProvisioningPolicySpecTemplate_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProvisioningPolicySpecTemplate_FieldPath
	ContainsValue(*ProvisioningPolicy_Spec_Template) bool
}

// ParseProvisioningPolicySpecTemplate_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProvisioningPolicySpecTemplate_FieldPathArrayItemValue(pathStr, valueStr string) (ProvisioningPolicySpecTemplate_FieldPathArrayItemValue, error) {
	fp, err := ParseProvisioningPolicySpecTemplate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Template field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProvisioningPolicySpecTemplate_FieldPathArrayItemValue), nil
}

func MustParseProvisioningPolicySpecTemplate_FieldPathArrayItemValue(pathStr, valueStr string) ProvisioningPolicySpecTemplate_FieldPathArrayItemValue {
	fpaiv, err := ParseProvisioningPolicySpecTemplate_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProvisioningPolicySpecTemplate_FieldTerminalPathArrayItemValue struct {
	ProvisioningPolicySpecTemplate_FieldTerminalPath
	value interface{}
}

var _ ProvisioningPolicySpecTemplate_FieldPathArrayItemValue = (*ProvisioningPolicySpecTemplate_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProvisioningPolicy_Spec_Template as interface{}
func (fpaiv *ProvisioningPolicySpecTemplate_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProvisioningPolicySpecTemplate_FieldTerminalPathArrayItemValue) GetSingle(source *ProvisioningPolicy_Spec_Template) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProvisioningPolicySpecTemplate_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProvisioningPolicy_Spec_Template))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Template'
func (fpaiv *ProvisioningPolicySpecTemplate_FieldTerminalPathArrayItemValue) ContainsValue(source *ProvisioningPolicy_Spec_Template) bool {
	slice := fpaiv.ProvisioningPolicySpecTemplate_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProvisioningPolicySpecTemplate_FieldSubPathArrayItemValue struct {
	ProvisioningPolicySpecTemplate_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProvisioningPolicySpecTemplate_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProvisioningPolicySpecTemplate_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProvisioningPolicySpecTemplate_FieldSubPathArrayItemValue) AsSpecPathItemValue() (device.DeviceSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device.DeviceSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProvisioningPolicySpecTemplate_FieldSubPathArrayItemValue) AsPublicListingSpecPathItemValue() (device.DevicePublicListingSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device.DevicePublicListingSpec_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Template'
func (fpaivs *ProvisioningPolicySpecTemplate_FieldSubPathArrayItemValue) ContainsValue(source *ProvisioningPolicy_Spec_Template) bool {
	switch fpaivs.Selector() {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(device.DeviceSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		return fpaivs.subPathItemValue.(device.DevicePublicListingSpec_FieldPathArrayItemValue).ContainsValue(source.GetPublicListingSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningPolicy_Spec_Template: %d", fpaivs.Selector()))
	}
}

// ProvisioningPolicySpecTemplate_FieldPathArrayOfValues allows storing slice of values for Template fields according to their type
type ProvisioningPolicySpecTemplate_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProvisioningPolicySpecTemplate_FieldPath
}

func ParseProvisioningPolicySpecTemplate_FieldPathArrayOfValues(pathStr, valuesStr string) (ProvisioningPolicySpecTemplate_FieldPathArrayOfValues, error) {
	fp, err := ParseProvisioningPolicySpecTemplate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Template field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProvisioningPolicySpecTemplate_FieldPathArrayOfValues), nil
}

func MustParseProvisioningPolicySpecTemplate_FieldPathArrayOfValues(pathStr, valuesStr string) ProvisioningPolicySpecTemplate_FieldPathArrayOfValues {
	fpaov, err := ParseProvisioningPolicySpecTemplate_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProvisioningPolicySpecTemplate_FieldTerminalPathArrayOfValues struct {
	ProvisioningPolicySpecTemplate_FieldTerminalPath
	values interface{}
}

var _ ProvisioningPolicySpecTemplate_FieldPathArrayOfValues = (*ProvisioningPolicySpecTemplate_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProvisioningPolicySpecTemplate_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*device.Device_Spec) {
			values = append(values, v)
		}
	case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
		for _, v := range fpaov.values.([]*device.Device_PublicListingSpec) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProvisioningPolicySpecTemplate_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *ProvisioningPolicySpecTemplate_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*device.Device_Spec, bool) {
	res, ok := fpaov.values.([]*device.Device_Spec)
	return res, ok
}
func (fpaov *ProvisioningPolicySpecTemplate_FieldTerminalPathArrayOfValues) AsPublicListingSpecArrayOfValues() ([]*device.Device_PublicListingSpec, bool) {
	res, ok := fpaov.values.([]*device.Device_PublicListingSpec)
	return res, ok
}

type ProvisioningPolicySpecTemplate_FieldSubPathArrayOfValues struct {
	ProvisioningPolicySpecTemplate_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProvisioningPolicySpecTemplate_FieldPathArrayOfValues = (*ProvisioningPolicySpecTemplate_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProvisioningPolicySpecTemplate_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProvisioningPolicySpecTemplate_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProvisioningPolicySpecTemplate_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (device.DeviceSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device.DeviceSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProvisioningPolicySpecTemplate_FieldSubPathArrayOfValues) AsPublicListingSpecPathArrayOfValues() (device.DevicePublicListingSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device.DevicePublicListingSpec_FieldPathArrayOfValues)
	return res, ok
}
