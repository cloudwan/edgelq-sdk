// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1/device_hardware.proto
// DO NOT EDIT!!!

package device_hardware

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_policy"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceHardware_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceHardware_FieldPathSelector
	Get(source *DeviceHardware) []interface{}
	GetSingle(source *DeviceHardware) (interface{}, bool)
	ClearValue(item *DeviceHardware)

	// Those methods build corresponding DeviceHardware_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceHardware_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceHardware_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceHardware_FieldPathArrayItemValue
}

type DeviceHardware_FieldPathSelector int32

const (
	DeviceHardware_FieldPathSelectorName                             DeviceHardware_FieldPathSelector = 0
	DeviceHardware_FieldPathSelectorMetadata                         DeviceHardware_FieldPathSelector = 1
	DeviceHardware_FieldPathSelectorDisplayName                      DeviceHardware_FieldPathSelector = 2
	DeviceHardware_FieldPathSelectorSerialNumber                     DeviceHardware_FieldPathSelector = 3
	DeviceHardware_FieldPathSelectorManufacturer                     DeviceHardware_FieldPathSelector = 4
	DeviceHardware_FieldPathSelectorProductName                      DeviceHardware_FieldPathSelector = 5
	DeviceHardware_FieldPathSelectorMacAddress                       DeviceHardware_FieldPathSelector = 6
	DeviceHardware_FieldPathSelectorSimIccid                         DeviceHardware_FieldPathSelector = 7
	DeviceHardware_FieldPathSelectorImei                             DeviceHardware_FieldPathSelector = 8
	DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName DeviceHardware_FieldPathSelector = 9
	DeviceHardware_FieldPathSelectorAssociatedDevice                 DeviceHardware_FieldPathSelector = 10
	DeviceHardware_FieldPathSelectorStatus                           DeviceHardware_FieldPathSelector = 11
)

func (s DeviceHardware_FieldPathSelector) String() string {
	switch s {
	case DeviceHardware_FieldPathSelectorName:
		return "name"
	case DeviceHardware_FieldPathSelectorMetadata:
		return "metadata"
	case DeviceHardware_FieldPathSelectorDisplayName:
		return "display_name"
	case DeviceHardware_FieldPathSelectorSerialNumber:
		return "serial_number"
	case DeviceHardware_FieldPathSelectorManufacturer:
		return "manufacturer"
	case DeviceHardware_FieldPathSelectorProductName:
		return "product_name"
	case DeviceHardware_FieldPathSelectorMacAddress:
		return "mac_address"
	case DeviceHardware_FieldPathSelectorSimIccid:
		return "sim_iccid"
	case DeviceHardware_FieldPathSelectorImei:
		return "imei"
	case DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName:
		return "associated_provisioning_policy_name"
	case DeviceHardware_FieldPathSelectorAssociatedDevice:
		return "associated_device"
	case DeviceHardware_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", s))
	}
}

func BuildDeviceHardware_FieldPath(fp gotenobject.RawFieldPath) (DeviceHardware_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeviceHardware")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorName}, nil
		case "metadata":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorDisplayName}, nil
		case "serial_number", "serialNumber", "serial-number":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorSerialNumber}, nil
		case "manufacturer":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorManufacturer}, nil
		case "product_name", "productName", "product-name":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorProductName}, nil
		case "mac_address", "macAddress", "mac-address":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorMacAddress}, nil
		case "sim_iccid", "simIccid", "sim-iccid":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorSimIccid}, nil
		case "imei":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorImei}, nil
		case "associated_provisioning_policy_name", "associatedProvisioningPolicyName", "associated-provisioning-policy-name":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName}, nil
		case "associated_device", "associatedDevice", "associated-device":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorAssociatedDevice}, nil
		case "status":
			return &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceHardware_FieldSubPath{selector: DeviceHardware_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildDeviceHardwareStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceHardware_FieldSubPath{selector: DeviceHardware_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeviceHardware", fp)
}

func ParseDeviceHardware_FieldPath(rawField string) (DeviceHardware_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceHardware_FieldPath(fp)
}

func MustParseDeviceHardware_FieldPath(rawField string) DeviceHardware_FieldPath {
	fp, err := ParseDeviceHardware_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceHardware_FieldTerminalPath struct {
	selector DeviceHardware_FieldPathSelector
}

var _ DeviceHardware_FieldPath = (*DeviceHardware_FieldTerminalPath)(nil)

func (fp *DeviceHardware_FieldTerminalPath) Selector() DeviceHardware_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceHardware_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceHardware_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeviceHardware
func (fp *DeviceHardware_FieldTerminalPath) Get(source *DeviceHardware) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceHardware_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case DeviceHardware_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case DeviceHardware_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case DeviceHardware_FieldPathSelectorSerialNumber:
			values = append(values, source.SerialNumber)
		case DeviceHardware_FieldPathSelectorManufacturer:
			values = append(values, source.Manufacturer)
		case DeviceHardware_FieldPathSelectorProductName:
			values = append(values, source.ProductName)
		case DeviceHardware_FieldPathSelectorMacAddress:
			for _, value := range source.GetMacAddress() {
				values = append(values, value)
			}
		case DeviceHardware_FieldPathSelectorSimIccid:
			values = append(values, source.SimIccid)
		case DeviceHardware_FieldPathSelectorImei:
			values = append(values, source.Imei)
		case DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName:
			if source.AssociatedProvisioningPolicyName != nil {
				values = append(values, source.AssociatedProvisioningPolicyName)
			}
		case DeviceHardware_FieldPathSelectorAssociatedDevice:
			if source.AssociatedDevice != nil {
				values = append(values, source.AssociatedDevice)
			}
		case DeviceHardware_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceHardware_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeviceHardware))
}

// GetSingle returns value pointed by specific field of from source DeviceHardware
func (fp *DeviceHardware_FieldTerminalPath) GetSingle(source *DeviceHardware) (interface{}, bool) {
	switch fp.selector {
	case DeviceHardware_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case DeviceHardware_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case DeviceHardware_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case DeviceHardware_FieldPathSelectorSerialNumber:
		return source.GetSerialNumber(), source != nil
	case DeviceHardware_FieldPathSelectorManufacturer:
		return source.GetManufacturer(), source != nil
	case DeviceHardware_FieldPathSelectorProductName:
		return source.GetProductName(), source != nil
	case DeviceHardware_FieldPathSelectorMacAddress:
		res := source.GetMacAddress()
		return res, res != nil
	case DeviceHardware_FieldPathSelectorSimIccid:
		return source.GetSimIccid(), source != nil
	case DeviceHardware_FieldPathSelectorImei:
		return source.GetImei(), source != nil
	case DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName:
		res := source.GetAssociatedProvisioningPolicyName()
		return res, res != nil
	case DeviceHardware_FieldPathSelectorAssociatedDevice:
		res := source.GetAssociatedDevice()
		return res, res != nil
	case DeviceHardware_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fp.selector))
	}
}

func (fp *DeviceHardware_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeviceHardware))
}

// GetDefault returns a default value of the field type
func (fp *DeviceHardware_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceHardware_FieldPathSelectorName:
		return (*Name)(nil)
	case DeviceHardware_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case DeviceHardware_FieldPathSelectorDisplayName:
		return ""
	case DeviceHardware_FieldPathSelectorSerialNumber:
		return ""
	case DeviceHardware_FieldPathSelectorManufacturer:
		return ""
	case DeviceHardware_FieldPathSelectorProductName:
		return ""
	case DeviceHardware_FieldPathSelectorMacAddress:
		return ([]string)(nil)
	case DeviceHardware_FieldPathSelectorSimIccid:
		return ""
	case DeviceHardware_FieldPathSelectorImei:
		return ""
	case DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName:
		return (*provisioning_policy.Reference)(nil)
	case DeviceHardware_FieldPathSelectorAssociatedDevice:
		return (*device.Reference)(nil)
	case DeviceHardware_FieldPathSelectorStatus:
		return (*DeviceHardware_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fp.selector))
	}
}

func (fp *DeviceHardware_FieldTerminalPath) ClearValue(item *DeviceHardware) {
	if item != nil {
		switch fp.selector {
		case DeviceHardware_FieldPathSelectorName:
			item.Name = nil
		case DeviceHardware_FieldPathSelectorMetadata:
			item.Metadata = nil
		case DeviceHardware_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case DeviceHardware_FieldPathSelectorSerialNumber:
			item.SerialNumber = ""
		case DeviceHardware_FieldPathSelectorManufacturer:
			item.Manufacturer = ""
		case DeviceHardware_FieldPathSelectorProductName:
			item.ProductName = ""
		case DeviceHardware_FieldPathSelectorMacAddress:
			item.MacAddress = nil
		case DeviceHardware_FieldPathSelectorSimIccid:
			item.SimIccid = ""
		case DeviceHardware_FieldPathSelectorImei:
			item.Imei = ""
		case DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName:
			item.AssociatedProvisioningPolicyName = nil
		case DeviceHardware_FieldPathSelectorAssociatedDevice:
			item.AssociatedDevice = nil
		case DeviceHardware_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fp.selector))
		}
	}
}

func (fp *DeviceHardware_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeviceHardware))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceHardware_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceHardware_FieldPathSelectorName ||
		fp.selector == DeviceHardware_FieldPathSelectorDisplayName ||
		fp.selector == DeviceHardware_FieldPathSelectorSerialNumber ||
		fp.selector == DeviceHardware_FieldPathSelectorManufacturer ||
		fp.selector == DeviceHardware_FieldPathSelectorProductName ||
		fp.selector == DeviceHardware_FieldPathSelectorMacAddress ||
		fp.selector == DeviceHardware_FieldPathSelectorSimIccid ||
		fp.selector == DeviceHardware_FieldPathSelectorImei ||
		fp.selector == DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName ||
		fp.selector == DeviceHardware_FieldPathSelectorAssociatedDevice
}

func (fp *DeviceHardware_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceHardware_FieldTerminalPath) WithIValue(value interface{}) DeviceHardware_FieldPathValue {
	switch fp.selector {
	case DeviceHardware_FieldPathSelectorName:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(*Name)}
	case DeviceHardware_FieldPathSelectorMetadata:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case DeviceHardware_FieldPathSelectorDisplayName:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceHardware_FieldPathSelectorSerialNumber:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceHardware_FieldPathSelectorManufacturer:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceHardware_FieldPathSelectorProductName:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceHardware_FieldPathSelectorMacAddress:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.([]string)}
	case DeviceHardware_FieldPathSelectorSimIccid:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceHardware_FieldPathSelectorImei:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	case DeviceHardware_FieldPathSelectorAssociatedDevice:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	case DeviceHardware_FieldPathSelectorStatus:
		return &DeviceHardware_FieldTerminalPathValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(*DeviceHardware_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fp.selector))
	}
}

func (fp *DeviceHardware_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceHardware_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceHardware_FieldPathArrayOfValues {
	fpaov := &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceHardware_FieldPathSelectorName:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([]*Name)}
	case DeviceHardware_FieldPathSelectorMetadata:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case DeviceHardware_FieldPathSelectorDisplayName:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceHardware_FieldPathSelectorSerialNumber:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceHardware_FieldPathSelectorManufacturer:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceHardware_FieldPathSelectorProductName:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceHardware_FieldPathSelectorMacAddress:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([][]string)}
	case DeviceHardware_FieldPathSelectorSimIccid:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceHardware_FieldPathSelectorImei:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Reference)}
	case DeviceHardware_FieldPathSelectorAssociatedDevice:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([]*device.Reference)}
	case DeviceHardware_FieldPathSelectorStatus:
		return &DeviceHardware_FieldTerminalPathArrayOfValues{DeviceHardware_FieldTerminalPath: *fp, values: values.([]*DeviceHardware_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceHardware_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceHardware_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceHardware_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceHardware_FieldPathSelectorMacAddress:
		return &DeviceHardware_FieldTerminalPathArrayItemValue{DeviceHardware_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fp.selector))
	}
}

func (fp *DeviceHardware_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DeviceHardware_FieldSubPath struct {
	selector DeviceHardware_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceHardware_FieldPath = (*DeviceHardware_FieldSubPath)(nil)

func (fps *DeviceHardware_FieldSubPath) Selector() DeviceHardware_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceHardware_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *DeviceHardware_FieldSubPath) AsStatusSubPath() (DeviceHardwareStatus_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceHardwareStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceHardware_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceHardware_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source DeviceHardware
func (fps *DeviceHardware_FieldSubPath) Get(source *DeviceHardware) (values []interface{}) {
	switch fps.selector {
	case DeviceHardware_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case DeviceHardware_FieldPathSelectorStatus:
		values = append(values, fps.subPath.GetRaw(source.GetStatus())...)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fps.selector))
	}
	return
}

func (fps *DeviceHardware_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*DeviceHardware))
}

// GetSingle returns value of selected field from source DeviceHardware
func (fps *DeviceHardware_FieldSubPath) GetSingle(source *DeviceHardware) (interface{}, bool) {
	switch fps.selector {
	case DeviceHardware_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case DeviceHardware_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fps.selector))
	}
}

func (fps *DeviceHardware_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*DeviceHardware))
}

// GetDefault returns a default value of the field type
func (fps *DeviceHardware_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceHardware_FieldSubPath) ClearValue(item *DeviceHardware) {
	if item != nil {
		switch fps.selector {
		case DeviceHardware_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case DeviceHardware_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fps.selector))
		}
	}
}

func (fps *DeviceHardware_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*DeviceHardware))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceHardware_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceHardware_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceHardware_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceHardware_FieldSubPath) WithIValue(value interface{}) DeviceHardware_FieldPathValue {
	return &DeviceHardware_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceHardware_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceHardware_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceHardware_FieldPathArrayOfValues {
	return &DeviceHardware_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceHardware_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceHardware_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceHardware_FieldPathArrayItemValue {
	return &DeviceHardware_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceHardware_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceHardware_FieldPathValue allows storing values for DeviceHardware fields according to their type
type DeviceHardware_FieldPathValue interface {
	DeviceHardware_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeviceHardware)
	CompareWith(*DeviceHardware) (cmp int, comparable bool)
}

func ParseDeviceHardware_FieldPathValue(pathStr, valueStr string) (DeviceHardware_FieldPathValue, error) {
	fp, err := ParseDeviceHardware_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeviceHardware field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceHardware_FieldPathValue), nil
}

func MustParseDeviceHardware_FieldPathValue(pathStr, valueStr string) DeviceHardware_FieldPathValue {
	fpv, err := ParseDeviceHardware_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceHardware_FieldTerminalPathValue struct {
	DeviceHardware_FieldTerminalPath
	value interface{}
}

var _ DeviceHardware_FieldPathValue = (*DeviceHardware_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeviceHardware' as interface{}
func (fpv *DeviceHardware_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsSerialNumberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsManufacturerValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsProductNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsMacAddressValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsSimIccidValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsImeiValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsAssociatedProvisioningPolicyNameValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.(*provisioning_policy.Reference)
	return res, ok
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsAssociatedDeviceValue() (*device.Reference, bool) {
	res, ok := fpv.value.(*device.Reference)
	return res, ok
}
func (fpv *DeviceHardware_FieldTerminalPathValue) AsStatusValue() (*DeviceHardware_Status, bool) {
	res, ok := fpv.value.(*DeviceHardware_Status)
	return res, ok
}

// SetTo stores value for selected field for object DeviceHardware
func (fpv *DeviceHardware_FieldTerminalPathValue) SetTo(target **DeviceHardware) {
	if *target == nil {
		*target = new(DeviceHardware)
	}
	switch fpv.selector {
	case DeviceHardware_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case DeviceHardware_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case DeviceHardware_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case DeviceHardware_FieldPathSelectorSerialNumber:
		(*target).SerialNumber = fpv.value.(string)
	case DeviceHardware_FieldPathSelectorManufacturer:
		(*target).Manufacturer = fpv.value.(string)
	case DeviceHardware_FieldPathSelectorProductName:
		(*target).ProductName = fpv.value.(string)
	case DeviceHardware_FieldPathSelectorMacAddress:
		(*target).MacAddress = fpv.value.([]string)
	case DeviceHardware_FieldPathSelectorSimIccid:
		(*target).SimIccid = fpv.value.(string)
	case DeviceHardware_FieldPathSelectorImei:
		(*target).Imei = fpv.value.(string)
	case DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName:
		(*target).AssociatedProvisioningPolicyName = fpv.value.(*provisioning_policy.Reference)
	case DeviceHardware_FieldPathSelectorAssociatedDevice:
		(*target).AssociatedDevice = fpv.value.(*device.Reference)
	case DeviceHardware_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*DeviceHardware_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fpv.selector))
	}
}

func (fpv *DeviceHardware_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeviceHardware)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceHardware_FieldTerminalPathValue' with the value under path in 'DeviceHardware'.
func (fpv *DeviceHardware_FieldTerminalPathValue) CompareWith(source *DeviceHardware) (int, bool) {
	switch fpv.selector {
	case DeviceHardware_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardware_FieldPathSelectorMetadata:
		return 0, false
	case DeviceHardware_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardware_FieldPathSelectorSerialNumber:
		leftValue := fpv.value.(string)
		rightValue := source.GetSerialNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardware_FieldPathSelectorManufacturer:
		leftValue := fpv.value.(string)
		rightValue := source.GetManufacturer()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardware_FieldPathSelectorProductName:
		leftValue := fpv.value.(string)
		rightValue := source.GetProductName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardware_FieldPathSelectorMacAddress:
		return 0, false
	case DeviceHardware_FieldPathSelectorSimIccid:
		leftValue := fpv.value.(string)
		rightValue := source.GetSimIccid()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardware_FieldPathSelectorImei:
		leftValue := fpv.value.(string)
		rightValue := source.GetImei()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName:
		leftValue := fpv.value.(*provisioning_policy.Reference)
		rightValue := source.GetAssociatedProvisioningPolicyName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardware_FieldPathSelectorAssociatedDevice:
		leftValue := fpv.value.(*device.Reference)
		rightValue := source.GetAssociatedDevice()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardware_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fpv.selector))
	}
}

func (fpv *DeviceHardware_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeviceHardware))
}

type DeviceHardware_FieldSubPathValue struct {
	DeviceHardware_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceHardware_FieldPathValue = (*DeviceHardware_FieldSubPathValue)(nil)

func (fpvs *DeviceHardware_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceHardware_FieldSubPathValue) AsStatusPathValue() (DeviceHardwareStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceHardwareStatus_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceHardware_FieldSubPathValue) SetTo(target **DeviceHardware) {
	if *target == nil {
		*target = new(DeviceHardware)
	}
	switch fpvs.Selector() {
	case DeviceHardware_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case DeviceHardware_FieldPathSelectorStatus:
		fpvs.subPathValue.(DeviceHardwareStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceHardware_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeviceHardware)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceHardware_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceHardware_FieldSubPathValue) CompareWith(source *DeviceHardware) (int, bool) {
	switch fpvs.Selector() {
	case DeviceHardware_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case DeviceHardware_FieldPathSelectorStatus:
		return fpvs.subPathValue.(DeviceHardwareStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceHardware_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*DeviceHardware))
}

// DeviceHardware_FieldPathArrayItemValue allows storing single item in Path-specific values for DeviceHardware according to their type
// Present only for array (repeated) types.
type DeviceHardware_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceHardware_FieldPath
	ContainsValue(*DeviceHardware) bool
}

// ParseDeviceHardware_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceHardware_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceHardware_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceHardware_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeviceHardware field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceHardware_FieldPathArrayItemValue), nil
}

func MustParseDeviceHardware_FieldPathArrayItemValue(pathStr, valueStr string) DeviceHardware_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceHardware_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceHardware_FieldTerminalPathArrayItemValue struct {
	DeviceHardware_FieldTerminalPath
	value interface{}
}

var _ DeviceHardware_FieldPathArrayItemValue = (*DeviceHardware_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeviceHardware as interface{}
func (fpaiv *DeviceHardware_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceHardware_FieldTerminalPathArrayItemValue) AsMacAddressItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *DeviceHardware_FieldTerminalPathArrayItemValue) GetSingle(source *DeviceHardware) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceHardware_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeviceHardware))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeviceHardware'
func (fpaiv *DeviceHardware_FieldTerminalPathArrayItemValue) ContainsValue(source *DeviceHardware) bool {
	slice := fpaiv.DeviceHardware_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceHardware_FieldSubPathArrayItemValue struct {
	DeviceHardware_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceHardware_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceHardware_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceHardware_FieldSubPathArrayItemValue) AsStatusPathItemValue() (DeviceHardwareStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceHardwareStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeviceHardware'
func (fpaivs *DeviceHardware_FieldSubPathArrayItemValue) ContainsValue(source *DeviceHardware) bool {
	switch fpaivs.Selector() {
	case DeviceHardware_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case DeviceHardware_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(DeviceHardwareStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware: %d", fpaivs.Selector()))
	}
}

// DeviceHardware_FieldPathArrayOfValues allows storing slice of values for DeviceHardware fields according to their type
type DeviceHardware_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceHardware_FieldPath
}

func ParseDeviceHardware_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceHardware_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceHardware_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeviceHardware field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceHardware_FieldPathArrayOfValues), nil
}

func MustParseDeviceHardware_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceHardware_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceHardware_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceHardware_FieldTerminalPathArrayOfValues struct {
	DeviceHardware_FieldTerminalPath
	values interface{}
}

var _ DeviceHardware_FieldPathArrayOfValues = (*DeviceHardware_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceHardware_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case DeviceHardware_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case DeviceHardware_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceHardware_FieldPathSelectorSerialNumber:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceHardware_FieldPathSelectorManufacturer:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceHardware_FieldPathSelectorProductName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceHardware_FieldPathSelectorMacAddress:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case DeviceHardware_FieldPathSelectorSimIccid:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceHardware_FieldPathSelectorImei:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName:
		for _, v := range fpaov.values.([]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	case DeviceHardware_FieldPathSelectorAssociatedDevice:
		for _, v := range fpaov.values.([]*device.Reference) {
			values = append(values, v)
		}
	case DeviceHardware_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*DeviceHardware_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsSerialNumberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsManufacturerArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsProductNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsMacAddressArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsSimIccidArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsImeiArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsAssociatedProvisioningPolicyNameArrayOfValues() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Reference)
	return res, ok
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsAssociatedDeviceArrayOfValues() ([]*device.Reference, bool) {
	res, ok := fpaov.values.([]*device.Reference)
	return res, ok
}
func (fpaov *DeviceHardware_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*DeviceHardware_Status, bool) {
	res, ok := fpaov.values.([]*DeviceHardware_Status)
	return res, ok
}

type DeviceHardware_FieldSubPathArrayOfValues struct {
	DeviceHardware_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceHardware_FieldPathArrayOfValues = (*DeviceHardware_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceHardware_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceHardware_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceHardware_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (DeviceHardwareStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceHardwareStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceHardwareStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceHardwareStatus_FieldPathSelector
	Get(source *DeviceHardware_Status) []interface{}
	GetSingle(source *DeviceHardware_Status) (interface{}, bool)
	ClearValue(item *DeviceHardware_Status)

	// Those methods build corresponding DeviceHardwareStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceHardwareStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceHardwareStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceHardwareStatus_FieldPathArrayItemValue
}

type DeviceHardwareStatus_FieldPathSelector int32

const (
	DeviceHardwareStatus_FieldPathSelectorProvisioningState DeviceHardwareStatus_FieldPathSelector = 0
)

func (s DeviceHardwareStatus_FieldPathSelector) String() string {
	switch s {
	case DeviceHardwareStatus_FieldPathSelectorProvisioningState:
		return "provisioning_state"
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware_Status: %d", s))
	}
}

func BuildDeviceHardwareStatus_FieldPath(fp gotenobject.RawFieldPath) (DeviceHardwareStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeviceHardware_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_state", "provisioningState", "provisioning-state":
			return &DeviceHardwareStatus_FieldTerminalPath{selector: DeviceHardwareStatus_FieldPathSelectorProvisioningState}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeviceHardware_Status", fp)
}

func ParseDeviceHardwareStatus_FieldPath(rawField string) (DeviceHardwareStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceHardwareStatus_FieldPath(fp)
}

func MustParseDeviceHardwareStatus_FieldPath(rawField string) DeviceHardwareStatus_FieldPath {
	fp, err := ParseDeviceHardwareStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceHardwareStatus_FieldTerminalPath struct {
	selector DeviceHardwareStatus_FieldPathSelector
}

var _ DeviceHardwareStatus_FieldPath = (*DeviceHardwareStatus_FieldTerminalPath)(nil)

func (fp *DeviceHardwareStatus_FieldTerminalPath) Selector() DeviceHardwareStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceHardwareStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceHardwareStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeviceHardware_Status
func (fp *DeviceHardwareStatus_FieldTerminalPath) Get(source *DeviceHardware_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceHardwareStatus_FieldPathSelectorProvisioningState:
			values = append(values, source.ProvisioningState)
		default:
			panic(fmt.Sprintf("Invalid selector for DeviceHardware_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceHardwareStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeviceHardware_Status))
}

// GetSingle returns value pointed by specific field of from source DeviceHardware_Status
func (fp *DeviceHardwareStatus_FieldTerminalPath) GetSingle(source *DeviceHardware_Status) (interface{}, bool) {
	switch fp.selector {
	case DeviceHardwareStatus_FieldPathSelectorProvisioningState:
		return source.GetProvisioningState(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware_Status: %d", fp.selector))
	}
}

func (fp *DeviceHardwareStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeviceHardware_Status))
}

// GetDefault returns a default value of the field type
func (fp *DeviceHardwareStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceHardwareStatus_FieldPathSelectorProvisioningState:
		return DeviceHardware_Status_UNKNOWN
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware_Status: %d", fp.selector))
	}
}

func (fp *DeviceHardwareStatus_FieldTerminalPath) ClearValue(item *DeviceHardware_Status) {
	if item != nil {
		switch fp.selector {
		case DeviceHardwareStatus_FieldPathSelectorProvisioningState:
			item.ProvisioningState = DeviceHardware_Status_UNKNOWN
		default:
			panic(fmt.Sprintf("Invalid selector for DeviceHardware_Status: %d", fp.selector))
		}
	}
}

func (fp *DeviceHardwareStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeviceHardware_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceHardwareStatus_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceHardwareStatus_FieldPathSelectorProvisioningState
}

func (fp *DeviceHardwareStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceHardwareStatus_FieldTerminalPath) WithIValue(value interface{}) DeviceHardwareStatus_FieldPathValue {
	switch fp.selector {
	case DeviceHardwareStatus_FieldPathSelectorProvisioningState:
		return &DeviceHardwareStatus_FieldTerminalPathValue{DeviceHardwareStatus_FieldTerminalPath: *fp, value: value.(DeviceHardware_Status_PROVISIONING_STATE)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware_Status: %d", fp.selector))
	}
}

func (fp *DeviceHardwareStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceHardwareStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceHardwareStatus_FieldPathArrayOfValues {
	fpaov := &DeviceHardwareStatus_FieldTerminalPathArrayOfValues{DeviceHardwareStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceHardwareStatus_FieldPathSelectorProvisioningState:
		return &DeviceHardwareStatus_FieldTerminalPathArrayOfValues{DeviceHardwareStatus_FieldTerminalPath: *fp, values: values.([]DeviceHardware_Status_PROVISIONING_STATE)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceHardwareStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceHardwareStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceHardwareStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware_Status: %d", fp.selector))
	}
}

func (fp *DeviceHardwareStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceHardwareStatus_FieldPathValue allows storing values for Status fields according to their type
type DeviceHardwareStatus_FieldPathValue interface {
	DeviceHardwareStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeviceHardware_Status)
	CompareWith(*DeviceHardware_Status) (cmp int, comparable bool)
}

func ParseDeviceHardwareStatus_FieldPathValue(pathStr, valueStr string) (DeviceHardwareStatus_FieldPathValue, error) {
	fp, err := ParseDeviceHardwareStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceHardwareStatus_FieldPathValue), nil
}

func MustParseDeviceHardwareStatus_FieldPathValue(pathStr, valueStr string) DeviceHardwareStatus_FieldPathValue {
	fpv, err := ParseDeviceHardwareStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceHardwareStatus_FieldTerminalPathValue struct {
	DeviceHardwareStatus_FieldTerminalPath
	value interface{}
}

var _ DeviceHardwareStatus_FieldPathValue = (*DeviceHardwareStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *DeviceHardwareStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceHardwareStatus_FieldTerminalPathValue) AsProvisioningStateValue() (DeviceHardware_Status_PROVISIONING_STATE, bool) {
	res, ok := fpv.value.(DeviceHardware_Status_PROVISIONING_STATE)
	return res, ok
}

// SetTo stores value for selected field for object Status
func (fpv *DeviceHardwareStatus_FieldTerminalPathValue) SetTo(target **DeviceHardware_Status) {
	if *target == nil {
		*target = new(DeviceHardware_Status)
	}
	switch fpv.selector {
	case DeviceHardwareStatus_FieldPathSelectorProvisioningState:
		(*target).ProvisioningState = fpv.value.(DeviceHardware_Status_PROVISIONING_STATE)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware_Status: %d", fpv.selector))
	}
}

func (fpv *DeviceHardwareStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeviceHardware_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceHardwareStatus_FieldTerminalPathValue' with the value under path in 'DeviceHardware_Status'.
func (fpv *DeviceHardwareStatus_FieldTerminalPathValue) CompareWith(source *DeviceHardware_Status) (int, bool) {
	switch fpv.selector {
	case DeviceHardwareStatus_FieldPathSelectorProvisioningState:
		leftValue := fpv.value.(DeviceHardware_Status_PROVISIONING_STATE)
		rightValue := source.GetProvisioningState()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardware_Status: %d", fpv.selector))
	}
}

func (fpv *DeviceHardwareStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeviceHardware_Status))
}

// DeviceHardwareStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type DeviceHardwareStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceHardwareStatus_FieldPath
	ContainsValue(*DeviceHardware_Status) bool
}

// ParseDeviceHardwareStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceHardwareStatus_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceHardwareStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceHardwareStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceHardwareStatus_FieldPathArrayItemValue), nil
}

func MustParseDeviceHardwareStatus_FieldPathArrayItemValue(pathStr, valueStr string) DeviceHardwareStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceHardwareStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceHardwareStatus_FieldTerminalPathArrayItemValue struct {
	DeviceHardwareStatus_FieldTerminalPath
	value interface{}
}

var _ DeviceHardwareStatus_FieldPathArrayItemValue = (*DeviceHardwareStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeviceHardware_Status as interface{}
func (fpaiv *DeviceHardwareStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceHardwareStatus_FieldTerminalPathArrayItemValue) GetSingle(source *DeviceHardware_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceHardwareStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeviceHardware_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *DeviceHardwareStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *DeviceHardware_Status) bool {
	slice := fpaiv.DeviceHardwareStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceHardwareStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type DeviceHardwareStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceHardwareStatus_FieldPath
}

func ParseDeviceHardwareStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceHardwareStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceHardwareStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceHardwareStatus_FieldPathArrayOfValues), nil
}

func MustParseDeviceHardwareStatus_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceHardwareStatus_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceHardwareStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceHardwareStatus_FieldTerminalPathArrayOfValues struct {
	DeviceHardwareStatus_FieldTerminalPath
	values interface{}
}

var _ DeviceHardwareStatus_FieldPathArrayOfValues = (*DeviceHardwareStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceHardwareStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceHardwareStatus_FieldPathSelectorProvisioningState:
		for _, v := range fpaov.values.([]DeviceHardware_Status_PROVISIONING_STATE) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceHardwareStatus_FieldTerminalPathArrayOfValues) AsProvisioningStateArrayOfValues() ([]DeviceHardware_Status_PROVISIONING_STATE, bool) {
	res, ok := fpaov.values.([]DeviceHardware_Status_PROVISIONING_STATE)
	return res, ok
}
