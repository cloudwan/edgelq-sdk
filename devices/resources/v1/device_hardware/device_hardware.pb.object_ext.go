// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1/device_hardware.proto
// DO NOT EDIT!!!

package device_hardware

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_policy"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &meta.Meta{}
)

func (o *DeviceHardware) GotenObjectExt() {}

func (o *DeviceHardware) MakeFullFieldMask() *DeviceHardware_FieldMask {
	return FullDeviceHardware_FieldMask()
}

func (o *DeviceHardware) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeviceHardware_FieldMask()
}

func (o *DeviceHardware) MakeDiffFieldMask(other *DeviceHardware) *DeviceHardware_FieldMask {
	if o == nil && other == nil {
		return &DeviceHardware_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeviceHardware_FieldMask()
	}

	res := &DeviceHardware_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceHardware_FieldSubPath{selector: DeviceHardware_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorDisplayName})
	}
	if o.GetSerialNumber() != other.GetSerialNumber() {
		res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorSerialNumber})
	}
	if o.GetManufacturer() != other.GetManufacturer() {
		res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorManufacturer})
	}
	if o.GetProductName() != other.GetProductName() {
		res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorProductName})
	}

	if len(o.GetMacAddress()) == len(other.GetMacAddress()) {
		for i, lValue := range o.GetMacAddress() {
			rValue := other.GetMacAddress()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorMacAddress})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorMacAddress})
	}
	if o.GetSimIccid() != other.GetSimIccid() {
		res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorSimIccid})
	}
	if o.GetImei() != other.GetImei() {
		res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorImei})
	}
	if o.GetAssociatedProvisioningPolicyName().String() != other.GetAssociatedProvisioningPolicyName().String() {
		res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorAssociatedProvisioningPolicyName})
	}
	if o.GetAssociatedDevice().String() != other.GetAssociatedDevice().String() {
		res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorAssociatedDevice})
	}
	{
		subMask := o.GetStatus().MakeDiffFieldMask(other.GetStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceHardware_FieldTerminalPath{selector: DeviceHardware_FieldPathSelectorStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceHardware_FieldSubPath{selector: DeviceHardware_FieldPathSelectorStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *DeviceHardware) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeviceHardware))
}

func (o *DeviceHardware) Clone() *DeviceHardware {
	if o == nil {
		return nil
	}
	result := &DeviceHardware{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.SerialNumber = o.SerialNumber
	result.Manufacturer = o.Manufacturer
	result.ProductName = o.ProductName
	result.MacAddress = make([]string, len(o.MacAddress))
	for i, sourceValue := range o.MacAddress {
		result.MacAddress[i] = sourceValue
	}
	result.SimIccid = o.SimIccid
	result.Imei = o.Imei
	if o.AssociatedProvisioningPolicyName == nil {
		result.AssociatedProvisioningPolicyName = nil
	} else if data, err := o.AssociatedProvisioningPolicyName.ProtoString(); err != nil {
		panic(err)
	} else {
		result.AssociatedProvisioningPolicyName = &provisioning_policy.Reference{}
		if err := result.AssociatedProvisioningPolicyName.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.AssociatedDevice == nil {
		result.AssociatedDevice = nil
	} else if data, err := o.AssociatedDevice.ProtoString(); err != nil {
		panic(err)
	} else {
		result.AssociatedDevice = &device.Reference{}
		if err := result.AssociatedDevice.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Status = o.Status.Clone()
	return result
}

func (o *DeviceHardware) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeviceHardware) Merge(source *DeviceHardware) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	o.SerialNumber = source.GetSerialNumber()
	o.Manufacturer = source.GetManufacturer()
	o.ProductName = source.GetProductName()
	for _, sourceValue := range source.GetMacAddress() {
		exists := false
		for _, currentValue := range o.MacAddress {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.MacAddress = append(o.MacAddress, newDstElement)
		}
	}

	o.SimIccid = source.GetSimIccid()
	o.Imei = source.GetImei()
	if source.GetAssociatedProvisioningPolicyName() != nil {
		if data, err := source.GetAssociatedProvisioningPolicyName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.AssociatedProvisioningPolicyName = &provisioning_policy.Reference{}
			if err := o.AssociatedProvisioningPolicyName.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.AssociatedProvisioningPolicyName = nil
	}
	if source.GetAssociatedDevice() != nil {
		if data, err := source.GetAssociatedDevice().ProtoString(); err != nil {
			panic(err)
		} else {
			o.AssociatedDevice = &device.Reference{}
			if err := o.AssociatedDevice.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.AssociatedDevice = nil
	}
	if source.GetStatus() != nil {
		if o.Status == nil {
			o.Status = new(DeviceHardware_Status)
		}
		o.Status.Merge(source.GetStatus())
	}
}

func (o *DeviceHardware) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeviceHardware))
}

func (o *DeviceHardware_Status) GotenObjectExt() {}

func (o *DeviceHardware_Status) MakeFullFieldMask() *DeviceHardware_Status_FieldMask {
	return FullDeviceHardware_Status_FieldMask()
}

func (o *DeviceHardware_Status) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeviceHardware_Status_FieldMask()
}

func (o *DeviceHardware_Status) MakeDiffFieldMask(other *DeviceHardware_Status) *DeviceHardware_Status_FieldMask {
	if o == nil && other == nil {
		return &DeviceHardware_Status_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeviceHardware_Status_FieldMask()
	}

	res := &DeviceHardware_Status_FieldMask{}
	if o.GetProvisioningState() != other.GetProvisioningState() {
		res.Paths = append(res.Paths, &DeviceHardwareStatus_FieldTerminalPath{selector: DeviceHardwareStatus_FieldPathSelectorProvisioningState})
	}
	return res
}

func (o *DeviceHardware_Status) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeviceHardware_Status))
}

func (o *DeviceHardware_Status) Clone() *DeviceHardware_Status {
	if o == nil {
		return nil
	}
	result := &DeviceHardware_Status{}
	result.ProvisioningState = o.ProvisioningState
	return result
}

func (o *DeviceHardware_Status) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeviceHardware_Status) Merge(source *DeviceHardware_Status) {
	o.ProvisioningState = source.GetProvisioningState()
}

func (o *DeviceHardware_Status) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeviceHardware_Status))
}
