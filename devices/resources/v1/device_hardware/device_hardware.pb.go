// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1/device_hardware.proto
// DO NOT EDIT!!!

package device_hardware

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	cellular_api_sim_card "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/sim_card"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_policy"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &cellular_api_sim_card.SimCard{}
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceHardware_Status_PROVISIONING_STATE int32

const (
	// Hardware was deregistered, so device state cannot be tracked
	DeviceHardware_Status_UNKNOWN DeviceHardware_Status_PROVISIONING_STATE = 0
	// The SIM card is being activated.
	DeviceHardware_Status_SIM_ACTIVATING DeviceHardware_Status_PROVISIONING_STATE = 4
	// The device would be connecting to ZTP
	// as the attached SIM card was activated.
	// If SIM card is not attached, this is the first status.
	// If stuck at this value, provisioning could have failed.
	DeviceHardware_Status_CONNECTING DeviceHardware_Status_PROVISIONING_STATE = 5
	// Deprecated:
	// This has been replaced by splitting into
	// SIM_ACTIVATING and ZTP_CONNECTING
	DeviceHardware_Status_NOT_PROVISIONED DeviceHardware_Status_PROVISIONING_STATE = 1
	// Device passed attestation and service account is created
	// Could be either provisioning policy scope for device scope account
	DeviceHardware_Status_PROVISIONED DeviceHardware_Status_PROVISIONING_STATE = 2
	// For device scope onboarding, the device was removed
	// For provisioning policy based onboarding, the provisioning policy was
	// removed
	DeviceHardware_Status_REVOKED DeviceHardware_Status_PROVISIONING_STATE = 3
)

var (
	DeviceHardware_Status_PROVISIONING_STATE_name = map[int32]string{
		0: "UNKNOWN",
		4: "SIM_ACTIVATING",
		5: "CONNECTING",
		1: "NOT_PROVISIONED",
		2: "PROVISIONED",
		3: "REVOKED",
	}

	DeviceHardware_Status_PROVISIONING_STATE_value = map[string]int32{
		"UNKNOWN":         0,
		"SIM_ACTIVATING":  4,
		"CONNECTING":      5,
		"NOT_PROVISIONED": 1,
		"PROVISIONED":     2,
		"REVOKED":         3,
	}
)

func (x DeviceHardware_Status_PROVISIONING_STATE) Enum() *DeviceHardware_Status_PROVISIONING_STATE {
	p := new(DeviceHardware_Status_PROVISIONING_STATE)
	*p = x
	return p
}

func (x DeviceHardware_Status_PROVISIONING_STATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (DeviceHardware_Status_PROVISIONING_STATE) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_device_hardware_proto_enumTypes[0].Descriptor()
}

func (DeviceHardware_Status_PROVISIONING_STATE) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_device_hardware_proto_enumTypes[0]
}

func (x DeviceHardware_Status_PROVISIONING_STATE) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use DeviceHardware_Status_PROVISIONING_STATE.ProtoReflect.Descriptor instead.
func (DeviceHardware_Status_PROVISIONING_STATE) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_proto_rawDescGZIP(), []int{0, 0, 0}
}

// DeviceHardware Resource
type DeviceHardware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of DeviceHardware
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata     *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	DisplayName  string     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	SerialNumber string     `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" firestore:"serialNumber"`
	Manufacturer string     `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty" firestore:"manufacturer"`
	// Should be in the format "productname (sku)"
	ProductName string   `protobuf:"bytes,6,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty" firestore:"productName"`
	MacAddress  []string `protobuf:"bytes,7,rep,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty" firestore:"macAddress"`
	// Result of activating sim card,
	// which is specified by associated_sim_card field
	SimIccid string `protobuf:"bytes,8,opt,name=sim_iccid,json=simIccid,proto3" json:"sim_iccid,omitempty" firestore:"simIccid"`
	Imei                             string                           `protobuf:"bytes,9,opt,name=imei,proto3" json:"imei,omitempty" firestore:"imei"`
	AssociatedProvisioningPolicyName *provisioning_policy.Reference   `protobuf:"bytes,10,opt,customtype=Reference,name=associated_provisioning_policy_name,json=associatedProvisioningPolicyName,proto3" json:"associated_provisioning_policy_name,omitempty" firestore:"associatedProvisioningPolicyName"`
	AssociatedDevice                 *device.Reference                `protobuf:"bytes,11,opt,customtype=Reference,name=associated_device,json=associatedDevice,proto3" json:"associated_device,omitempty" firestore:"associatedDevice"`
	AssociatedSimCard                *cellular_api_sim_card.Reference `protobuf:"bytes,13,opt,customtype=Reference,name=associated_sim_card,json=associatedSimCard,proto3" json:"associated_sim_card,omitempty" firestore:"associatedSimCard"`
	Status                           *DeviceHardware_Status           `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
}

func (m *DeviceHardware) Reset() {
	*m = DeviceHardware{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceHardware) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceHardware) ProtoMessage() {}

func (m *DeviceHardware) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceHardware) GotenMessage() {}

// Deprecated, Use DeviceHardware.ProtoReflect.Descriptor instead.
func (*DeviceHardware) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_proto_rawDescGZIP(), []int{0}
}

func (m *DeviceHardware) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceHardware) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceHardware) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceHardware) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceHardware) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeviceHardware) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DeviceHardware) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *DeviceHardware) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *DeviceHardware) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *DeviceHardware) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *DeviceHardware) GetMacAddress() []string {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

func (m *DeviceHardware) GetSimIccid() string {
	if m != nil {
		return m.SimIccid
	}
	return ""
}

func (m *DeviceHardware) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *DeviceHardware) GetAssociatedProvisioningPolicyName() *provisioning_policy.Reference {
	if m != nil {
		return m.AssociatedProvisioningPolicyName
	}
	return nil
}

func (m *DeviceHardware) GetAssociatedDevice() *device.Reference {
	if m != nil {
		return m.AssociatedDevice
	}
	return nil
}

func (m *DeviceHardware) GetAssociatedSimCard() *cellular_api_sim_card.Reference {
	if m != nil {
		return m.AssociatedSimCard
	}
	return nil
}

func (m *DeviceHardware) GetStatus() *DeviceHardware_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DeviceHardware) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeviceHardware"))
	}
	m.Name = fv
}

func (m *DeviceHardware) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "DeviceHardware"))
	}
	m.Metadata = fv
}

func (m *DeviceHardware) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "DeviceHardware"))
	}
	m.DisplayName = fv
}

func (m *DeviceHardware) SetSerialNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SerialNumber", "DeviceHardware"))
	}
	m.SerialNumber = fv
}

func (m *DeviceHardware) SetManufacturer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Manufacturer", "DeviceHardware"))
	}
	m.Manufacturer = fv
}

func (m *DeviceHardware) SetProductName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProductName", "DeviceHardware"))
	}
	m.ProductName = fv
}

func (m *DeviceHardware) SetMacAddress(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MacAddress", "DeviceHardware"))
	}
	m.MacAddress = fv
}

func (m *DeviceHardware) SetSimIccid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimIccid", "DeviceHardware"))
	}
	m.SimIccid = fv
}

func (m *DeviceHardware) SetImei(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Imei", "DeviceHardware"))
	}
	m.Imei = fv
}

func (m *DeviceHardware) SetAssociatedProvisioningPolicyName(fv *provisioning_policy.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AssociatedProvisioningPolicyName", "DeviceHardware"))
	}
	m.AssociatedProvisioningPolicyName = fv
}

func (m *DeviceHardware) SetAssociatedDevice(fv *device.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AssociatedDevice", "DeviceHardware"))
	}
	m.AssociatedDevice = fv
}

func (m *DeviceHardware) SetAssociatedSimCard(fv *cellular_api_sim_card.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AssociatedSimCard", "DeviceHardware"))
	}
	m.AssociatedSimCard = fv
}

func (m *DeviceHardware) SetStatus(fv *DeviceHardware_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "DeviceHardware"))
	}
	m.Status = fv
}

type DeviceHardware_Status struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	ProvisioningState DeviceHardware_Status_PROVISIONING_STATE `protobuf:"varint,1,opt,name=provisioning_state,json=provisioningState,proto3,enum=ntt.devices.v1.DeviceHardware_Status_PROVISIONING_STATE" json:"provisioning_state,omitempty" firestore:"provisioningState"`
}

func (m *DeviceHardware_Status) Reset() {
	*m = DeviceHardware_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceHardware_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceHardware_Status) ProtoMessage() {}

func (m *DeviceHardware_Status) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceHardware_Status) GotenMessage() {}

// Deprecated, Use DeviceHardware_Status.ProtoReflect.Descriptor instead.
func (*DeviceHardware_Status) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_proto_rawDescGZIP(), []int{0, 0}
}

func (m *DeviceHardware_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceHardware_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceHardware_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceHardware_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceHardware_Status) GetProvisioningState() DeviceHardware_Status_PROVISIONING_STATE {
	if m != nil {
		return m.ProvisioningState
	}
	return DeviceHardware_Status_UNKNOWN
}

func (m *DeviceHardware_Status) SetProvisioningState(fv DeviceHardware_Status_PROVISIONING_STATE) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProvisioningState", "DeviceHardware_Status"))
	}
	m.ProvisioningState = fv
}

var edgelq_devices_proto_v1_device_hardware_proto preflect.FileDescriptor

var edgelq_devices_proto_v1_device_hardware_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x0b, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x0a,
	0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6,
	0x27, 0x07, 0x2a, 0x05, 0x22, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x5f, 0x69, 0x63, 0x63, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x49, 0x63, 0x63, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6d, 0x65, 0x69, 0x12, 0x6b, 0x0a, 0x23, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0xb2, 0xda, 0x21, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x02, 0x52,
	0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xda,
	0x21, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x02, 0x52, 0x10,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xb2,
	0xda, 0x21, 0x25, 0x12, 0x23, 0x0a, 0x1f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2d,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53,
	0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x10, 0x02, 0x52, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xef, 0x01, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x7c,
	0x0a, 0x12, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x3a, 0x9c, 0x04, 0xea,
	0x41, 0x6a, 0x0a, 0x21, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x45, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x92, 0xd9, 0x21, 0x82,
	0x02, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x18, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x38, 0x05, 0x42, 0xb8, 0x01, 0x08, 0x02, 0x12, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0f, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x5f, 0x69, 0x63,
	0x63, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x23, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x11, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x15, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69,
	0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0xb2, 0xdf, 0x21, 0x97, 0x01, 0x12, 0x16, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x12, 0x15, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x2c, 0x0a, 0x23, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x05,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x05, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x12, 0x1c, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x22, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0xda,
	0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0xb7, 0x02, 0xe8, 0xde,
	0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x54, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0xa2, 0x80, 0xd1, 0x02, 0x56,
	0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1_device_hardware_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1_device_hardware_proto_rawDescData = edgelq_devices_proto_v1_device_hardware_proto_rawDesc
)

func edgelq_devices_proto_v1_device_hardware_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1_device_hardware_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1_device_hardware_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1_device_hardware_proto_rawDescData)
	})
	return edgelq_devices_proto_v1_device_hardware_proto_rawDescData
}

var edgelq_devices_proto_v1_device_hardware_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_devices_proto_v1_device_hardware_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var edgelq_devices_proto_v1_device_hardware_proto_goTypes = []interface{}{
	(DeviceHardware_Status_PROVISIONING_STATE)(0), // 0: ntt.devices.v1.DeviceHardware_Status_PROVISIONING_STATE
	(*DeviceHardware)(nil),                        // 1: ntt.devices.v1.DeviceHardware
	(*DeviceHardware_Status)(nil),                 // 2: ntt.devices.v1.DeviceHardware.Status
	(*meta.Meta)(nil),                             // 3: goten.types.Meta
}
var edgelq_devices_proto_v1_device_hardware_proto_depIdxs = []int32{
	3, // 0: ntt.devices.v1.DeviceHardware.metadata:type_name -> goten.types.Meta
	2, // 1: ntt.devices.v1.DeviceHardware.status:type_name -> ntt.devices.v1.DeviceHardware.Status
	0, // 2: ntt.devices.v1.DeviceHardware.Status.provisioning_state:type_name -> ntt.devices.v1.DeviceHardware_Status_PROVISIONING_STATE
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1_device_hardware_proto_init() }
func edgelq_devices_proto_v1_device_hardware_proto_init() {
	if edgelq_devices_proto_v1_device_hardware_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1_device_hardware_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceHardware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceHardware_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1_device_hardware_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_devices_proto_v1_device_hardware_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1_device_hardware_proto_depIdxs,
		EnumInfos:         edgelq_devices_proto_v1_device_hardware_proto_enumTypes,
		MessageInfos:      edgelq_devices_proto_v1_device_hardware_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1_device_hardware_proto = out.File
	edgelq_devices_proto_v1_device_hardware_proto_rawDesc = nil
	edgelq_devices_proto_v1_device_hardware_proto_goTypes = nil
	edgelq_devices_proto_v1_device_hardware_proto_depIdxs = nil
}
