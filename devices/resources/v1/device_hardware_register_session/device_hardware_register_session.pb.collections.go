// Code generated by protoc-gen-goten-resource
// Resource: DeviceHardwareRegisterSession
// DO NOT EDIT!!!

package device_hardware_register_session

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	device_hardware "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_hardware"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_policy"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &device_hardware.DeviceHardware{}
	_ = &project.Project{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

type DeviceHardwareRegisterSessionList []*DeviceHardwareRegisterSession

func (l DeviceHardwareRegisterSessionList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*DeviceHardwareRegisterSession))
}

func (l DeviceHardwareRegisterSessionList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(DeviceHardwareRegisterSessionList)...)
}

func (l DeviceHardwareRegisterSessionList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DeviceHardwareRegisterSessionList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l DeviceHardwareRegisterSessionList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*DeviceHardwareRegisterSession)
}

func (l DeviceHardwareRegisterSessionList) Length() int {
	return len(l)
}

type DeviceHardwareRegisterSessionChangeList []*DeviceHardwareRegisterSessionChange

func (l DeviceHardwareRegisterSessionChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*DeviceHardwareRegisterSessionChange))
}

func (l DeviceHardwareRegisterSessionChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(DeviceHardwareRegisterSessionChangeList)...)
}

func (l DeviceHardwareRegisterSessionChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DeviceHardwareRegisterSessionChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l DeviceHardwareRegisterSessionChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*DeviceHardwareRegisterSessionChange)
}

func (l DeviceHardwareRegisterSessionChangeList) Length() int {
	return len(l)
}

type DeviceHardwareRegisterSessionNameList []*Name

func (l DeviceHardwareRegisterSessionNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l DeviceHardwareRegisterSessionNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(DeviceHardwareRegisterSessionNameList)...)
}

func (l DeviceHardwareRegisterSessionNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DeviceHardwareRegisterSessionNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l DeviceHardwareRegisterSessionNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l DeviceHardwareRegisterSessionNameList) Length() int {
	return len(l)
}

type DeviceHardwareRegisterSessionReferenceList []*Reference

func (l DeviceHardwareRegisterSessionReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l DeviceHardwareRegisterSessionReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(DeviceHardwareRegisterSessionReferenceList)...)
}

func (l DeviceHardwareRegisterSessionReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DeviceHardwareRegisterSessionReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l DeviceHardwareRegisterSessionReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l DeviceHardwareRegisterSessionReferenceList) Length() int {
	return len(l)
}

type DeviceHardwareRegisterSessionParentNameList []*ParentName

func (l DeviceHardwareRegisterSessionParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l DeviceHardwareRegisterSessionParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(DeviceHardwareRegisterSessionParentNameList)...)
}

func (l DeviceHardwareRegisterSessionParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DeviceHardwareRegisterSessionParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l DeviceHardwareRegisterSessionParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l DeviceHardwareRegisterSessionParentNameList) Length() int {
	return len(l)
}

type DeviceHardwareRegisterSessionParentReferenceList []*ParentReference

func (l DeviceHardwareRegisterSessionParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l DeviceHardwareRegisterSessionParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(DeviceHardwareRegisterSessionParentReferenceList)...)
}

func (l DeviceHardwareRegisterSessionParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DeviceHardwareRegisterSessionParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l DeviceHardwareRegisterSessionParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l DeviceHardwareRegisterSessionParentReferenceList) Length() int {
	return len(l)
}

type DeviceHardwareRegisterSessionMap map[Name]*DeviceHardwareRegisterSession

func (m DeviceHardwareRegisterSessionMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m DeviceHardwareRegisterSessionMap) Set(res gotenresource.Resource) {
	tRes := res.(*DeviceHardwareRegisterSession)
	m[*tRes.Name] = tRes
}

func (m DeviceHardwareRegisterSessionMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m DeviceHardwareRegisterSessionMap) Length() int {
	return len(m)
}

func (m DeviceHardwareRegisterSessionMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type DeviceHardwareRegisterSessionChangeMap map[Name]*DeviceHardwareRegisterSessionChange

func (m DeviceHardwareRegisterSessionChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m DeviceHardwareRegisterSessionChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*DeviceHardwareRegisterSessionChange)
	m[*tChange.GetDeviceHardwareRegisterSessionName()] = tChange
}

func (m DeviceHardwareRegisterSessionChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m DeviceHardwareRegisterSessionChangeMap) Length() int {
	return len(m)
}

func (m DeviceHardwareRegisterSessionChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
