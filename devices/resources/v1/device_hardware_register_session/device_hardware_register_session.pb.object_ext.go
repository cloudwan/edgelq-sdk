// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1/device_hardware_register_session.proto
// DO NOT EDIT!!!

package device_hardware_register_session

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	device_hardware "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_hardware"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_policy"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &device_hardware.DeviceHardware{}
	_ = &project.Project{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

func (o *DeviceHardwareRegisterSession) GotenObjectExt() {}

func (o *DeviceHardwareRegisterSession) MakeFullFieldMask() *DeviceHardwareRegisterSession_FieldMask {
	return FullDeviceHardwareRegisterSession_FieldMask()
}

func (o *DeviceHardwareRegisterSession) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeviceHardwareRegisterSession_FieldMask()
}

func (o *DeviceHardwareRegisterSession) MakeDiffFieldMask(other *DeviceHardwareRegisterSession) *DeviceHardwareRegisterSession_FieldMask {
	if o == nil && other == nil {
		return &DeviceHardwareRegisterSession_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeviceHardwareRegisterSession_FieldMask()
	}

	res := &DeviceHardwareRegisterSession_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldSubPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetStartTime(), other.GetStartTime()) {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorStartTime})
	}
	if !proto.Equal(o.GetExpirationTime(), other.GetExpirationTime()) {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime})
	}
	if o.GetUserEmail() != other.GetUserEmail() {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorUserEmail})
	}
	if o.GetInviterEmail() != other.GetInviterEmail() {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail})
	}
	if o.GetLanguageCode() != other.GetLanguageCode() {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode})
	}

	if len(o.GetExtras()) == len(other.GetExtras()) {
		for i, lValue := range o.GetExtras() {
			rValue := other.GetExtras()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorExtras})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorExtras})
	}
	if o.GetProvisioningPolicyName().String() != other.GetProvisioningPolicyName().String() {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName})
	}
	if o.GetDeviceName().String() != other.GetDeviceName().String() {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorDeviceName})
	}
	if o.GetSingleUse() != other.GetSingleUse() {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorSingleUse})
	}
	if o.GetToken() != other.GetToken() {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorToken})
	}
	{
		subMask := o.GetStatus().MakeDiffFieldMask(other.GetStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &DeviceHardwareRegisterSession_FieldSubPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *DeviceHardwareRegisterSession) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeviceHardwareRegisterSession))
}

func (o *DeviceHardwareRegisterSession) Clone() *DeviceHardwareRegisterSession {
	if o == nil {
		return nil
	}
	result := &DeviceHardwareRegisterSession{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.StartTime = proto.Clone(o.StartTime).(*timestamppb.Timestamp)
	result.ExpirationTime = proto.Clone(o.ExpirationTime).(*timestamppb.Timestamp)
	result.UserEmail = o.UserEmail
	result.InviterEmail = o.InviterEmail
	result.LanguageCode = o.LanguageCode
	result.Extras = map[string]string{}
	for key, sourceValue := range o.Extras {
		result.Extras[key] = sourceValue
	}
	if o.ProvisioningPolicyName == nil {
		result.ProvisioningPolicyName = nil
	} else if data, err := o.ProvisioningPolicyName.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ProvisioningPolicyName = &provisioning_policy.Reference{}
		if err := result.ProvisioningPolicyName.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.DeviceName == nil {
		result.DeviceName = nil
	} else if data, err := o.DeviceName.ProtoString(); err != nil {
		panic(err)
	} else {
		result.DeviceName = &device.Reference{}
		if err := result.DeviceName.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.SingleUse = o.SingleUse
	result.Token = o.Token
	result.Status = o.Status.Clone()
	return result
}

func (o *DeviceHardwareRegisterSession) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeviceHardwareRegisterSession) Merge(source *DeviceHardwareRegisterSession) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetStartTime() != nil {
		if o.StartTime == nil {
			o.StartTime = new(timestamppb.Timestamp)
		}
		proto.Merge(o.StartTime, source.GetStartTime())
	}
	if source.GetExpirationTime() != nil {
		if o.ExpirationTime == nil {
			o.ExpirationTime = new(timestamppb.Timestamp)
		}
		proto.Merge(o.ExpirationTime, source.GetExpirationTime())
	}
	o.UserEmail = source.GetUserEmail()
	o.InviterEmail = source.GetInviterEmail()
	o.LanguageCode = source.GetLanguageCode()
	if source.GetExtras() != nil {
		if o.Extras == nil {
			o.Extras = make(map[string]string, len(source.GetExtras()))
		}
		for key, sourceValue := range source.GetExtras() {
			o.Extras[key] = sourceValue
		}
	}
	if source.GetProvisioningPolicyName() != nil {
		if data, err := source.GetProvisioningPolicyName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ProvisioningPolicyName = &provisioning_policy.Reference{}
			if err := o.ProvisioningPolicyName.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ProvisioningPolicyName = nil
	}
	if source.GetDeviceName() != nil {
		if data, err := source.GetDeviceName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.DeviceName = &device.Reference{}
			if err := o.DeviceName.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.DeviceName = nil
	}
	o.SingleUse = source.GetSingleUse()
	o.Token = source.GetToken()
	if source.GetStatus() != nil {
		if o.Status == nil {
			o.Status = new(DeviceHardwareRegisterSession_Status)
		}
		o.Status.Merge(source.GetStatus())
	}
}

func (o *DeviceHardwareRegisterSession) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeviceHardwareRegisterSession))
}

func (o *DeviceHardwareRegisterSession_Status) GotenObjectExt() {}

func (o *DeviceHardwareRegisterSession_Status) MakeFullFieldMask() *DeviceHardwareRegisterSession_Status_FieldMask {
	return FullDeviceHardwareRegisterSession_Status_FieldMask()
}

func (o *DeviceHardwareRegisterSession_Status) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeviceHardwareRegisterSession_Status_FieldMask()
}

func (o *DeviceHardwareRegisterSession_Status) MakeDiffFieldMask(other *DeviceHardwareRegisterSession_Status) *DeviceHardwareRegisterSession_Status_FieldMask {
	if o == nil && other == nil {
		return &DeviceHardwareRegisterSession_Status_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeviceHardwareRegisterSession_Status_FieldMask()
	}

	res := &DeviceHardwareRegisterSession_Status_FieldMask{}

	if len(o.GetDeviceHardwares()) == len(other.GetDeviceHardwares()) {
		for i, lValue := range o.GetDeviceHardwares() {
			rValue := other.GetDeviceHardwares()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &DeviceHardwareRegisterSessionStatus_FieldTerminalPath{selector: DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &DeviceHardwareRegisterSessionStatus_FieldTerminalPath{selector: DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares})
	}
	return res
}

func (o *DeviceHardwareRegisterSession_Status) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeviceHardwareRegisterSession_Status))
}

func (o *DeviceHardwareRegisterSession_Status) Clone() *DeviceHardwareRegisterSession_Status {
	if o == nil {
		return nil
	}
	result := &DeviceHardwareRegisterSession_Status{}
	result.DeviceHardwares = make([]*device_hardware.Name, len(o.DeviceHardwares))
	for i, sourceValue := range o.DeviceHardwares {
		if sourceValue == nil {
			result.DeviceHardwares[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.DeviceHardwares[i] = &device_hardware.Name{}
			if err := result.DeviceHardwares[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *DeviceHardwareRegisterSession_Status) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeviceHardwareRegisterSession_Status) Merge(source *DeviceHardwareRegisterSession_Status) {
	for _, sourceValue := range source.GetDeviceHardwares() {
		exists := false
		for _, currentValue := range o.DeviceHardwares {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device_hardware.Name
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &device_hardware.Name{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.DeviceHardwares = append(o.DeviceHardwares, newDstElement)
		}
	}

}

func (o *DeviceHardwareRegisterSession_Status) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeviceHardwareRegisterSession_Status))
}
