// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1/device_hardware_register_session.proto
// DO NOT EDIT!!!

package device_hardware_register_session

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	device_hardware "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_hardware"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_policy"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &device_hardware.DeviceHardware{}
	_ = &project.Project{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceHardwareRegisterSession_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceHardwareRegisterSession_FieldPathSelector
	Get(source *DeviceHardwareRegisterSession) []interface{}
	GetSingle(source *DeviceHardwareRegisterSession) (interface{}, bool)
	ClearValue(item *DeviceHardwareRegisterSession)

	// Those methods build corresponding DeviceHardwareRegisterSession_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceHardwareRegisterSession_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceHardwareRegisterSession_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceHardwareRegisterSession_FieldPathArrayItemValue
}

type DeviceHardwareRegisterSession_FieldPathSelector int32

const (
	DeviceHardwareRegisterSession_FieldPathSelectorName                   DeviceHardwareRegisterSession_FieldPathSelector = 0
	DeviceHardwareRegisterSession_FieldPathSelectorDisplayName            DeviceHardwareRegisterSession_FieldPathSelector = 1
	DeviceHardwareRegisterSession_FieldPathSelectorMetadata               DeviceHardwareRegisterSession_FieldPathSelector = 2
	DeviceHardwareRegisterSession_FieldPathSelectorStartTime              DeviceHardwareRegisterSession_FieldPathSelector = 3
	DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime         DeviceHardwareRegisterSession_FieldPathSelector = 4
	DeviceHardwareRegisterSession_FieldPathSelectorUserEmail              DeviceHardwareRegisterSession_FieldPathSelector = 5
	DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail           DeviceHardwareRegisterSession_FieldPathSelector = 6
	DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode           DeviceHardwareRegisterSession_FieldPathSelector = 7
	DeviceHardwareRegisterSession_FieldPathSelectorExtras                 DeviceHardwareRegisterSession_FieldPathSelector = 8
	DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName DeviceHardwareRegisterSession_FieldPathSelector = 9
	DeviceHardwareRegisterSession_FieldPathSelectorDeviceName             DeviceHardwareRegisterSession_FieldPathSelector = 10
	DeviceHardwareRegisterSession_FieldPathSelectorSingleUse              DeviceHardwareRegisterSession_FieldPathSelector = 11
	DeviceHardwareRegisterSession_FieldPathSelectorToken                  DeviceHardwareRegisterSession_FieldPathSelector = 12
	DeviceHardwareRegisterSession_FieldPathSelectorStatus                 DeviceHardwareRegisterSession_FieldPathSelector = 13
)

func (s DeviceHardwareRegisterSession_FieldPathSelector) String() string {
	switch s {
	case DeviceHardwareRegisterSession_FieldPathSelectorName:
		return "name"
	case DeviceHardwareRegisterSession_FieldPathSelectorDisplayName:
		return "display_name"
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		return "metadata"
	case DeviceHardwareRegisterSession_FieldPathSelectorStartTime:
		return "start_time"
	case DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime:
		return "expiration_time"
	case DeviceHardwareRegisterSession_FieldPathSelectorUserEmail:
		return "user_email"
	case DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail:
		return "inviter_email"
	case DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode:
		return "language_code"
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		return "extras"
	case DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName:
		return "provisioning_policy_name"
	case DeviceHardwareRegisterSession_FieldPathSelectorDeviceName:
		return "device_name"
	case DeviceHardwareRegisterSession_FieldPathSelectorSingleUse:
		return "single_use"
	case DeviceHardwareRegisterSession_FieldPathSelectorToken:
		return "token"
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", s))
	}
}

func BuildDeviceHardwareRegisterSession_FieldPath(fp gotenobject.RawFieldPath) (DeviceHardwareRegisterSession_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeviceHardwareRegisterSession")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorDisplayName}, nil
		case "metadata":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorMetadata}, nil
		case "start_time", "startTime", "start-time":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorStartTime}, nil
		case "expiration_time", "expirationTime", "expiration-time":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime}, nil
		case "user_email", "userEmail", "user-email":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorUserEmail}, nil
		case "inviter_email", "inviterEmail", "inviter-email":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail}, nil
		case "language_code", "languageCode", "language-code":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode}, nil
		case "extras":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorExtras}, nil
		case "provisioning_policy_name", "provisioningPolicyName", "provisioning-policy-name":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName}, nil
		case "device_name", "deviceName", "device-name":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorDeviceName}, nil
		case "single_use", "singleUse", "single-use":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorSingleUse}, nil
		case "token":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorToken}, nil
		case "status":
			return &DeviceHardwareRegisterSession_FieldTerminalPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceHardwareRegisterSession_FieldSubPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildDeviceHardwareRegisterSessionStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DeviceHardwareRegisterSession_FieldSubPath{selector: DeviceHardwareRegisterSession_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		case "extras":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object DeviceHardwareRegisterSession)", fp)
			}
			return &DeviceHardwareRegisterSession_FieldPathMap{selector: DeviceHardwareRegisterSession_FieldPathSelectorExtras, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeviceHardwareRegisterSession", fp)
}

func ParseDeviceHardwareRegisterSession_FieldPath(rawField string) (DeviceHardwareRegisterSession_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceHardwareRegisterSession_FieldPath(fp)
}

func MustParseDeviceHardwareRegisterSession_FieldPath(rawField string) DeviceHardwareRegisterSession_FieldPath {
	fp, err := ParseDeviceHardwareRegisterSession_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceHardwareRegisterSession_FieldTerminalPath struct {
	selector DeviceHardwareRegisterSession_FieldPathSelector
}

var _ DeviceHardwareRegisterSession_FieldPath = (*DeviceHardwareRegisterSession_FieldTerminalPath)(nil)

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) Selector() DeviceHardwareRegisterSession_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeviceHardwareRegisterSession
func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) Get(source *DeviceHardwareRegisterSession) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceHardwareRegisterSession_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case DeviceHardwareRegisterSession_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case DeviceHardwareRegisterSession_FieldPathSelectorStartTime:
			if source.StartTime != nil {
				values = append(values, source.StartTime)
			}
		case DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime:
			if source.ExpirationTime != nil {
				values = append(values, source.ExpirationTime)
			}
		case DeviceHardwareRegisterSession_FieldPathSelectorUserEmail:
			values = append(values, source.UserEmail)
		case DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail:
			values = append(values, source.InviterEmail)
		case DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode:
			values = append(values, source.LanguageCode)
		case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
			values = append(values, source.Extras)
		case DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName:
			if source.ProvisioningPolicyName != nil {
				values = append(values, source.ProvisioningPolicyName)
			}
		case DeviceHardwareRegisterSession_FieldPathSelectorDeviceName:
			if source.DeviceName != nil {
				values = append(values, source.DeviceName)
			}
		case DeviceHardwareRegisterSession_FieldPathSelectorSingleUse:
			values = append(values, source.SingleUse)
		case DeviceHardwareRegisterSession_FieldPathSelectorToken:
			values = append(values, source.Token)
		case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeviceHardwareRegisterSession))
}

// GetSingle returns value pointed by specific field of from source DeviceHardwareRegisterSession
func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) GetSingle(source *DeviceHardwareRegisterSession) (interface{}, bool) {
	switch fp.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorStartTime:
		res := source.GetStartTime()
		return res, res != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime:
		res := source.GetExpirationTime()
		return res, res != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorUserEmail:
		return source.GetUserEmail(), source != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail:
		return source.GetInviterEmail(), source != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode:
		return source.GetLanguageCode(), source != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		res := source.GetExtras()
		return res, res != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName:
		res := source.GetProvisioningPolicyName()
		return res, res != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorDeviceName:
		res := source.GetDeviceName()
		return res, res != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorSingleUse:
		return source.GetSingleUse(), source != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorToken:
		return source.GetToken(), source != nil
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fp.selector))
	}
}

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeviceHardwareRegisterSession))
}

// GetDefault returns a default value of the field type
func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorName:
		return (*Name)(nil)
	case DeviceHardwareRegisterSession_FieldPathSelectorDisplayName:
		return ""
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case DeviceHardwareRegisterSession_FieldPathSelectorStartTime:
		return (*timestamppb.Timestamp)(nil)
	case DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime:
		return (*timestamppb.Timestamp)(nil)
	case DeviceHardwareRegisterSession_FieldPathSelectorUserEmail:
		return ""
	case DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail:
		return ""
	case DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode:
		return ""
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		return (map[string]string)(nil)
	case DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName:
		return (*provisioning_policy.Reference)(nil)
	case DeviceHardwareRegisterSession_FieldPathSelectorDeviceName:
		return (*device.Reference)(nil)
	case DeviceHardwareRegisterSession_FieldPathSelectorSingleUse:
		return false
	case DeviceHardwareRegisterSession_FieldPathSelectorToken:
		return ""
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		return (*DeviceHardwareRegisterSession_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fp.selector))
	}
}

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) ClearValue(item *DeviceHardwareRegisterSession) {
	if item != nil {
		switch fp.selector {
		case DeviceHardwareRegisterSession_FieldPathSelectorName:
			item.Name = nil
		case DeviceHardwareRegisterSession_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
			item.Metadata = nil
		case DeviceHardwareRegisterSession_FieldPathSelectorStartTime:
			item.StartTime = nil
		case DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime:
			item.ExpirationTime = nil
		case DeviceHardwareRegisterSession_FieldPathSelectorUserEmail:
			item.UserEmail = ""
		case DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail:
			item.InviterEmail = ""
		case DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode:
			item.LanguageCode = ""
		case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
			item.Extras = nil
		case DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName:
			item.ProvisioningPolicyName = nil
		case DeviceHardwareRegisterSession_FieldPathSelectorDeviceName:
			item.DeviceName = nil
		case DeviceHardwareRegisterSession_FieldPathSelectorSingleUse:
			item.SingleUse = false
		case DeviceHardwareRegisterSession_FieldPathSelectorToken:
			item.Token = ""
		case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fp.selector))
		}
	}
}

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeviceHardwareRegisterSession))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorName ||
		fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorDisplayName ||
		fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorStartTime ||
		fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime ||
		fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorUserEmail ||
		fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail ||
		fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode ||
		fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorExtras ||
		fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName ||
		fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorDeviceName ||
		fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorSingleUse ||
		fp.selector == DeviceHardwareRegisterSession_FieldPathSelectorToken
}

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) WithIValue(value interface{}) DeviceHardwareRegisterSession_FieldPathValue {
	switch fp.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorName:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(*Name)}
	case DeviceHardwareRegisterSession_FieldPathSelectorDisplayName:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case DeviceHardwareRegisterSession_FieldPathSelectorStartTime:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	case DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	case DeviceHardwareRegisterSession_FieldPathSelectorUserEmail:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	case DeviceHardwareRegisterSession_FieldPathSelectorDeviceName:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	case DeviceHardwareRegisterSession_FieldPathSelectorSingleUse:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(bool)}
	case DeviceHardwareRegisterSession_FieldPathSelectorToken:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		return &DeviceHardwareRegisterSession_FieldTerminalPathValue{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, value: value.(*DeviceHardwareRegisterSession_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fp.selector))
	}
}

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceHardwareRegisterSession_FieldPathArrayOfValues {
	fpaov := &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorName:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]*Name)}
	case DeviceHardwareRegisterSession_FieldPathSelectorDisplayName:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case DeviceHardwareRegisterSession_FieldPathSelectorStartTime:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	case DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	case DeviceHardwareRegisterSession_FieldPathSelectorUserEmail:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Reference)}
	case DeviceHardwareRegisterSession_FieldPathSelectorDeviceName:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]*device.Reference)}
	case DeviceHardwareRegisterSession_FieldPathSelectorSingleUse:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]bool)}
	case DeviceHardwareRegisterSession_FieldPathSelectorToken:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]string)}
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		return &DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSession_FieldTerminalPath: *fp, values: values.([]*DeviceHardwareRegisterSession_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceHardwareRegisterSession_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fp.selector))
	}
}

func (fp *DeviceHardwareRegisterSession_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type DeviceHardwareRegisterSession_FieldPathMap struct {
	key      string
	selector DeviceHardwareRegisterSession_FieldPathSelector
}

var _ DeviceHardwareRegisterSession_FieldPath = (*DeviceHardwareRegisterSession_FieldPathMap)(nil)

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) Selector() DeviceHardwareRegisterSession_FieldPathSelector {
	return fpm.selector
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *DeviceHardwareRegisterSession_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *DeviceHardwareRegisterSession_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source DeviceHardwareRegisterSession
func (fpm *DeviceHardwareRegisterSession_FieldPathMap) Get(source *DeviceHardwareRegisterSession) (values []interface{}) {
	switch fpm.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		if value, ok := source.GetExtras()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpm.selector))
	}
	return
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*DeviceHardwareRegisterSession))
}

// GetSingle returns value by selected field map key from source DeviceHardwareRegisterSession
func (fpm *DeviceHardwareRegisterSession_FieldPathMap) GetSingle(source *DeviceHardwareRegisterSession) (interface{}, bool) {
	switch fpm.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		res, ok := source.GetExtras()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpm.selector))
	}
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*DeviceHardwareRegisterSession))
}

// GetDefault returns a default value of the field type
func (fpm *DeviceHardwareRegisterSession_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpm.selector))
	}
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) ClearValue(item *DeviceHardwareRegisterSession) {
	if item != nil {
		switch fpm.selector {
		case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
			delete(item.Extras, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpm.selector))
		}
	}
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*DeviceHardwareRegisterSession))
}

// IsLeaf - whether field path is holds simple value
func (fpm *DeviceHardwareRegisterSession_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpm.selector))
	}
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) WithIValue(value interface{}) DeviceHardwareRegisterSession_FieldPathValue {
	switch fpm.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		return &DeviceHardwareRegisterSession_FieldPathMapValue{DeviceHardwareRegisterSession_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpm.selector))
	}
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) WithIArrayOfValues(values interface{}) DeviceHardwareRegisterSession_FieldPathArrayOfValues {
	switch fpm.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		return &DeviceHardwareRegisterSession_FieldPathMapArrayOfValues{DeviceHardwareRegisterSession_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpm.selector))
	}
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) WithIArrayItemValue(value interface{}) DeviceHardwareRegisterSession_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *DeviceHardwareRegisterSession_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type DeviceHardwareRegisterSession_FieldSubPath struct {
	selector DeviceHardwareRegisterSession_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DeviceHardwareRegisterSession_FieldPath = (*DeviceHardwareRegisterSession_FieldSubPath)(nil)

func (fps *DeviceHardwareRegisterSession_FieldSubPath) Selector() DeviceHardwareRegisterSession_FieldPathSelector {
	return fps.selector
}
func (fps *DeviceHardwareRegisterSession_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *DeviceHardwareRegisterSession_FieldSubPath) AsStatusSubPath() (DeviceHardwareRegisterSessionStatus_FieldPath, bool) {
	res, ok := fps.subPath.(DeviceHardwareRegisterSessionStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DeviceHardwareRegisterSession_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DeviceHardwareRegisterSession_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source DeviceHardwareRegisterSession
func (fps *DeviceHardwareRegisterSession_FieldSubPath) Get(source *DeviceHardwareRegisterSession) (values []interface{}) {
	switch fps.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		values = append(values, fps.subPath.GetRaw(source.GetStatus())...)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fps.selector))
	}
	return
}

func (fps *DeviceHardwareRegisterSession_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*DeviceHardwareRegisterSession))
}

// GetSingle returns value of selected field from source DeviceHardwareRegisterSession
func (fps *DeviceHardwareRegisterSession_FieldSubPath) GetSingle(source *DeviceHardwareRegisterSession) (interface{}, bool) {
	switch fps.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fps.selector))
	}
}

func (fps *DeviceHardwareRegisterSession_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*DeviceHardwareRegisterSession))
}

// GetDefault returns a default value of the field type
func (fps *DeviceHardwareRegisterSession_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DeviceHardwareRegisterSession_FieldSubPath) ClearValue(item *DeviceHardwareRegisterSession) {
	if item != nil {
		switch fps.selector {
		case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fps.selector))
		}
	}
}

func (fps *DeviceHardwareRegisterSession_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*DeviceHardwareRegisterSession))
}

// IsLeaf - whether field path is holds simple value
func (fps *DeviceHardwareRegisterSession_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DeviceHardwareRegisterSession_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DeviceHardwareRegisterSession_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DeviceHardwareRegisterSession_FieldSubPath) WithIValue(value interface{}) DeviceHardwareRegisterSession_FieldPathValue {
	return &DeviceHardwareRegisterSession_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DeviceHardwareRegisterSession_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DeviceHardwareRegisterSession_FieldSubPath) WithIArrayOfValues(values interface{}) DeviceHardwareRegisterSession_FieldPathArrayOfValues {
	return &DeviceHardwareRegisterSession_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DeviceHardwareRegisterSession_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DeviceHardwareRegisterSession_FieldSubPath) WithIArrayItemValue(value interface{}) DeviceHardwareRegisterSession_FieldPathArrayItemValue {
	return &DeviceHardwareRegisterSession_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DeviceHardwareRegisterSession_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DeviceHardwareRegisterSession_FieldPathValue allows storing values for DeviceHardwareRegisterSession fields according to their type
type DeviceHardwareRegisterSession_FieldPathValue interface {
	DeviceHardwareRegisterSession_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeviceHardwareRegisterSession)
	CompareWith(*DeviceHardwareRegisterSession) (cmp int, comparable bool)
}

func ParseDeviceHardwareRegisterSession_FieldPathValue(pathStr, valueStr string) (DeviceHardwareRegisterSession_FieldPathValue, error) {
	fp, err := ParseDeviceHardwareRegisterSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeviceHardwareRegisterSession field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceHardwareRegisterSession_FieldPathValue), nil
}

func MustParseDeviceHardwareRegisterSession_FieldPathValue(pathStr, valueStr string) DeviceHardwareRegisterSession_FieldPathValue {
	fpv, err := ParseDeviceHardwareRegisterSession_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceHardwareRegisterSession_FieldTerminalPathValue struct {
	DeviceHardwareRegisterSession_FieldTerminalPath
	value interface{}
}

var _ DeviceHardwareRegisterSession_FieldPathValue = (*DeviceHardwareRegisterSession_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeviceHardwareRegisterSession' as interface{}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsStartTimeValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsExpirationTimeValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsUserEmailValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsInviterEmailValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsLanguageCodeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsExtrasValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsProvisioningPolicyNameValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.(*provisioning_policy.Reference)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsDeviceNameValue() (*device.Reference, bool) {
	res, ok := fpv.value.(*device.Reference)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsSingleUseValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) AsStatusValue() (*DeviceHardwareRegisterSession_Status, bool) {
	res, ok := fpv.value.(*DeviceHardwareRegisterSession_Status)
	return res, ok
}

// SetTo stores value for selected field for object DeviceHardwareRegisterSession
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) SetTo(target **DeviceHardwareRegisterSession) {
	if *target == nil {
		*target = new(DeviceHardwareRegisterSession)
	}
	switch fpv.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case DeviceHardwareRegisterSession_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case DeviceHardwareRegisterSession_FieldPathSelectorStartTime:
		(*target).StartTime = fpv.value.(*timestamppb.Timestamp)
	case DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime:
		(*target).ExpirationTime = fpv.value.(*timestamppb.Timestamp)
	case DeviceHardwareRegisterSession_FieldPathSelectorUserEmail:
		(*target).UserEmail = fpv.value.(string)
	case DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail:
		(*target).InviterEmail = fpv.value.(string)
	case DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode:
		(*target).LanguageCode = fpv.value.(string)
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		(*target).Extras = fpv.value.(map[string]string)
	case DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName:
		(*target).ProvisioningPolicyName = fpv.value.(*provisioning_policy.Reference)
	case DeviceHardwareRegisterSession_FieldPathSelectorDeviceName:
		(*target).DeviceName = fpv.value.(*device.Reference)
	case DeviceHardwareRegisterSession_FieldPathSelectorSingleUse:
		(*target).SingleUse = fpv.value.(bool)
	case DeviceHardwareRegisterSession_FieldPathSelectorToken:
		(*target).Token = fpv.value.(string)
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*DeviceHardwareRegisterSession_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpv.selector))
	}
}

func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeviceHardwareRegisterSession)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceHardwareRegisterSession_FieldTerminalPathValue' with the value under path in 'DeviceHardwareRegisterSession'.
func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) CompareWith(source *DeviceHardwareRegisterSession) (int, bool) {
	switch fpv.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		return 0, false
	case DeviceHardwareRegisterSession_FieldPathSelectorStartTime:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetStartTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetExpirationTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorUserEmail:
		leftValue := fpv.value.(string)
		rightValue := source.GetUserEmail()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail:
		leftValue := fpv.value.(string)
		rightValue := source.GetInviterEmail()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode:
		leftValue := fpv.value.(string)
		rightValue := source.GetLanguageCode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		return 0, false
	case DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName:
		leftValue := fpv.value.(*provisioning_policy.Reference)
		rightValue := source.GetProvisioningPolicyName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorDeviceName:
		leftValue := fpv.value.(*device.Reference)
		rightValue := source.GetDeviceName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorSingleUse:
		leftValue := fpv.value.(bool)
		rightValue := source.GetSingleUse()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpv.selector))
	}
}

func (fpv *DeviceHardwareRegisterSession_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeviceHardwareRegisterSession))
}

type DeviceHardwareRegisterSession_FieldPathMapValue struct {
	DeviceHardwareRegisterSession_FieldPathMap
	value interface{}
}

var _ DeviceHardwareRegisterSession_FieldPathValue = (*DeviceHardwareRegisterSession_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in DeviceHardwareRegisterSession as interface{}
func (fpmv *DeviceHardwareRegisterSession_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *DeviceHardwareRegisterSession_FieldPathMapValue) AsExtrasElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in DeviceHardwareRegisterSession
func (fpmv *DeviceHardwareRegisterSession_FieldPathMapValue) SetTo(target **DeviceHardwareRegisterSession) {
	if *target == nil {
		*target = new(DeviceHardwareRegisterSession)
	}
	switch fpmv.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		if (*target).Extras == nil {
			(*target).Extras = make(map[string]string)
		}
		(*target).Extras[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpmv.selector))
	}
}

func (fpmv *DeviceHardwareRegisterSession_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeviceHardwareRegisterSession)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceHardwareRegisterSession_FieldPathMapValue' with the value under path in 'DeviceHardwareRegisterSession'.
func (fpmv *DeviceHardwareRegisterSession_FieldPathMapValue) CompareWith(source *DeviceHardwareRegisterSession) (int, bool) {
	switch fpmv.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		leftValue := fpmv.value.(string)
		rightValue := source.GetExtras()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpmv.selector))
	}
}

func (fpmv *DeviceHardwareRegisterSession_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*DeviceHardwareRegisterSession))
}

type DeviceHardwareRegisterSession_FieldSubPathValue struct {
	DeviceHardwareRegisterSession_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DeviceHardwareRegisterSession_FieldPathValue = (*DeviceHardwareRegisterSession_FieldSubPathValue)(nil)

func (fpvs *DeviceHardwareRegisterSession_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *DeviceHardwareRegisterSession_FieldSubPathValue) AsStatusPathValue() (DeviceHardwareRegisterSessionStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeviceHardwareRegisterSessionStatus_FieldPathValue)
	return res, ok
}

func (fpvs *DeviceHardwareRegisterSession_FieldSubPathValue) SetTo(target **DeviceHardwareRegisterSession) {
	if *target == nil {
		*target = new(DeviceHardwareRegisterSession)
	}
	switch fpvs.Selector() {
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		fpvs.subPathValue.(DeviceHardwareRegisterSessionStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceHardwareRegisterSession_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeviceHardwareRegisterSession)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DeviceHardwareRegisterSession_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DeviceHardwareRegisterSession_FieldSubPathValue) CompareWith(source *DeviceHardwareRegisterSession) (int, bool) {
	switch fpvs.Selector() {
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		return fpvs.subPathValue.(DeviceHardwareRegisterSessionStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpvs.Selector()))
	}
}

func (fpvs *DeviceHardwareRegisterSession_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*DeviceHardwareRegisterSession))
}

// DeviceHardwareRegisterSession_FieldPathArrayItemValue allows storing single item in Path-specific values for DeviceHardwareRegisterSession according to their type
// Present only for array (repeated) types.
type DeviceHardwareRegisterSession_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceHardwareRegisterSession_FieldPath
	ContainsValue(*DeviceHardwareRegisterSession) bool
}

// ParseDeviceHardwareRegisterSession_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceHardwareRegisterSession_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceHardwareRegisterSession_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceHardwareRegisterSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeviceHardwareRegisterSession field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceHardwareRegisterSession_FieldPathArrayItemValue), nil
}

func MustParseDeviceHardwareRegisterSession_FieldPathArrayItemValue(pathStr, valueStr string) DeviceHardwareRegisterSession_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceHardwareRegisterSession_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceHardwareRegisterSession_FieldTerminalPathArrayItemValue struct {
	DeviceHardwareRegisterSession_FieldTerminalPath
	value interface{}
}

var _ DeviceHardwareRegisterSession_FieldPathArrayItemValue = (*DeviceHardwareRegisterSession_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeviceHardwareRegisterSession as interface{}
func (fpaiv *DeviceHardwareRegisterSession_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeviceHardwareRegisterSession_FieldTerminalPathArrayItemValue) GetSingle(source *DeviceHardwareRegisterSession) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceHardwareRegisterSession_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeviceHardwareRegisterSession))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeviceHardwareRegisterSession'
func (fpaiv *DeviceHardwareRegisterSession_FieldTerminalPathArrayItemValue) ContainsValue(source *DeviceHardwareRegisterSession) bool {
	slice := fpaiv.DeviceHardwareRegisterSession_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DeviceHardwareRegisterSession_FieldSubPathArrayItemValue struct {
	DeviceHardwareRegisterSession_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DeviceHardwareRegisterSession_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DeviceHardwareRegisterSession_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DeviceHardwareRegisterSession_FieldSubPathArrayItemValue) AsStatusPathItemValue() (DeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeviceHardwareRegisterSession'
func (fpaivs *DeviceHardwareRegisterSession_FieldSubPathArrayItemValue) ContainsValue(source *DeviceHardwareRegisterSession) bool {
	switch fpaivs.Selector() {
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(DeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession: %d", fpaivs.Selector()))
	}
}

// DeviceHardwareRegisterSession_FieldPathArrayOfValues allows storing slice of values for DeviceHardwareRegisterSession fields according to their type
type DeviceHardwareRegisterSession_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceHardwareRegisterSession_FieldPath
}

func ParseDeviceHardwareRegisterSession_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceHardwareRegisterSession_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceHardwareRegisterSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeviceHardwareRegisterSession field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceHardwareRegisterSession_FieldPathArrayOfValues), nil
}

func MustParseDeviceHardwareRegisterSession_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceHardwareRegisterSession_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceHardwareRegisterSession_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues struct {
	DeviceHardwareRegisterSession_FieldTerminalPath
	values interface{}
}

var _ DeviceHardwareRegisterSession_FieldPathArrayOfValues = (*DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorStartTime:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorExpirationTime:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorUserEmail:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorInviterEmail:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorLanguageCode:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorProvisioningPolicyName:
		for _, v := range fpaov.values.([]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorDeviceName:
		for _, v := range fpaov.values.([]*device.Reference) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorSingleUse:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeviceHardwareRegisterSession_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*DeviceHardwareRegisterSession_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsStartTimeArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsExpirationTimeArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsUserEmailArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsInviterEmailArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsLanguageCodeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsExtrasArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsProvisioningPolicyNameArrayOfValues() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Reference)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsDeviceNameArrayOfValues() ([]*device.Reference, bool) {
	res, ok := fpaov.values.([]*device.Reference)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsSingleUseArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeviceHardwareRegisterSession_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*DeviceHardwareRegisterSession_Status, bool) {
	res, ok := fpaov.values.([]*DeviceHardwareRegisterSession_Status)
	return res, ok
}

type DeviceHardwareRegisterSession_FieldPathMapArrayOfValues struct {
	DeviceHardwareRegisterSession_FieldPathMap
	values interface{}
}

var _ DeviceHardwareRegisterSession_FieldPathArrayOfValues = (*DeviceHardwareRegisterSession_FieldPathMapArrayOfValues)(nil)

func (fpmaov *DeviceHardwareRegisterSession_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case DeviceHardwareRegisterSession_FieldPathSelectorExtras:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *DeviceHardwareRegisterSession_FieldPathMapArrayOfValues) AsExtrasArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

type DeviceHardwareRegisterSession_FieldSubPathArrayOfValues struct {
	DeviceHardwareRegisterSession_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DeviceHardwareRegisterSession_FieldPathArrayOfValues = (*DeviceHardwareRegisterSession_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DeviceHardwareRegisterSession_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DeviceHardwareRegisterSession_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DeviceHardwareRegisterSession_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (DeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeviceHardwareRegisterSessionStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeviceHardwareRegisterSessionStatus_FieldPathSelector
	Get(source *DeviceHardwareRegisterSession_Status) []interface{}
	GetSingle(source *DeviceHardwareRegisterSession_Status) (interface{}, bool)
	ClearValue(item *DeviceHardwareRegisterSession_Status)

	// Those methods build corresponding DeviceHardwareRegisterSessionStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeviceHardwareRegisterSessionStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) DeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue
}

type DeviceHardwareRegisterSessionStatus_FieldPathSelector int32

const (
	DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares DeviceHardwareRegisterSessionStatus_FieldPathSelector = 0
)

func (s DeviceHardwareRegisterSessionStatus_FieldPathSelector) String() string {
	switch s {
	case DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares:
		return "device_hardwares"
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession_Status: %d", s))
	}
}

func BuildDeviceHardwareRegisterSessionStatus_FieldPath(fp gotenobject.RawFieldPath) (DeviceHardwareRegisterSessionStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeviceHardwareRegisterSession_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_hardwares", "deviceHardwares", "device-hardwares":
			return &DeviceHardwareRegisterSessionStatus_FieldTerminalPath{selector: DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeviceHardwareRegisterSession_Status", fp)
}

func ParseDeviceHardwareRegisterSessionStatus_FieldPath(rawField string) (DeviceHardwareRegisterSessionStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeviceHardwareRegisterSessionStatus_FieldPath(fp)
}

func MustParseDeviceHardwareRegisterSessionStatus_FieldPath(rawField string) DeviceHardwareRegisterSessionStatus_FieldPath {
	fp, err := ParseDeviceHardwareRegisterSessionStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeviceHardwareRegisterSessionStatus_FieldTerminalPath struct {
	selector DeviceHardwareRegisterSessionStatus_FieldPathSelector
}

var _ DeviceHardwareRegisterSessionStatus_FieldPath = (*DeviceHardwareRegisterSessionStatus_FieldTerminalPath)(nil)

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) Selector() DeviceHardwareRegisterSessionStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeviceHardwareRegisterSession_Status
func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) Get(source *DeviceHardwareRegisterSession_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares:
			for _, value := range source.GetDeviceHardwares() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeviceHardwareRegisterSession_Status))
}

// GetSingle returns value pointed by specific field of from source DeviceHardwareRegisterSession_Status
func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) GetSingle(source *DeviceHardwareRegisterSession_Status) (interface{}, bool) {
	switch fp.selector {
	case DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares:
		res := source.GetDeviceHardwares()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession_Status: %d", fp.selector))
	}
}

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeviceHardwareRegisterSession_Status))
}

// GetDefault returns a default value of the field type
func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares:
		return ([]*device_hardware.Name)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession_Status: %d", fp.selector))
	}
}

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) ClearValue(item *DeviceHardwareRegisterSession_Status) {
	if item != nil {
		switch fp.selector {
		case DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares:
			item.DeviceHardwares = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession_Status: %d", fp.selector))
		}
	}
}

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeviceHardwareRegisterSession_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares
}

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) WithIValue(value interface{}) DeviceHardwareRegisterSessionStatus_FieldPathValue {
	switch fp.selector {
	case DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares:
		return &DeviceHardwareRegisterSessionStatus_FieldTerminalPathValue{DeviceHardwareRegisterSessionStatus_FieldTerminalPath: *fp, value: value.([]*device_hardware.Name)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession_Status: %d", fp.selector))
	}
}

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues {
	fpaov := &DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSessionStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares:
		return &DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayOfValues{DeviceHardwareRegisterSessionStatus_FieldTerminalPath: *fp, values: values.([][]*device_hardware.Name)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue {
	switch fp.selector {
	case DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares:
		return &DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayItemValue{DeviceHardwareRegisterSessionStatus_FieldTerminalPath: *fp, value: value.(*device_hardware.Name)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession_Status: %d", fp.selector))
	}
}

func (fp *DeviceHardwareRegisterSessionStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeviceHardwareRegisterSessionStatus_FieldPathValue allows storing values for Status fields according to their type
type DeviceHardwareRegisterSessionStatus_FieldPathValue interface {
	DeviceHardwareRegisterSessionStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeviceHardwareRegisterSession_Status)
	CompareWith(*DeviceHardwareRegisterSession_Status) (cmp int, comparable bool)
}

func ParseDeviceHardwareRegisterSessionStatus_FieldPathValue(pathStr, valueStr string) (DeviceHardwareRegisterSessionStatus_FieldPathValue, error) {
	fp, err := ParseDeviceHardwareRegisterSessionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeviceHardwareRegisterSessionStatus_FieldPathValue), nil
}

func MustParseDeviceHardwareRegisterSessionStatus_FieldPathValue(pathStr, valueStr string) DeviceHardwareRegisterSessionStatus_FieldPathValue {
	fpv, err := ParseDeviceHardwareRegisterSessionStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeviceHardwareRegisterSessionStatus_FieldTerminalPathValue struct {
	DeviceHardwareRegisterSessionStatus_FieldTerminalPath
	value interface{}
}

var _ DeviceHardwareRegisterSessionStatus_FieldPathValue = (*DeviceHardwareRegisterSessionStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *DeviceHardwareRegisterSessionStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeviceHardwareRegisterSessionStatus_FieldTerminalPathValue) AsDeviceHardwaresValue() ([]*device_hardware.Name, bool) {
	res, ok := fpv.value.([]*device_hardware.Name)
	return res, ok
}

// SetTo stores value for selected field for object Status
func (fpv *DeviceHardwareRegisterSessionStatus_FieldTerminalPathValue) SetTo(target **DeviceHardwareRegisterSession_Status) {
	if *target == nil {
		*target = new(DeviceHardwareRegisterSession_Status)
	}
	switch fpv.selector {
	case DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares:
		(*target).DeviceHardwares = fpv.value.([]*device_hardware.Name)
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession_Status: %d", fpv.selector))
	}
}

func (fpv *DeviceHardwareRegisterSessionStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeviceHardwareRegisterSession_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeviceHardwareRegisterSessionStatus_FieldTerminalPathValue' with the value under path in 'DeviceHardwareRegisterSession_Status'.
func (fpv *DeviceHardwareRegisterSessionStatus_FieldTerminalPathValue) CompareWith(source *DeviceHardwareRegisterSession_Status) (int, bool) {
	switch fpv.selector {
	case DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for DeviceHardwareRegisterSession_Status: %d", fpv.selector))
	}
}

func (fpv *DeviceHardwareRegisterSessionStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeviceHardwareRegisterSession_Status))
}

// DeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type DeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeviceHardwareRegisterSessionStatus_FieldPath
	ContainsValue(*DeviceHardwareRegisterSession_Status) bool
}

// ParseDeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue(pathStr, valueStr string) (DeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseDeviceHardwareRegisterSessionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue), nil
}

func MustParseDeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue(pathStr, valueStr string) DeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseDeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayItemValue struct {
	DeviceHardwareRegisterSessionStatus_FieldTerminalPath
	value interface{}
}

var _ DeviceHardwareRegisterSessionStatus_FieldPathArrayItemValue = (*DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeviceHardwareRegisterSession_Status as interface{}
func (fpaiv *DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayItemValue) AsDeviceHardwaresItemValue() (*device_hardware.Name, bool) {
	res, ok := fpaiv.value.(*device_hardware.Name)
	return res, ok
}

func (fpaiv *DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayItemValue) GetSingle(source *DeviceHardwareRegisterSession_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeviceHardwareRegisterSession_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *DeviceHardwareRegisterSession_Status) bool {
	slice := fpaiv.DeviceHardwareRegisterSessionStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type DeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeviceHardwareRegisterSessionStatus_FieldPath
}

func ParseDeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (DeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseDeviceHardwareRegisterSessionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues), nil
}

func MustParseDeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues(pathStr, valuesStr string) DeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues {
	fpaov, err := ParseDeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayOfValues struct {
	DeviceHardwareRegisterSessionStatus_FieldTerminalPath
	values interface{}
}

var _ DeviceHardwareRegisterSessionStatus_FieldPathArrayOfValues = (*DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeviceHardwareRegisterSessionStatus_FieldPathSelectorDeviceHardwares:
		for _, v := range fpaov.values.([][]*device_hardware.Name) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeviceHardwareRegisterSessionStatus_FieldTerminalPathArrayOfValues) AsDeviceHardwaresArrayOfValues() ([][]*device_hardware.Name, bool) {
	res, ok := fpaov.values.([][]*device_hardware.Name)
	return res, ok
}
