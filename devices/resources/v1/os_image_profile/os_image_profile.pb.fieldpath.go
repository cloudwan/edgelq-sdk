// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1/os_image_profile.proto
// DO NOT EDIT!!!

package os_image_profile

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device_type "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_type"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &device_type.DeviceType{}
	_ = &project.Project{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type OsImageProfile_FieldPath interface {
	gotenobject.FieldPath
	Selector() OsImageProfile_FieldPathSelector
	Get(source *OsImageProfile) []interface{}
	GetSingle(source *OsImageProfile) (interface{}, bool)
	ClearValue(item *OsImageProfile)

	// Those methods build corresponding OsImageProfile_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) OsImageProfile_FieldPathValue
	WithIArrayOfValues(values interface{}) OsImageProfile_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) OsImageProfile_FieldPathArrayItemValue
}

type OsImageProfile_FieldPathSelector int32

const (
	OsImageProfile_FieldPathSelectorName                 OsImageProfile_FieldPathSelector = 0
	OsImageProfile_FieldPathSelectorMetadata             OsImageProfile_FieldPathSelector = 1
	OsImageProfile_FieldPathSelectorDisplayName          OsImageProfile_FieldPathSelector = 2
	OsImageProfile_FieldPathSelectorDeviceType           OsImageProfile_FieldPathSelector = 3
	OsImageProfile_FieldPathSelectorInstallAiAccelerator OsImageProfile_FieldPathSelector = 4
	OsImageProfile_FieldPathSelectorEncryption           OsImageProfile_FieldPathSelector = 5
	OsImageProfile_FieldPathSelectorDiskMapping          OsImageProfile_FieldPathSelector = 6
	OsImageProfile_FieldPathSelectorNetworkAgent         OsImageProfile_FieldPathSelector = 7
	OsImageProfile_FieldPathSelectorNtp                  OsImageProfile_FieldPathSelector = 8
	OsImageProfile_FieldPathSelectorHttpProxy            OsImageProfile_FieldPathSelector = 9
	OsImageProfile_FieldPathSelectorHttpsProxy           OsImageProfile_FieldPathSelector = 10
	OsImageProfile_FieldPathSelectorNoProxy              OsImageProfile_FieldPathSelector = 11
)

func (s OsImageProfile_FieldPathSelector) String() string {
	switch s {
	case OsImageProfile_FieldPathSelectorName:
		return "name"
	case OsImageProfile_FieldPathSelectorMetadata:
		return "metadata"
	case OsImageProfile_FieldPathSelectorDisplayName:
		return "display_name"
	case OsImageProfile_FieldPathSelectorDeviceType:
		return "device_type"
	case OsImageProfile_FieldPathSelectorInstallAiAccelerator:
		return "install_ai_accelerator"
	case OsImageProfile_FieldPathSelectorEncryption:
		return "encryption"
	case OsImageProfile_FieldPathSelectorDiskMapping:
		return "disk_mapping"
	case OsImageProfile_FieldPathSelectorNetworkAgent:
		return "network_agent"
	case OsImageProfile_FieldPathSelectorNtp:
		return "ntp"
	case OsImageProfile_FieldPathSelectorHttpProxy:
		return "http_proxy"
	case OsImageProfile_FieldPathSelectorHttpsProxy:
		return "https_proxy"
	case OsImageProfile_FieldPathSelectorNoProxy:
		return "no_proxy"
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", s))
	}
}

func BuildOsImageProfile_FieldPath(fp gotenobject.RawFieldPath) (OsImageProfile_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object OsImageProfile")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorName}, nil
		case "metadata":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorDisplayName}, nil
		case "device_type", "deviceType", "device-type":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorDeviceType}, nil
		case "install_ai_accelerator", "installAiAccelerator", "install-ai-accelerator":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorInstallAiAccelerator}, nil
		case "encryption":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorEncryption}, nil
		case "disk_mapping", "diskMapping", "disk-mapping":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorDiskMapping}, nil
		case "network_agent", "networkAgent", "network-agent":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorNetworkAgent}, nil
		case "ntp":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorNtp}, nil
		case "http_proxy", "httpProxy", "http-proxy":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorHttpProxy}, nil
		case "https_proxy", "httpsProxy", "https-proxy":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorHttpsProxy}, nil
		case "no_proxy", "noProxy", "no-proxy":
			return &OsImageProfile_FieldTerminalPath{selector: OsImageProfile_FieldPathSelectorNoProxy}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &OsImageProfile_FieldSubPath{selector: OsImageProfile_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object OsImageProfile", fp)
}

func ParseOsImageProfile_FieldPath(rawField string) (OsImageProfile_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildOsImageProfile_FieldPath(fp)
}

func MustParseOsImageProfile_FieldPath(rawField string) OsImageProfile_FieldPath {
	fp, err := ParseOsImageProfile_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type OsImageProfile_FieldTerminalPath struct {
	selector OsImageProfile_FieldPathSelector
}

var _ OsImageProfile_FieldPath = (*OsImageProfile_FieldTerminalPath)(nil)

func (fp *OsImageProfile_FieldTerminalPath) Selector() OsImageProfile_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *OsImageProfile_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *OsImageProfile_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source OsImageProfile
func (fp *OsImageProfile_FieldTerminalPath) Get(source *OsImageProfile) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case OsImageProfile_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case OsImageProfile_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case OsImageProfile_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case OsImageProfile_FieldPathSelectorDeviceType:
			if source.DeviceType != nil {
				values = append(values, source.DeviceType)
			}
		case OsImageProfile_FieldPathSelectorInstallAiAccelerator:
			values = append(values, source.InstallAiAccelerator)
		case OsImageProfile_FieldPathSelectorEncryption:
			values = append(values, source.Encryption)
		case OsImageProfile_FieldPathSelectorDiskMapping:
			values = append(values, source.DiskMapping)
		case OsImageProfile_FieldPathSelectorNetworkAgent:
			values = append(values, source.NetworkAgent)
		case OsImageProfile_FieldPathSelectorNtp:
			values = append(values, source.Ntp)
		case OsImageProfile_FieldPathSelectorHttpProxy:
			values = append(values, source.HttpProxy)
		case OsImageProfile_FieldPathSelectorHttpsProxy:
			values = append(values, source.HttpsProxy)
		case OsImageProfile_FieldPathSelectorNoProxy:
			values = append(values, source.NoProxy)
		default:
			panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fp.selector))
		}
	}
	return
}

func (fp *OsImageProfile_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*OsImageProfile))
}

// GetSingle returns value pointed by specific field of from source OsImageProfile
func (fp *OsImageProfile_FieldTerminalPath) GetSingle(source *OsImageProfile) (interface{}, bool) {
	switch fp.selector {
	case OsImageProfile_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case OsImageProfile_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case OsImageProfile_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case OsImageProfile_FieldPathSelectorDeviceType:
		res := source.GetDeviceType()
		return res, res != nil
	case OsImageProfile_FieldPathSelectorInstallAiAccelerator:
		return source.GetInstallAiAccelerator(), source != nil
	case OsImageProfile_FieldPathSelectorEncryption:
		return source.GetEncryption(), source != nil
	case OsImageProfile_FieldPathSelectorDiskMapping:
		return source.GetDiskMapping(), source != nil
	case OsImageProfile_FieldPathSelectorNetworkAgent:
		return source.GetNetworkAgent(), source != nil
	case OsImageProfile_FieldPathSelectorNtp:
		return source.GetNtp(), source != nil
	case OsImageProfile_FieldPathSelectorHttpProxy:
		return source.GetHttpProxy(), source != nil
	case OsImageProfile_FieldPathSelectorHttpsProxy:
		return source.GetHttpsProxy(), source != nil
	case OsImageProfile_FieldPathSelectorNoProxy:
		return source.GetNoProxy(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fp.selector))
	}
}

func (fp *OsImageProfile_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*OsImageProfile))
}

// GetDefault returns a default value of the field type
func (fp *OsImageProfile_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case OsImageProfile_FieldPathSelectorName:
		return (*Name)(nil)
	case OsImageProfile_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case OsImageProfile_FieldPathSelectorDisplayName:
		return ""
	case OsImageProfile_FieldPathSelectorDeviceType:
		return (*device_type.Reference)(nil)
	case OsImageProfile_FieldPathSelectorInstallAiAccelerator:
		return false
	case OsImageProfile_FieldPathSelectorEncryption:
		return false
	case OsImageProfile_FieldPathSelectorDiskMapping:
		return ""
	case OsImageProfile_FieldPathSelectorNetworkAgent:
		return ""
	case OsImageProfile_FieldPathSelectorNtp:
		return ""
	case OsImageProfile_FieldPathSelectorHttpProxy:
		return ""
	case OsImageProfile_FieldPathSelectorHttpsProxy:
		return ""
	case OsImageProfile_FieldPathSelectorNoProxy:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fp.selector))
	}
}

func (fp *OsImageProfile_FieldTerminalPath) ClearValue(item *OsImageProfile) {
	if item != nil {
		switch fp.selector {
		case OsImageProfile_FieldPathSelectorName:
			item.Name = nil
		case OsImageProfile_FieldPathSelectorMetadata:
			item.Metadata = nil
		case OsImageProfile_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case OsImageProfile_FieldPathSelectorDeviceType:
			item.DeviceType = nil
		case OsImageProfile_FieldPathSelectorInstallAiAccelerator:
			item.InstallAiAccelerator = false
		case OsImageProfile_FieldPathSelectorEncryption:
			item.Encryption = false
		case OsImageProfile_FieldPathSelectorDiskMapping:
			item.DiskMapping = ""
		case OsImageProfile_FieldPathSelectorNetworkAgent:
			item.NetworkAgent = ""
		case OsImageProfile_FieldPathSelectorNtp:
			item.Ntp = ""
		case OsImageProfile_FieldPathSelectorHttpProxy:
			item.HttpProxy = ""
		case OsImageProfile_FieldPathSelectorHttpsProxy:
			item.HttpsProxy = ""
		case OsImageProfile_FieldPathSelectorNoProxy:
			item.NoProxy = ""
		default:
			panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fp.selector))
		}
	}
}

func (fp *OsImageProfile_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*OsImageProfile))
}

// IsLeaf - whether field path is holds simple value
func (fp *OsImageProfile_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == OsImageProfile_FieldPathSelectorName ||
		fp.selector == OsImageProfile_FieldPathSelectorDisplayName ||
		fp.selector == OsImageProfile_FieldPathSelectorDeviceType ||
		fp.selector == OsImageProfile_FieldPathSelectorInstallAiAccelerator ||
		fp.selector == OsImageProfile_FieldPathSelectorEncryption ||
		fp.selector == OsImageProfile_FieldPathSelectorDiskMapping ||
		fp.selector == OsImageProfile_FieldPathSelectorNetworkAgent ||
		fp.selector == OsImageProfile_FieldPathSelectorNtp ||
		fp.selector == OsImageProfile_FieldPathSelectorHttpProxy ||
		fp.selector == OsImageProfile_FieldPathSelectorHttpsProxy ||
		fp.selector == OsImageProfile_FieldPathSelectorNoProxy
}

func (fp *OsImageProfile_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *OsImageProfile_FieldTerminalPath) WithIValue(value interface{}) OsImageProfile_FieldPathValue {
	switch fp.selector {
	case OsImageProfile_FieldPathSelectorName:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(*Name)}
	case OsImageProfile_FieldPathSelectorMetadata:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case OsImageProfile_FieldPathSelectorDisplayName:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(string)}
	case OsImageProfile_FieldPathSelectorDeviceType:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(*device_type.Reference)}
	case OsImageProfile_FieldPathSelectorInstallAiAccelerator:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(bool)}
	case OsImageProfile_FieldPathSelectorEncryption:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(bool)}
	case OsImageProfile_FieldPathSelectorDiskMapping:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(string)}
	case OsImageProfile_FieldPathSelectorNetworkAgent:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(string)}
	case OsImageProfile_FieldPathSelectorNtp:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(string)}
	case OsImageProfile_FieldPathSelectorHttpProxy:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(string)}
	case OsImageProfile_FieldPathSelectorHttpsProxy:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(string)}
	case OsImageProfile_FieldPathSelectorNoProxy:
		return &OsImageProfile_FieldTerminalPathValue{OsImageProfile_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fp.selector))
	}
}

func (fp *OsImageProfile_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *OsImageProfile_FieldTerminalPath) WithIArrayOfValues(values interface{}) OsImageProfile_FieldPathArrayOfValues {
	fpaov := &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp}
	switch fp.selector {
	case OsImageProfile_FieldPathSelectorName:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]*Name)}
	case OsImageProfile_FieldPathSelectorMetadata:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case OsImageProfile_FieldPathSelectorDisplayName:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]string)}
	case OsImageProfile_FieldPathSelectorDeviceType:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]*device_type.Reference)}
	case OsImageProfile_FieldPathSelectorInstallAiAccelerator:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]bool)}
	case OsImageProfile_FieldPathSelectorEncryption:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]bool)}
	case OsImageProfile_FieldPathSelectorDiskMapping:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]string)}
	case OsImageProfile_FieldPathSelectorNetworkAgent:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]string)}
	case OsImageProfile_FieldPathSelectorNtp:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]string)}
	case OsImageProfile_FieldPathSelectorHttpProxy:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]string)}
	case OsImageProfile_FieldPathSelectorHttpsProxy:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]string)}
	case OsImageProfile_FieldPathSelectorNoProxy:
		return &OsImageProfile_FieldTerminalPathArrayOfValues{OsImageProfile_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fp.selector))
	}
	return fpaov
}

func (fp *OsImageProfile_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *OsImageProfile_FieldTerminalPath) WithIArrayItemValue(value interface{}) OsImageProfile_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fp.selector))
	}
}

func (fp *OsImageProfile_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type OsImageProfile_FieldSubPath struct {
	selector OsImageProfile_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ OsImageProfile_FieldPath = (*OsImageProfile_FieldSubPath)(nil)

func (fps *OsImageProfile_FieldSubPath) Selector() OsImageProfile_FieldPathSelector {
	return fps.selector
}
func (fps *OsImageProfile_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *OsImageProfile_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *OsImageProfile_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source OsImageProfile
func (fps *OsImageProfile_FieldSubPath) Get(source *OsImageProfile) (values []interface{}) {
	switch fps.selector {
	case OsImageProfile_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fps.selector))
	}
	return
}

func (fps *OsImageProfile_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*OsImageProfile))
}

// GetSingle returns value of selected field from source OsImageProfile
func (fps *OsImageProfile_FieldSubPath) GetSingle(source *OsImageProfile) (interface{}, bool) {
	switch fps.selector {
	case OsImageProfile_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fps.selector))
	}
}

func (fps *OsImageProfile_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*OsImageProfile))
}

// GetDefault returns a default value of the field type
func (fps *OsImageProfile_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *OsImageProfile_FieldSubPath) ClearValue(item *OsImageProfile) {
	if item != nil {
		switch fps.selector {
		case OsImageProfile_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fps.selector))
		}
	}
}

func (fps *OsImageProfile_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*OsImageProfile))
}

// IsLeaf - whether field path is holds simple value
func (fps *OsImageProfile_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *OsImageProfile_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&OsImageProfile_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *OsImageProfile_FieldSubPath) WithIValue(value interface{}) OsImageProfile_FieldPathValue {
	return &OsImageProfile_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *OsImageProfile_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *OsImageProfile_FieldSubPath) WithIArrayOfValues(values interface{}) OsImageProfile_FieldPathArrayOfValues {
	return &OsImageProfile_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *OsImageProfile_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *OsImageProfile_FieldSubPath) WithIArrayItemValue(value interface{}) OsImageProfile_FieldPathArrayItemValue {
	return &OsImageProfile_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *OsImageProfile_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// OsImageProfile_FieldPathValue allows storing values for OsImageProfile fields according to their type
type OsImageProfile_FieldPathValue interface {
	OsImageProfile_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **OsImageProfile)
	CompareWith(*OsImageProfile) (cmp int, comparable bool)
}

func ParseOsImageProfile_FieldPathValue(pathStr, valueStr string) (OsImageProfile_FieldPathValue, error) {
	fp, err := ParseOsImageProfile_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OsImageProfile field path value from %s: %v", valueStr, err)
	}
	return fpv.(OsImageProfile_FieldPathValue), nil
}

func MustParseOsImageProfile_FieldPathValue(pathStr, valueStr string) OsImageProfile_FieldPathValue {
	fpv, err := ParseOsImageProfile_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type OsImageProfile_FieldTerminalPathValue struct {
	OsImageProfile_FieldTerminalPath
	value interface{}
}

var _ OsImageProfile_FieldPathValue = (*OsImageProfile_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OsImageProfile' as interface{}
func (fpv *OsImageProfile_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsDeviceTypeValue() (*device_type.Reference, bool) {
	res, ok := fpv.value.(*device_type.Reference)
	return res, ok
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsInstallAiAcceleratorValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsEncryptionValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsDiskMappingValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsNetworkAgentValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsNtpValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsHttpProxyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsHttpsProxyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *OsImageProfile_FieldTerminalPathValue) AsNoProxyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object OsImageProfile
func (fpv *OsImageProfile_FieldTerminalPathValue) SetTo(target **OsImageProfile) {
	if *target == nil {
		*target = new(OsImageProfile)
	}
	switch fpv.selector {
	case OsImageProfile_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case OsImageProfile_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case OsImageProfile_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case OsImageProfile_FieldPathSelectorDeviceType:
		(*target).DeviceType = fpv.value.(*device_type.Reference)
	case OsImageProfile_FieldPathSelectorInstallAiAccelerator:
		(*target).InstallAiAccelerator = fpv.value.(bool)
	case OsImageProfile_FieldPathSelectorEncryption:
		(*target).Encryption = fpv.value.(bool)
	case OsImageProfile_FieldPathSelectorDiskMapping:
		(*target).DiskMapping = fpv.value.(string)
	case OsImageProfile_FieldPathSelectorNetworkAgent:
		(*target).NetworkAgent = fpv.value.(string)
	case OsImageProfile_FieldPathSelectorNtp:
		(*target).Ntp = fpv.value.(string)
	case OsImageProfile_FieldPathSelectorHttpProxy:
		(*target).HttpProxy = fpv.value.(string)
	case OsImageProfile_FieldPathSelectorHttpsProxy:
		(*target).HttpsProxy = fpv.value.(string)
	case OsImageProfile_FieldPathSelectorNoProxy:
		(*target).NoProxy = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fpv.selector))
	}
}

func (fpv *OsImageProfile_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*OsImageProfile)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'OsImageProfile_FieldTerminalPathValue' with the value under path in 'OsImageProfile'.
func (fpv *OsImageProfile_FieldTerminalPathValue) CompareWith(source *OsImageProfile) (int, bool) {
	switch fpv.selector {
	case OsImageProfile_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case OsImageProfile_FieldPathSelectorMetadata:
		return 0, false
	case OsImageProfile_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OsImageProfile_FieldPathSelectorDeviceType:
		leftValue := fpv.value.(*device_type.Reference)
		rightValue := source.GetDeviceType()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case OsImageProfile_FieldPathSelectorInstallAiAccelerator:
		leftValue := fpv.value.(bool)
		rightValue := source.GetInstallAiAccelerator()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OsImageProfile_FieldPathSelectorEncryption:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEncryption()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OsImageProfile_FieldPathSelectorDiskMapping:
		leftValue := fpv.value.(string)
		rightValue := source.GetDiskMapping()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OsImageProfile_FieldPathSelectorNetworkAgent:
		leftValue := fpv.value.(string)
		rightValue := source.GetNetworkAgent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OsImageProfile_FieldPathSelectorNtp:
		leftValue := fpv.value.(string)
		rightValue := source.GetNtp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OsImageProfile_FieldPathSelectorHttpProxy:
		leftValue := fpv.value.(string)
		rightValue := source.GetHttpProxy()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OsImageProfile_FieldPathSelectorHttpsProxy:
		leftValue := fpv.value.(string)
		rightValue := source.GetHttpsProxy()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OsImageProfile_FieldPathSelectorNoProxy:
		leftValue := fpv.value.(string)
		rightValue := source.GetNoProxy()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fpv.selector))
	}
}

func (fpv *OsImageProfile_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*OsImageProfile))
}

type OsImageProfile_FieldSubPathValue struct {
	OsImageProfile_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ OsImageProfile_FieldPathValue = (*OsImageProfile_FieldSubPathValue)(nil)

func (fpvs *OsImageProfile_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *OsImageProfile_FieldSubPathValue) SetTo(target **OsImageProfile) {
	if *target == nil {
		*target = new(OsImageProfile)
	}
	switch fpvs.Selector() {
	case OsImageProfile_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fpvs.Selector()))
	}
}

func (fpvs *OsImageProfile_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*OsImageProfile)
	fpvs.SetTo(&typedObject)
}

func (fpvs *OsImageProfile_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *OsImageProfile_FieldSubPathValue) CompareWith(source *OsImageProfile) (int, bool) {
	switch fpvs.Selector() {
	case OsImageProfile_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fpvs.Selector()))
	}
}

func (fpvs *OsImageProfile_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*OsImageProfile))
}

// OsImageProfile_FieldPathArrayItemValue allows storing single item in Path-specific values for OsImageProfile according to their type
// Present only for array (repeated) types.
type OsImageProfile_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	OsImageProfile_FieldPath
	ContainsValue(*OsImageProfile) bool
}

// ParseOsImageProfile_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseOsImageProfile_FieldPathArrayItemValue(pathStr, valueStr string) (OsImageProfile_FieldPathArrayItemValue, error) {
	fp, err := ParseOsImageProfile_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OsImageProfile field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(OsImageProfile_FieldPathArrayItemValue), nil
}

func MustParseOsImageProfile_FieldPathArrayItemValue(pathStr, valueStr string) OsImageProfile_FieldPathArrayItemValue {
	fpaiv, err := ParseOsImageProfile_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type OsImageProfile_FieldTerminalPathArrayItemValue struct {
	OsImageProfile_FieldTerminalPath
	value interface{}
}

var _ OsImageProfile_FieldPathArrayItemValue = (*OsImageProfile_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object OsImageProfile as interface{}
func (fpaiv *OsImageProfile_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *OsImageProfile_FieldTerminalPathArrayItemValue) GetSingle(source *OsImageProfile) (interface{}, bool) {
	return nil, false
}

func (fpaiv *OsImageProfile_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*OsImageProfile))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OsImageProfile'
func (fpaiv *OsImageProfile_FieldTerminalPathArrayItemValue) ContainsValue(source *OsImageProfile) bool {
	slice := fpaiv.OsImageProfile_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type OsImageProfile_FieldSubPathArrayItemValue struct {
	OsImageProfile_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *OsImageProfile_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *OsImageProfile_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'OsImageProfile'
func (fpaivs *OsImageProfile_FieldSubPathArrayItemValue) ContainsValue(source *OsImageProfile) bool {
	switch fpaivs.Selector() {
	case OsImageProfile_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for OsImageProfile: %d", fpaivs.Selector()))
	}
}

// OsImageProfile_FieldPathArrayOfValues allows storing slice of values for OsImageProfile fields according to their type
type OsImageProfile_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	OsImageProfile_FieldPath
}

func ParseOsImageProfile_FieldPathArrayOfValues(pathStr, valuesStr string) (OsImageProfile_FieldPathArrayOfValues, error) {
	fp, err := ParseOsImageProfile_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OsImageProfile field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(OsImageProfile_FieldPathArrayOfValues), nil
}

func MustParseOsImageProfile_FieldPathArrayOfValues(pathStr, valuesStr string) OsImageProfile_FieldPathArrayOfValues {
	fpaov, err := ParseOsImageProfile_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type OsImageProfile_FieldTerminalPathArrayOfValues struct {
	OsImageProfile_FieldTerminalPath
	values interface{}
}

var _ OsImageProfile_FieldPathArrayOfValues = (*OsImageProfile_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case OsImageProfile_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case OsImageProfile_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case OsImageProfile_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case OsImageProfile_FieldPathSelectorDeviceType:
		for _, v := range fpaov.values.([]*device_type.Reference) {
			values = append(values, v)
		}
	case OsImageProfile_FieldPathSelectorInstallAiAccelerator:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case OsImageProfile_FieldPathSelectorEncryption:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case OsImageProfile_FieldPathSelectorDiskMapping:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case OsImageProfile_FieldPathSelectorNetworkAgent:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case OsImageProfile_FieldPathSelectorNtp:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case OsImageProfile_FieldPathSelectorHttpProxy:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case OsImageProfile_FieldPathSelectorHttpsProxy:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case OsImageProfile_FieldPathSelectorNoProxy:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsDeviceTypeArrayOfValues() ([]*device_type.Reference, bool) {
	res, ok := fpaov.values.([]*device_type.Reference)
	return res, ok
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsInstallAiAcceleratorArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsEncryptionArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsDiskMappingArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsNetworkAgentArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsNtpArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsHttpProxyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsHttpsProxyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *OsImageProfile_FieldTerminalPathArrayOfValues) AsNoProxyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type OsImageProfile_FieldSubPathArrayOfValues struct {
	OsImageProfile_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ OsImageProfile_FieldPathArrayOfValues = (*OsImageProfile_FieldSubPathArrayOfValues)(nil)

func (fpsaov *OsImageProfile_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *OsImageProfile_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
