// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1/provisioning_policy.proto
// DO NOT EDIT!!!

package provisioning_policy

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	iam_condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1/condition"
	iam_role "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &iam_condition.Condition{}
	_ = &iam_role.Role{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &structpb.Struct{}
	_ = &meta.Meta{}
)

type ProvisioningPolicy_FieldMask struct {
	Paths []ProvisioningPolicy_FieldPath
}

func FullProvisioningPolicy_FieldMask() *ProvisioningPolicy_FieldMask {
	res := &ProvisioningPolicy_FieldMask{}
	res.Paths = append(res.Paths, &ProvisioningPolicy_FieldTerminalPath{selector: ProvisioningPolicy_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ProvisioningPolicy_FieldTerminalPath{selector: ProvisioningPolicy_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &ProvisioningPolicy_FieldTerminalPath{selector: ProvisioningPolicy_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &ProvisioningPolicy_FieldTerminalPath{selector: ProvisioningPolicy_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &ProvisioningPolicy_FieldTerminalPath{selector: ProvisioningPolicy_FieldPathSelectorSpec})
	res.Paths = append(res.Paths, &ProvisioningPolicy_FieldTerminalPath{selector: ProvisioningPolicy_FieldPathSelectorStatus})
	return res
}

func (fieldMask *ProvisioningPolicy_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProvisioningPolicy_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProvisioningPolicy_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProvisioningPolicy_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProvisioningPolicy_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProvisioningPolicy_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProvisioningPolicy_FieldPath(raw)
	})
}

func (fieldMask *ProvisioningPolicy_FieldMask) ProtoMessage() {}

func (fieldMask *ProvisioningPolicy_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProvisioningPolicy_FieldMask) Subtract(other *ProvisioningPolicy_FieldMask) *ProvisioningPolicy_FieldMask {
	result := &ProvisioningPolicy_FieldMask{}
	removedSelectors := make([]bool, 6)
	otherSubMasks := map[ProvisioningPolicy_FieldPathSelector]gotenobject.FieldMask{
		ProvisioningPolicy_FieldPathSelectorMetadata: &meta.Meta_FieldMask{},
		ProvisioningPolicy_FieldPathSelectorSpec:     &ProvisioningPolicy_Spec_FieldMask{},
		ProvisioningPolicy_FieldPathSelectorStatus:   &ProvisioningPolicy_Status_FieldMask{},
	}
	mySubMasks := map[ProvisioningPolicy_FieldPathSelector]gotenobject.FieldMask{
		ProvisioningPolicy_FieldPathSelectorMetadata: &meta.Meta_FieldMask{},
		ProvisioningPolicy_FieldPathSelectorSpec:     &ProvisioningPolicy_Spec_FieldMask{},
		ProvisioningPolicy_FieldPathSelectorStatus:   &ProvisioningPolicy_Status_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProvisioningPolicy_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProvisioningPolicy_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProvisioningPolicy_FieldTerminalPath); ok {
					switch tp.selector {
					case ProvisioningPolicy_FieldPathSelectorMetadata:
						mySubMasks[ProvisioningPolicy_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case ProvisioningPolicy_FieldPathSelectorSpec:
						mySubMasks[ProvisioningPolicy_FieldPathSelectorSpec] = FullProvisioningPolicy_Spec_FieldMask()
					case ProvisioningPolicy_FieldPathSelectorStatus:
						mySubMasks[ProvisioningPolicy_FieldPathSelectorStatus] = FullProvisioningPolicy_Status_FieldMask()
					}
				} else if tp, ok := path.(*ProvisioningPolicy_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProvisioningPolicy_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProvisioningPolicy_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProvisioningPolicy_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProvisioningPolicy_FieldMask) FilterInputFields() *ProvisioningPolicy_FieldMask {
	result := &ProvisioningPolicy_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ProvisioningPolicy_FieldPathSelectorMetadata:
			if _, ok := path.(*ProvisioningPolicy_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisioningPolicy_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ProvisioningPolicy_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisioningPolicy_FieldSubPath{selector: ProvisioningPolicy_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		case ProvisioningPolicy_FieldPathSelectorSpec:
			if _, ok := path.(*ProvisioningPolicy_FieldTerminalPath); ok {
				for _, subpath := range FullProvisioningPolicy_Spec_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisioningPolicy_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ProvisioningPolicy_FieldSubPath); ok {
				selectedMask := &ProvisioningPolicy_Spec_FieldMask{
					Paths: []ProvisioningPolicySpec_FieldPath{sub.subPath.(ProvisioningPolicySpec_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisioningPolicy_FieldSubPath{selector: ProvisioningPolicy_FieldPathSelectorSpec, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProvisioningPolicy_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProvisioningPolicy_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProvisioningPolicy_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProvisioningPolicy_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProvisioningPolicy_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProvisioningPolicy_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProvisioningPolicy_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProvisioningPolicy_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_FieldMask) AppendPath(path ProvisioningPolicy_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProvisioningPolicy_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProvisioningPolicy_FieldPath))
}

func (fieldMask *ProvisioningPolicy_FieldMask) GetPaths() []ProvisioningPolicy_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProvisioningPolicy_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProvisioningPolicy_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProvisioningPolicy_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProvisioningPolicy_FieldMask) Set(target, source *ProvisioningPolicy) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProvisioningPolicy_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProvisioningPolicy), source.(*ProvisioningPolicy))
}

func (fieldMask *ProvisioningPolicy_FieldMask) Project(source *ProvisioningPolicy) *ProvisioningPolicy {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProvisioningPolicy{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &ProvisioningPolicy_Spec_FieldMask{}
	wholeSpecAccepted := false
	statusMask := &ProvisioningPolicy_Status_FieldMask{}
	wholeStatusAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProvisioningPolicy_FieldTerminalPath:
			switch tp.selector {
			case ProvisioningPolicy_FieldPathSelectorName:
				result.Name = source.Name
			case ProvisioningPolicy_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case ProvisioningPolicy_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case ProvisioningPolicy_FieldPathSelectorDescription:
				result.Description = source.Description
			case ProvisioningPolicy_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			case ProvisioningPolicy_FieldPathSelectorStatus:
				result.Status = source.Status
				wholeStatusAccepted = true
			}
		case *ProvisioningPolicy_FieldSubPath:
			switch tp.selector {
			case ProvisioningPolicy_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case ProvisioningPolicy_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(ProvisioningPolicySpec_FieldPath))
			case ProvisioningPolicy_FieldPathSelectorStatus:
				statusMask.AppendPath(tp.subPath.(ProvisioningPolicyStatus_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	if wholeStatusAccepted == false && len(statusMask.Paths) > 0 {
		result.Status = statusMask.Project(source.GetStatus())
	}
	return result
}

func (fieldMask *ProvisioningPolicy_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProvisioningPolicy))
}

func (fieldMask *ProvisioningPolicy_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProvisioningPolicy_Spec_FieldMask struct {
	Paths []ProvisioningPolicySpec_FieldPath
}

func FullProvisioningPolicy_Spec_FieldMask() *ProvisioningPolicy_Spec_FieldMask {
	res := &ProvisioningPolicy_Spec_FieldMask{}
	res.Paths = append(res.Paths, &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorMode})
	res.Paths = append(res.Paths, &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorServiceAccount})
	res.Paths = append(res.Paths, &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat})
	res.Paths = append(res.Paths, &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorLabels})
	res.Paths = append(res.Paths, &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorTemplate})
	res.Paths = append(res.Paths, &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths})
	res.Paths = append(res.Paths, &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorRole})
	res.Paths = append(res.Paths, &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorScopeParams})
	res.Paths = append(res.Paths, &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorCondition})
	res.Paths = append(res.Paths, &ProvisioningPolicySpec_FieldTerminalPath{selector: ProvisioningPolicySpec_FieldPathSelectorConditionParams})
	return res
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProvisioningPolicy_Spec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProvisioningPolicySpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 10)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProvisioningPolicySpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProvisioningPolicySpec_FieldPath(raw)
	})
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) ProtoMessage() {}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) Subtract(other *ProvisioningPolicy_Spec_FieldMask) *ProvisioningPolicy_Spec_FieldMask {
	result := &ProvisioningPolicy_Spec_FieldMask{}
	removedSelectors := make([]bool, 10)
	otherSubMasks := map[ProvisioningPolicySpec_FieldPathSelector]gotenobject.FieldMask{
		ProvisioningPolicySpec_FieldPathSelectorTemplate:    &ProvisioningPolicy_Spec_Template_FieldMask{},
		ProvisioningPolicySpec_FieldPathSelectorScopeParams: &iam_role.ScopeParam_FieldMask{},
	}
	mySubMasks := map[ProvisioningPolicySpec_FieldPathSelector]gotenobject.FieldMask{
		ProvisioningPolicySpec_FieldPathSelectorTemplate:    &ProvisioningPolicy_Spec_Template_FieldMask{},
		ProvisioningPolicySpec_FieldPathSelectorScopeParams: &iam_role.ScopeParam_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProvisioningPolicySpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProvisioningPolicySpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProvisioningPolicySpec_FieldTerminalPath); ok {
					switch tp.selector {
					case ProvisioningPolicySpec_FieldPathSelectorTemplate:
						mySubMasks[ProvisioningPolicySpec_FieldPathSelectorTemplate] = FullProvisioningPolicy_Spec_Template_FieldMask()
					case ProvisioningPolicySpec_FieldPathSelectorScopeParams:
						mySubMasks[ProvisioningPolicySpec_FieldPathSelectorScopeParams] = iam_role.FullScopeParam_FieldMask()
					}
				} else if tp, ok := path.(*ProvisioningPolicySpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProvisioningPolicySpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProvisioningPolicy_Spec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProvisioningPolicy_Spec_FieldMask) FilterInputFields() *ProvisioningPolicy_Spec_FieldMask {
	result := &ProvisioningPolicy_Spec_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ProvisioningPolicySpec_FieldPathSelectorTemplate:
			if _, ok := path.(*ProvisioningPolicySpec_FieldTerminalPath); ok {
				for _, subpath := range FullProvisioningPolicy_Spec_Template_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisioningPolicySpec_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ProvisioningPolicySpec_FieldSubPath); ok {
				selectedMask := &ProvisioningPolicy_Spec_Template_FieldMask{
					Paths: []ProvisioningPolicySpecTemplate_FieldPath{sub.subPath.(ProvisioningPolicySpecTemplate_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisioningPolicySpec_FieldSubPath{selector: ProvisioningPolicySpec_FieldPathSelectorTemplate, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProvisioningPolicy_Spec_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProvisioningPolicySpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProvisioningPolicySpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProvisioningPolicy_Spec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProvisioningPolicy_Spec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) AppendPath(path ProvisioningPolicySpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProvisioningPolicySpec_FieldPath))
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) GetPaths() []ProvisioningPolicySpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProvisioningPolicySpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) Set(target, source *ProvisioningPolicy_Spec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProvisioningPolicy_Spec), source.(*ProvisioningPolicy_Spec))
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) Project(source *ProvisioningPolicy_Spec) *ProvisioningPolicy_Spec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProvisioningPolicy_Spec{}
	templateMask := &ProvisioningPolicy_Spec_Template_FieldMask{}
	wholeTemplateAccepted := false
	scopeParamsMask := &iam_role.ScopeParam_FieldMask{}
	wholeScopeParamsAccepted := false
	var labelsMapKeys []string
	wholeLabelsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProvisioningPolicySpec_FieldTerminalPath:
			switch tp.selector {
			case ProvisioningPolicySpec_FieldPathSelectorMode:
				result.Mode = source.Mode
			case ProvisioningPolicySpec_FieldPathSelectorServiceAccount:
				result.ServiceAccount = source.ServiceAccount
			case ProvisioningPolicySpec_FieldPathSelectorDeviceNameFormat:
				result.DeviceNameFormat = source.DeviceNameFormat
			case ProvisioningPolicySpec_FieldPathSelectorLabels:
				result.Labels = source.Labels
				wholeLabelsAccepted = true
			case ProvisioningPolicySpec_FieldPathSelectorTemplate:
				result.Template = source.Template
				wholeTemplateAccepted = true
			case ProvisioningPolicySpec_FieldPathSelectorIdentityFieldPaths:
				result.IdentityFieldPaths = source.IdentityFieldPaths
			case ProvisioningPolicySpec_FieldPathSelectorRole:
				result.Role = source.Role
			case ProvisioningPolicySpec_FieldPathSelectorScopeParams:
				result.ScopeParams = source.ScopeParams
				wholeScopeParamsAccepted = true
			case ProvisioningPolicySpec_FieldPathSelectorCondition:
				result.Condition = source.Condition
			case ProvisioningPolicySpec_FieldPathSelectorConditionParams:
				result.ConditionParams = source.ConditionParams
			}
		case *ProvisioningPolicySpec_FieldSubPath:
			switch tp.selector {
			case ProvisioningPolicySpec_FieldPathSelectorTemplate:
				templateMask.AppendPath(tp.subPath.(ProvisioningPolicySpecTemplate_FieldPath))
			case ProvisioningPolicySpec_FieldPathSelectorScopeParams:
				scopeParamsMask.AppendPath(tp.subPath.(iam_role.ScopeParam_FieldPath))
			}
		case *ProvisioningPolicySpec_FieldPathMap:
			switch tp.selector {
			case ProvisioningPolicySpec_FieldPathSelectorLabels:
				labelsMapKeys = append(labelsMapKeys, tp.key)
			}
		}
	}
	if wholeLabelsAccepted == false && len(labelsMapKeys) > 0 && source.GetLabels() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetLabels()
		for _, key := range labelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.Labels = copiedMap
	}
	if wholeTemplateAccepted == false && len(templateMask.Paths) > 0 {
		result.Template = templateMask.Project(source.GetTemplate())
	}
	if wholeScopeParamsAccepted == false && len(scopeParamsMask.Paths) > 0 {
		for _, sourceItem := range source.GetScopeParams() {
			result.ScopeParams = append(result.ScopeParams, scopeParamsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProvisioningPolicy_Spec))
}

func (fieldMask *ProvisioningPolicy_Spec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProvisioningPolicy_Status_FieldMask struct {
	Paths []ProvisioningPolicyStatus_FieldPath
}

func FullProvisioningPolicy_Status_FieldMask() *ProvisioningPolicy_Status_FieldMask {
	res := &ProvisioningPolicy_Status_FieldMask{}
	return res
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProvisioningPolicy_Status_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProvisioningPolicyStatus_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 0)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProvisioningPolicyStatus_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProvisioningPolicyStatus_FieldPath(raw)
	})
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) ProtoMessage() {}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) Subtract(other *ProvisioningPolicy_Status_FieldMask) *ProvisioningPolicy_Status_FieldMask {
	result := &ProvisioningPolicy_Status_FieldMask{}
	removedSelectors := make([]bool, 0)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProvisioningPolicyStatus_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProvisioningPolicy_Status_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProvisioningPolicy_Status_FieldMask) FilterInputFields() *ProvisioningPolicy_Status_FieldMask {
	result := &ProvisioningPolicy_Status_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProvisioningPolicy_Status_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProvisioningPolicyStatus_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProvisioningPolicyStatus_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProvisioningPolicy_Status_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProvisioningPolicy_Status_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) AppendPath(path ProvisioningPolicyStatus_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProvisioningPolicyStatus_FieldPath))
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) GetPaths() []ProvisioningPolicyStatus_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProvisioningPolicyStatus_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) Set(target, source *ProvisioningPolicy_Status) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProvisioningPolicy_Status), source.(*ProvisioningPolicy_Status))
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) Project(source *ProvisioningPolicy_Status) *ProvisioningPolicy_Status {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProvisioningPolicy_Status{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProvisioningPolicyStatus_FieldTerminalPath:
			switch tp.selector {
			}
		}
	}
	return result
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProvisioningPolicy_Status))
}

func (fieldMask *ProvisioningPolicy_Status_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProvisioningPolicy_Spec_Template_FieldMask struct {
	Paths []ProvisioningPolicySpecTemplate_FieldPath
}

func FullProvisioningPolicy_Spec_Template_FieldMask() *ProvisioningPolicy_Spec_Template_FieldMask {
	res := &ProvisioningPolicy_Spec_Template_FieldMask{}
	res.Paths = append(res.Paths, &ProvisioningPolicySpecTemplate_FieldTerminalPath{selector: ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &ProvisioningPolicySpecTemplate_FieldTerminalPath{selector: ProvisioningPolicySpecTemplate_FieldPathSelectorSpec})
	res.Paths = append(res.Paths, &ProvisioningPolicySpecTemplate_FieldTerminalPath{selector: ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec})
	return res
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProvisioningPolicySpecTemplate_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProvisioningPolicySpecTemplate_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProvisioningPolicySpecTemplate_FieldPath(raw)
	})
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) ProtoMessage() {}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) Subtract(other *ProvisioningPolicy_Spec_Template_FieldMask) *ProvisioningPolicy_Spec_Template_FieldMask {
	result := &ProvisioningPolicy_Spec_Template_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ProvisioningPolicySpecTemplate_FieldPathSelector]gotenobject.FieldMask{
		ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:          &meta.Meta_FieldMask{},
		ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:              &device.Device_Spec_FieldMask{},
		ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec: &device.Device_PublicListingSpec_FieldMask{},
	}
	mySubMasks := map[ProvisioningPolicySpecTemplate_FieldPathSelector]gotenobject.FieldMask{
		ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:          &meta.Meta_FieldMask{},
		ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:              &device.Device_Spec_FieldMask{},
		ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec: &device.Device_PublicListingSpec_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProvisioningPolicySpecTemplate_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProvisioningPolicySpecTemplate_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProvisioningPolicySpecTemplate_FieldTerminalPath); ok {
					switch tp.selector {
					case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
						mySubMasks[ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
						mySubMasks[ProvisioningPolicySpecTemplate_FieldPathSelectorSpec] = device.FullDevice_Spec_FieldMask()
					case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
						mySubMasks[ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec] = device.FullDevice_PublicListingSpec_FieldMask()
					}
				} else if tp, ok := path.(*ProvisioningPolicySpecTemplate_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProvisioningPolicySpecTemplate_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProvisioningPolicy_Spec_Template_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) FilterInputFields() *ProvisioningPolicy_Spec_Template_FieldMask {
	result := &ProvisioningPolicy_Spec_Template_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
			if _, ok := path.(*ProvisioningPolicySpecTemplate_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisioningPolicySpecTemplate_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ProvisioningPolicySpecTemplate_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisioningPolicySpecTemplate_FieldSubPath{selector: ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
			if _, ok := path.(*ProvisioningPolicySpecTemplate_FieldTerminalPath); ok {
				for _, subpath := range device.FullDevice_Spec_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisioningPolicySpecTemplate_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ProvisioningPolicySpecTemplate_FieldSubPath); ok {
				selectedMask := &device.Device_Spec_FieldMask{
					Paths: []device.DeviceSpec_FieldPath{sub.subPath.(device.DeviceSpec_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisioningPolicySpecTemplate_FieldSubPath{selector: ProvisioningPolicySpecTemplate_FieldPathSelectorSpec, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProvisioningPolicySpecTemplate_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProvisioningPolicySpecTemplate_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProvisioningPolicy_Spec_Template_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProvisioningPolicy_Spec_Template_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) AppendPath(path ProvisioningPolicySpecTemplate_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProvisioningPolicySpecTemplate_FieldPath))
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) GetPaths() []ProvisioningPolicySpecTemplate_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProvisioningPolicySpecTemplate_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) Set(target, source *ProvisioningPolicy_Spec_Template) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProvisioningPolicy_Spec_Template), source.(*ProvisioningPolicy_Spec_Template))
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) Project(source *ProvisioningPolicy_Spec_Template) *ProvisioningPolicy_Spec_Template {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProvisioningPolicy_Spec_Template{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &device.Device_Spec_FieldMask{}
	wholeSpecAccepted := false
	publicListingSpecMask := &device.Device_PublicListingSpec_FieldMask{}
	wholePublicListingSpecAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProvisioningPolicySpecTemplate_FieldTerminalPath:
			switch tp.selector {
			case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
				result.PublicListingSpec = source.PublicListingSpec
				wholePublicListingSpecAccepted = true
			}
		case *ProvisioningPolicySpecTemplate_FieldSubPath:
			switch tp.selector {
			case ProvisioningPolicySpecTemplate_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case ProvisioningPolicySpecTemplate_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(device.DeviceSpec_FieldPath))
			case ProvisioningPolicySpecTemplate_FieldPathSelectorPublicListingSpec:
				publicListingSpecMask.AppendPath(tp.subPath.(device.DevicePublicListingSpec_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	if wholePublicListingSpecAccepted == false && len(publicListingSpecMask.Paths) > 0 {
		result.PublicListingSpec = publicListingSpecMask.Project(source.GetPublicListingSpec())
	}
	return result
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProvisioningPolicy_Spec_Template))
}

func (fieldMask *ProvisioningPolicy_Spec_Template_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
