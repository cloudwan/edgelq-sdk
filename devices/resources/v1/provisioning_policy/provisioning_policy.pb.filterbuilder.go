// Code generated by protoc-gen-goten-resource
// Resource: ProvisioningPolicy
// DO NOT EDIT!!!

package provisioning_policy

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	iam_condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1/condition"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1/permission"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	iam_role "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	logging_bucket "github.com/cloudwan/edgelq-sdk/logging/resources/v1/bucket"
	logging_common "github.com/cloudwan/edgelq-sdk/logging/resources/v1/common"
	logging_log_descriptor "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log_descriptor"
	monitoring_bucket "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/bucket"
	monitoring_project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.PCR{}
	_ = &iam_condition.Condition{}
	_ = &iam_organization.Organization{}
	_ = &iam_permission.Permission{}
	_ = &iam_project.Project{}
	_ = &iam_role.Role{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &logging_bucket.Bucket{}
	_ = &logging_common.LabelDescriptor{}
	_ = &logging_log_descriptor.LogDescriptor{}
	_ = &monitoring_bucket.Bucket{}
	_ = &monitoring_project.Project{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &structpb.Struct{}
	_ = &timestamppb.Timestamp{}
	_ = &latlng.LatLng{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

type FilterBuilderOrCondition interface {
	_IsProvisioningPolicyFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsProvisioningPolicyFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp ProvisioningPolicy_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      ProvisioningPolicy_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) Contains(value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: b.fp,
		Value:     b.fp.WithIArrayItemValue(value),
	})
}

func (b *filterCndBuilderAnyPath) ContainsAnyOf(values []interface{}) *FilterBuilder {
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) ContainsAll(values []interface{}) *FilterBuilder {
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Spec() *filterCndBuilderSpec {
	return &filterCndBuilderSpec{builder: b.builder}
}

func (b *filterCndBuilder) Status() *filterCndBuilderStatus {
	return &filterCndBuilderStatus{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Services() *filterCndBuilderMetadataServices {
	return &filterCndBuilderMetadataServices{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServices) Eq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServices) Neq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServices) Gt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServices) Gte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServices) Lt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServices) Lte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServices) In(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) NotIn(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) compare(op gotenfilter.CompareOperator, value *meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataServices) OwningService() *filterCndBuilderMetadataServicesOwningService {
	return &filterCndBuilderMetadataServicesOwningService{builder: b.builder}
}

func (b *filterCndBuilderMetadataServices) AllowedServices() *filterCndBuilderMetadataServicesAllowedServices {
	return &filterCndBuilderMetadataServicesAllowedServices{builder: b.builder}
}

type filterCndBuilderMetadataServicesOwningService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesOwningService) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().OwningService().WithValue(value),
	})
}

type filterCndBuilderMetadataServicesAllowedServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Metadata().Services().AllowedServices().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Services().AllowedServices().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpec) Eq(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpec) Neq(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpec) Gt(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpec) Gte(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpec) Lt(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpec) Lte(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpec) In(values []*ProvisioningPolicy_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) NotIn(values []*ProvisioningPolicy_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) compare(op gotenfilter.CompareOperator, value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpec) Mode() *filterCndBuilderSpecMode {
	return &filterCndBuilderSpecMode{builder: b.builder}
}

func (b *filterCndBuilderSpec) ServiceAccount() *filterCndBuilderSpecServiceAccount {
	return &filterCndBuilderSpecServiceAccount{builder: b.builder}
}

func (b *filterCndBuilderSpec) DeviceNameFormat() *filterCndBuilderSpecDeviceNameFormat {
	return &filterCndBuilderSpecDeviceNameFormat{builder: b.builder}
}

func (b *filterCndBuilderSpec) Labels() *filterCndBuilderSpecLabels {
	return &filterCndBuilderSpecLabels{builder: b.builder}
}

func (b *filterCndBuilderSpec) Template() *filterCndBuilderSpecTemplate {
	return &filterCndBuilderSpecTemplate{builder: b.builder}
}

func (b *filterCndBuilderSpec) IdentityFieldPaths() *filterCndBuilderSpecIdentityFieldPaths {
	return &filterCndBuilderSpecIdentityFieldPaths{builder: b.builder}
}

func (b *filterCndBuilderSpec) Role() *filterCndBuilderSpecRole {
	return &filterCndBuilderSpecRole{builder: b.builder}
}

func (b *filterCndBuilderSpec) ScopeParams() *filterCndBuilderSpecScopeParams {
	return &filterCndBuilderSpecScopeParams{builder: b.builder}
}

func (b *filterCndBuilderSpec) Condition() *filterCndBuilderSpecCondition {
	return &filterCndBuilderSpecCondition{builder: b.builder}
}

func (b *filterCndBuilderSpec) ConditionParams() *filterCndBuilderSpecConditionParams {
	return &filterCndBuilderSpecConditionParams{builder: b.builder}
}

type filterCndBuilderSpecMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecMode) Eq(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecMode) Neq(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecMode) Gt(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecMode) Gte(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecMode) Lt(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecMode) Lte(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecMode) In(values []ProvisioningPolicy_Mode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecMode) NotIn(values []ProvisioningPolicy_Mode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecMode) compare(op gotenfilter.CompareOperator, value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecServiceAccount struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecServiceAccount) Eq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecServiceAccount) Neq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecServiceAccount) Gt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecServiceAccount) Gte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecServiceAccount) Lt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecServiceAccount) Lte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecServiceAccount) In(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecServiceAccount) NotIn(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecServiceAccount) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderSpecServiceAccount) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderSpecServiceAccount) compare(op gotenfilter.CompareOperator, value *iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().ServiceAccount().WithValue(value),
	})
}

type filterCndBuilderSpecDeviceNameFormat struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecDeviceNameFormat) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().DeviceNameFormat().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecDeviceNameFormat) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().DeviceNameFormat().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecDeviceNameFormat) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().DeviceNameFormat().FieldPath(),
	})
}

func (b *filterCndBuilderSpecDeviceNameFormat) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().DeviceNameFormat().FieldPath(),
	})
}

func (b *filterCndBuilderSpecDeviceNameFormat) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().DeviceNameFormat().WithValue(value),
	})
}

type filterCndBuilderSpecLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderSpecLabels) WithKey(key string) *mapFilterCndBuilderSpecLabels {
	return &mapFilterCndBuilderSpecLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplate) Eq(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplate) Neq(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplate) Gt(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplate) Gte(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplate) Lt(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplate) Lte(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplate) In(values []*ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplate) NotIn(values []*ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplate) compare(op gotenfilter.CompareOperator, value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplate) Metadata() *filterCndBuilderSpecTemplateMetadata {
	return &filterCndBuilderSpecTemplateMetadata{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) Spec() *filterCndBuilderSpecTemplateSpec {
	return &filterCndBuilderSpecTemplateSpec{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) PublicListingSpec() *filterCndBuilderSpecTemplatePublicListingSpec {
	return &filterCndBuilderSpecTemplatePublicListingSpec{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadata) Eq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Neq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Gt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Gte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Lt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Lte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) In(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) NotIn(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) compare(op gotenfilter.CompareOperator, value *meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) CreateTime() *filterCndBuilderSpecTemplateMetadataCreateTime {
	return &filterCndBuilderSpecTemplateMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) UpdateTime() *filterCndBuilderSpecTemplateMetadataUpdateTime {
	return &filterCndBuilderSpecTemplateMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) DeleteTime() *filterCndBuilderSpecTemplateMetadataDeleteTime {
	return &filterCndBuilderSpecTemplateMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Uuid() *filterCndBuilderSpecTemplateMetadataUuid {
	return &filterCndBuilderSpecTemplateMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Tags() *filterCndBuilderSpecTemplateMetadataTags {
	return &filterCndBuilderSpecTemplateMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Labels() *filterCndBuilderSpecTemplateMetadataLabels {
	return &filterCndBuilderSpecTemplateMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Annotations() *filterCndBuilderSpecTemplateMetadataAnnotations {
	return &filterCndBuilderSpecTemplateMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Generation() *filterCndBuilderSpecTemplateMetadataGeneration {
	return &filterCndBuilderSpecTemplateMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) ResourceVersion() *filterCndBuilderSpecTemplateMetadataResourceVersion {
	return &filterCndBuilderSpecTemplateMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) OwnerReferences() *filterCndBuilderSpecTemplateMetadataOwnerReferences {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Shards() *filterCndBuilderSpecTemplateMetadataShards {
	return &filterCndBuilderSpecTemplateMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Syncing() *filterCndBuilderSpecTemplateMetadataSyncing {
	return &filterCndBuilderSpecTemplateMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Lifecycle() *filterCndBuilderSpecTemplateMetadataLifecycle {
	return &filterCndBuilderSpecTemplateMetadataLifecycle{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Services() *filterCndBuilderSpecTemplateMetadataServices {
	return &filterCndBuilderSpecTemplateMetadataServices{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) WithKey(key string) *mapFilterCndBuilderSpecTemplateMetadataLabels {
	return &mapFilterCndBuilderSpecTemplateMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTemplateMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderSpecTemplateMetadataAnnotations {
	return &mapFilterCndBuilderSpecTemplateMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTemplateMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Eq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Neq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Gt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Gte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Lt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Lte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) In(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) NotIn(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Contains(value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) ContainsAnyOf(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) ContainsAll(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Kind() *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Version() *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Name() *filterCndBuilderSpecTemplateMetadataOwnerReferencesName {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Region() *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Controller() *filterCndBuilderSpecTemplateMetadataOwnerReferencesController {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) WithKey(key string) *mapFilterCndBuilderSpecTemplateMetadataShards {
	return &mapFilterCndBuilderSpecTemplateMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTemplateMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Eq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Neq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Gt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Gte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Lt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Lte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) In(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) NotIn(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) compare(op gotenfilter.CompareOperator, value *meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) OwningRegion() *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion {
	return &filterCndBuilderSpecTemplateMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Regions() *filterCndBuilderSpecTemplateMetadataSyncingRegions {
	return &filterCndBuilderSpecTemplateMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Eq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Neq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Gt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Gte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Lt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Lte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) In(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) NotIn(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) State() *filterCndBuilderSpecTemplateMetadataLifecycleState {
	return &filterCndBuilderSpecTemplateMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) BlockDeletion() *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion {
	return &filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Eq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Neq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Gt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Gte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Lt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Lte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) In(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) NotIn(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Eq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Neq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Gt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Gte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Lt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Lte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) In(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServices) NotIn(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServices) compare(op gotenfilter.CompareOperator, value *meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServices) OwningService() *filterCndBuilderSpecTemplateMetadataServicesOwningService {
	return &filterCndBuilderSpecTemplateMetadataServicesOwningService{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataServices) AllowedServices() *filterCndBuilderSpecTemplateMetadataServicesAllowedServices {
	return &filterCndBuilderSpecTemplateMetadataServicesAllowedServices{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataServicesOwningService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().OwningService().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataServicesAllowedServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpec) Eq(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Neq(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Gt(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Gte(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Lt(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Lte(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpec) In(values []*device.Device_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) NotIn(values []*device.Device_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) compare(op gotenfilter.CompareOperator, value *device.Device_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) ServiceAccount() *filterCndBuilderSpecTemplateSpecServiceAccount {
	return &filterCndBuilderSpecTemplateSpecServiceAccount{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) LogBucket() *filterCndBuilderSpecTemplateSpecLogBucket {
	return &filterCndBuilderSpecTemplateSpecLogBucket{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) MetricsBucket() *filterCndBuilderSpecTemplateSpecMetricsBucket {
	return &filterCndBuilderSpecTemplateSpecMetricsBucket{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) OsVersion() *filterCndBuilderSpecTemplateSpecOsVersion {
	return &filterCndBuilderSpecTemplateSpecOsVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) NetplanYamlConfig() *filterCndBuilderSpecTemplateSpecNetplanYamlConfig {
	return &filterCndBuilderSpecTemplateSpecNetplanYamlConfig{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) NetplanApiConfigMode() *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode {
	return &filterCndBuilderSpecTemplateSpecNetplanApiConfigMode{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) OsImageUrl() *filterCndBuilderSpecTemplateSpecOsImageUrl {
	return &filterCndBuilderSpecTemplateSpecOsImageUrl{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) SshConfig() *filterCndBuilderSpecTemplateSpecSshConfig {
	return &filterCndBuilderSpecTemplateSpecSshConfig{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) AttestationConfig() *filterCndBuilderSpecTemplateSpecAttestationConfig {
	return &filterCndBuilderSpecTemplateSpecAttestationConfig{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) DisableDeviceDiscovery() *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery {
	return &filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) LoggingConfig() *filterCndBuilderSpecTemplateSpecLoggingConfig {
	return &filterCndBuilderSpecTemplateSpecLoggingConfig{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) ProxyConfig() *filterCndBuilderSpecTemplateSpecProxyConfig {
	return &filterCndBuilderSpecTemplateSpecProxyConfig{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) Location() *filterCndBuilderSpecTemplateSpecLocation {
	return &filterCndBuilderSpecTemplateSpecLocation{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) UsbGuard() *filterCndBuilderSpecTemplateSpecUsbGuard {
	return &filterCndBuilderSpecTemplateSpecUsbGuard{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecServiceAccount struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Eq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Neq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Gt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Gte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Lt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Lte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) In(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) NotIn(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) compare(op gotenfilter.CompareOperator, value *iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ServiceAccount().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecLogBucket struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecLogBucket) Eq(value *logging_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLogBucket) Neq(value *logging_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLogBucket) Gt(value *logging_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLogBucket) Gte(value *logging_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLogBucket) Lt(value *logging_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLogBucket) Lte(value *logging_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLogBucket) In(values []*logging_bucket.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LogBucket().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLogBucket) NotIn(values []*logging_bucket.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LogBucket().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLogBucket) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LogBucket().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLogBucket) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LogBucket().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLogBucket) compare(op gotenfilter.CompareOperator, value *logging_bucket.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LogBucket().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecMetricsBucket struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecMetricsBucket) Eq(value *monitoring_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecMetricsBucket) Neq(value *monitoring_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecMetricsBucket) Gt(value *monitoring_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecMetricsBucket) Gte(value *monitoring_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecMetricsBucket) Lt(value *monitoring_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecMetricsBucket) Lte(value *monitoring_bucket.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecMetricsBucket) In(values []*monitoring_bucket.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().MetricsBucket().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecMetricsBucket) NotIn(values []*monitoring_bucket.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().MetricsBucket().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecMetricsBucket) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().MetricsBucket().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecMetricsBucket) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().MetricsBucket().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecMetricsBucket) compare(op gotenfilter.CompareOperator, value *monitoring_bucket.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().MetricsBucket().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecOsVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsVersion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetplanYamlConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetplanYamlConfig) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanYamlConfig) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanYamlConfig) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanYamlConfig) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanYamlConfig) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanYamlConfig) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanYamlConfig) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetplanYamlConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetplanYamlConfig) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetplanYamlConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetplanYamlConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetplanYamlConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetplanYamlConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetplanYamlConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetplanYamlConfig) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetplanYamlConfig().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetplanApiConfigMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode) Eq(value device.Device_Spec_NetworkConfigMode) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode) Neq(value device.Device_Spec_NetworkConfigMode) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode) Gt(value device.Device_Spec_NetworkConfigMode) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode) Gte(value device.Device_Spec_NetworkConfigMode) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode) Lt(value device.Device_Spec_NetworkConfigMode) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode) Lte(value device.Device_Spec_NetworkConfigMode) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode) In(values []device.Device_Spec_NetworkConfigMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetplanApiConfigMode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode) NotIn(values []device.Device_Spec_NetworkConfigMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetplanApiConfigMode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetplanApiConfigMode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetplanApiConfigMode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetplanApiConfigMode) compare(op gotenfilter.CompareOperator, value device.Device_Spec_NetworkConfigMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetplanApiConfigMode().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecOsImageUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsImageUrl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsImageUrl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsImageUrl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsImageUrl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsImageUrl().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Eq(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Neq(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Gt(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Gte(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Lt(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Lte(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) In(values []*device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) NotIn(values []*device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) DisableSshServer() *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer {
	return &filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) DisableSshPassword() *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword {
	return &filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) SshAuthorized() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) IpAllowList() *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList {
	return &filterCndBuilderSpecTemplateSpecSshConfigIpAllowList{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) IpDenyList() *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList {
	return &filterCndBuilderSpecTemplateSpecSshConfigIpDenyList{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) RejectPeriod() *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod {
	return &filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) DisableSshAuthkey() *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey {
	return &filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshServer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshServer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshServer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshServer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshServer().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshPassword().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Eq(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Neq(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Gt(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Gte(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Lt(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Lte(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) In(values [][]*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NotIn(values [][]*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Contains(value *device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) ContainsAnyOf(values []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) ContainsAll(values []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) SshaKey() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) CertAuthority() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Command() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Environment() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) From() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NoAgentForwarding() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NoPortForwarding() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NoPty() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NoUserRc() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NoX11Forwarding() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Permitopen() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Principals() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Tunnel() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Restrict() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().SshaKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().SshaKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().SshaKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().SshaKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().SshaKey().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().CertAuthority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().CertAuthority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().CertAuthority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().CertAuthority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().CertAuthority().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Command().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Command().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Command().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Command().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Command().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Environment().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Environment().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Environment().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Environment().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Environment().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoAgentForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoAgentForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoAgentForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoAgentForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoAgentForwarding().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPortForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPortForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPortForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPortForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPortForwarding().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPty().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPty().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPty().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPty().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPty().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoUserRc().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoUserRc().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoUserRc().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoUserRc().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoUserRc().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoX11Forwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoX11Forwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoX11Forwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoX11Forwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoX11Forwarding().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Permitopen().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Permitopen().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Permitopen().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Permitopen().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Permitopen().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Principals().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Principals().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Principals().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Principals().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Principals().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Tunnel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Tunnel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Tunnel().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Tunnel().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Tunnel().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Restrict().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Restrict().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Restrict().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Restrict().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Restrict().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigIpAllowList struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigIpDenyList struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Eq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Neq(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Gt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Gte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Lt(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Lte(value *durationpb.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) In(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().RejectPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) NotIn(values []*durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().RejectPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().RejectPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().RejectPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) compare(op gotenfilter.CompareOperator, value *durationpb.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().RejectPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshAuthkey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshAuthkey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshAuthkey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshAuthkey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshAuthkey().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecAttestationConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Eq(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Neq(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Gt(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Gte(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Lt(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Lte(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) In(values []*device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) NotIn(values []*device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) AttestationExpected() *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected {
	return &filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) AttestationDomain() *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain {
	return &filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationExpected().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationExpected().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationExpected().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationExpected().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationExpected().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Eq(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Neq(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Gt(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Gte(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Lt(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Lte(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) In(values []*iam_attestation_domain.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationDomain().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) NotIn(values []*iam_attestation_domain.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationDomain().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationDomain().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationDomain().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) compare(op gotenfilter.CompareOperator, value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationDomain().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().DisableDeviceDiscovery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().DisableDeviceDiscovery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().DisableDeviceDiscovery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().DisableDeviceDiscovery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecDisableDeviceDiscovery) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().DisableDeviceDiscovery().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecLoggingConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) Eq(value *device.Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) Neq(value *device.Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) Gt(value *device.Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) Gte(value *device.Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) Lt(value *device.Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) Lte(value *device.Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) In(values []*device.Device_Spec_LoggingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) NotIn(values []*device.Device_Spec_LoggingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_LoggingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) Priority() *filterCndBuilderSpecTemplateSpecLoggingConfigPriority {
	return &filterCndBuilderSpecTemplateSpecLoggingConfigPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) Units() *filterCndBuilderSpecTemplateSpecLoggingConfigUnits {
	return &filterCndBuilderSpecTemplateSpecLoggingConfigUnits{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfig) EnableJournalExport() *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport {
	return &filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecLoggingConfigPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecLoggingConfigUnits struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Units().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Units().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Units().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Units().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Units().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Units().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Units()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Units().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Units()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Units().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigUnits) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().Units().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().EnableJournalExport().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().EnableJournalExport().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().EnableJournalExport().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().EnableJournalExport().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLoggingConfigEnableJournalExport) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().LoggingConfig().EnableJournalExport().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecProxyConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) Eq(value *device.Device_Spec_ProxyConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) Neq(value *device.Device_Spec_ProxyConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) Gt(value *device.Device_Spec_ProxyConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) Gte(value *device.Device_Spec_ProxyConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) Lt(value *device.Device_Spec_ProxyConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) Lte(value *device.Device_Spec_ProxyConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) In(values []*device.Device_Spec_ProxyConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) NotIn(values []*device.Device_Spec_ProxyConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_ProxyConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) HttpProxy() *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy {
	return &filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) HttpsProxy() *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy {
	return &filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) NoProxy() *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy {
	return &filterCndBuilderSpecTemplateSpecProxyConfigNoProxy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfig) ProxyInterfaces() *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces {
	return &filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().HttpProxy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigHttpsProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().HttpsProxy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecProxyConfigNoProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigNoProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().NoProxy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().ProxyInterfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().ProxyInterfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().ProxyInterfaces().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().ProxyInterfaces().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().ProxyInterfaces().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().ProxyInterfaces().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().ProxyInterfaces()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().ProxyInterfaces().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().ProxyInterfaces()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().ProxyInterfaces().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecProxyConfigProxyInterfaces) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ProxyConfig().ProxyInterfaces().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecLocation) Eq(value *device.Device_Spec_Location) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocation) Neq(value *device.Device_Spec_Location) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocation) Gt(value *device.Device_Spec_Location) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocation) Gte(value *device.Device_Spec_Location) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocation) Lt(value *device.Device_Spec_Location) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocation) Lte(value *device.Device_Spec_Location) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocation) In(values []*device.Device_Spec_Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocation) NotIn(values []*device.Device_Spec_Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocation) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocation) Address() *filterCndBuilderSpecTemplateSpecLocationAddress {
	return &filterCndBuilderSpecTemplateSpecLocationAddress{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecLocation) Placement() *filterCndBuilderSpecTemplateSpecLocationPlacement {
	return &filterCndBuilderSpecTemplateSpecLocationPlacement{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecLocationAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecLocationAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocationAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocationAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocationAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocationAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().Address().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecLocationPlacement struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecLocationPlacement) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationPlacement) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationPlacement) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationPlacement) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationPlacement) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationPlacement) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecLocationPlacement) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().Placement().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocationPlacement) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().Placement().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocationPlacement) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().Placement().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocationPlacement) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().Placement().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecLocationPlacement) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().Location().Placement().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecUsbGuard struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) Eq(value *device.Device_Spec_USBGuard) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) Neq(value *device.Device_Spec_USBGuard) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) Gt(value *device.Device_Spec_USBGuard) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) Gte(value *device.Device_Spec_USBGuard) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) Lt(value *device.Device_Spec_USBGuard) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) Lte(value *device.Device_Spec_USBGuard) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) In(values []*device.Device_Spec_USBGuard) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) NotIn(values []*device.Device_Spec_USBGuard) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_USBGuard) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) Enable() *filterCndBuilderSpecTemplateSpecUsbGuardEnable {
	return &filterCndBuilderSpecTemplateSpecUsbGuardEnable{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuard) WhiteList() *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList {
	return &filterCndBuilderSpecTemplateSpecUsbGuardWhiteList{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecUsbGuardEnable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardEnable) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardEnable) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardEnable) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardEnable) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardEnable) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardEnable) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardEnable) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().Enable().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardEnable) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().Enable().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardEnable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().Enable().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardEnable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().Enable().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardEnable) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().Enable().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecUsbGuardWhiteList struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) Eq(value []*device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) Neq(value []*device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) Gt(value []*device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) Gte(value []*device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) Lt(value []*device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) Lte(value []*device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) In(values [][]*device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) NotIn(values [][]*device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) Contains(value *device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) ContainsAnyOf(values []*device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) ContainsAll(values []*device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_USBGuard_WhiteList) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) DeviceName() *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName {
	return &filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) DeviceId() *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId {
	return &filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) ViaPort() *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort {
	return &filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) WithInterface() *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface {
	return &filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteList) WithConnectType() *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType {
	return &filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().DeviceName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().DeviceName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().DeviceName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().DeviceName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().DeviceName().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().DeviceId().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().DeviceId().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().DeviceId().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().DeviceId().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListDeviceId) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().DeviceId().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) Eq(value *device.Device_Spec_USBGuard_Port) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) Neq(value *device.Device_Spec_USBGuard_Port) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) Gt(value *device.Device_Spec_USBGuard_Port) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) Gte(value *device.Device_Spec_USBGuard_Port) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) Lt(value *device.Device_Spec_USBGuard_Port) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) Lte(value *device.Device_Spec_USBGuard_Port) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) In(values []*device.Device_Spec_USBGuard_Port) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) NotIn(values []*device.Device_Spec_USBGuard_Port) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_USBGuard_Port) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) Equals() *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals {
	return &filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPort) OneOf() *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf {
	return &filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().Equals().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().Equals().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().Equals().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().Equals().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().Equals().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().Equals().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().Equals()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().Equals().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().Equals()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().Equals().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortEquals) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().Equals().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().OneOf().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().OneOf().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().OneOf().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().OneOf().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().OneOf().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().OneOf().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().OneOf()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().OneOf().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().OneOf()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().OneOf().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListViaPortOneOf) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().ViaPort().OneOf().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) Eq(value *device.Device_Spec_USBGuard_Interface) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) Neq(value *device.Device_Spec_USBGuard_Interface) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) Gt(value *device.Device_Spec_USBGuard_Interface) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) Gte(value *device.Device_Spec_USBGuard_Interface) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) Lt(value *device.Device_Spec_USBGuard_Interface) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) Lte(value *device.Device_Spec_USBGuard_Interface) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) In(values []*device.Device_Spec_USBGuard_Interface) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) NotIn(values []*device.Device_Spec_USBGuard_Interface) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_USBGuard_Interface) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) Equals() *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals {
	return &filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterface) OneOf() *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf {
	return &filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().Equals().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().Equals().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().Equals().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().Equals().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().Equals().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().Equals().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().Equals()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().Equals().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().Equals()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().Equals().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceEquals) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().Equals().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().OneOf().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().OneOf().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().OneOf().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().OneOf().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().OneOf().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().OneOf().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().OneOf()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().OneOf().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().OneOf()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().OneOf().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithInterfaceOneOf) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithInterface().OneOf().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithConnectType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithConnectType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithConnectType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithConnectType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecUsbGuardWhiteListWithConnectType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().UsbGuard().WhiteList().WithConnectType().WithValue(value),
	})
}

type filterCndBuilderSpecTemplatePublicListingSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Eq(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Neq(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Gt(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Gte(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Lt(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Lte(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) In(values []*device.Device_PublicListingSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) NotIn(values []*device.Device_PublicListingSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) compare(op gotenfilter.CompareOperator, value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Enabled() *filterCndBuilderSpecTemplatePublicListingSpecEnabled {
	return &filterCndBuilderSpecTemplatePublicListingSpecEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) FieldMask() *filterCndBuilderSpecTemplatePublicListingSpecFieldMask {
	return &filterCndBuilderSpecTemplatePublicListingSpecFieldMask{builder: b.builder}
}

type filterCndBuilderSpecTemplatePublicListingSpecEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecTemplatePublicListingSpecFieldMask struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Eq(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Neq(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Gt(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Gte(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Lt(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Lte(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) In(values []*device.Device_FieldMask) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldMask().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) NotIn(values []*device.Device_FieldMask) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldMask().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldMask().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldMask().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) compare(op gotenfilter.CompareOperator, value *device.Device_FieldMask) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldMask().WithValue(value),
	})
}

type filterCndBuilderSpecIdentityFieldPaths struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().FieldPath(),
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().FieldPath(),
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().WithValue(value),
	})
}

type filterCndBuilderSpecRole struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecRole) Eq(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecRole) Neq(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecRole) Gt(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecRole) Gte(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecRole) Lt(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecRole) Lte(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecRole) In(values []*iam_role.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Role().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecRole) NotIn(values []*iam_role.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Role().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecRole) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Role().FieldPath(),
	})
}

func (b *filterCndBuilderSpecRole) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Role().FieldPath(),
	})
}

func (b *filterCndBuilderSpecRole) compare(op gotenfilter.CompareOperator, value *iam_role.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Role().WithValue(value),
	})
}

type filterCndBuilderSpecScopeParams struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecScopeParams) Eq(value []*iam_role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecScopeParams) Neq(value []*iam_role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecScopeParams) Gt(value []*iam_role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecScopeParams) Gte(value []*iam_role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecScopeParams) Lt(value []*iam_role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecScopeParams) Lte(value []*iam_role.ScopeParam) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecScopeParams) In(values [][]*iam_role.ScopeParam) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParams) NotIn(values [][]*iam_role.ScopeParam) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParams) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParams) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParams) Contains(value *iam_role.ScopeParam) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecScopeParams) ContainsAnyOf(values []*iam_role.ScopeParam) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecScopeParams) ContainsAll(values []*iam_role.ScopeParam) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecScopeParams) compare(op gotenfilter.CompareOperator, value []*iam_role.ScopeParam) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().WithValue(value),
	})
}

func (b *filterCndBuilderSpecScopeParams) Name() *filterCndBuilderSpecScopeParamsName {
	return &filterCndBuilderSpecScopeParamsName{builder: b.builder}
}

func (b *filterCndBuilderSpecScopeParams) String_() *filterCndBuilderSpecScopeParamsString {
	return &filterCndBuilderSpecScopeParamsString{builder: b.builder}
}

func (b *filterCndBuilderSpecScopeParams) Strings() *filterCndBuilderSpecScopeParamsStrings {
	return &filterCndBuilderSpecScopeParamsStrings{builder: b.builder}
}

type filterCndBuilderSpecScopeParamsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecScopeParamsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecScopeParamsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecScopeParamsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecScopeParamsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecScopeParamsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecScopeParamsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecScopeParamsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParamsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParamsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParamsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParamsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Name().WithValue(value),
	})
}

type filterCndBuilderSpecScopeParamsString struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecScopeParamsString) Eq(value *iam_role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecScopeParamsString) Neq(value *iam_role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecScopeParamsString) Gt(value *iam_role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecScopeParamsString) Gte(value *iam_role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecScopeParamsString) Lt(value *iam_role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecScopeParamsString) Lte(value *iam_role.ScopeParam_StringValue) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecScopeParamsString) In(values []*iam_role.ScopeParam_StringValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().String_().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParamsString) NotIn(values []*iam_role.ScopeParam_StringValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().String_().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParamsString) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().String_().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParamsString) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().String_().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParamsString) compare(op gotenfilter.CompareOperator, value *iam_role.ScopeParam_StringValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().String_().WithValue(value),
	})
}

func (b *filterCndBuilderSpecScopeParamsString) Value() *filterCndBuilderSpecScopeParamsStringValue {
	return &filterCndBuilderSpecScopeParamsStringValue{builder: b.builder}
}

type filterCndBuilderSpecScopeParamsStringValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecScopeParamsStringValue) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecScopeParamsStringValue) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecScopeParamsStringValue) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecScopeParamsStringValue) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecScopeParamsStringValue) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecScopeParamsStringValue) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecScopeParamsStringValue) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().String_().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParamsStringValue) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().String_().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParamsStringValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().String_().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParamsStringValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().String_().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParamsStringValue) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().String_().Value().WithValue(value),
	})
}

type filterCndBuilderSpecScopeParamsStrings struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecScopeParamsStrings) Eq(value *iam_role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecScopeParamsStrings) Neq(value *iam_role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecScopeParamsStrings) Gt(value *iam_role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecScopeParamsStrings) Gte(value *iam_role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecScopeParamsStrings) Lt(value *iam_role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecScopeParamsStrings) Lte(value *iam_role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecScopeParamsStrings) In(values []*iam_role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParamsStrings) NotIn(values []*iam_role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParamsStrings) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParamsStrings) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParamsStrings) compare(op gotenfilter.CompareOperator, value *iam_role.ScopeParam_ArrayOfStringsValue) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().WithValue(value),
	})
}

func (b *filterCndBuilderSpecScopeParamsStrings) Values() *filterCndBuilderSpecScopeParamsStringsValues {
	return &filterCndBuilderSpecScopeParamsStringsValues{builder: b.builder}
}

type filterCndBuilderSpecScopeParamsStringsValues struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().Values().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().Values().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().Values().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().Values().FieldPath(),
	})
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().Values().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().Values().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().Values()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().Values().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().Values()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().Values().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecScopeParamsStringsValues) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().ScopeParams().Strings().Values().WithValue(value),
	})
}

type filterCndBuilderSpecCondition struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecCondition) Eq(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecCondition) Neq(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecCondition) Gt(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecCondition) Gte(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecCondition) Lt(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecCondition) Lte(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecCondition) In(values []*iam_condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Condition().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecCondition) NotIn(values []*iam_condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Condition().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecCondition) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Condition().FieldPath(),
	})
}

func (b *filterCndBuilderSpecCondition) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Condition().FieldPath(),
	})
}

func (b *filterCndBuilderSpecCondition) compare(op gotenfilter.CompareOperator, value *iam_condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Condition().WithValue(value),
	})
}

type filterCndBuilderSpecConditionParams struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecConditionParams) Eq(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecConditionParams) Neq(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecConditionParams) Gt(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecConditionParams) Gte(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecConditionParams) Lt(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecConditionParams) Lte(value *structpb.Struct) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecConditionParams) In(values []*structpb.Struct) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ConditionParams().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConditionParams) NotIn(values []*structpb.Struct) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ConditionParams().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConditionParams) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ConditionParams().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConditionParams) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ConditionParams().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConditionParams) compare(op gotenfilter.CompareOperator, value *structpb.Struct) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().ConditionParams().WithValue(value),
	})
}

type filterCndBuilderStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatus) Eq(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatus) Neq(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatus) Gt(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatus) Gte(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatus) Lt(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatus) Lte(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatus) In(values []*ProvisioningPolicy_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) NotIn(values []*ProvisioningPolicy_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) compare(op gotenfilter.CompareOperator, value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Status().WithValue(value),
	})
}
