// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1/provisioning_policy.proto
// DO NOT EDIT!!!

package provisioning_policy

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	iam_condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1/condition"
	iam_role "github.com/cloudwan/edgelq-sdk/iam/resources/v1/role"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &iam_condition.Condition{}
	_ = &iam_role.Role{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &structpb.Struct{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProvisioningPolicy_Mode int32

const (
	// Mode is not defined, devices will do nothing when the policy is
	// configured in this mode.
	ProvisioningPolicy_MODE_UNSPECIFIED ProvisioningPolicy_Mode = 0
	// Devices will create Device resources automatically without any human
	// interaction.
	ProvisioningPolicy_UNATTENDED ProvisioningPolicy_Mode = 1
	// Devices will create ProvisioningApprovalRequests so that users can
	// approve.
	ProvisioningPolicy_MANUAL_APPROVAL ProvisioningPolicy_Mode = 2
)

var (
	ProvisioningPolicy_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "UNATTENDED",
		2: "MANUAL_APPROVAL",
	}

	ProvisioningPolicy_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"UNATTENDED":       1,
		"MANUAL_APPROVAL":  2,
	}
)

func (x ProvisioningPolicy_Mode) Enum() *ProvisioningPolicy_Mode {
	p := new(ProvisioningPolicy_Mode)
	*p = x
	return p
}

func (x ProvisioningPolicy_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (ProvisioningPolicy_Mode) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_provisioning_policy_proto_enumTypes[0].Descriptor()
}

func (ProvisioningPolicy_Mode) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_provisioning_policy_proto_enumTypes[0]
}

func (x ProvisioningPolicy_Mode) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use ProvisioningPolicy_Mode.ProtoReflect.Descriptor instead.
func (ProvisioningPolicy_Mode) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_provisioning_policy_proto_rawDescGZIP(), []int{0, 0}
}

// ProvisioningPolicy Resource
type ProvisioningPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ProvisioningPolicy
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Display Name
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description
	Description string                     `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Spec        *ProvisioningPolicy_Spec   `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status      *ProvisioningPolicy_Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *ProvisioningPolicy) Reset() {
	*m = ProvisioningPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisioningPolicy) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisioningPolicy) ProtoMessage() {}

func (m *ProvisioningPolicy) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisioningPolicy) GotenMessage() {}

// Deprecated, Use ProvisioningPolicy.ProtoReflect.Descriptor instead.
func (*ProvisioningPolicy) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_provisioning_policy_proto_rawDescGZIP(), []int{0}
}

func (m *ProvisioningPolicy) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisioningPolicy) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisioningPolicy) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisioningPolicy) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProvisioningPolicy) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ProvisioningPolicy) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ProvisioningPolicy) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ProvisioningPolicy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProvisioningPolicy) GetSpec() *ProvisioningPolicy_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProvisioningPolicy) GetStatus() *ProvisioningPolicy_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProvisioningPolicy) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ProvisioningPolicy"))
	}
	m.Name = fv
}

func (m *ProvisioningPolicy) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "ProvisioningPolicy"))
	}
	m.Metadata = fv
}

func (m *ProvisioningPolicy) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "ProvisioningPolicy"))
	}
	m.DisplayName = fv
}

func (m *ProvisioningPolicy) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "ProvisioningPolicy"))
	}
	m.Description = fv
}

func (m *ProvisioningPolicy) SetSpec(fv *ProvisioningPolicy_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "ProvisioningPolicy"))
	}
	m.Spec = fv
}

func (m *ProvisioningPolicy) SetStatus(fv *ProvisioningPolicy_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "ProvisioningPolicy"))
	}
	m.Status = fv
}

type ProvisioningPolicy_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Provisioning mode.
	Mode ProvisioningPolicy_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=ntt.devices.v1.ProvisioningPolicy_Mode" json:"mode,omitempty"`
	// The service account associated with the policy.
	// Devices have to have a key of this service account to conduct
	// self-provisioning.
	ServiceAccount *iam_service_account.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Template for device name.
	DeviceNameFormat string `protobuf:"bytes,3,opt,name=device_name_format,json=deviceNameFormat,proto3" json:"device_name_format,omitempty"`
	// Template for device display name.
	DeviceDisplayNameFormat string `protobuf:"bytes,11,opt,name=device_display_name_format,json=deviceDisplayNameFormat,proto3" json:"device_display_name_format,omitempty"`
	// Deprecated: Use template instead.
	// labels that provisioned Device resources will have.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Template for Devices to be generated.
	// Used only on Device resource creation, changing the value won't affect
	// existing Device resources.
	Template *ProvisioningPolicy_Spec_Template `protobuf:"bytes,5,opt,name=template,proto3" json:"template,omitempty"`
	// Device hardware identity paths (fields) to use for matching pre-existing
	// device resources when provisioning.
	IdentityFieldPaths []string `protobuf:"bytes,6,rep,name=identity_field_paths,json=identityFieldPaths,proto3" json:"identity_field_paths,omitempty"`
	// Role that the newly created service account should be bound to.
	// If not specified, will use the default value of
	// "services/devices.edgelq.com/roles/v1-device-agent".
	Role *iam_role.Reference `protobuf:"bytes,7,opt,customtype=Reference,name=role,proto3" json:"role,omitempty"`
	// List of scope params to add IF role is specified. Ignored if role is
	// empty.
	ScopeParams []*iam_role.ScopeParam `protobuf:"bytes,9,rep,name=scope_params,json=scopeParams,proto3" json:"scope_params,omitempty"`
	// Optional condition for the role binding.
	// DEPRECATED, use extra_conditions
	Condition *iam_condition.Reference `protobuf:"bytes,8,opt,customtype=Reference,name=condition,proto3" json:"condition,omitempty"`
	// Condition params
	// DEPRECATED, use extra_conditions
	ConditionParams *structpb.Struct `protobuf:"bytes,10,opt,name=condition_params,json=conditionParams,proto3" json:"condition_params,omitempty"`
	// Optional extra conditions to be attached for a role.
	ExtraConditions []*iam_condition.ExecutableCondition `protobuf:"bytes,12,rep,name=extra_conditions,json=extraConditions,proto3" json:"extra_conditions,omitempty"`
}

func (m *ProvisioningPolicy_Spec) Reset() {
	*m = ProvisioningPolicy_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisioningPolicy_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisioningPolicy_Spec) ProtoMessage() {}

func (m *ProvisioningPolicy_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisioningPolicy_Spec) GotenMessage() {}

// Deprecated, Use ProvisioningPolicy_Spec.ProtoReflect.Descriptor instead.
func (*ProvisioningPolicy_Spec) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_provisioning_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ProvisioningPolicy_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisioningPolicy_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisioningPolicy_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisioningPolicy_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProvisioningPolicy_Spec) GetMode() ProvisioningPolicy_Mode {
	if m != nil {
		return m.Mode
	}
	return ProvisioningPolicy_MODE_UNSPECIFIED
}

func (m *ProvisioningPolicy_Spec) GetServiceAccount() *iam_service_account.Reference {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func (m *ProvisioningPolicy_Spec) GetDeviceNameFormat() string {
	if m != nil {
		return m.DeviceNameFormat
	}
	return ""
}

func (m *ProvisioningPolicy_Spec) GetDeviceDisplayNameFormat() string {
	if m != nil {
		return m.DeviceDisplayNameFormat
	}
	return ""
}

func (m *ProvisioningPolicy_Spec) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ProvisioningPolicy_Spec) GetTemplate() *ProvisioningPolicy_Spec_Template {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *ProvisioningPolicy_Spec) GetIdentityFieldPaths() []string {
	if m != nil {
		return m.IdentityFieldPaths
	}
	return nil
}

func (m *ProvisioningPolicy_Spec) GetRole() *iam_role.Reference {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *ProvisioningPolicy_Spec) GetScopeParams() []*iam_role.ScopeParam {
	if m != nil {
		return m.ScopeParams
	}
	return nil
}

func (m *ProvisioningPolicy_Spec) GetCondition() *iam_condition.Reference {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *ProvisioningPolicy_Spec) GetConditionParams() *structpb.Struct {
	if m != nil {
		return m.ConditionParams
	}
	return nil
}

func (m *ProvisioningPolicy_Spec) GetExtraConditions() []*iam_condition.ExecutableCondition {
	if m != nil {
		return m.ExtraConditions
	}
	return nil
}

func (m *ProvisioningPolicy_Spec) SetMode(fv ProvisioningPolicy_Mode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "ProvisioningPolicy_Spec"))
	}
	m.Mode = fv
}

func (m *ProvisioningPolicy_Spec) SetServiceAccount(fv *iam_service_account.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceAccount", "ProvisioningPolicy_Spec"))
	}
	m.ServiceAccount = fv
}

func (m *ProvisioningPolicy_Spec) SetDeviceNameFormat(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceNameFormat", "ProvisioningPolicy_Spec"))
	}
	m.DeviceNameFormat = fv
}

func (m *ProvisioningPolicy_Spec) SetDeviceDisplayNameFormat(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceDisplayNameFormat", "ProvisioningPolicy_Spec"))
	}
	m.DeviceDisplayNameFormat = fv
}

func (m *ProvisioningPolicy_Spec) SetLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "ProvisioningPolicy_Spec"))
	}
	m.Labels = fv
}

func (m *ProvisioningPolicy_Spec) SetTemplate(fv *ProvisioningPolicy_Spec_Template) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Template", "ProvisioningPolicy_Spec"))
	}
	m.Template = fv
}

func (m *ProvisioningPolicy_Spec) SetIdentityFieldPaths(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IdentityFieldPaths", "ProvisioningPolicy_Spec"))
	}
	m.IdentityFieldPaths = fv
}

func (m *ProvisioningPolicy_Spec) SetRole(fv *iam_role.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Role", "ProvisioningPolicy_Spec"))
	}
	m.Role = fv
}

func (m *ProvisioningPolicy_Spec) SetScopeParams(fv []*iam_role.ScopeParam) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ScopeParams", "ProvisioningPolicy_Spec"))
	}
	m.ScopeParams = fv
}

func (m *ProvisioningPolicy_Spec) SetCondition(fv *iam_condition.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Condition", "ProvisioningPolicy_Spec"))
	}
	m.Condition = fv
}

func (m *ProvisioningPolicy_Spec) SetConditionParams(fv *structpb.Struct) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionParams", "ProvisioningPolicy_Spec"))
	}
	m.ConditionParams = fv
}

func (m *ProvisioningPolicy_Spec) SetExtraConditions(fv []*iam_condition.ExecutableCondition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExtraConditions", "ProvisioningPolicy_Spec"))
	}
	m.ExtraConditions = fv
}

type ProvisioningPolicy_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *ProvisioningPolicy_Status) Reset() {
	*m = ProvisioningPolicy_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisioningPolicy_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisioningPolicy_Status) ProtoMessage() {}

func (m *ProvisioningPolicy_Status) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisioningPolicy_Status) GotenMessage() {}

// Deprecated, Use ProvisioningPolicy_Status.ProtoReflect.Descriptor instead.
func (*ProvisioningPolicy_Status) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_provisioning_policy_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ProvisioningPolicy_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisioningPolicy_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisioningPolicy_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisioningPolicy_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type ProvisioningPolicy_Spec_Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Metadata      *meta.Meta `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// service_account will be ignored.
	Spec              *device.Device_Spec              `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	PublicListingSpec *device.Device_PublicListingSpec `protobuf:"bytes,3,opt,name=public_listing_spec,json=publicListingSpec,proto3" json:"public_listing_spec,omitempty"`
}

func (m *ProvisioningPolicy_Spec_Template) Reset() {
	*m = ProvisioningPolicy_Spec_Template{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisioningPolicy_Spec_Template) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisioningPolicy_Spec_Template) ProtoMessage() {}

func (m *ProvisioningPolicy_Spec_Template) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisioningPolicy_Spec_Template) GotenMessage() {}

// Deprecated, Use ProvisioningPolicy_Spec_Template.ProtoReflect.Descriptor instead.
func (*ProvisioningPolicy_Spec_Template) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_provisioning_policy_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *ProvisioningPolicy_Spec_Template) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisioningPolicy_Spec_Template) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisioningPolicy_Spec_Template) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisioningPolicy_Spec_Template) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProvisioningPolicy_Spec_Template) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ProvisioningPolicy_Spec_Template) GetSpec() *device.Device_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProvisioningPolicy_Spec_Template) GetPublicListingSpec() *device.Device_PublicListingSpec {
	if m != nil {
		return m.PublicListingSpec
	}
	return nil
}

func (m *ProvisioningPolicy_Spec_Template) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "ProvisioningPolicy_Spec_Template"))
	}
	m.Metadata = fv
}

func (m *ProvisioningPolicy_Spec_Template) SetSpec(fv *device.Device_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "ProvisioningPolicy_Spec_Template"))
	}
	m.Spec = fv
}

func (m *ProvisioningPolicy_Spec_Template) SetPublicListingSpec(fv *device.Device_PublicListingSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PublicListingSpec", "ProvisioningPolicy_Spec_Template"))
	}
	m.PublicListingSpec = fv
}

var edgelq_devices_proto_v1_provisioning_policy_proto preflect.FileDescriptor

var edgelq_devices_proto_v1_provisioning_policy_proto_rawDesc = []byte{
	0x0a, 0x31, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe,
	0x0e, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07,
	0x2a, 0x05, 0x22, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a,
	0x05, 0x22, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0xb0, 0x08, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0xb2, 0xda, 0x21, 0x23, 0x12, 0x21, 0x0a, 0x1d, 0x69, 0x61, 0x6d, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x3a, 0x0a, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x08, 0xca, 0xc6, 0x27, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3a, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x41, 0x06,
	0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0xb2, 0xda, 0x21, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x69, 0x61,
	0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x6c,
	0x65, 0x10, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xfa, 0x41, 0x0b, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xda, 0x21, 0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x69,
	0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xc4, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x58, 0x0a, 0x13,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x41, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x4e, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41,
	0x4c, 0x10, 0x02, 0x3a, 0xa9, 0x03, 0xea, 0x41, 0x77, 0x0a, 0x25, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x4e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d,
	0x92, 0xd9, 0x21, 0x51, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x14, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x1a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x18, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x38, 0x05, 0xb2, 0xdf, 0x21, 0x8c, 0x01, 0x0a, 0x89, 0x01, 0x0a, 0x86, 0x01,
	0x0a, 0x06, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x33,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x2d, 0x1a, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2d, 0x2a,
	0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x39, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0xd3, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x5c, 0x0a, 0x19, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xa2, 0x80, 0xd1, 0x02, 0x5e, 0x0a, 0x1a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76,
	0x31, 0x42, 0x17, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x57, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x3b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1_provisioning_policy_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1_provisioning_policy_proto_rawDescData = edgelq_devices_proto_v1_provisioning_policy_proto_rawDesc
)

func edgelq_devices_proto_v1_provisioning_policy_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1_provisioning_policy_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1_provisioning_policy_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1_provisioning_policy_proto_rawDescData)
	})
	return edgelq_devices_proto_v1_provisioning_policy_proto_rawDescData
}

var edgelq_devices_proto_v1_provisioning_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var edgelq_devices_proto_v1_provisioning_policy_proto_goTypes = []interface{}{
	(ProvisioningPolicy_Mode)(0),              // 0: ntt.devices.v1.ProvisioningPolicy_Mode
	(*ProvisioningPolicy)(nil),                // 1: ntt.devices.v1.ProvisioningPolicy
	(*ProvisioningPolicy_Spec)(nil),           // 2: ntt.devices.v1.ProvisioningPolicy.Spec
	(*ProvisioningPolicy_Status)(nil),         // 3: ntt.devices.v1.ProvisioningPolicy.Status
	nil,                                       // 4: ntt.devices.v1.ProvisioningPolicy.Spec.LabelsEntry
	(*ProvisioningPolicy_Spec_Template)(nil),  // 5: ntt.devices.v1.ProvisioningPolicy.Spec.Template
	(*meta.Meta)(nil),                         // 6: goten.types.Meta
	(*iam_role.ScopeParam)(nil),               // 7: ntt.iam.v1.ScopeParam
	(*structpb.Struct)(nil),                   // 8: google.protobuf.Struct
	(*iam_condition.ExecutableCondition)(nil), // 9: ntt.iam.v1.ExecutableCondition
	(*device.Device_Spec)(nil),                // 10: ntt.devices.v1.Device.Spec
	(*device.Device_PublicListingSpec)(nil),   // 11: ntt.devices.v1.Device.PublicListingSpec
}
var edgelq_devices_proto_v1_provisioning_policy_proto_depIdxs = []int32{
	6,  // 0: ntt.devices.v1.ProvisioningPolicy.metadata:type_name -> goten.types.Meta
	2,  // 1: ntt.devices.v1.ProvisioningPolicy.spec:type_name -> ntt.devices.v1.ProvisioningPolicy.Spec
	3,  // 2: ntt.devices.v1.ProvisioningPolicy.status:type_name -> ntt.devices.v1.ProvisioningPolicy.Status
	0,  // 3: ntt.devices.v1.ProvisioningPolicy.Spec.mode:type_name -> ntt.devices.v1.ProvisioningPolicy_Mode
	4,  // 4: ntt.devices.v1.ProvisioningPolicy.Spec.labels:type_name -> ntt.devices.v1.ProvisioningPolicy.Spec.LabelsEntry
	5,  // 5: ntt.devices.v1.ProvisioningPolicy.Spec.template:type_name -> ntt.devices.v1.ProvisioningPolicy.Spec.Template
	7,  // 6: ntt.devices.v1.ProvisioningPolicy.Spec.scope_params:type_name -> ntt.iam.v1.ScopeParam
	8,  // 7: ntt.devices.v1.ProvisioningPolicy.Spec.condition_params:type_name -> google.protobuf.Struct
	9,  // 8: ntt.devices.v1.ProvisioningPolicy.Spec.extra_conditions:type_name -> ntt.iam.v1.ExecutableCondition
	6,  // 9: ntt.devices.v1.ProvisioningPolicy.Spec.Template.metadata:type_name -> goten.types.Meta
	10, // 10: ntt.devices.v1.ProvisioningPolicy.Spec.Template.spec:type_name -> ntt.devices.v1.Device.Spec
	11, // 11: ntt.devices.v1.ProvisioningPolicy.Spec.Template.public_listing_spec:type_name -> ntt.devices.v1.Device.PublicListingSpec
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1_provisioning_policy_proto_init() }
func edgelq_devices_proto_v1_provisioning_policy_proto_init() {
	if edgelq_devices_proto_v1_provisioning_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisioningPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisioningPolicy_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisioningPolicy_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisioningPolicy_Spec_Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1_provisioning_policy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_devices_proto_v1_provisioning_policy_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1_provisioning_policy_proto_depIdxs,
		EnumInfos:         edgelq_devices_proto_v1_provisioning_policy_proto_enumTypes,
		MessageInfos:      edgelq_devices_proto_v1_provisioning_policy_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1_provisioning_policy_proto = out.File
	edgelq_devices_proto_v1_provisioning_policy_proto_rawDesc = nil
	edgelq_devices_proto_v1_provisioning_policy_proto_goTypes = nil
	edgelq_devices_proto_v1_provisioning_policy_proto_depIdxs = nil
}
