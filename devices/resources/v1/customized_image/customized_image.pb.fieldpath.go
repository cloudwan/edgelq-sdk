// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1/customized_image.proto
// DO NOT EDIT!!!

package customized_image

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CustomizedImage_FieldPath interface {
	gotenobject.FieldPath
	Selector() CustomizedImage_FieldPathSelector
	Get(source *CustomizedImage) []interface{}
	GetSingle(source *CustomizedImage) (interface{}, bool)
	ClearValue(item *CustomizedImage)

	// Those methods build corresponding CustomizedImage_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CustomizedImage_FieldPathValue
	WithIArrayOfValues(values interface{}) CustomizedImage_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CustomizedImage_FieldPathArrayItemValue
}

type CustomizedImage_FieldPathSelector int32

const (
	CustomizedImage_FieldPathSelectorName     CustomizedImage_FieldPathSelector = 0
	CustomizedImage_FieldPathSelectorMetadata CustomizedImage_FieldPathSelector = 1
	CustomizedImage_FieldPathSelectorSpec     CustomizedImage_FieldPathSelector = 2
	CustomizedImage_FieldPathSelectorStatus   CustomizedImage_FieldPathSelector = 3
)

func (s CustomizedImage_FieldPathSelector) String() string {
	switch s {
	case CustomizedImage_FieldPathSelectorName:
		return "name"
	case CustomizedImage_FieldPathSelectorMetadata:
		return "metadata"
	case CustomizedImage_FieldPathSelectorSpec:
		return "spec"
	case CustomizedImage_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", s))
	}
}

func BuildCustomizedImage_FieldPath(fp gotenobject.RawFieldPath) (CustomizedImage_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CustomizedImage")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &CustomizedImage_FieldTerminalPath{selector: CustomizedImage_FieldPathSelectorName}, nil
		case "metadata":
			return &CustomizedImage_FieldTerminalPath{selector: CustomizedImage_FieldPathSelectorMetadata}, nil
		case "spec":
			return &CustomizedImage_FieldTerminalPath{selector: CustomizedImage_FieldPathSelectorSpec}, nil
		case "status":
			return &CustomizedImage_FieldTerminalPath{selector: CustomizedImage_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CustomizedImage_FieldSubPath{selector: CustomizedImage_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildCustomizedImageSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CustomizedImage_FieldSubPath{selector: CustomizedImage_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildCustomizedImageStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CustomizedImage_FieldSubPath{selector: CustomizedImage_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CustomizedImage", fp)
}

func ParseCustomizedImage_FieldPath(rawField string) (CustomizedImage_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCustomizedImage_FieldPath(fp)
}

func MustParseCustomizedImage_FieldPath(rawField string) CustomizedImage_FieldPath {
	fp, err := ParseCustomizedImage_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CustomizedImage_FieldTerminalPath struct {
	selector CustomizedImage_FieldPathSelector
}

var _ CustomizedImage_FieldPath = (*CustomizedImage_FieldTerminalPath)(nil)

func (fp *CustomizedImage_FieldTerminalPath) Selector() CustomizedImage_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CustomizedImage_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CustomizedImage_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CustomizedImage
func (fp *CustomizedImage_FieldTerminalPath) Get(source *CustomizedImage) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CustomizedImage_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case CustomizedImage_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case CustomizedImage_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case CustomizedImage_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fp.selector))
		}
	}
	return
}

func (fp *CustomizedImage_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CustomizedImage))
}

// GetSingle returns value pointed by specific field of from source CustomizedImage
func (fp *CustomizedImage_FieldTerminalPath) GetSingle(source *CustomizedImage) (interface{}, bool) {
	switch fp.selector {
	case CustomizedImage_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case CustomizedImage_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case CustomizedImage_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case CustomizedImage_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fp.selector))
	}
}

func (fp *CustomizedImage_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CustomizedImage))
}

// GetDefault returns a default value of the field type
func (fp *CustomizedImage_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CustomizedImage_FieldPathSelectorName:
		return (*Name)(nil)
	case CustomizedImage_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case CustomizedImage_FieldPathSelectorSpec:
		return (*CustomizedImage_Spec)(nil)
	case CustomizedImage_FieldPathSelectorStatus:
		return (*CustomizedImage_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fp.selector))
	}
}

func (fp *CustomizedImage_FieldTerminalPath) ClearValue(item *CustomizedImage) {
	if item != nil {
		switch fp.selector {
		case CustomizedImage_FieldPathSelectorName:
			item.Name = nil
		case CustomizedImage_FieldPathSelectorMetadata:
			item.Metadata = nil
		case CustomizedImage_FieldPathSelectorSpec:
			item.Spec = nil
		case CustomizedImage_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fp.selector))
		}
	}
}

func (fp *CustomizedImage_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CustomizedImage))
}

// IsLeaf - whether field path is holds simple value
func (fp *CustomizedImage_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CustomizedImage_FieldPathSelectorName
}

func (fp *CustomizedImage_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CustomizedImage_FieldTerminalPath) WithIValue(value interface{}) CustomizedImage_FieldPathValue {
	switch fp.selector {
	case CustomizedImage_FieldPathSelectorName:
		return &CustomizedImage_FieldTerminalPathValue{CustomizedImage_FieldTerminalPath: *fp, value: value.(*Name)}
	case CustomizedImage_FieldPathSelectorMetadata:
		return &CustomizedImage_FieldTerminalPathValue{CustomizedImage_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case CustomizedImage_FieldPathSelectorSpec:
		return &CustomizedImage_FieldTerminalPathValue{CustomizedImage_FieldTerminalPath: *fp, value: value.(*CustomizedImage_Spec)}
	case CustomizedImage_FieldPathSelectorStatus:
		return &CustomizedImage_FieldTerminalPathValue{CustomizedImage_FieldTerminalPath: *fp, value: value.(*CustomizedImage_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fp.selector))
	}
}

func (fp *CustomizedImage_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CustomizedImage_FieldTerminalPath) WithIArrayOfValues(values interface{}) CustomizedImage_FieldPathArrayOfValues {
	fpaov := &CustomizedImage_FieldTerminalPathArrayOfValues{CustomizedImage_FieldTerminalPath: *fp}
	switch fp.selector {
	case CustomizedImage_FieldPathSelectorName:
		return &CustomizedImage_FieldTerminalPathArrayOfValues{CustomizedImage_FieldTerminalPath: *fp, values: values.([]*Name)}
	case CustomizedImage_FieldPathSelectorMetadata:
		return &CustomizedImage_FieldTerminalPathArrayOfValues{CustomizedImage_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case CustomizedImage_FieldPathSelectorSpec:
		return &CustomizedImage_FieldTerminalPathArrayOfValues{CustomizedImage_FieldTerminalPath: *fp, values: values.([]*CustomizedImage_Spec)}
	case CustomizedImage_FieldPathSelectorStatus:
		return &CustomizedImage_FieldTerminalPathArrayOfValues{CustomizedImage_FieldTerminalPath: *fp, values: values.([]*CustomizedImage_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fp.selector))
	}
	return fpaov
}

func (fp *CustomizedImage_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CustomizedImage_FieldTerminalPath) WithIArrayItemValue(value interface{}) CustomizedImage_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fp.selector))
	}
}

func (fp *CustomizedImage_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CustomizedImage_FieldSubPath struct {
	selector CustomizedImage_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CustomizedImage_FieldPath = (*CustomizedImage_FieldSubPath)(nil)

func (fps *CustomizedImage_FieldSubPath) Selector() CustomizedImage_FieldPathSelector {
	return fps.selector
}
func (fps *CustomizedImage_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *CustomizedImage_FieldSubPath) AsSpecSubPath() (CustomizedImageSpec_FieldPath, bool) {
	res, ok := fps.subPath.(CustomizedImageSpec_FieldPath)
	return res, ok
}
func (fps *CustomizedImage_FieldSubPath) AsStatusSubPath() (CustomizedImageStatus_FieldPath, bool) {
	res, ok := fps.subPath.(CustomizedImageStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CustomizedImage_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CustomizedImage_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CustomizedImage
func (fps *CustomizedImage_FieldSubPath) Get(source *CustomizedImage) (values []interface{}) {
	switch fps.selector {
	case CustomizedImage_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case CustomizedImage_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case CustomizedImage_FieldPathSelectorStatus:
		values = append(values, fps.subPath.GetRaw(source.GetStatus())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fps.selector))
	}
	return
}

func (fps *CustomizedImage_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CustomizedImage))
}

// GetSingle returns value of selected field from source CustomizedImage
func (fps *CustomizedImage_FieldSubPath) GetSingle(source *CustomizedImage) (interface{}, bool) {
	switch fps.selector {
	case CustomizedImage_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case CustomizedImage_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case CustomizedImage_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fps.selector))
	}
}

func (fps *CustomizedImage_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CustomizedImage))
}

// GetDefault returns a default value of the field type
func (fps *CustomizedImage_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CustomizedImage_FieldSubPath) ClearValue(item *CustomizedImage) {
	if item != nil {
		switch fps.selector {
		case CustomizedImage_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case CustomizedImage_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case CustomizedImage_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fps.selector))
		}
	}
}

func (fps *CustomizedImage_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CustomizedImage))
}

// IsLeaf - whether field path is holds simple value
func (fps *CustomizedImage_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CustomizedImage_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CustomizedImage_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CustomizedImage_FieldSubPath) WithIValue(value interface{}) CustomizedImage_FieldPathValue {
	return &CustomizedImage_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CustomizedImage_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CustomizedImage_FieldSubPath) WithIArrayOfValues(values interface{}) CustomizedImage_FieldPathArrayOfValues {
	return &CustomizedImage_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CustomizedImage_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CustomizedImage_FieldSubPath) WithIArrayItemValue(value interface{}) CustomizedImage_FieldPathArrayItemValue {
	return &CustomizedImage_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CustomizedImage_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CustomizedImage_FieldPathValue allows storing values for CustomizedImage fields according to their type
type CustomizedImage_FieldPathValue interface {
	CustomizedImage_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CustomizedImage)
	CompareWith(*CustomizedImage) (cmp int, comparable bool)
}

func ParseCustomizedImage_FieldPathValue(pathStr, valueStr string) (CustomizedImage_FieldPathValue, error) {
	fp, err := ParseCustomizedImage_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CustomizedImage field path value from %s: %v", valueStr, err)
	}
	return fpv.(CustomizedImage_FieldPathValue), nil
}

func MustParseCustomizedImage_FieldPathValue(pathStr, valueStr string) CustomizedImage_FieldPathValue {
	fpv, err := ParseCustomizedImage_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CustomizedImage_FieldTerminalPathValue struct {
	CustomizedImage_FieldTerminalPath
	value interface{}
}

var _ CustomizedImage_FieldPathValue = (*CustomizedImage_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CustomizedImage' as interface{}
func (fpv *CustomizedImage_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CustomizedImage_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *CustomizedImage_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *CustomizedImage_FieldTerminalPathValue) AsSpecValue() (*CustomizedImage_Spec, bool) {
	res, ok := fpv.value.(*CustomizedImage_Spec)
	return res, ok
}
func (fpv *CustomizedImage_FieldTerminalPathValue) AsStatusValue() (*CustomizedImage_Status, bool) {
	res, ok := fpv.value.(*CustomizedImage_Status)
	return res, ok
}

// SetTo stores value for selected field for object CustomizedImage
func (fpv *CustomizedImage_FieldTerminalPathValue) SetTo(target **CustomizedImage) {
	if *target == nil {
		*target = new(CustomizedImage)
	}
	switch fpv.selector {
	case CustomizedImage_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case CustomizedImage_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case CustomizedImage_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*CustomizedImage_Spec)
	case CustomizedImage_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*CustomizedImage_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fpv.selector))
	}
}

func (fpv *CustomizedImage_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CustomizedImage)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CustomizedImage_FieldTerminalPathValue' with the value under path in 'CustomizedImage'.
func (fpv *CustomizedImage_FieldTerminalPathValue) CompareWith(source *CustomizedImage) (int, bool) {
	switch fpv.selector {
	case CustomizedImage_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImage_FieldPathSelectorMetadata:
		return 0, false
	case CustomizedImage_FieldPathSelectorSpec:
		return 0, false
	case CustomizedImage_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fpv.selector))
	}
}

func (fpv *CustomizedImage_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CustomizedImage))
}

type CustomizedImage_FieldSubPathValue struct {
	CustomizedImage_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CustomizedImage_FieldPathValue = (*CustomizedImage_FieldSubPathValue)(nil)

func (fpvs *CustomizedImage_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *CustomizedImage_FieldSubPathValue) AsSpecPathValue() (CustomizedImageSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(CustomizedImageSpec_FieldPathValue)
	return res, ok
}
func (fpvs *CustomizedImage_FieldSubPathValue) AsStatusPathValue() (CustomizedImageStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(CustomizedImageStatus_FieldPathValue)
	return res, ok
}

func (fpvs *CustomizedImage_FieldSubPathValue) SetTo(target **CustomizedImage) {
	if *target == nil {
		*target = new(CustomizedImage)
	}
	switch fpvs.Selector() {
	case CustomizedImage_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case CustomizedImage_FieldPathSelectorSpec:
		fpvs.subPathValue.(CustomizedImageSpec_FieldPathValue).SetTo(&(*target).Spec)
	case CustomizedImage_FieldPathSelectorStatus:
		fpvs.subPathValue.(CustomizedImageStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fpvs.Selector()))
	}
}

func (fpvs *CustomizedImage_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CustomizedImage)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CustomizedImage_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CustomizedImage_FieldSubPathValue) CompareWith(source *CustomizedImage) (int, bool) {
	switch fpvs.Selector() {
	case CustomizedImage_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case CustomizedImage_FieldPathSelectorSpec:
		return fpvs.subPathValue.(CustomizedImageSpec_FieldPathValue).CompareWith(source.GetSpec())
	case CustomizedImage_FieldPathSelectorStatus:
		return fpvs.subPathValue.(CustomizedImageStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fpvs.Selector()))
	}
}

func (fpvs *CustomizedImage_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CustomizedImage))
}

// CustomizedImage_FieldPathArrayItemValue allows storing single item in Path-specific values for CustomizedImage according to their type
// Present only for array (repeated) types.
type CustomizedImage_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CustomizedImage_FieldPath
	ContainsValue(*CustomizedImage) bool
}

// ParseCustomizedImage_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCustomizedImage_FieldPathArrayItemValue(pathStr, valueStr string) (CustomizedImage_FieldPathArrayItemValue, error) {
	fp, err := ParseCustomizedImage_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CustomizedImage field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CustomizedImage_FieldPathArrayItemValue), nil
}

func MustParseCustomizedImage_FieldPathArrayItemValue(pathStr, valueStr string) CustomizedImage_FieldPathArrayItemValue {
	fpaiv, err := ParseCustomizedImage_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CustomizedImage_FieldTerminalPathArrayItemValue struct {
	CustomizedImage_FieldTerminalPath
	value interface{}
}

var _ CustomizedImage_FieldPathArrayItemValue = (*CustomizedImage_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CustomizedImage as interface{}
func (fpaiv *CustomizedImage_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CustomizedImage_FieldTerminalPathArrayItemValue) GetSingle(source *CustomizedImage) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CustomizedImage_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CustomizedImage))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CustomizedImage'
func (fpaiv *CustomizedImage_FieldTerminalPathArrayItemValue) ContainsValue(source *CustomizedImage) bool {
	slice := fpaiv.CustomizedImage_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CustomizedImage_FieldSubPathArrayItemValue struct {
	CustomizedImage_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CustomizedImage_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CustomizedImage_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *CustomizedImage_FieldSubPathArrayItemValue) AsSpecPathItemValue() (CustomizedImageSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(CustomizedImageSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *CustomizedImage_FieldSubPathArrayItemValue) AsStatusPathItemValue() (CustomizedImageStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(CustomizedImageStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CustomizedImage'
func (fpaivs *CustomizedImage_FieldSubPathArrayItemValue) ContainsValue(source *CustomizedImage) bool {
	switch fpaivs.Selector() {
	case CustomizedImage_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case CustomizedImage_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(CustomizedImageSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case CustomizedImage_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(CustomizedImageStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage: %d", fpaivs.Selector()))
	}
}

// CustomizedImage_FieldPathArrayOfValues allows storing slice of values for CustomizedImage fields according to their type
type CustomizedImage_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CustomizedImage_FieldPath
}

func ParseCustomizedImage_FieldPathArrayOfValues(pathStr, valuesStr string) (CustomizedImage_FieldPathArrayOfValues, error) {
	fp, err := ParseCustomizedImage_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CustomizedImage field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CustomizedImage_FieldPathArrayOfValues), nil
}

func MustParseCustomizedImage_FieldPathArrayOfValues(pathStr, valuesStr string) CustomizedImage_FieldPathArrayOfValues {
	fpaov, err := ParseCustomizedImage_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CustomizedImage_FieldTerminalPathArrayOfValues struct {
	CustomizedImage_FieldTerminalPath
	values interface{}
}

var _ CustomizedImage_FieldPathArrayOfValues = (*CustomizedImage_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CustomizedImage_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CustomizedImage_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case CustomizedImage_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case CustomizedImage_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*CustomizedImage_Spec) {
			values = append(values, v)
		}
	case CustomizedImage_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*CustomizedImage_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CustomizedImage_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *CustomizedImage_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *CustomizedImage_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*CustomizedImage_Spec, bool) {
	res, ok := fpaov.values.([]*CustomizedImage_Spec)
	return res, ok
}
func (fpaov *CustomizedImage_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*CustomizedImage_Status, bool) {
	res, ok := fpaov.values.([]*CustomizedImage_Status)
	return res, ok
}

type CustomizedImage_FieldSubPathArrayOfValues struct {
	CustomizedImage_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CustomizedImage_FieldPathArrayOfValues = (*CustomizedImage_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CustomizedImage_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CustomizedImage_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *CustomizedImage_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (CustomizedImageSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(CustomizedImageSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *CustomizedImage_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (CustomizedImageStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(CustomizedImageStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CustomizedImageSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() CustomizedImageSpec_FieldPathSelector
	Get(source *CustomizedImage_Spec) []interface{}
	GetSingle(source *CustomizedImage_Spec) (interface{}, bool)
	ClearValue(item *CustomizedImage_Spec)

	// Those methods build corresponding CustomizedImageSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CustomizedImageSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) CustomizedImageSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CustomizedImageSpec_FieldPathArrayItemValue
}

type CustomizedImageSpec_FieldPathSelector int32

const (
	CustomizedImageSpec_FieldPathSelectorVersion              CustomizedImageSpec_FieldPathSelector = 0
	CustomizedImageSpec_FieldPathSelectorDeviceType           CustomizedImageSpec_FieldPathSelector = 1
	CustomizedImageSpec_FieldPathSelectorProvisioningPolicy   CustomizedImageSpec_FieldPathSelector = 2
	CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator CustomizedImageSpec_FieldPathSelector = 3
	CustomizedImageSpec_FieldPathSelectorPassword             CustomizedImageSpec_FieldPathSelector = 4
	CustomizedImageSpec_FieldPathSelectorEncryption           CustomizedImageSpec_FieldPathSelector = 5
	CustomizedImageSpec_FieldPathSelectorEncryptionPassword   CustomizedImageSpec_FieldPathSelector = 6
	CustomizedImageSpec_FieldPathSelectorDiskMapping          CustomizedImageSpec_FieldPathSelector = 7
	CustomizedImageSpec_FieldPathSelectorNetworkAgent         CustomizedImageSpec_FieldPathSelector = 8
	CustomizedImageSpec_FieldPathSelectorNtp                  CustomizedImageSpec_FieldPathSelector = 9
	CustomizedImageSpec_FieldPathSelectorHttpProxy            CustomizedImageSpec_FieldPathSelector = 10
	CustomizedImageSpec_FieldPathSelectorHttpsProxy           CustomizedImageSpec_FieldPathSelector = 11
	CustomizedImageSpec_FieldPathSelectorNoProxy              CustomizedImageSpec_FieldPathSelector = 12
)

func (s CustomizedImageSpec_FieldPathSelector) String() string {
	switch s {
	case CustomizedImageSpec_FieldPathSelectorVersion:
		return "version"
	case CustomizedImageSpec_FieldPathSelectorDeviceType:
		return "device_type"
	case CustomizedImageSpec_FieldPathSelectorProvisioningPolicy:
		return "provisioning_policy"
	case CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator:
		return "install_ai_accelerator"
	case CustomizedImageSpec_FieldPathSelectorPassword:
		return "password"
	case CustomizedImageSpec_FieldPathSelectorEncryption:
		return "encryption"
	case CustomizedImageSpec_FieldPathSelectorEncryptionPassword:
		return "encryption_password"
	case CustomizedImageSpec_FieldPathSelectorDiskMapping:
		return "disk_mapping"
	case CustomizedImageSpec_FieldPathSelectorNetworkAgent:
		return "network_agent"
	case CustomizedImageSpec_FieldPathSelectorNtp:
		return "ntp"
	case CustomizedImageSpec_FieldPathSelectorHttpProxy:
		return "http_proxy"
	case CustomizedImageSpec_FieldPathSelectorHttpsProxy:
		return "https_proxy"
	case CustomizedImageSpec_FieldPathSelectorNoProxy:
		return "no_proxy"
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Spec: %d", s))
	}
}

func BuildCustomizedImageSpec_FieldPath(fp gotenobject.RawFieldPath) (CustomizedImageSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CustomizedImage_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "version":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorVersion}, nil
		case "device_type", "deviceType", "device-type":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorDeviceType}, nil
		case "provisioning_policy", "provisioningPolicy", "provisioning-policy":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorProvisioningPolicy}, nil
		case "install_ai_accelerator", "installAiAccelerator", "install-ai-accelerator":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator}, nil
		case "password":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorPassword}, nil
		case "encryption":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorEncryption}, nil
		case "encryption_password", "encryptionPassword", "encryption-password":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorEncryptionPassword}, nil
		case "disk_mapping", "diskMapping", "disk-mapping":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorDiskMapping}, nil
		case "network_agent", "networkAgent", "network-agent":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorNetworkAgent}, nil
		case "ntp":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorNtp}, nil
		case "http_proxy", "httpProxy", "http-proxy":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorHttpProxy}, nil
		case "https_proxy", "httpsProxy", "https-proxy":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorHttpsProxy}, nil
		case "no_proxy", "noProxy", "no-proxy":
			return &CustomizedImageSpec_FieldTerminalPath{selector: CustomizedImageSpec_FieldPathSelectorNoProxy}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CustomizedImage_Spec", fp)
}

func ParseCustomizedImageSpec_FieldPath(rawField string) (CustomizedImageSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCustomizedImageSpec_FieldPath(fp)
}

func MustParseCustomizedImageSpec_FieldPath(rawField string) CustomizedImageSpec_FieldPath {
	fp, err := ParseCustomizedImageSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CustomizedImageSpec_FieldTerminalPath struct {
	selector CustomizedImageSpec_FieldPathSelector
}

var _ CustomizedImageSpec_FieldPath = (*CustomizedImageSpec_FieldTerminalPath)(nil)

func (fp *CustomizedImageSpec_FieldTerminalPath) Selector() CustomizedImageSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CustomizedImageSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CustomizedImageSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CustomizedImage_Spec
func (fp *CustomizedImageSpec_FieldTerminalPath) Get(source *CustomizedImage_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CustomizedImageSpec_FieldPathSelectorVersion:
			values = append(values, source.Version)
		case CustomizedImageSpec_FieldPathSelectorDeviceType:
			values = append(values, source.DeviceType)
		case CustomizedImageSpec_FieldPathSelectorProvisioningPolicy:
			values = append(values, source.ProvisioningPolicy)
		case CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator:
			values = append(values, source.InstallAiAccelerator)
		case CustomizedImageSpec_FieldPathSelectorPassword:
			values = append(values, source.Password)
		case CustomizedImageSpec_FieldPathSelectorEncryption:
			values = append(values, source.Encryption)
		case CustomizedImageSpec_FieldPathSelectorEncryptionPassword:
			values = append(values, source.EncryptionPassword)
		case CustomizedImageSpec_FieldPathSelectorDiskMapping:
			values = append(values, source.DiskMapping)
		case CustomizedImageSpec_FieldPathSelectorNetworkAgent:
			values = append(values, source.NetworkAgent)
		case CustomizedImageSpec_FieldPathSelectorNtp:
			values = append(values, source.Ntp)
		case CustomizedImageSpec_FieldPathSelectorHttpProxy:
			values = append(values, source.HttpProxy)
		case CustomizedImageSpec_FieldPathSelectorHttpsProxy:
			values = append(values, source.HttpsProxy)
		case CustomizedImageSpec_FieldPathSelectorNoProxy:
			values = append(values, source.NoProxy)
		default:
			panic(fmt.Sprintf("Invalid selector for CustomizedImage_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *CustomizedImageSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CustomizedImage_Spec))
}

// GetSingle returns value pointed by specific field of from source CustomizedImage_Spec
func (fp *CustomizedImageSpec_FieldTerminalPath) GetSingle(source *CustomizedImage_Spec) (interface{}, bool) {
	switch fp.selector {
	case CustomizedImageSpec_FieldPathSelectorVersion:
		return source.GetVersion(), source != nil
	case CustomizedImageSpec_FieldPathSelectorDeviceType:
		return source.GetDeviceType(), source != nil
	case CustomizedImageSpec_FieldPathSelectorProvisioningPolicy:
		return source.GetProvisioningPolicy(), source != nil
	case CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator:
		return source.GetInstallAiAccelerator(), source != nil
	case CustomizedImageSpec_FieldPathSelectorPassword:
		return source.GetPassword(), source != nil
	case CustomizedImageSpec_FieldPathSelectorEncryption:
		return source.GetEncryption(), source != nil
	case CustomizedImageSpec_FieldPathSelectorEncryptionPassword:
		return source.GetEncryptionPassword(), source != nil
	case CustomizedImageSpec_FieldPathSelectorDiskMapping:
		return source.GetDiskMapping(), source != nil
	case CustomizedImageSpec_FieldPathSelectorNetworkAgent:
		return source.GetNetworkAgent(), source != nil
	case CustomizedImageSpec_FieldPathSelectorNtp:
		return source.GetNtp(), source != nil
	case CustomizedImageSpec_FieldPathSelectorHttpProxy:
		return source.GetHttpProxy(), source != nil
	case CustomizedImageSpec_FieldPathSelectorHttpsProxy:
		return source.GetHttpsProxy(), source != nil
	case CustomizedImageSpec_FieldPathSelectorNoProxy:
		return source.GetNoProxy(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Spec: %d", fp.selector))
	}
}

func (fp *CustomizedImageSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CustomizedImage_Spec))
}

// GetDefault returns a default value of the field type
func (fp *CustomizedImageSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CustomizedImageSpec_FieldPathSelectorVersion:
		return ""
	case CustomizedImageSpec_FieldPathSelectorDeviceType:
		return ""
	case CustomizedImageSpec_FieldPathSelectorProvisioningPolicy:
		return ""
	case CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator:
		return false
	case CustomizedImageSpec_FieldPathSelectorPassword:
		return ""
	case CustomizedImageSpec_FieldPathSelectorEncryption:
		return false
	case CustomizedImageSpec_FieldPathSelectorEncryptionPassword:
		return ""
	case CustomizedImageSpec_FieldPathSelectorDiskMapping:
		return ""
	case CustomizedImageSpec_FieldPathSelectorNetworkAgent:
		return ""
	case CustomizedImageSpec_FieldPathSelectorNtp:
		return ""
	case CustomizedImageSpec_FieldPathSelectorHttpProxy:
		return ""
	case CustomizedImageSpec_FieldPathSelectorHttpsProxy:
		return ""
	case CustomizedImageSpec_FieldPathSelectorNoProxy:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Spec: %d", fp.selector))
	}
}

func (fp *CustomizedImageSpec_FieldTerminalPath) ClearValue(item *CustomizedImage_Spec) {
	if item != nil {
		switch fp.selector {
		case CustomizedImageSpec_FieldPathSelectorVersion:
			item.Version = ""
		case CustomizedImageSpec_FieldPathSelectorDeviceType:
			item.DeviceType = ""
		case CustomizedImageSpec_FieldPathSelectorProvisioningPolicy:
			item.ProvisioningPolicy = ""
		case CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator:
			item.InstallAiAccelerator = false
		case CustomizedImageSpec_FieldPathSelectorPassword:
			item.Password = ""
		case CustomizedImageSpec_FieldPathSelectorEncryption:
			item.Encryption = false
		case CustomizedImageSpec_FieldPathSelectorEncryptionPassword:
			item.EncryptionPassword = ""
		case CustomizedImageSpec_FieldPathSelectorDiskMapping:
			item.DiskMapping = ""
		case CustomizedImageSpec_FieldPathSelectorNetworkAgent:
			item.NetworkAgent = ""
		case CustomizedImageSpec_FieldPathSelectorNtp:
			item.Ntp = ""
		case CustomizedImageSpec_FieldPathSelectorHttpProxy:
			item.HttpProxy = ""
		case CustomizedImageSpec_FieldPathSelectorHttpsProxy:
			item.HttpsProxy = ""
		case CustomizedImageSpec_FieldPathSelectorNoProxy:
			item.NoProxy = ""
		default:
			panic(fmt.Sprintf("Invalid selector for CustomizedImage_Spec: %d", fp.selector))
		}
	}
}

func (fp *CustomizedImageSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CustomizedImage_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *CustomizedImageSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CustomizedImageSpec_FieldPathSelectorVersion ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorDeviceType ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorProvisioningPolicy ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorPassword ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorEncryption ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorEncryptionPassword ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorDiskMapping ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorNetworkAgent ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorNtp ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorHttpProxy ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorHttpsProxy ||
		fp.selector == CustomizedImageSpec_FieldPathSelectorNoProxy
}

func (fp *CustomizedImageSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CustomizedImageSpec_FieldTerminalPath) WithIValue(value interface{}) CustomizedImageSpec_FieldPathValue {
	switch fp.selector {
	case CustomizedImageSpec_FieldPathSelectorVersion:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(string)}
	case CustomizedImageSpec_FieldPathSelectorDeviceType:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(string)}
	case CustomizedImageSpec_FieldPathSelectorProvisioningPolicy:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(string)}
	case CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(bool)}
	case CustomizedImageSpec_FieldPathSelectorPassword:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(string)}
	case CustomizedImageSpec_FieldPathSelectorEncryption:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(bool)}
	case CustomizedImageSpec_FieldPathSelectorEncryptionPassword:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(string)}
	case CustomizedImageSpec_FieldPathSelectorDiskMapping:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(string)}
	case CustomizedImageSpec_FieldPathSelectorNetworkAgent:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(string)}
	case CustomizedImageSpec_FieldPathSelectorNtp:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(string)}
	case CustomizedImageSpec_FieldPathSelectorHttpProxy:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(string)}
	case CustomizedImageSpec_FieldPathSelectorHttpsProxy:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(string)}
	case CustomizedImageSpec_FieldPathSelectorNoProxy:
		return &CustomizedImageSpec_FieldTerminalPathValue{CustomizedImageSpec_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Spec: %d", fp.selector))
	}
}

func (fp *CustomizedImageSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CustomizedImageSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) CustomizedImageSpec_FieldPathArrayOfValues {
	fpaov := &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case CustomizedImageSpec_FieldPathSelectorVersion:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case CustomizedImageSpec_FieldPathSelectorDeviceType:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case CustomizedImageSpec_FieldPathSelectorProvisioningPolicy:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case CustomizedImageSpec_FieldPathSelectorPassword:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case CustomizedImageSpec_FieldPathSelectorEncryption:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case CustomizedImageSpec_FieldPathSelectorEncryptionPassword:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case CustomizedImageSpec_FieldPathSelectorDiskMapping:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case CustomizedImageSpec_FieldPathSelectorNetworkAgent:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case CustomizedImageSpec_FieldPathSelectorNtp:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case CustomizedImageSpec_FieldPathSelectorHttpProxy:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case CustomizedImageSpec_FieldPathSelectorHttpsProxy:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case CustomizedImageSpec_FieldPathSelectorNoProxy:
		return &CustomizedImageSpec_FieldTerminalPathArrayOfValues{CustomizedImageSpec_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *CustomizedImageSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CustomizedImageSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) CustomizedImageSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Spec: %d", fp.selector))
	}
}

func (fp *CustomizedImageSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// CustomizedImageSpec_FieldPathValue allows storing values for Spec fields according to their type
type CustomizedImageSpec_FieldPathValue interface {
	CustomizedImageSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CustomizedImage_Spec)
	CompareWith(*CustomizedImage_Spec) (cmp int, comparable bool)
}

func ParseCustomizedImageSpec_FieldPathValue(pathStr, valueStr string) (CustomizedImageSpec_FieldPathValue, error) {
	fp, err := ParseCustomizedImageSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(CustomizedImageSpec_FieldPathValue), nil
}

func MustParseCustomizedImageSpec_FieldPathValue(pathStr, valueStr string) CustomizedImageSpec_FieldPathValue {
	fpv, err := ParseCustomizedImageSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CustomizedImageSpec_FieldTerminalPathValue struct {
	CustomizedImageSpec_FieldTerminalPath
	value interface{}
}

var _ CustomizedImageSpec_FieldPathValue = (*CustomizedImageSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsDeviceTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsProvisioningPolicyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsInstallAiAcceleratorValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsPasswordValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsEncryptionValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsEncryptionPasswordValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsDiskMappingValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsNetworkAgentValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsNtpValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsHttpProxyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsHttpsProxyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) AsNoProxyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) SetTo(target **CustomizedImage_Spec) {
	if *target == nil {
		*target = new(CustomizedImage_Spec)
	}
	switch fpv.selector {
	case CustomizedImageSpec_FieldPathSelectorVersion:
		(*target).Version = fpv.value.(string)
	case CustomizedImageSpec_FieldPathSelectorDeviceType:
		(*target).DeviceType = fpv.value.(string)
	case CustomizedImageSpec_FieldPathSelectorProvisioningPolicy:
		(*target).ProvisioningPolicy = fpv.value.(string)
	case CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator:
		(*target).InstallAiAccelerator = fpv.value.(bool)
	case CustomizedImageSpec_FieldPathSelectorPassword:
		(*target).Password = fpv.value.(string)
	case CustomizedImageSpec_FieldPathSelectorEncryption:
		(*target).Encryption = fpv.value.(bool)
	case CustomizedImageSpec_FieldPathSelectorEncryptionPassword:
		(*target).EncryptionPassword = fpv.value.(string)
	case CustomizedImageSpec_FieldPathSelectorDiskMapping:
		(*target).DiskMapping = fpv.value.(string)
	case CustomizedImageSpec_FieldPathSelectorNetworkAgent:
		(*target).NetworkAgent = fpv.value.(string)
	case CustomizedImageSpec_FieldPathSelectorNtp:
		(*target).Ntp = fpv.value.(string)
	case CustomizedImageSpec_FieldPathSelectorHttpProxy:
		(*target).HttpProxy = fpv.value.(string)
	case CustomizedImageSpec_FieldPathSelectorHttpsProxy:
		(*target).HttpsProxy = fpv.value.(string)
	case CustomizedImageSpec_FieldPathSelectorNoProxy:
		(*target).NoProxy = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Spec: %d", fpv.selector))
	}
}

func (fpv *CustomizedImageSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CustomizedImage_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CustomizedImageSpec_FieldTerminalPathValue' with the value under path in 'CustomizedImage_Spec'.
func (fpv *CustomizedImageSpec_FieldTerminalPathValue) CompareWith(source *CustomizedImage_Spec) (int, bool) {
	switch fpv.selector {
	case CustomizedImageSpec_FieldPathSelectorVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorDeviceType:
		leftValue := fpv.value.(string)
		rightValue := source.GetDeviceType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorProvisioningPolicy:
		leftValue := fpv.value.(string)
		rightValue := source.GetProvisioningPolicy()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator:
		leftValue := fpv.value.(bool)
		rightValue := source.GetInstallAiAccelerator()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorPassword:
		leftValue := fpv.value.(string)
		rightValue := source.GetPassword()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorEncryption:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEncryption()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorEncryptionPassword:
		leftValue := fpv.value.(string)
		rightValue := source.GetEncryptionPassword()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorDiskMapping:
		leftValue := fpv.value.(string)
		rightValue := source.GetDiskMapping()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorNetworkAgent:
		leftValue := fpv.value.(string)
		rightValue := source.GetNetworkAgent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorNtp:
		leftValue := fpv.value.(string)
		rightValue := source.GetNtp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorHttpProxy:
		leftValue := fpv.value.(string)
		rightValue := source.GetHttpProxy()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorHttpsProxy:
		leftValue := fpv.value.(string)
		rightValue := source.GetHttpsProxy()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageSpec_FieldPathSelectorNoProxy:
		leftValue := fpv.value.(string)
		rightValue := source.GetNoProxy()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Spec: %d", fpv.selector))
	}
}

func (fpv *CustomizedImageSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CustomizedImage_Spec))
}

// CustomizedImageSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type CustomizedImageSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CustomizedImageSpec_FieldPath
	ContainsValue(*CustomizedImage_Spec) bool
}

// ParseCustomizedImageSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCustomizedImageSpec_FieldPathArrayItemValue(pathStr, valueStr string) (CustomizedImageSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseCustomizedImageSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CustomizedImageSpec_FieldPathArrayItemValue), nil
}

func MustParseCustomizedImageSpec_FieldPathArrayItemValue(pathStr, valueStr string) CustomizedImageSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseCustomizedImageSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CustomizedImageSpec_FieldTerminalPathArrayItemValue struct {
	CustomizedImageSpec_FieldTerminalPath
	value interface{}
}

var _ CustomizedImageSpec_FieldPathArrayItemValue = (*CustomizedImageSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CustomizedImage_Spec as interface{}
func (fpaiv *CustomizedImageSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CustomizedImageSpec_FieldTerminalPathArrayItemValue) GetSingle(source *CustomizedImage_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CustomizedImageSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CustomizedImage_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *CustomizedImageSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *CustomizedImage_Spec) bool {
	slice := fpaiv.CustomizedImageSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// CustomizedImageSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type CustomizedImageSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CustomizedImageSpec_FieldPath
}

func ParseCustomizedImageSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (CustomizedImageSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseCustomizedImageSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CustomizedImageSpec_FieldPathArrayOfValues), nil
}

func MustParseCustomizedImageSpec_FieldPathArrayOfValues(pathStr, valuesStr string) CustomizedImageSpec_FieldPathArrayOfValues {
	fpaov, err := ParseCustomizedImageSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CustomizedImageSpec_FieldTerminalPathArrayOfValues struct {
	CustomizedImageSpec_FieldTerminalPath
	values interface{}
}

var _ CustomizedImageSpec_FieldPathArrayOfValues = (*CustomizedImageSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CustomizedImageSpec_FieldPathSelectorVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorDeviceType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorProvisioningPolicy:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorInstallAiAccelerator:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorPassword:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorEncryption:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorEncryptionPassword:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorDiskMapping:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorNetworkAgent:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorNtp:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorHttpProxy:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorHttpsProxy:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CustomizedImageSpec_FieldPathSelectorNoProxy:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsDeviceTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsProvisioningPolicyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsInstallAiAcceleratorArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsPasswordArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsEncryptionArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsEncryptionPasswordArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsDiskMappingArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsNetworkAgentArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsNtpArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsHttpProxyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsHttpsProxyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CustomizedImageSpec_FieldTerminalPathArrayOfValues) AsNoProxyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CustomizedImageStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() CustomizedImageStatus_FieldPathSelector
	Get(source *CustomizedImage_Status) []interface{}
	GetSingle(source *CustomizedImage_Status) (interface{}, bool)
	ClearValue(item *CustomizedImage_Status)

	// Those methods build corresponding CustomizedImageStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CustomizedImageStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) CustomizedImageStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CustomizedImageStatus_FieldPathArrayItemValue
}

type CustomizedImageStatus_FieldPathSelector int32

const (
	CustomizedImageStatus_FieldPathSelectorState CustomizedImageStatus_FieldPathSelector = 0
	CustomizedImageStatus_FieldPathSelectorLog   CustomizedImageStatus_FieldPathSelector = 1
	CustomizedImageStatus_FieldPathSelectorFile  CustomizedImageStatus_FieldPathSelector = 2
)

func (s CustomizedImageStatus_FieldPathSelector) String() string {
	switch s {
	case CustomizedImageStatus_FieldPathSelectorState:
		return "state"
	case CustomizedImageStatus_FieldPathSelectorLog:
		return "log"
	case CustomizedImageStatus_FieldPathSelectorFile:
		return "file"
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Status: %d", s))
	}
}

func BuildCustomizedImageStatus_FieldPath(fp gotenobject.RawFieldPath) (CustomizedImageStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CustomizedImage_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "state":
			return &CustomizedImageStatus_FieldTerminalPath{selector: CustomizedImageStatus_FieldPathSelectorState}, nil
		case "log":
			return &CustomizedImageStatus_FieldTerminalPath{selector: CustomizedImageStatus_FieldPathSelectorLog}, nil
		case "file":
			return &CustomizedImageStatus_FieldTerminalPath{selector: CustomizedImageStatus_FieldPathSelectorFile}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CustomizedImage_Status", fp)
}

func ParseCustomizedImageStatus_FieldPath(rawField string) (CustomizedImageStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCustomizedImageStatus_FieldPath(fp)
}

func MustParseCustomizedImageStatus_FieldPath(rawField string) CustomizedImageStatus_FieldPath {
	fp, err := ParseCustomizedImageStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CustomizedImageStatus_FieldTerminalPath struct {
	selector CustomizedImageStatus_FieldPathSelector
}

var _ CustomizedImageStatus_FieldPath = (*CustomizedImageStatus_FieldTerminalPath)(nil)

func (fp *CustomizedImageStatus_FieldTerminalPath) Selector() CustomizedImageStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CustomizedImageStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CustomizedImageStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CustomizedImage_Status
func (fp *CustomizedImageStatus_FieldTerminalPath) Get(source *CustomizedImage_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CustomizedImageStatus_FieldPathSelectorState:
			values = append(values, source.State)
		case CustomizedImageStatus_FieldPathSelectorLog:
			values = append(values, source.Log)
		case CustomizedImageStatus_FieldPathSelectorFile:
			values = append(values, source.File)
		default:
			panic(fmt.Sprintf("Invalid selector for CustomizedImage_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *CustomizedImageStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CustomizedImage_Status))
}

// GetSingle returns value pointed by specific field of from source CustomizedImage_Status
func (fp *CustomizedImageStatus_FieldTerminalPath) GetSingle(source *CustomizedImage_Status) (interface{}, bool) {
	switch fp.selector {
	case CustomizedImageStatus_FieldPathSelectorState:
		return source.GetState(), source != nil
	case CustomizedImageStatus_FieldPathSelectorLog:
		return source.GetLog(), source != nil
	case CustomizedImageStatus_FieldPathSelectorFile:
		return source.GetFile(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Status: %d", fp.selector))
	}
}

func (fp *CustomizedImageStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CustomizedImage_Status))
}

// GetDefault returns a default value of the field type
func (fp *CustomizedImageStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CustomizedImageStatus_FieldPathSelectorState:
		return CustomizedImage_Status_STATE_UNSPECIFIED
	case CustomizedImageStatus_FieldPathSelectorLog:
		return ""
	case CustomizedImageStatus_FieldPathSelectorFile:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Status: %d", fp.selector))
	}
}

func (fp *CustomizedImageStatus_FieldTerminalPath) ClearValue(item *CustomizedImage_Status) {
	if item != nil {
		switch fp.selector {
		case CustomizedImageStatus_FieldPathSelectorState:
			item.State = CustomizedImage_Status_STATE_UNSPECIFIED
		case CustomizedImageStatus_FieldPathSelectorLog:
			item.Log = ""
		case CustomizedImageStatus_FieldPathSelectorFile:
			item.File = ""
		default:
			panic(fmt.Sprintf("Invalid selector for CustomizedImage_Status: %d", fp.selector))
		}
	}
}

func (fp *CustomizedImageStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CustomizedImage_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *CustomizedImageStatus_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CustomizedImageStatus_FieldPathSelectorState ||
		fp.selector == CustomizedImageStatus_FieldPathSelectorLog ||
		fp.selector == CustomizedImageStatus_FieldPathSelectorFile
}

func (fp *CustomizedImageStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CustomizedImageStatus_FieldTerminalPath) WithIValue(value interface{}) CustomizedImageStatus_FieldPathValue {
	switch fp.selector {
	case CustomizedImageStatus_FieldPathSelectorState:
		return &CustomizedImageStatus_FieldTerminalPathValue{CustomizedImageStatus_FieldTerminalPath: *fp, value: value.(CustomizedImage_Status_State)}
	case CustomizedImageStatus_FieldPathSelectorLog:
		return &CustomizedImageStatus_FieldTerminalPathValue{CustomizedImageStatus_FieldTerminalPath: *fp, value: value.(string)}
	case CustomizedImageStatus_FieldPathSelectorFile:
		return &CustomizedImageStatus_FieldTerminalPathValue{CustomizedImageStatus_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Status: %d", fp.selector))
	}
}

func (fp *CustomizedImageStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CustomizedImageStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) CustomizedImageStatus_FieldPathArrayOfValues {
	fpaov := &CustomizedImageStatus_FieldTerminalPathArrayOfValues{CustomizedImageStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case CustomizedImageStatus_FieldPathSelectorState:
		return &CustomizedImageStatus_FieldTerminalPathArrayOfValues{CustomizedImageStatus_FieldTerminalPath: *fp, values: values.([]CustomizedImage_Status_State)}
	case CustomizedImageStatus_FieldPathSelectorLog:
		return &CustomizedImageStatus_FieldTerminalPathArrayOfValues{CustomizedImageStatus_FieldTerminalPath: *fp, values: values.([]string)}
	case CustomizedImageStatus_FieldPathSelectorFile:
		return &CustomizedImageStatus_FieldTerminalPathArrayOfValues{CustomizedImageStatus_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *CustomizedImageStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CustomizedImageStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) CustomizedImageStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Status: %d", fp.selector))
	}
}

func (fp *CustomizedImageStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// CustomizedImageStatus_FieldPathValue allows storing values for Status fields according to their type
type CustomizedImageStatus_FieldPathValue interface {
	CustomizedImageStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CustomizedImage_Status)
	CompareWith(*CustomizedImage_Status) (cmp int, comparable bool)
}

func ParseCustomizedImageStatus_FieldPathValue(pathStr, valueStr string) (CustomizedImageStatus_FieldPathValue, error) {
	fp, err := ParseCustomizedImageStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(CustomizedImageStatus_FieldPathValue), nil
}

func MustParseCustomizedImageStatus_FieldPathValue(pathStr, valueStr string) CustomizedImageStatus_FieldPathValue {
	fpv, err := ParseCustomizedImageStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CustomizedImageStatus_FieldTerminalPathValue struct {
	CustomizedImageStatus_FieldTerminalPath
	value interface{}
}

var _ CustomizedImageStatus_FieldPathValue = (*CustomizedImageStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *CustomizedImageStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CustomizedImageStatus_FieldTerminalPathValue) AsStateValue() (CustomizedImage_Status_State, bool) {
	res, ok := fpv.value.(CustomizedImage_Status_State)
	return res, ok
}
func (fpv *CustomizedImageStatus_FieldTerminalPathValue) AsLogValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *CustomizedImageStatus_FieldTerminalPathValue) AsFileValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Status
func (fpv *CustomizedImageStatus_FieldTerminalPathValue) SetTo(target **CustomizedImage_Status) {
	if *target == nil {
		*target = new(CustomizedImage_Status)
	}
	switch fpv.selector {
	case CustomizedImageStatus_FieldPathSelectorState:
		(*target).State = fpv.value.(CustomizedImage_Status_State)
	case CustomizedImageStatus_FieldPathSelectorLog:
		(*target).Log = fpv.value.(string)
	case CustomizedImageStatus_FieldPathSelectorFile:
		(*target).File = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Status: %d", fpv.selector))
	}
}

func (fpv *CustomizedImageStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CustomizedImage_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CustomizedImageStatus_FieldTerminalPathValue' with the value under path in 'CustomizedImage_Status'.
func (fpv *CustomizedImageStatus_FieldTerminalPathValue) CompareWith(source *CustomizedImage_Status) (int, bool) {
	switch fpv.selector {
	case CustomizedImageStatus_FieldPathSelectorState:
		leftValue := fpv.value.(CustomizedImage_Status_State)
		rightValue := source.GetState()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageStatus_FieldPathSelectorLog:
		leftValue := fpv.value.(string)
		rightValue := source.GetLog()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CustomizedImageStatus_FieldPathSelectorFile:
		leftValue := fpv.value.(string)
		rightValue := source.GetFile()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for CustomizedImage_Status: %d", fpv.selector))
	}
}

func (fpv *CustomizedImageStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CustomizedImage_Status))
}

// CustomizedImageStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type CustomizedImageStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CustomizedImageStatus_FieldPath
	ContainsValue(*CustomizedImage_Status) bool
}

// ParseCustomizedImageStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCustomizedImageStatus_FieldPathArrayItemValue(pathStr, valueStr string) (CustomizedImageStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseCustomizedImageStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CustomizedImageStatus_FieldPathArrayItemValue), nil
}

func MustParseCustomizedImageStatus_FieldPathArrayItemValue(pathStr, valueStr string) CustomizedImageStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseCustomizedImageStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CustomizedImageStatus_FieldTerminalPathArrayItemValue struct {
	CustomizedImageStatus_FieldTerminalPath
	value interface{}
}

var _ CustomizedImageStatus_FieldPathArrayItemValue = (*CustomizedImageStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CustomizedImage_Status as interface{}
func (fpaiv *CustomizedImageStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CustomizedImageStatus_FieldTerminalPathArrayItemValue) GetSingle(source *CustomizedImage_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CustomizedImageStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CustomizedImage_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *CustomizedImageStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *CustomizedImage_Status) bool {
	slice := fpaiv.CustomizedImageStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// CustomizedImageStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type CustomizedImageStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CustomizedImageStatus_FieldPath
}

func ParseCustomizedImageStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (CustomizedImageStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseCustomizedImageStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CustomizedImageStatus_FieldPathArrayOfValues), nil
}

func MustParseCustomizedImageStatus_FieldPathArrayOfValues(pathStr, valuesStr string) CustomizedImageStatus_FieldPathArrayOfValues {
	fpaov, err := ParseCustomizedImageStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CustomizedImageStatus_FieldTerminalPathArrayOfValues struct {
	CustomizedImageStatus_FieldTerminalPath
	values interface{}
}

var _ CustomizedImageStatus_FieldPathArrayOfValues = (*CustomizedImageStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CustomizedImageStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CustomizedImageStatus_FieldPathSelectorState:
		for _, v := range fpaov.values.([]CustomizedImage_Status_State) {
			values = append(values, v)
		}
	case CustomizedImageStatus_FieldPathSelectorLog:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case CustomizedImageStatus_FieldPathSelectorFile:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CustomizedImageStatus_FieldTerminalPathArrayOfValues) AsStateArrayOfValues() ([]CustomizedImage_Status_State, bool) {
	res, ok := fpaov.values.([]CustomizedImage_Status_State)
	return res, ok
}
func (fpaov *CustomizedImageStatus_FieldTerminalPathArrayOfValues) AsLogArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *CustomizedImageStatus_FieldTerminalPathArrayOfValues) AsFileArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
