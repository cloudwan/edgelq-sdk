// Code generated by protoc-gen-goten-resource
// Resource: CustomizedImage
// DO NOT EDIT!!!

package customized_image

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &meta.Meta{}
)

type CustomizedImageList []*CustomizedImage

func (l CustomizedImageList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*CustomizedImage))
}

func (l CustomizedImageList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(CustomizedImageList)...)
}

func (l CustomizedImageList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CustomizedImageList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l CustomizedImageList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*CustomizedImage)
}

func (l CustomizedImageList) Length() int {
	return len(l)
}

type CustomizedImageChangeList []*CustomizedImageChange

func (l CustomizedImageChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*CustomizedImageChange))
}

func (l CustomizedImageChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(CustomizedImageChangeList)...)
}

func (l CustomizedImageChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CustomizedImageChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l CustomizedImageChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*CustomizedImageChange)
}

func (l CustomizedImageChangeList) Length() int {
	return len(l)
}

type CustomizedImageNameList []*Name

func (l CustomizedImageNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l CustomizedImageNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(CustomizedImageNameList)...)
}

func (l CustomizedImageNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CustomizedImageNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l CustomizedImageNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l CustomizedImageNameList) Length() int {
	return len(l)
}

type CustomizedImageReferenceList []*Reference

func (l CustomizedImageReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l CustomizedImageReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(CustomizedImageReferenceList)...)
}

func (l CustomizedImageReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CustomizedImageReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l CustomizedImageReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l CustomizedImageReferenceList) Length() int {
	return len(l)
}

type CustomizedImageParentNameList []*ParentName

func (l CustomizedImageParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l CustomizedImageParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(CustomizedImageParentNameList)...)
}

func (l CustomizedImageParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CustomizedImageParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l CustomizedImageParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l CustomizedImageParentNameList) Length() int {
	return len(l)
}

type CustomizedImageParentReferenceList []*ParentReference

func (l CustomizedImageParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l CustomizedImageParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(CustomizedImageParentReferenceList)...)
}

func (l CustomizedImageParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CustomizedImageParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l CustomizedImageParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l CustomizedImageParentReferenceList) Length() int {
	return len(l)
}

type CustomizedImageMap map[Name]*CustomizedImage

func (m CustomizedImageMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m CustomizedImageMap) Set(res gotenresource.Resource) {
	tRes := res.(*CustomizedImage)
	m[*tRes.Name] = tRes
}

func (m CustomizedImageMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m CustomizedImageMap) Length() int {
	return len(m)
}

func (m CustomizedImageMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type CustomizedImageChangeMap map[Name]*CustomizedImageChange

func (m CustomizedImageChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m CustomizedImageChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*CustomizedImageChange)
	m[*tChange.GetCustomizedImageName()] = tChange
}

func (m CustomizedImageChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m CustomizedImageChangeMap) Length() int {
	return len(m)
}

func (m CustomizedImageChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
