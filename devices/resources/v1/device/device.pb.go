// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1/device.proto
// DO NOT EDIT!!!

package device

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	logging_bucket "github.com/cloudwan/edgelq-sdk/logging/resources/v1/bucket"
	monitoring_bucket "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/bucket"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.PCR{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &logging_bucket.Bucket{}
	_ = &monitoring_bucket.Bucket{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = &latlng.LatLng{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MERGE or REPLACE the api netplan_config with the baked in config in the
// device. REPLACE - The desired configuration must be input in full. The
// default config in disk will not be used. MERGE - Replaces level keys such
// as ethernet, modems, wifis etc that are defined in API config. Merge
// makes it easier to add new types of configuration - for example if the
// default configuration does not have wifis, it is easier to just add wifi
// config alone in API and use config mode merge. However, if the goal is to
// add to or replace a specific configuration in a section that already
// exists in the default configuration, then the API config should have the
// entire section and not just the changes for example if the default config
// on disk has eno1, eno2 under ethernet section and the goal is to replace
// the eno2 on disk, then the API configuration should specify both eno1 and
// eno2. This is because the merge mode still replaces whole sections that
// are defined in the API config
type Device_Spec_NetworkConfigMode int32

const (
	Device_Spec_MERGE   Device_Spec_NetworkConfigMode = 0
	Device_Spec_REPLACE Device_Spec_NetworkConfigMode = 1
)

var (
	Device_Spec_NetworkConfigMode_name = map[int32]string{
		0: "MERGE",
		1: "REPLACE",
	}

	Device_Spec_NetworkConfigMode_value = map[string]int32{
		"MERGE":   0,
		"REPLACE": 1,
	}
)

func (x Device_Spec_NetworkConfigMode) Enum() *Device_Spec_NetworkConfigMode {
	p := new(Device_Spec_NetworkConfigMode)
	*p = x
	return p
}

func (x Device_Spec_NetworkConfigMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Device_Spec_NetworkConfigMode) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_device_proto_enumTypes[0].Descriptor()
}

func (Device_Spec_NetworkConfigMode) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_device_proto_enumTypes[0]
}

func (x Device_Spec_NetworkConfigMode) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Device_Spec_NetworkConfigMode.ProtoReflect.Descriptor instead.
func (Device_Spec_NetworkConfigMode) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Device_Status_ConnectionStatus int32

const (
	Device_Status_CONNECTION_STATUS_UNSPECIFIED Device_Status_ConnectionStatus = 0
	Device_Status_CONNECTED                     Device_Status_ConnectionStatus = 1
	Device_Status_DISCONNECTED                  Device_Status_ConnectionStatus = 2
)

var (
	Device_Status_ConnectionStatus_name = map[int32]string{
		0: "CONNECTION_STATUS_UNSPECIFIED",
		1: "CONNECTED",
		2: "DISCONNECTED",
	}

	Device_Status_ConnectionStatus_value = map[string]int32{
		"CONNECTION_STATUS_UNSPECIFIED": 0,
		"CONNECTED":                     1,
		"DISCONNECTED":                  2,
	}
)

func (x Device_Status_ConnectionStatus) Enum() *Device_Status_ConnectionStatus {
	p := new(Device_Status_ConnectionStatus)
	*p = x
	return p
}

func (x Device_Status_ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Device_Status_ConnectionStatus) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_device_proto_enumTypes[1].Descriptor()
}

func (Device_Status_ConnectionStatus) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_device_proto_enumTypes[1]
}

func (x Device_Status_ConnectionStatus) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Device_Status_ConnectionStatus.ProtoReflect.Descriptor instead.
func (Device_Status_ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 0}
}

type Device_Status_NetworkConfigState_NetworkConfigSource int32

const (
	Device_Status_NetworkConfigState_UNKNOWN                                Device_Status_NetworkConfigState_NetworkConfigSource = 0
	Device_Status_NetworkConfigState_DEFAULT_CONFIG                         Device_Status_NetworkConfigState_NetworkConfigSource = 1
	Device_Status_NetworkConfigState_API_CONFIG                             Device_Status_NetworkConfigState_NetworkConfigSource = 2
	Device_Status_NetworkConfigState_MERGED_DEFAULT_AND_API_CONFIG          Device_Status_NetworkConfigState_NetworkConfigSource = 3
	Device_Status_NetworkConfigState_PREVIOUS_MERGED_DEFAULT_AND_API_CONFIG Device_Status_NetworkConfigState_NetworkConfigSource = 4
	Device_Status_NetworkConfigState_PREVIOUS_API_CONFIG                    Device_Status_NetworkConfigState_NetworkConfigSource = 5
)

var (
	Device_Status_NetworkConfigState_NetworkConfigSource_name = map[int32]string{
		0: "UNKNOWN",
		1: "DEFAULT_CONFIG",
		2: "API_CONFIG",
		3: "MERGED_DEFAULT_AND_API_CONFIG",
		4: "PREVIOUS_MERGED_DEFAULT_AND_API_CONFIG",
		5: "PREVIOUS_API_CONFIG",
	}

	Device_Status_NetworkConfigState_NetworkConfigSource_value = map[string]int32{
		"UNKNOWN":                                0,
		"DEFAULT_CONFIG":                         1,
		"API_CONFIG":                             2,
		"MERGED_DEFAULT_AND_API_CONFIG":          3,
		"PREVIOUS_MERGED_DEFAULT_AND_API_CONFIG": 4,
		"PREVIOUS_API_CONFIG":                    5,
	}
)

func (x Device_Status_NetworkConfigState_NetworkConfigSource) Enum() *Device_Status_NetworkConfigState_NetworkConfigSource {
	p := new(Device_Status_NetworkConfigState_NetworkConfigSource)
	*p = x
	return p
}

func (x Device_Status_NetworkConfigState_NetworkConfigSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Device_Status_NetworkConfigState_NetworkConfigSource) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_device_proto_enumTypes[2].Descriptor()
}

func (Device_Status_NetworkConfigState_NetworkConfigSource) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_device_proto_enumTypes[2]
}

func (x Device_Status_NetworkConfigState_NetworkConfigSource) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Device_Status_NetworkConfigState_NetworkConfigSource.ProtoReflect.Descriptor instead.
func (Device_Status_NetworkConfigState_NetworkConfigSource) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

type Device_Status_ProxyConfigStatus_ProxyConfigSource int32

const (
	Device_Status_ProxyConfigStatus_NO_CONFIG      Device_Status_ProxyConfigStatus_ProxyConfigSource = 0
	Device_Status_ProxyConfigStatus_DEFAULT_CONFIG Device_Status_ProxyConfigStatus_ProxyConfigSource = 1
	Device_Status_ProxyConfigStatus_API_CONFIG     Device_Status_ProxyConfigStatus_ProxyConfigSource = 2
)

var (
	Device_Status_ProxyConfigStatus_ProxyConfigSource_name = map[int32]string{
		0: "NO_CONFIG",
		1: "DEFAULT_CONFIG",
		2: "API_CONFIG",
	}

	Device_Status_ProxyConfigStatus_ProxyConfigSource_value = map[string]int32{
		"NO_CONFIG":      0,
		"DEFAULT_CONFIG": 1,
		"API_CONFIG":     2,
	}
)

func (x Device_Status_ProxyConfigStatus_ProxyConfigSource) Enum() *Device_Status_ProxyConfigStatus_ProxyConfigSource {
	p := new(Device_Status_ProxyConfigStatus_ProxyConfigSource)
	*p = x
	return p
}

func (x Device_Status_ProxyConfigStatus_ProxyConfigSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Device_Status_ProxyConfigStatus_ProxyConfigSource) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_device_proto_enumTypes[3].Descriptor()
}

func (Device_Status_ProxyConfigStatus_ProxyConfigSource) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_device_proto_enumTypes[3]
}

func (x Device_Status_ProxyConfigStatus_ProxyConfigSource) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Device_Status_ProxyConfigStatus_ProxyConfigSource.ProtoReflect.Descriptor instead.
func (Device_Status_ProxyConfigStatus_ProxyConfigSource) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 3, 0}
}

// Device Resource
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Device
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// Spec holds the expected state of the Device, meaning configurations.
	Spec *Device_Spec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	// Status of the Device reported from the actual device.
	Status            *Device_Status            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	PublicListingSpec *Device_PublicListingSpec `protobuf:"bytes,5,opt,name=public_listing_spec,json=publicListingSpec,proto3" json:"public_listing_spec,omitempty" firestore:"publicListingSpec"`
	// Display name for the device
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
}

func (m *Device) Reset() {
	*m = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device) ProtoMessage() {}

func (m *Device) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device) GotenMessage() {}

// Deprecated, Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0}
}

func (m *Device) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Device) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Device) GetSpec() *Device_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Device) GetStatus() *Device_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Device) GetPublicListingSpec() *Device_PublicListingSpec {
	if m != nil {
		return m.PublicListingSpec
	}
	return nil
}

func (m *Device) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Device) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device"))
	}
	m.Name = fv
}

func (m *Device) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Device"))
	}
	m.Metadata = fv
}

func (m *Device) SetSpec(fv *Device_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "Device"))
	}
	m.Spec = fv
}

func (m *Device) SetStatus(fv *Device_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Device"))
	}
	m.Status = fv
}

func (m *Device) SetPublicListingSpec(fv *Device_PublicListingSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PublicListingSpec", "Device"))
	}
	m.PublicListingSpec = fv
}

func (m *Device) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Device"))
	}
	m.DisplayName = fv
}

type Device_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The associated service account to the Device.
	// The agents in the device uses a key from this service account
	// when they issue any requests to our endpoints for authoroization and
	// authentication. `ProvisionServiceAccountToDevice` creates a new service
	// account and a key for the Device and asign the account to this fileld. If
	// you change the value of this field, the existing device would lose the
	// access to the resources in our services, that means you can revoke the
	// permissions from the device. You can manually set an empty value to do
	// so, or call `RemoveServiceAccountFromDevice`.
	ServiceAccount *iam_service_account.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty" firestore:"serviceAccount"`
	// Logging bucket associated with device
	LogBucket *logging_bucket.Reference `protobuf:"bytes,14,opt,customtype=Reference,name=log_bucket,json=logBucket,proto3" json:"log_bucket,omitempty" firestore:"logBucket"`
	// Monitoring metrics bucket associated with device
	MetricsBucket *monitoring_bucket.Reference `protobuf:"bytes,15,opt,customtype=Reference,name=metrics_bucket,json=metricsBucket,proto3" json:"metrics_bucket,omitempty" firestore:"metricsBucket"`
	// The expected OS version in string (e.g. 1.0.2).
	// The device will automatically download the OS image and upgrade itself
	// with it. You can stack the OS upgrade progress in the Condition named
	// `OSReady` in Status.Conditions.
	OsVersion            string                        `protobuf:"bytes,2,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty" firestore:"osVersion"`
	NetplanYamlConfig    string                        `protobuf:"bytes,17,opt,name=netplan_yaml_config,json=netplanYamlConfig,proto3" json:"netplan_yaml_config,omitempty" firestore:"netplanYamlConfig"`
	NetplanApiConfigMode Device_Spec_NetworkConfigMode `protobuf:"varint,12,opt,name=netplan_api_config_mode,json=netplanApiConfigMode,proto3,enum=ntt.devices.v1.Device_Spec_NetworkConfigMode" json:"netplan_api_config_mode,omitempty" firestore:"netplanApiConfigMode"`
	// The URL is dynamically constructed once the device is created or updated.
	// The URL will be based on the device hardware information
	// URL format: base_url/dedicated_path/iso_version/architecture/os_type
	OsImageUrl        string                         `protobuf:"bytes,5,opt,name=os_image_url,json=osImageUrl,proto3" json:"os_image_url,omitempty" firestore:"osImageUrl"`
	SshConfig         *Device_Spec_SSHConfig         `protobuf:"bytes,6,opt,name=ssh_config,json=sshConfig,proto3" json:"ssh_config,omitempty" firestore:"sshConfig"`
	AttestationConfig *Device_Spec_AttestationConfig `protobuf:"bytes,7,opt,name=attestation_config,json=attestationConfig,proto3" json:"attestation_config,omitempty" firestore:"attestationConfig"`
	// Disables the daemon on the device for device auto discovery on the
	// network. When it's enabled, avahi-daemon is launched on the device which
	// listens at UDP 5353. This daemon is useful to locate the device that
	// acquires an IP address with DHCP.
	DisableDeviceDiscovery bool                       `protobuf:"varint,8,opt,name=disable_device_discovery,json=disableDeviceDiscovery,proto3" json:"disable_device_discovery,omitempty" firestore:"disableDeviceDiscovery"`
	LoggingConfig          *Device_Spec_LoggingConfig `protobuf:"bytes,9,opt,name=logging_config,json=loggingConfig,proto3" json:"logging_config,omitempty" firestore:"loggingConfig"`
	ProxyConfig            *Device_Spec_ProxyConfig   `protobuf:"bytes,10,opt,name=proxy_config,json=proxyConfig,proto3" json:"proxy_config,omitempty" firestore:"proxyConfig"`
	Location               *Device_Spec_Location      `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty" firestore:"location"`
	UsbGuard               *Device_Spec_USBGuard      `protobuf:"bytes,16,opt,name=usb_guard,json=usbGuard,proto3" json:"usb_guard,omitempty" firestore:"usbGuard"`
}

func (m *Device_Spec) Reset() {
	*m = Device_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec) ProtoMessage() {}

func (m *Device_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec) GotenMessage() {}

// Deprecated, Use Device_Spec.ProtoReflect.Descriptor instead.
func (*Device_Spec) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Device_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec) GetServiceAccount() *iam_service_account.Reference {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func (m *Device_Spec) GetLogBucket() *logging_bucket.Reference {
	if m != nil {
		return m.LogBucket
	}
	return nil
}

func (m *Device_Spec) GetMetricsBucket() *monitoring_bucket.Reference {
	if m != nil {
		return m.MetricsBucket
	}
	return nil
}

func (m *Device_Spec) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *Device_Spec) GetNetplanYamlConfig() string {
	if m != nil {
		return m.NetplanYamlConfig
	}
	return ""
}

func (m *Device_Spec) GetNetplanApiConfigMode() Device_Spec_NetworkConfigMode {
	if m != nil {
		return m.NetplanApiConfigMode
	}
	return Device_Spec_MERGE
}

func (m *Device_Spec) GetOsImageUrl() string {
	if m != nil {
		return m.OsImageUrl
	}
	return ""
}

func (m *Device_Spec) GetSshConfig() *Device_Spec_SSHConfig {
	if m != nil {
		return m.SshConfig
	}
	return nil
}

func (m *Device_Spec) GetAttestationConfig() *Device_Spec_AttestationConfig {
	if m != nil {
		return m.AttestationConfig
	}
	return nil
}

func (m *Device_Spec) GetDisableDeviceDiscovery() bool {
	if m != nil {
		return m.DisableDeviceDiscovery
	}
	return false
}

func (m *Device_Spec) GetLoggingConfig() *Device_Spec_LoggingConfig {
	if m != nil {
		return m.LoggingConfig
	}
	return nil
}

func (m *Device_Spec) GetProxyConfig() *Device_Spec_ProxyConfig {
	if m != nil {
		return m.ProxyConfig
	}
	return nil
}

func (m *Device_Spec) GetLocation() *Device_Spec_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Device_Spec) GetUsbGuard() *Device_Spec_USBGuard {
	if m != nil {
		return m.UsbGuard
	}
	return nil
}

func (m *Device_Spec) SetServiceAccount(fv *iam_service_account.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceAccount", "Device_Spec"))
	}
	m.ServiceAccount = fv
}

func (m *Device_Spec) SetLogBucket(fv *logging_bucket.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogBucket", "Device_Spec"))
	}
	m.LogBucket = fv
}

func (m *Device_Spec) SetMetricsBucket(fv *monitoring_bucket.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricsBucket", "Device_Spec"))
	}
	m.MetricsBucket = fv
}

func (m *Device_Spec) SetOsVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsVersion", "Device_Spec"))
	}
	m.OsVersion = fv
}

func (m *Device_Spec) SetNetplanYamlConfig(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetplanYamlConfig", "Device_Spec"))
	}
	m.NetplanYamlConfig = fv
}

func (m *Device_Spec) SetNetplanApiConfigMode(fv Device_Spec_NetworkConfigMode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetplanApiConfigMode", "Device_Spec"))
	}
	m.NetplanApiConfigMode = fv
}

func (m *Device_Spec) SetOsImageUrl(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsImageUrl", "Device_Spec"))
	}
	m.OsImageUrl = fv
}

func (m *Device_Spec) SetSshConfig(fv *Device_Spec_SSHConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SshConfig", "Device_Spec"))
	}
	m.SshConfig = fv
}

func (m *Device_Spec) SetAttestationConfig(fv *Device_Spec_AttestationConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationConfig", "Device_Spec"))
	}
	m.AttestationConfig = fv
}

func (m *Device_Spec) SetDisableDeviceDiscovery(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableDeviceDiscovery", "Device_Spec"))
	}
	m.DisableDeviceDiscovery = fv
}

func (m *Device_Spec) SetLoggingConfig(fv *Device_Spec_LoggingConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LoggingConfig", "Device_Spec"))
	}
	m.LoggingConfig = fv
}

func (m *Device_Spec) SetProxyConfig(fv *Device_Spec_ProxyConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyConfig", "Device_Spec"))
	}
	m.ProxyConfig = fv
}

func (m *Device_Spec) SetLocation(fv *Device_Spec_Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Location", "Device_Spec"))
	}
	m.Location = fv
}

func (m *Device_Spec) SetUsbGuard(fv *Device_Spec_USBGuard) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UsbGuard", "Device_Spec"))
	}
	m.UsbGuard = fv
}

type Device_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of network addresses.
	Addresses []*Device_Status_Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	// List of conditions of the Device.
	Conditions         []*Device_Status_Condition        `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty" firestore:"conditions"`
	NetworkConfigState *Device_Status_NetworkConfigState `protobuf:"bytes,105,opt,name=network_config_state,json=networkConfigState,proto3" json:"network_config_state,omitempty" firestore:"networkConfigState"`
	ProxyConfigStatus  *Device_Status_ProxyConfigStatus  `protobuf:"bytes,106,opt,name=proxy_config_status,json=proxyConfigStatus,proto3" json:"proxy_config_status,omitempty" firestore:"proxyConfigStatus"`
	// Device detailed information
	DeviceInfo        *Device_Status_DeviceInfo `protobuf:"bytes,3,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty" firestore:"deviceInfo"`
	AttestationStatus []*iam_iam_common.PCR     `protobuf:"bytes,4,rep,name=attestation_status,json=attestationStatus,proto3" json:"attestation_status,omitempty" firestore:"attestationStatus"`
	// Normalized Address.
	NormalizedAddress *Device_Status_NormalizedAddress `protobuf:"bytes,5,opt,name=normalized_address,json=normalizedAddress,proto3" json:"normalized_address,omitempty" firestore:"normalizedAddress"`
	ConnectionStatus  Device_Status_ConnectionStatus   `protobuf:"varint,6,opt,name=connection_status,json=connectionStatus,proto3,enum=ntt.devices.v1.Device_Status_ConnectionStatus" json:"connection_status,omitempty" firestore:"connectionStatus"`
	// Last change of connection_status
	ConnectionStatusChangeTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=connection_status_change_time,json=connectionStatusChangeTime,proto3" json:"connection_status_change_time,omitempty" firestore:"connectionStatusChangeTime"`
}

func (m *Device_Status) Reset() {
	*m = Device_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status) ProtoMessage() {}

func (m *Device_Status) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status) GotenMessage() {}

// Deprecated, Use Device_Status.ProtoReflect.Descriptor instead.
func (*Device_Status) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Device_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status) GetAddresses() []*Device_Status_Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Status) GetConditions() []*Device_Status_Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Device_Status) GetNetworkConfigState() *Device_Status_NetworkConfigState {
	if m != nil {
		return m.NetworkConfigState
	}
	return nil
}

func (m *Device_Status) GetProxyConfigStatus() *Device_Status_ProxyConfigStatus {
	if m != nil {
		return m.ProxyConfigStatus
	}
	return nil
}

func (m *Device_Status) GetDeviceInfo() *Device_Status_DeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (m *Device_Status) GetAttestationStatus() []*iam_iam_common.PCR {
	if m != nil {
		return m.AttestationStatus
	}
	return nil
}

func (m *Device_Status) GetNormalizedAddress() *Device_Status_NormalizedAddress {
	if m != nil {
		return m.NormalizedAddress
	}
	return nil
}

func (m *Device_Status) GetConnectionStatus() Device_Status_ConnectionStatus {
	if m != nil {
		return m.ConnectionStatus
	}
	return Device_Status_CONNECTION_STATUS_UNSPECIFIED
}

func (m *Device_Status) GetConnectionStatusChangeTime() *timestamppb.Timestamp {
	if m != nil {
		return m.ConnectionStatusChangeTime
	}
	return nil
}

func (m *Device_Status) SetAddresses(fv []*Device_Status_Address) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Status"))
	}
	m.Addresses = fv
}

func (m *Device_Status) SetConditions(fv []*Device_Status_Condition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Conditions", "Device_Status"))
	}
	m.Conditions = fv
}

func (m *Device_Status) SetNetworkConfigState(fv *Device_Status_NetworkConfigState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetworkConfigState", "Device_Status"))
	}
	m.NetworkConfigState = fv
}

func (m *Device_Status) SetProxyConfigStatus(fv *Device_Status_ProxyConfigStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyConfigStatus", "Device_Status"))
	}
	m.ProxyConfigStatus = fv
}

func (m *Device_Status) SetDeviceInfo(fv *Device_Status_DeviceInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceInfo", "Device_Status"))
	}
	m.DeviceInfo = fv
}

func (m *Device_Status) SetAttestationStatus(fv []*iam_iam_common.PCR) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationStatus", "Device_Status"))
	}
	m.AttestationStatus = fv
}

func (m *Device_Status) SetNormalizedAddress(fv *Device_Status_NormalizedAddress) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NormalizedAddress", "Device_Status"))
	}
	m.NormalizedAddress = fv
}

func (m *Device_Status) SetConnectionStatus(fv Device_Status_ConnectionStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConnectionStatus", "Device_Status"))
	}
	m.ConnectionStatus = fv
}

func (m *Device_Status) SetConnectionStatusChangeTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConnectionStatusChangeTime", "Device_Status"))
	}
	m.ConnectionStatusChangeTime = fv
}

type Device_PublicListingSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Enabled       bool              `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" firestore:"enabled"`
	FieldMask     *Device_FieldMask `protobuf:"bytes,2,opt,customtype=Device_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *Device_PublicListingSpec) Reset() {
	*m = Device_PublicListingSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_PublicListingSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_PublicListingSpec) ProtoMessage() {}

func (m *Device_PublicListingSpec) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_PublicListingSpec) GotenMessage() {}

// Deprecated, Use Device_PublicListingSpec.ProtoReflect.Descriptor instead.
func (*Device_PublicListingSpec) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Device_PublicListingSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_PublicListingSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_PublicListingSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_PublicListingSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_PublicListingSpec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Device_PublicListingSpec) GetFieldMask() *Device_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *Device_PublicListingSpec) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "Device_PublicListingSpec"))
	}
	m.Enabled = fv
}

func (m *Device_PublicListingSpec) SetFieldMask(fv *Device_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "Device_PublicListingSpec"))
	}
	m.FieldMask = fv
}

// SSHConfig defines the ssh configuration for the Device.
type Device_Spec_SSHConfig struct {
	state              protoimpl.MessageState
	sizeCache          protoimpl.SizeCache
	unknownFields      protoimpl.UnknownFields
	DisableSshServer   bool                             `protobuf:"varint,1,opt,name=disable_ssh_server,json=disableSshServer,proto3" json:"disable_ssh_server,omitempty" firestore:"disableSshServer"`
	DisableSshPassword bool                             `protobuf:"varint,2,opt,name=disable_ssh_password,json=disableSshPassword,proto3" json:"disable_ssh_password,omitempty" firestore:"disableSshPassword"`
	SshAuthorized      []*Device_Spec_SSHConfig_AuthKey `protobuf:"bytes,3,rep,name=ssh_authorized,json=sshAuthorized,proto3" json:"ssh_authorized,omitempty" firestore:"sshAuthorized"`
	IpAllowList        []string                         `protobuf:"bytes,4,rep,name=ip_allow_list,json=ipAllowList,proto3" json:"ip_allow_list,omitempty" firestore:"ipAllowList"`
	IpDenyList         []string                         `protobuf:"bytes,5,rep,name=ip_deny_list,json=ipDenyList,proto3" json:"ip_deny_list,omitempty" firestore:"ipDenyList"`
	RejectPeriod       *durationpb.Duration             `protobuf:"bytes,6,opt,name=reject_period,json=rejectPeriod,proto3" json:"reject_period,omitempty" firestore:"rejectPeriod"`
	DisableSshAuthkey  bool                             `protobuf:"varint,7,opt,name=disable_ssh_authkey,json=disableSshAuthkey,proto3" json:"disable_ssh_authkey,omitempty" firestore:"disableSshAuthkey"`
}

func (m *Device_Spec_SSHConfig) Reset() {
	*m = Device_Spec_SSHConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_SSHConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_SSHConfig) ProtoMessage() {}

func (m *Device_Spec_SSHConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_SSHConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_SSHConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_SSHConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Device_Spec_SSHConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_SSHConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_SSHConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_SSHConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_SSHConfig) GetDisableSshServer() bool {
	if m != nil {
		return m.DisableSshServer
	}
	return false
}

func (m *Device_Spec_SSHConfig) GetDisableSshPassword() bool {
	if m != nil {
		return m.DisableSshPassword
	}
	return false
}

func (m *Device_Spec_SSHConfig) GetSshAuthorized() []*Device_Spec_SSHConfig_AuthKey {
	if m != nil {
		return m.SshAuthorized
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetIpAllowList() []string {
	if m != nil {
		return m.IpAllowList
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetIpDenyList() []string {
	if m != nil {
		return m.IpDenyList
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetRejectPeriod() *durationpb.Duration {
	if m != nil {
		return m.RejectPeriod
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetDisableSshAuthkey() bool {
	if m != nil {
		return m.DisableSshAuthkey
	}
	return false
}

func (m *Device_Spec_SSHConfig) SetDisableSshServer(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableSshServer", "Device_Spec_SSHConfig"))
	}
	m.DisableSshServer = fv
}

func (m *Device_Spec_SSHConfig) SetDisableSshPassword(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableSshPassword", "Device_Spec_SSHConfig"))
	}
	m.DisableSshPassword = fv
}

func (m *Device_Spec_SSHConfig) SetSshAuthorized(fv []*Device_Spec_SSHConfig_AuthKey) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SshAuthorized", "Device_Spec_SSHConfig"))
	}
	m.SshAuthorized = fv
}

func (m *Device_Spec_SSHConfig) SetIpAllowList(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAllowList", "Device_Spec_SSHConfig"))
	}
	m.IpAllowList = fv
}

func (m *Device_Spec_SSHConfig) SetIpDenyList(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpDenyList", "Device_Spec_SSHConfig"))
	}
	m.IpDenyList = fv
}

func (m *Device_Spec_SSHConfig) SetRejectPeriod(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RejectPeriod", "Device_Spec_SSHConfig"))
	}
	m.RejectPeriod = fv
}

func (m *Device_Spec_SSHConfig) SetDisableSshAuthkey(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableSshAuthkey", "Device_Spec_SSHConfig"))
	}
	m.DisableSshAuthkey = fv
}

type Device_Spec_AttestationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// If true, the droplet will try to attest itself.
	AttestationExpected bool `protobuf:"varint,1,opt,name=attestation_expected,json=attestationExpected,proto3" json:"attestation_expected,omitempty" firestore:"attestationExpected"`
	// Attestation domain for device attestation.
	AttestationDomain *iam_attestation_domain.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=attestation_domain,json=attestationDomain,proto3" json:"attestation_domain,omitempty" firestore:"attestationDomain"`
}

func (m *Device_Spec_AttestationConfig) Reset() {
	*m = Device_Spec_AttestationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_AttestationConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_AttestationConfig) ProtoMessage() {}

func (m *Device_Spec_AttestationConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_AttestationConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_AttestationConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_AttestationConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *Device_Spec_AttestationConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_AttestationConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_AttestationConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_AttestationConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_AttestationConfig) GetAttestationExpected() bool {
	if m != nil {
		return m.AttestationExpected
	}
	return false
}

func (m *Device_Spec_AttestationConfig) GetAttestationDomain() *iam_attestation_domain.Reference {
	if m != nil {
		return m.AttestationDomain
	}
	return nil
}

func (m *Device_Spec_AttestationConfig) SetAttestationExpected(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationExpected", "Device_Spec_AttestationConfig"))
	}
	m.AttestationExpected = fv
}

func (m *Device_Spec_AttestationConfig) SetAttestationDomain(fv *iam_attestation_domain.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationDomain", "Device_Spec_AttestationConfig"))
	}
	m.AttestationDomain = fv
}

type Device_Spec_LoggingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Log priority as understood by systemd (0 - emergency, 1 - alert, 2 -
	// critical, 3 - error, 4 - warning, 5 - notice, 6 - informational, 7 -
	// debug). Journal logs with this priority and higher will be uploaded to
	// the server.
	Priority int32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty" firestore:"priority"`
	// List of systemd unit names to monitor for logs, e.g.
	// NetworkManager.service, docker.service.
	// Leave empty to export all journald logs.
	Units []string `protobuf:"bytes,2,rep,name=units,proto3" json:"units,omitempty" firestore:"units"`
	// Whether the journald log exporter is enabled.
	EnableJournalExport bool `protobuf:"varint,3,opt,name=enable_journal_export,json=enableJournalExport,proto3" json:"enable_journal_export,omitempty" firestore:"enableJournalExport"`
}

func (m *Device_Spec_LoggingConfig) Reset() {
	*m = Device_Spec_LoggingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_LoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_LoggingConfig) ProtoMessage() {}

func (m *Device_Spec_LoggingConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_LoggingConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_LoggingConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_LoggingConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (m *Device_Spec_LoggingConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_LoggingConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_LoggingConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_LoggingConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_LoggingConfig) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return int32(0)
}

func (m *Device_Spec_LoggingConfig) GetUnits() []string {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *Device_Spec_LoggingConfig) GetEnableJournalExport() bool {
	if m != nil {
		return m.EnableJournalExport
	}
	return false
}

func (m *Device_Spec_LoggingConfig) SetPriority(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Priority", "Device_Spec_LoggingConfig"))
	}
	m.Priority = fv
}

func (m *Device_Spec_LoggingConfig) SetUnits(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Units", "Device_Spec_LoggingConfig"))
	}
	m.Units = fv
}

func (m *Device_Spec_LoggingConfig) SetEnableJournalExport(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnableJournalExport", "Device_Spec_LoggingConfig"))
	}
	m.EnableJournalExport = fv
}

type Device_Spec_ProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	HttpProxy     string `protobuf:"bytes,1,opt,name=http_proxy,json=httpProxy,proto3" json:"http_proxy,omitempty" firestore:"httpProxy"`
	HttpsProxy    string `protobuf:"bytes,2,opt,name=https_proxy,json=httpsProxy,proto3" json:"https_proxy,omitempty" firestore:"httpsProxy"`
	NoProxy       string `protobuf:"bytes,3,opt,name=no_proxy,json=noProxy,proto3" json:"no_proxy,omitempty" firestore:"noProxy"`
	// By default proxy is applicable for all interfaces
	// configuring proxy_interfaces allows to restrict proxy setting to be
	// used only with specific interfaces At present this is only used for
	// Control Plane (for eg LTE fallback)
	ProxyInterfaces []string `protobuf:"bytes,4,rep,name=proxy_interfaces,json=proxyInterfaces,proto3" json:"proxy_interfaces,omitempty" firestore:"proxyInterfaces"`
}

func (m *Device_Spec_ProxyConfig) Reset() {
	*m = Device_Spec_ProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_ProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_ProxyConfig) ProtoMessage() {}

func (m *Device_Spec_ProxyConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_ProxyConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_ProxyConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_ProxyConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (m *Device_Spec_ProxyConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_ProxyConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_ProxyConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_ProxyConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_ProxyConfig) GetHttpProxy() string {
	if m != nil {
		return m.HttpProxy
	}
	return ""
}

func (m *Device_Spec_ProxyConfig) GetHttpsProxy() string {
	if m != nil {
		return m.HttpsProxy
	}
	return ""
}

func (m *Device_Spec_ProxyConfig) GetNoProxy() string {
	if m != nil {
		return m.NoProxy
	}
	return ""
}

func (m *Device_Spec_ProxyConfig) GetProxyInterfaces() []string {
	if m != nil {
		return m.ProxyInterfaces
	}
	return nil
}

func (m *Device_Spec_ProxyConfig) SetHttpProxy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpProxy", "Device_Spec_ProxyConfig"))
	}
	m.HttpProxy = fv
}

func (m *Device_Spec_ProxyConfig) SetHttpsProxy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpsProxy", "Device_Spec_ProxyConfig"))
	}
	m.HttpsProxy = fv
}

func (m *Device_Spec_ProxyConfig) SetNoProxy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoProxy", "Device_Spec_ProxyConfig"))
	}
	m.NoProxy = fv
}

func (m *Device_Spec_ProxyConfig) SetProxyInterfaces(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyInterfaces", "Device_Spec_ProxyConfig"))
	}
	m.ProxyInterfaces = fv
}

// Device location of the device.
type Device_Spec_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	Placement     string `protobuf:"bytes,2,opt,name=placement,proto3" json:"placement,omitempty" firestore:"placement"`
}

func (m *Device_Spec_Location) Reset() {
	*m = Device_Spec_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_Location) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_Location) ProtoMessage() {}

func (m *Device_Spec_Location) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_Location) GotenMessage() {}

// Deprecated, Use Device_Spec_Location.ProtoReflect.Descriptor instead.
func (*Device_Spec_Location) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (m *Device_Spec_Location) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_Location) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_Location) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_Location) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_Location) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Device_Spec_Location) GetPlacement() string {
	if m != nil {
		return m.Placement
	}
	return ""
}

func (m *Device_Spec_Location) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "Device_Spec_Location"))
	}
	m.Address = fv
}

func (m *Device_Spec_Location) SetPlacement(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Placement", "Device_Spec_Location"))
	}
	m.Placement = fv
}

// USB Guard. When enable is not set, USB guard service will not be started.
// When it is enabled, we can specify allowed device white list with
// WhiteList. Each device can be specified one of Device Name, Device ID or
// connected port number. We can specify multiple parameter for a device.
type Device_Spec_USBGuard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Enable USB Guard service on the device.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty" firestore:"enable"`
	// This is array of white list of the USB devices.
	WhiteList []*Device_Spec_USBGuard_WhiteList `protobuf:"bytes,2,rep,name=white_list,json=whiteList,proto3" json:"white_list,omitempty" firestore:"whiteList"`
}

func (m *Device_Spec_USBGuard) Reset() {
	*m = Device_Spec_USBGuard{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_USBGuard) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_USBGuard) ProtoMessage() {}

func (m *Device_Spec_USBGuard) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_USBGuard) GotenMessage() {}

// Deprecated, Use Device_Spec_USBGuard.ProtoReflect.Descriptor instead.
func (*Device_Spec_USBGuard) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (m *Device_Spec_USBGuard) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_USBGuard) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_USBGuard) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_USBGuard) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_USBGuard) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Device_Spec_USBGuard) GetWhiteList() []*Device_Spec_USBGuard_WhiteList {
	if m != nil {
		return m.WhiteList
	}
	return nil
}

func (m *Device_Spec_USBGuard) SetEnable(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enable", "Device_Spec_USBGuard"))
	}
	m.Enable = fv
}

func (m *Device_Spec_USBGuard) SetWhiteList(fv []*Device_Spec_USBGuard_WhiteList) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WhiteList", "Device_Spec_USBGuard"))
	}
	m.WhiteList = fv
}

type Device_Spec_SSHConfig_AuthKey struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	SshaKey           string `protobuf:"bytes,1,opt,name=ssha_key,json=sshaKey,proto3" json:"ssha_key,omitempty" firestore:"sshaKey"`
	CertAuthority     bool   `protobuf:"varint,2,opt,name=cert_authority,json=certAuthority,proto3" json:"cert_authority,omitempty" firestore:"certAuthority"`
	Command           string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty" firestore:"command"`
	Environment       string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty" firestore:"environment"`
	From              string `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty" firestore:"from"`
	NoAgentForwarding bool   `protobuf:"varint,6,opt,name=no_agent_forwarding,json=noAgentForwarding,proto3" json:"no_agent_forwarding,omitempty" firestore:"noAgentForwarding"`
	NoPortForwarding  bool   `protobuf:"varint,7,opt,name=no_port_forwarding,json=noPortForwarding,proto3" json:"no_port_forwarding,omitempty" firestore:"noPortForwarding"`
	NoPty             bool   `protobuf:"varint,8,opt,name=no_pty,json=noPty,proto3" json:"no_pty,omitempty" firestore:"noPty"`
	NoUserRc          bool   `protobuf:"varint,9,opt,name=no_user_rc,json=noUserRc,proto3" json:"no_user_rc,omitempty" firestore:"noUserRc"`
	NoX11Forwarding   bool   `protobuf:"varint,10,opt,name=no_x11_forwarding,json=noX11Forwarding,proto3" json:"no_x11_forwarding,omitempty" firestore:"noX11Forwarding"`
	Permitopen        string `protobuf:"bytes,11,opt,name=permitopen,proto3" json:"permitopen,omitempty" firestore:"permitopen"`
	Principals        string `protobuf:"bytes,12,opt,name=principals,proto3" json:"principals,omitempty" firestore:"principals"`
	Tunnel            string `protobuf:"bytes,13,opt,name=tunnel,proto3" json:"tunnel,omitempty" firestore:"tunnel"`
	Restrict          bool   `protobuf:"varint,14,opt,name=restrict,proto3" json:"restrict,omitempty" firestore:"restrict"`
}

func (m *Device_Spec_SSHConfig_AuthKey) Reset() {
	*m = Device_Spec_SSHConfig_AuthKey{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_SSHConfig_AuthKey) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_SSHConfig_AuthKey) ProtoMessage() {}

func (m *Device_Spec_SSHConfig_AuthKey) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_SSHConfig_AuthKey) GotenMessage() {}

// Deprecated, Use Device_Spec_SSHConfig_AuthKey.ProtoReflect.Descriptor instead.
func (*Device_Spec_SSHConfig_AuthKey) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (m *Device_Spec_SSHConfig_AuthKey) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_SSHConfig_AuthKey) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_SSHConfig_AuthKey) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_SSHConfig_AuthKey) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_SSHConfig_AuthKey) GetSshaKey() string {
	if m != nil {
		return m.SshaKey
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetCertAuthority() bool {
	if m != nil {
		return m.CertAuthority
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoAgentForwarding() bool {
	if m != nil {
		return m.NoAgentForwarding
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoPortForwarding() bool {
	if m != nil {
		return m.NoPortForwarding
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoPty() bool {
	if m != nil {
		return m.NoPty
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoUserRc() bool {
	if m != nil {
		return m.NoUserRc
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoX11Forwarding() bool {
	if m != nil {
		return m.NoX11Forwarding
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetPermitopen() string {
	if m != nil {
		return m.Permitopen
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetPrincipals() string {
	if m != nil {
		return m.Principals
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetTunnel() string {
	if m != nil {
		return m.Tunnel
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetRestrict() bool {
	if m != nil {
		return m.Restrict
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) SetSshaKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SshaKey", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.SshaKey = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetCertAuthority(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CertAuthority", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.CertAuthority = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetCommand(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Command", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Command = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetEnvironment(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Environment", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Environment = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetFrom(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "From", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.From = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoAgentForwarding(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoAgentForwarding", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoAgentForwarding = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoPortForwarding(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoPortForwarding", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoPortForwarding = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoPty(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoPty", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoPty = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoUserRc(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoUserRc", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoUserRc = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoX11Forwarding(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoX11Forwarding", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoX11Forwarding = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetPermitopen(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Permitopen", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Permitopen = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetPrincipals(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Principals", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Principals = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetTunnel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tunnel", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Tunnel = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetRestrict(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Restrict", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Restrict = fv
}

// USB match operator for "via-port".
type Device_Spec_USBGuard_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Equals        []string `protobuf:"bytes,1,rep,name=equals,proto3" json:"equals,omitempty" firestore:"equals"`
	OneOf         []string `protobuf:"bytes,2,rep,name=one_of,json=oneOf,proto3" json:"one_of,omitempty" firestore:"oneOf"`
}

func (m *Device_Spec_USBGuard_Port) Reset() {
	*m = Device_Spec_USBGuard_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_USBGuard_Port) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_USBGuard_Port) ProtoMessage() {}

func (m *Device_Spec_USBGuard_Port) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_USBGuard_Port) GotenMessage() {}

// Deprecated, Use Device_Spec_USBGuard_Port.ProtoReflect.Descriptor instead.
func (*Device_Spec_USBGuard_Port) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0, 5, 0}
}

func (m *Device_Spec_USBGuard_Port) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_USBGuard_Port) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_USBGuard_Port) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_USBGuard_Port) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_USBGuard_Port) GetEquals() []string {
	if m != nil {
		return m.Equals
	}
	return nil
}

func (m *Device_Spec_USBGuard_Port) GetOneOf() []string {
	if m != nil {
		return m.OneOf
	}
	return nil
}

func (m *Device_Spec_USBGuard_Port) SetEquals(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Equals", "Device_Spec_USBGuard_Port"))
	}
	m.Equals = fv
}

func (m *Device_Spec_USBGuard_Port) SetOneOf(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OneOf", "Device_Spec_USBGuard_Port"))
	}
	m.OneOf = fv
}

// USB match operator for "with-interface".
type Device_Spec_USBGuard_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Equals        []string `protobuf:"bytes,1,rep,name=equals,proto3" json:"equals,omitempty" firestore:"equals"`
	OneOf         []string `protobuf:"bytes,2,rep,name=one_of,json=oneOf,proto3" json:"one_of,omitempty" firestore:"oneOf"`
}

func (m *Device_Spec_USBGuard_Interface) Reset() {
	*m = Device_Spec_USBGuard_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_USBGuard_Interface) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_USBGuard_Interface) ProtoMessage() {}

func (m *Device_Spec_USBGuard_Interface) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_USBGuard_Interface) GotenMessage() {}

// Deprecated, Use Device_Spec_USBGuard_Interface.ProtoReflect.Descriptor instead.
func (*Device_Spec_USBGuard_Interface) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0, 5, 1}
}

func (m *Device_Spec_USBGuard_Interface) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_USBGuard_Interface) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_USBGuard_Interface) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_USBGuard_Interface) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_USBGuard_Interface) GetEquals() []string {
	if m != nil {
		return m.Equals
	}
	return nil
}

func (m *Device_Spec_USBGuard_Interface) GetOneOf() []string {
	if m != nil {
		return m.OneOf
	}
	return nil
}

func (m *Device_Spec_USBGuard_Interface) SetEquals(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Equals", "Device_Spec_USBGuard_Interface"))
	}
	m.Equals = fv
}

func (m *Device_Spec_USBGuard_Interface) SetOneOf(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OneOf", "Device_Spec_USBGuard_Interface"))
	}
	m.OneOf = fv
}

// This is array of white list of the USB devices.
type Device_Spec_USBGuard_WhiteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// USB device name to be allowed to connect.
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty" firestore:"deviceName"`
	// USB device id to be allowed to connect.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty" firestore:"deviceId"`
	// USB port to be allowed to connect.
	ViaPort *Device_Spec_USBGuard_Port `protobuf:"bytes,3,opt,name=via_port,json=viaPort,proto3" json:"via_port,omitempty" firestore:"viaPort"`
	// USB interface to be allowed to connect.
	WithInterface *Device_Spec_USBGuard_Interface `protobuf:"bytes,4,opt,name=with_interface,json=withInterface,proto3" json:"with_interface,omitempty" firestore:"withInterface"`
	// USB connect type to be allowed to connect.
	WithConnectType string `protobuf:"bytes,5,opt,name=with_connect_type,json=withConnectType,proto3" json:"with_connect_type,omitempty" firestore:"withConnectType"`
}

func (m *Device_Spec_USBGuard_WhiteList) Reset() {
	*m = Device_Spec_USBGuard_WhiteList{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_USBGuard_WhiteList) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_USBGuard_WhiteList) ProtoMessage() {}

func (m *Device_Spec_USBGuard_WhiteList) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_USBGuard_WhiteList) GotenMessage() {}

// Deprecated, Use Device_Spec_USBGuard_WhiteList.ProtoReflect.Descriptor instead.
func (*Device_Spec_USBGuard_WhiteList) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 0, 5, 2}
}

func (m *Device_Spec_USBGuard_WhiteList) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_USBGuard_WhiteList) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_USBGuard_WhiteList) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_USBGuard_WhiteList) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_USBGuard_WhiteList) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *Device_Spec_USBGuard_WhiteList) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *Device_Spec_USBGuard_WhiteList) GetViaPort() *Device_Spec_USBGuard_Port {
	if m != nil {
		return m.ViaPort
	}
	return nil
}

func (m *Device_Spec_USBGuard_WhiteList) GetWithInterface() *Device_Spec_USBGuard_Interface {
	if m != nil {
		return m.WithInterface
	}
	return nil
}

func (m *Device_Spec_USBGuard_WhiteList) GetWithConnectType() string {
	if m != nil {
		return m.WithConnectType
	}
	return ""
}

func (m *Device_Spec_USBGuard_WhiteList) SetDeviceName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceName", "Device_Spec_USBGuard_WhiteList"))
	}
	m.DeviceName = fv
}

func (m *Device_Spec_USBGuard_WhiteList) SetDeviceId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceId", "Device_Spec_USBGuard_WhiteList"))
	}
	m.DeviceId = fv
}

func (m *Device_Spec_USBGuard_WhiteList) SetViaPort(fv *Device_Spec_USBGuard_Port) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ViaPort", "Device_Spec_USBGuard_WhiteList"))
	}
	m.ViaPort = fv
}

func (m *Device_Spec_USBGuard_WhiteList) SetWithInterface(fv *Device_Spec_USBGuard_Interface) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WithInterface", "Device_Spec_USBGuard_WhiteList"))
	}
	m.WithInterface = fv
}

func (m *Device_Spec_USBGuard_WhiteList) SetWithConnectType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WithConnectType", "Device_Spec_USBGuard_WhiteList"))
	}
	m.WithConnectType = fv
}

// Interface addresses of the Device.
type Device_Status_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// IPv4 or IPv6 address such as `203.0.113.5` (no suffix for subnet)
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	// Always `InternalIP`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
}

func (m *Device_Status_Address) Reset() {
	*m = Device_Status_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_Address) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_Address) ProtoMessage() {}

func (m *Device_Status_Address) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_Address) GotenMessage() {}

// Deprecated, Use Device_Status_Address.ProtoReflect.Descriptor instead.
func (*Device_Status_Address) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Device_Status_Address) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_Address) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_Address) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_Address) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Device_Status_Address) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_Address) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "Device_Status_Address"))
	}
	m.Address = fv
}

func (m *Device_Status_Address) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_Address"))
	}
	m.Type = fv
}

// Condition holds status of each sub component or module of the device.
type Device_Status_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The message describes the status.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty" firestore:"message"`
	// The reason for the status.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty" firestore:"reason"`
	// The status name.
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	// Type name of the status.
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	// When the status has been updated last time.
	// Deprecated
	LastHeartBeatTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_heart_beat_time,json=lastHeartBeatTime,proto3" json:"last_heart_beat_time,omitempty" firestore:"lastHeartBeatTime"`
	// When the status has tuned into the current value.
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty" firestore:"lastTransitionTime"`
}

func (m *Device_Status_Condition) Reset() {
	*m = Device_Status_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_Condition) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_Condition) ProtoMessage() {}

func (m *Device_Status_Condition) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_Condition) GotenMessage() {}

// Deprecated, Use Device_Status_Condition.ProtoReflect.Descriptor instead.
func (*Device_Status_Condition) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *Device_Status_Condition) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_Condition) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_Condition) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_Condition) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_Condition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Device_Status_Condition) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Device_Status_Condition) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Device_Status_Condition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_Condition) GetLastHeartBeatTime() *timestamppb.Timestamp {
	if m != nil {
		return m.LastHeartBeatTime
	}
	return nil
}

func (m *Device_Status_Condition) GetLastTransitionTime() *timestamppb.Timestamp {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *Device_Status_Condition) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "Device_Status_Condition"))
	}
	m.Message = fv
}

func (m *Device_Status_Condition) SetReason(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reason", "Device_Status_Condition"))
	}
	m.Reason = fv
}

func (m *Device_Status_Condition) SetStatus(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Device_Status_Condition"))
	}
	m.Status = fv
}

func (m *Device_Status_Condition) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_Condition"))
	}
	m.Type = fv
}

func (m *Device_Status_Condition) SetLastHeartBeatTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastHeartBeatTime", "Device_Status_Condition"))
	}
	m.LastHeartBeatTime = fv
}

func (m *Device_Status_Condition) SetLastTransitionTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastTransitionTime", "Device_Status_Condition"))
	}
	m.LastTransitionTime = fv
}

type Device_Status_NetworkConfigState struct {
	state                      protoimpl.MessageState
	sizeCache                  protoimpl.SizeCache
	unknownFields              protoimpl.UnknownFields
	ActiveNetworkConfigSource  Device_Status_NetworkConfigState_NetworkConfigSource `protobuf:"varint,1,opt,name=active_network_config_source,json=activeNetworkConfigSource,proto3,enum=ntt.devices.v1.Device_Status_NetworkConfigState_NetworkConfigSource" json:"active_network_config_source,omitempty" firestore:"activeNetworkConfigSource"`
	DesiredNetworkConfigSource Device_Status_NetworkConfigState_NetworkConfigSource `protobuf:"varint,2,opt,name=desired_network_config_source,json=desiredNetworkConfigSource,proto3,enum=ntt.devices.v1.Device_Status_NetworkConfigState_NetworkConfigSource" json:"desired_network_config_source,omitempty" firestore:"desiredNetworkConfigSource"`
	DesiredNetworkConfigError  string                                               `protobuf:"bytes,3,opt,name=desired_network_config_error,json=desiredNetworkConfigError,proto3" json:"desired_network_config_error,omitempty" firestore:"desiredNetworkConfigError"`
	DefaultNetplanConfig       string                                               `protobuf:"bytes,7,opt,name=default_netplan_config,json=defaultNetplanConfig,proto3" json:"default_netplan_config,omitempty" firestore:"defaultNetplanConfig"`
	ActiveNetplanConfig        string                                               `protobuf:"bytes,8,opt,name=active_netplan_config,json=activeNetplanConfig,proto3" json:"active_netplan_config,omitempty" firestore:"activeNetplanConfig"`
	DesiredNetplanConfig       string                                               `protobuf:"bytes,9,opt,name=desired_netplan_config,json=desiredNetplanConfig,proto3" json:"desired_netplan_config,omitempty" firestore:"desiredNetplanConfig"`
}

func (m *Device_Status_NetworkConfigState) Reset() {
	*m = Device_Status_NetworkConfigState{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_NetworkConfigState) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_NetworkConfigState) ProtoMessage() {}

func (m *Device_Status_NetworkConfigState) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_NetworkConfigState) GotenMessage() {}

// Deprecated, Use Device_Status_NetworkConfigState.ProtoReflect.Descriptor instead.
func (*Device_Status_NetworkConfigState) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (m *Device_Status_NetworkConfigState) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_NetworkConfigState) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_NetworkConfigState) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_NetworkConfigState) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_NetworkConfigState) GetActiveNetworkConfigSource() Device_Status_NetworkConfigState_NetworkConfigSource {
	if m != nil {
		return m.ActiveNetworkConfigSource
	}
	return Device_Status_NetworkConfigState_UNKNOWN
}

func (m *Device_Status_NetworkConfigState) GetDesiredNetworkConfigSource() Device_Status_NetworkConfigState_NetworkConfigSource {
	if m != nil {
		return m.DesiredNetworkConfigSource
	}
	return Device_Status_NetworkConfigState_UNKNOWN
}

func (m *Device_Status_NetworkConfigState) GetDesiredNetworkConfigError() string {
	if m != nil {
		return m.DesiredNetworkConfigError
	}
	return ""
}

func (m *Device_Status_NetworkConfigState) GetDefaultNetplanConfig() string {
	if m != nil {
		return m.DefaultNetplanConfig
	}
	return ""
}

func (m *Device_Status_NetworkConfigState) GetActiveNetplanConfig() string {
	if m != nil {
		return m.ActiveNetplanConfig
	}
	return ""
}

func (m *Device_Status_NetworkConfigState) GetDesiredNetplanConfig() string {
	if m != nil {
		return m.DesiredNetplanConfig
	}
	return ""
}

func (m *Device_Status_NetworkConfigState) SetActiveNetworkConfigSource(fv Device_Status_NetworkConfigState_NetworkConfigSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveNetworkConfigSource", "Device_Status_NetworkConfigState"))
	}
	m.ActiveNetworkConfigSource = fv
}

func (m *Device_Status_NetworkConfigState) SetDesiredNetworkConfigSource(fv Device_Status_NetworkConfigState_NetworkConfigSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DesiredNetworkConfigSource", "Device_Status_NetworkConfigState"))
	}
	m.DesiredNetworkConfigSource = fv
}

func (m *Device_Status_NetworkConfigState) SetDesiredNetworkConfigError(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DesiredNetworkConfigError", "Device_Status_NetworkConfigState"))
	}
	m.DesiredNetworkConfigError = fv
}

func (m *Device_Status_NetworkConfigState) SetDefaultNetplanConfig(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DefaultNetplanConfig", "Device_Status_NetworkConfigState"))
	}
	m.DefaultNetplanConfig = fv
}

func (m *Device_Status_NetworkConfigState) SetActiveNetplanConfig(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveNetplanConfig", "Device_Status_NetworkConfigState"))
	}
	m.ActiveNetplanConfig = fv
}

func (m *Device_Status_NetworkConfigState) SetDesiredNetplanConfig(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DesiredNetplanConfig", "Device_Status_NetworkConfigState"))
	}
	m.DesiredNetplanConfig = fv
}

type Device_Status_ProxyConfigStatus struct {
	state               protoimpl.MessageState
	sizeCache           protoimpl.SizeCache
	unknownFields       protoimpl.UnknownFields
	ActiveConfigSource  Device_Status_ProxyConfigStatus_ProxyConfigSource `protobuf:"varint,1,opt,name=active_config_source,json=activeConfigSource,proto3,enum=ntt.devices.v1.Device_Status_ProxyConfigStatus_ProxyConfigSource" json:"active_config_source,omitempty" firestore:"activeConfigSource"`
	DesiredConfigSource Device_Status_ProxyConfigStatus_ProxyConfigSource `protobuf:"varint,2,opt,name=desired_config_source,json=desiredConfigSource,proto3,enum=ntt.devices.v1.Device_Status_ProxyConfigStatus_ProxyConfigSource" json:"desired_config_source,omitempty" firestore:"desiredConfigSource"`
	ProxyConfigError    string                                            `protobuf:"bytes,3,opt,name=proxy_config_error,json=proxyConfigError,proto3" json:"proxy_config_error,omitempty" firestore:"proxyConfigError"`
	DefaultConfig       *Device_Spec_ProxyConfig                          `protobuf:"bytes,4,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty" firestore:"defaultConfig"`
	ActiveConfig        *Device_Spec_ProxyConfig                          `protobuf:"bytes,5,opt,name=active_config,json=activeConfig,proto3" json:"active_config,omitempty" firestore:"activeConfig"`
	ApiConfig           *Device_Spec_ProxyConfig                          `protobuf:"bytes,6,opt,name=api_config,json=apiConfig,proto3" json:"api_config,omitempty" firestore:"apiConfig"`
}

func (m *Device_Status_ProxyConfigStatus) Reset() {
	*m = Device_Status_ProxyConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_ProxyConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_ProxyConfigStatus) ProtoMessage() {}

func (m *Device_Status_ProxyConfigStatus) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_ProxyConfigStatus) GotenMessage() {}

// Deprecated, Use Device_Status_ProxyConfigStatus.ProtoReflect.Descriptor instead.
func (*Device_Status_ProxyConfigStatus) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (m *Device_Status_ProxyConfigStatus) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_ProxyConfigStatus) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_ProxyConfigStatus) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_ProxyConfigStatus) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_ProxyConfigStatus) GetActiveConfigSource() Device_Status_ProxyConfigStatus_ProxyConfigSource {
	if m != nil {
		return m.ActiveConfigSource
	}
	return Device_Status_ProxyConfigStatus_NO_CONFIG
}

func (m *Device_Status_ProxyConfigStatus) GetDesiredConfigSource() Device_Status_ProxyConfigStatus_ProxyConfigSource {
	if m != nil {
		return m.DesiredConfigSource
	}
	return Device_Status_ProxyConfigStatus_NO_CONFIG
}

func (m *Device_Status_ProxyConfigStatus) GetProxyConfigError() string {
	if m != nil {
		return m.ProxyConfigError
	}
	return ""
}

func (m *Device_Status_ProxyConfigStatus) GetDefaultConfig() *Device_Spec_ProxyConfig {
	if m != nil {
		return m.DefaultConfig
	}
	return nil
}

func (m *Device_Status_ProxyConfigStatus) GetActiveConfig() *Device_Spec_ProxyConfig {
	if m != nil {
		return m.ActiveConfig
	}
	return nil
}

func (m *Device_Status_ProxyConfigStatus) GetApiConfig() *Device_Spec_ProxyConfig {
	if m != nil {
		return m.ApiConfig
	}
	return nil
}

func (m *Device_Status_ProxyConfigStatus) SetActiveConfigSource(fv Device_Status_ProxyConfigStatus_ProxyConfigSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveConfigSource", "Device_Status_ProxyConfigStatus"))
	}
	m.ActiveConfigSource = fv
}

func (m *Device_Status_ProxyConfigStatus) SetDesiredConfigSource(fv Device_Status_ProxyConfigStatus_ProxyConfigSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DesiredConfigSource", "Device_Status_ProxyConfigStatus"))
	}
	m.DesiredConfigSource = fv
}

func (m *Device_Status_ProxyConfigStatus) SetProxyConfigError(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyConfigError", "Device_Status_ProxyConfigStatus"))
	}
	m.ProxyConfigError = fv
}

func (m *Device_Status_ProxyConfigStatus) SetDefaultConfig(fv *Device_Spec_ProxyConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DefaultConfig", "Device_Status_ProxyConfigStatus"))
	}
	m.DefaultConfig = fv
}

func (m *Device_Status_ProxyConfigStatus) SetActiveConfig(fv *Device_Spec_ProxyConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveConfig", "Device_Status_ProxyConfigStatus"))
	}
	m.ActiveConfig = fv
}

func (m *Device_Status_ProxyConfigStatus) SetApiConfig(fv *Device_Spec_ProxyConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ApiConfig", "Device_Status_ProxyConfigStatus"))
	}
	m.ApiConfig = fv
}

// Device Information
type Device_Status_DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The architecture of the CPU (and the software compilied for) (e.g.
	// `arm64`)
	Architecture string `protobuf:"bytes,1,opt,name=architecture,proto3" json:"architecture,omitempty" firestore:"architecture"`
	// The platform hardware (e.g. `raspberry`, `generic`)
	Hardware string `protobuf:"bytes,7,opt,name=hardware,proto3" json:"hardware,omitempty" firestore:"hardware"`
	// Base OS name (e.g. `Linux`)
	OperatingSystem string `protobuf:"bytes,2,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty" firestore:"operatingSystem"`
	// OS kernel version
	KernelVersion string `protobuf:"bytes,3,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty" firestore:"kernelVersion"`
	// OS base Image name
	OsImage string `protobuf:"bytes,4,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty" firestore:"osImage"`
	// Not used
	ContainerRuntimeVersion string `protobuf:"bytes,5,opt,name=container_runtime_version,json=containerRuntimeVersion,proto3" json:"container_runtime_version,omitempty" firestore:"containerRuntimeVersion"`
	// Liquid OS version currently used.
	OsVersion string `protobuf:"bytes,6,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty" firestore:"osVersion"`
	// Container driver name (e.g. `/var/lib/droplet/compose`)
	Driver                    string                                                `protobuf:"bytes,101,opt,name=driver,proto3" json:"driver,omitempty" firestore:"driver"`
	HardwareInformation       *Device_Status_DeviceInfo_HardwareInformation         `protobuf:"bytes,102,opt,name=hardware_information,json=hardwareInformation,proto3" json:"hardware_information,omitempty" firestore:"hardwareInformation"`
	NetworkInterfaces         map[string]*Device_Status_DeviceInfo_NetworkInterface `protobuf:"bytes,103,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"networkInterfaces"`
	ControlPlaneInterfaceInfo *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo   `protobuf:"bytes,104,opt,name=control_plane_interface_info,json=controlPlaneInterfaceInfo,proto3" json:"control_plane_interface_info,omitempty" firestore:"controlPlaneInterfaceInfo"`
}

func (m *Device_Status_DeviceInfo) Reset() {
	*m = Device_Status_DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4}
}

func (m *Device_Status_DeviceInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetHardware() string {
	if m != nil {
		return m.Hardware
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetContainerRuntimeVersion() string {
	if m != nil {
		return m.ContainerRuntimeVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetHardwareInformation() *Device_Status_DeviceInfo_HardwareInformation {
	if m != nil {
		return m.HardwareInformation
	}
	return nil
}

func (m *Device_Status_DeviceInfo) GetNetworkInterfaces() map[string]*Device_Status_DeviceInfo_NetworkInterface {
	if m != nil {
		return m.NetworkInterfaces
	}
	return nil
}

func (m *Device_Status_DeviceInfo) GetControlPlaneInterfaceInfo() *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo {
	if m != nil {
		return m.ControlPlaneInterfaceInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo) SetArchitecture(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Architecture", "Device_Status_DeviceInfo"))
	}
	m.Architecture = fv
}

func (m *Device_Status_DeviceInfo) SetHardware(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Hardware", "Device_Status_DeviceInfo"))
	}
	m.Hardware = fv
}

func (m *Device_Status_DeviceInfo) SetOperatingSystem(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatingSystem", "Device_Status_DeviceInfo"))
	}
	m.OperatingSystem = fv
}

func (m *Device_Status_DeviceInfo) SetKernelVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "KernelVersion", "Device_Status_DeviceInfo"))
	}
	m.KernelVersion = fv
}

func (m *Device_Status_DeviceInfo) SetOsImage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsImage", "Device_Status_DeviceInfo"))
	}
	m.OsImage = fv
}

func (m *Device_Status_DeviceInfo) SetContainerRuntimeVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerRuntimeVersion", "Device_Status_DeviceInfo"))
	}
	m.ContainerRuntimeVersion = fv
}

func (m *Device_Status_DeviceInfo) SetOsVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsVersion", "Device_Status_DeviceInfo"))
	}
	m.OsVersion = fv
}

func (m *Device_Status_DeviceInfo) SetDriver(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Driver", "Device_Status_DeviceInfo"))
	}
	m.Driver = fv
}

func (m *Device_Status_DeviceInfo) SetHardwareInformation(fv *Device_Status_DeviceInfo_HardwareInformation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareInformation", "Device_Status_DeviceInfo"))
	}
	m.HardwareInformation = fv
}

func (m *Device_Status_DeviceInfo) SetNetworkInterfaces(fv map[string]*Device_Status_DeviceInfo_NetworkInterface) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetworkInterfaces", "Device_Status_DeviceInfo"))
	}
	m.NetworkInterfaces = fv
}

func (m *Device_Status_DeviceInfo) SetControlPlaneInterfaceInfo(fv *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ControlPlaneInterfaceInfo", "Device_Status_DeviceInfo"))
	}
	m.ControlPlaneInterfaceInfo = fv
}

type Device_Status_NormalizedAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Postal code
	PostalCode string `protobuf:"bytes,1,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty" firestore:"postalCode"`
	// Country code example US, JP
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty" firestore:"countryCode"`
	// Continent, e.g. North America, Asia
	Continent   string `protobuf:"bytes,3,opt,name=continent,proto3" json:"continent,omitempty" firestore:"continent"`
	ContinentId string `protobuf:"bytes,4,opt,name=continent_id,json=continentId,proto3" json:"continent_id,omitempty" firestore:"continentId"`
	// Country name example United States, Japan
	Country   string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty" firestore:"country"`
	CountryId string `protobuf:"bytes,6,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty" firestore:"countryId"`
	// Probe Location Administrative Area level 1 name, e.g. California
	// (state), Chiba (prefecture)
	AdminArea1   string `protobuf:"bytes,7,opt,name=admin_area1,json=adminArea1,proto3" json:"admin_area1,omitempty" firestore:"adminArea1"`
	AdminArea1Id string `protobuf:"bytes,8,opt,name=admin_area1_id,json=adminArea1Id,proto3" json:"admin_area1_id,omitempty" firestore:"adminArea1Id"`
	// Probe Location Administrative Area level 2 name, e.g. Santa Clara
	// (county), Tateyama (town)
	AdminArea2   string `protobuf:"bytes,9,opt,name=admin_area2,json=adminArea2,proto3" json:"admin_area2,omitempty" firestore:"adminArea2"`
	AdminArea2Id string `protobuf:"bytes,10,opt,name=admin_area2_id,json=adminArea2Id,proto3" json:"admin_area2_id,omitempty" firestore:"adminArea2Id"`
	// Probe Location Administrative Area level 3 name, e.g. Sunnyvale (city)
	AdminArea3   string `protobuf:"bytes,11,opt,name=admin_area3,json=adminArea3,proto3" json:"admin_area3,omitempty" firestore:"adminArea3"`
	AdminArea3Id string `protobuf:"bytes,12,opt,name=admin_area3_id,json=adminArea3Id,proto3" json:"admin_area3_id,omitempty" firestore:"adminArea3Id"`
	// Probe Location Administrative Area level 4 name, e.g. Sunnyvale (city)
	AdminArea4   string `protobuf:"bytes,13,opt,name=admin_area4,json=adminArea4,proto3" json:"admin_area4,omitempty" firestore:"adminArea4"`
	AdminArea4Id string `protobuf:"bytes,14,opt,name=admin_area4_id,json=adminArea4Id,proto3" json:"admin_area4_id,omitempty" firestore:"adminArea4Id"`
	// Original address.
	Address string `protobuf:"bytes,15,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	// coordinates
	Coordinates *latlng.LatLng `protobuf:"bytes,16,opt,name=coordinates,proto3" json:"coordinates,omitempty" firestore:"coordinates"`
	// location accuracy in meters
	Accuracy float64 `protobuf:"fixed64,17,opt,name=accuracy,proto3" json:"accuracy,omitempty" firestore:"accuracy"`
}

func (m *Device_Status_NormalizedAddress) Reset() {
	*m = Device_Status_NormalizedAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_NormalizedAddress) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_NormalizedAddress) ProtoMessage() {}

func (m *Device_Status_NormalizedAddress) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_NormalizedAddress) GotenMessage() {}

// Deprecated, Use Device_Status_NormalizedAddress.ProtoReflect.Descriptor instead.
func (*Device_Status_NormalizedAddress) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 5}
}

func (m *Device_Status_NormalizedAddress) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_NormalizedAddress) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_NormalizedAddress) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_NormalizedAddress) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_NormalizedAddress) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetContinent() string {
	if m != nil {
		return m.Continent
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetContinentId() string {
	if m != nil {
		return m.ContinentId
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetCountryId() string {
	if m != nil {
		return m.CountryId
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea1() string {
	if m != nil {
		return m.AdminArea1
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea1Id() string {
	if m != nil {
		return m.AdminArea1Id
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea2() string {
	if m != nil {
		return m.AdminArea2
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea2Id() string {
	if m != nil {
		return m.AdminArea2Id
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea3() string {
	if m != nil {
		return m.AdminArea3
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea3Id() string {
	if m != nil {
		return m.AdminArea3Id
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea4() string {
	if m != nil {
		return m.AdminArea4
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea4Id() string {
	if m != nil {
		return m.AdminArea4Id
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetCoordinates() *latlng.LatLng {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *Device_Status_NormalizedAddress) GetAccuracy() float64 {
	if m != nil {
		return m.Accuracy
	}
	return float64(0)
}

func (m *Device_Status_NormalizedAddress) SetPostalCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PostalCode", "Device_Status_NormalizedAddress"))
	}
	m.PostalCode = fv
}

func (m *Device_Status_NormalizedAddress) SetCountryCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CountryCode", "Device_Status_NormalizedAddress"))
	}
	m.CountryCode = fv
}

func (m *Device_Status_NormalizedAddress) SetContinent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Continent", "Device_Status_NormalizedAddress"))
	}
	m.Continent = fv
}

func (m *Device_Status_NormalizedAddress) SetContinentId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContinentId", "Device_Status_NormalizedAddress"))
	}
	m.ContinentId = fv
}

func (m *Device_Status_NormalizedAddress) SetCountry(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Country", "Device_Status_NormalizedAddress"))
	}
	m.Country = fv
}

func (m *Device_Status_NormalizedAddress) SetCountryId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CountryId", "Device_Status_NormalizedAddress"))
	}
	m.CountryId = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea1(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea1", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea1 = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea1Id(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea1Id", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea1Id = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea2(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea2", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea2 = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea2Id(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea2Id", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea2Id = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea3(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea3", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea3 = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea3Id(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea3Id", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea3Id = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea4", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea4 = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea4Id(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea4Id", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea4Id = fv
}

func (m *Device_Status_NormalizedAddress) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "Device_Status_NormalizedAddress"))
	}
	m.Address = fv
}

func (m *Device_Status_NormalizedAddress) SetCoordinates(fv *latlng.LatLng) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Coordinates", "Device_Status_NormalizedAddress"))
	}
	m.Coordinates = fv
}

func (m *Device_Status_NormalizedAddress) SetAccuracy(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Accuracy", "Device_Status_NormalizedAddress"))
	}
	m.Accuracy = fv
}

type Device_Status_DeviceInfo_HardwareInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Os            *Device_Status_DeviceInfo_HardwareInformation_OS            `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty" firestore:"os"`
	Bios          *Device_Status_DeviceInfo_HardwareInformation_BIOS          `protobuf:"bytes,2,opt,name=bios,proto3" json:"bios,omitempty" firestore:"bios"`
	System        *Device_Status_DeviceInfo_HardwareInformation_System        `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty" firestore:"system"`
	Cpu           *Device_Status_DeviceInfo_HardwareInformation_CPU           `protobuf:"bytes,4,opt,name=cpu,proto3" json:"cpu,omitempty" firestore:"cpu"`
	Block         *Device_Status_DeviceInfo_HardwareInformation_Block         `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty" firestore:"block"`
	Network       *Device_Status_DeviceInfo_HardwareInformation_Network       `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty" firestore:"network"`
	Gpu           *Device_Status_DeviceInfo_HardwareInformation_GPU           `protobuf:"bytes,7,opt,name=gpu,proto3" json:"gpu,omitempty" firestore:"gpu"`
	MemoryInfo    *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo    `protobuf:"bytes,8,opt,name=memory_info,json=memoryInfo,proto3" json:"memory_info,omitempty" firestore:"memoryInfo"`
	HailoInfo     *Device_Status_DeviceInfo_HardwareInformation_HailoInfo     `protobuf:"bytes,20,opt,name=hailo_info,json=hailoInfo,proto3" json:"hailo_info,omitempty" firestore:"hailoInfo"`
	NvidiaInfo    *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo    `protobuf:"bytes,21,opt,name=nvidia_info,json=nvidiaInfo,proto3" json:"nvidia_info,omitempty" firestore:"nvidiaInfo"`
	ModemStatus   []*Device_Status_DeviceInfo_HardwareInformation_ModemStatus `protobuf:"bytes,22,rep,name=modem_status,json=modemStatus,proto3" json:"modem_status,omitempty" firestore:"modemStatus"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetOs() *Device_Status_DeviceInfo_HardwareInformation_OS {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetBios() *Device_Status_DeviceInfo_HardwareInformation_BIOS {
	if m != nil {
		return m.Bios
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetSystem() *Device_Status_DeviceInfo_HardwareInformation_System {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetCpu() *Device_Status_DeviceInfo_HardwareInformation_CPU {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetBlock() *Device_Status_DeviceInfo_HardwareInformation_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetNetwork() *Device_Status_DeviceInfo_HardwareInformation_Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetGpu() *Device_Status_DeviceInfo_HardwareInformation_GPU {
	if m != nil {
		return m.Gpu
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetMemoryInfo() *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo {
	if m != nil {
		return m.MemoryInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetHailoInfo() *Device_Status_DeviceInfo_HardwareInformation_HailoInfo {
	if m != nil {
		return m.HailoInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetNvidiaInfo() *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo {
	if m != nil {
		return m.NvidiaInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetModemStatus() []*Device_Status_DeviceInfo_HardwareInformation_ModemStatus {
	if m != nil {
		return m.ModemStatus
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetOs(fv *Device_Status_DeviceInfo_HardwareInformation_OS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Os", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Os = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetBios(fv *Device_Status_DeviceInfo_HardwareInformation_BIOS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bios", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Bios = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetSystem(fv *Device_Status_DeviceInfo_HardwareInformation_System) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "System", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.System = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetCpu(fv *Device_Status_DeviceInfo_HardwareInformation_CPU) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cpu", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Cpu = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetBlock(fv *Device_Status_DeviceInfo_HardwareInformation_Block) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Block", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Block = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetNetwork(fv *Device_Status_DeviceInfo_HardwareInformation_Network) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Network", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Network = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetGpu(fv *Device_Status_DeviceInfo_HardwareInformation_GPU) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gpu", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Gpu = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetMemoryInfo(fv *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryInfo", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.MemoryInfo = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetHailoInfo(fv *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HailoInfo", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.HailoInfo = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetNvidiaInfo(fv *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NvidiaInfo", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.NvidiaInfo = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetModemStatus(fv []*Device_Status_DeviceInfo_HardwareInformation_ModemStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModemStatus", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.ModemStatus = fv
}

// Network Interface
type Device_Status_DeviceInfo_NetworkInterface struct {
	state               protoimpl.MessageState
	sizeCache           protoimpl.SizeCache
	unknownFields       protoimpl.UnknownFields
	InterfaceName       string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty" firestore:"interfaceName"`
	IpAddressV4         []string `protobuf:"bytes,2,rep,name=ip_address_v4,json=ipAddressV4,proto3" json:"ip_address_v4,omitempty" firestore:"ipAddressV4"`
	ExternalIpAddressV4 []string `protobuf:"bytes,3,rep,name=external_ip_address_v4,json=externalIpAddressV4,proto3" json:"external_ip_address_v4,omitempty" firestore:"externalIpAddressV4"`
	IpAddressV6         []string `protobuf:"bytes,4,rep,name=ip_address_v6,json=ipAddressV6,proto3" json:"ip_address_v6,omitempty" firestore:"ipAddressV6"`
	ExternalIpAddressV6 []string `protobuf:"bytes,5,rep,name=external_ip_address_v6,json=externalIpAddressV6,proto3" json:"external_ip_address_v6,omitempty" firestore:"externalIpAddressV6"`
	// Asinfo describes the ISP (ASN) details for the interface
	// This is resolved automatically from the external_ip_address.
	AsInfo *Device_Status_DeviceInfo_NetworkInterface_ASInfo `protobuf:"bytes,10,opt,name=as_info,json=asInfo,proto3" json:"as_info,omitempty" firestore:"asInfo"`
	// Carrier.
	Carrier *Device_Status_DeviceInfo_NetworkInterface_Carrier `protobuf:"bytes,14,opt,name=carrier,proto3" json:"carrier,omitempty" firestore:"carrier"`
}

func (m *Device_Status_DeviceInfo_NetworkInterface) Reset() {
	*m = Device_Status_DeviceInfo_NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_NetworkInterface) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_NetworkInterface.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_NetworkInterface) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 1}
}

func (m *Device_Status_DeviceInfo_NetworkInterface) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetIpAddressV4() []string {
	if m != nil {
		return m.IpAddressV4
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetExternalIpAddressV4() []string {
	if m != nil {
		return m.ExternalIpAddressV4
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetIpAddressV6() []string {
	if m != nil {
		return m.IpAddressV6
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetExternalIpAddressV6() []string {
	if m != nil {
		return m.ExternalIpAddressV6
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetAsInfo() *Device_Status_DeviceInfo_NetworkInterface_ASInfo {
	if m != nil {
		return m.AsInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetCarrier() *Device_Status_DeviceInfo_NetworkInterface_Carrier {
	if m != nil {
		return m.Carrier
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetInterfaceName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "InterfaceName", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.InterfaceName = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetIpAddressV4(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAddressV4", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.IpAddressV4 = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetExternalIpAddressV4(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExternalIpAddressV4", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.ExternalIpAddressV4 = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetIpAddressV6(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAddressV6", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.IpAddressV6 = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetExternalIpAddressV6(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExternalIpAddressV6", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.ExternalIpAddressV6 = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetAsInfo(fv *Device_Status_DeviceInfo_NetworkInterface_ASInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AsInfo", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.AsInfo = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetCarrier(fv *Device_Status_DeviceInfo_NetworkInterface_Carrier) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Carrier", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.Carrier = fv
}

type Device_Status_DeviceInfo_ControlPlaneInterfaceInfo struct {
	state                       protoimpl.MessageState
	sizeCache                   protoimpl.SizeCache
	unknownFields               protoimpl.UnknownFields
	ActiveControlPlaneInterface string `protobuf:"bytes,1,opt,name=active_control_plane_interface,json=activeControlPlaneInterface,proto3" json:"active_control_plane_interface,omitempty" firestore:"activeControlPlaneInterface"`
	UsesProxy                   bool   `protobuf:"varint,2,opt,name=usesProxy,proto3" json:"usesProxy,omitempty" firestore:"usesProxy"`
	// is_fallback would be true if droplet could not connect using the best
	// default route and explicitly uses this interface to connect to api
	// endpoint
	IsFallback bool `protobuf:"varint,3,opt,name=is_fallback,json=isFallback,proto3" json:"is_fallback,omitempty" firestore:"isFallback"`
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) Reset() {
	*m = Device_Status_DeviceInfo_ControlPlaneInterfaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_ControlPlaneInterfaceInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 3}
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) GetActiveControlPlaneInterface() string {
	if m != nil {
		return m.ActiveControlPlaneInterface
	}
	return ""
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) GetUsesProxy() bool {
	if m != nil {
		return m.UsesProxy
	}
	return false
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) GetIsFallback() bool {
	if m != nil {
		return m.IsFallback
	}
	return false
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) SetActiveControlPlaneInterface(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveControlPlaneInterface", "Device_Status_DeviceInfo_ControlPlaneInterfaceInfo"))
	}
	m.ActiveControlPlaneInterface = fv
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) SetUsesProxy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UsesProxy", "Device_Status_DeviceInfo_ControlPlaneInterfaceInfo"))
	}
	m.UsesProxy = fv
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) SetIsFallback(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsFallback", "Device_Status_DeviceInfo_ControlPlaneInterfaceInfo"))
	}
	m.IsFallback = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Capability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Capability{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Capability) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Capability) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Capability.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Capability) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Capability"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_Capability"))
	}
	m.Description = fv
}

type Device_Status_DeviceInfo_HardwareInformation_OS struct {
	state                   protoimpl.MessageState
	sizeCache               protoimpl.SizeCache
	unknownFields           protoimpl.UnknownFields
	OperatingSystem         string `protobuf:"bytes,1,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty" firestore:"operatingSystem"`
	KernelVersion           string `protobuf:"bytes,2,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty" firestore:"kernelVersion"`
	OsImage                 string `protobuf:"bytes,3,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty" firestore:"osImage"`
	ContainerRuntimeVersion string `protobuf:"bytes,4,opt,name=container_runtime_version,json=containerRuntimeVersion,proto3" json:"container_runtime_version,omitempty" firestore:"containerRuntimeVersion"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_OS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_OS) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_OS) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_OS.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_OS) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 1}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetContainerRuntimeVersion() string {
	if m != nil {
		return m.ContainerRuntimeVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetOperatingSystem(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatingSystem", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.OperatingSystem = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetKernelVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "KernelVersion", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.KernelVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetOsImage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsImage", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.OsImage = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetContainerRuntimeVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerRuntimeVersion", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.ContainerRuntimeVersion = fv
}

// TODO: Add capabilities and size
type Device_Status_DeviceInfo_HardwareInformation_BIOS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Vendor        string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	BiosVersion   string `protobuf:"bytes,2,opt,name=bios_version,json=biosVersion,proto3" json:"bios_version,omitempty" firestore:"biosVersion"`
	ReleaseDate   string `protobuf:"bytes,3,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty" firestore:"releaseDate"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_BIOS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_BIOS) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_BIOS) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_BIOS.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_BIOS) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 2}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) GetBiosVersion() string {
	if m != nil {
		return m.BiosVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) GetReleaseDate() string {
	if m != nil {
		return m.ReleaseDate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_BIOS"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) SetBiosVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BiosVersion", "Device_Status_DeviceInfo_HardwareInformation_BIOS"))
	}
	m.BiosVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) SetReleaseDate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReleaseDate", "Device_Status_DeviceInfo_HardwareInformation_BIOS"))
	}
	m.ReleaseDate = fv
}

type Device_Status_DeviceInfo_HardwareInformation_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Manufacturer  string                                                             `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty" firestore:"manufacturer"`
	ProductName   string                                                             `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty" firestore:"productName"`
	Version       string                                                             `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" firestore:"version"`
	SerialNumber  string                                                             `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" firestore:"serialNumber"`
	Configuration *Device_Status_DeviceInfo_HardwareInformation_System_Configuration `protobuf:"bytes,5,opt,name=configuration,proto3" json:"configuration,omitempty" firestore:"configuration"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_System{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_System.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_System) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 3}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetConfiguration() *Device_Status_DeviceInfo_HardwareInformation_System_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetManufacturer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Manufacturer", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.Manufacturer = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetProductName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProductName", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.ProductName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Version", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.Version = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetSerialNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SerialNumber", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.SerialNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetConfiguration(fv *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Configuration", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.Configuration = fv
}

type Device_Status_DeviceInfo_HardwareInformation_CPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Processors    []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor `protobuf:"bytes,1,rep,name=processors,proto3" json:"processors,omitempty" firestore:"processors"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_CPU{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_CPU.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_CPU) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 4}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) GetProcessors() []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor {
	if m != nil {
		return m.Processors
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) SetProcessors(fv []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Processors", "Device_Status_DeviceInfo_HardwareInformation_CPU"))
	}
	m.Processors = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Disks         []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty" firestore:"disks"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Block{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Block.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Block) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 5}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) GetDisks() []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk {
	if m != nil {
		return m.Disks
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) SetDisks(fv []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Disks", "Device_Status_DeviceInfo_HardwareInformation_Block"))
	}
	m.Disks = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Nics          []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC `protobuf:"bytes,1,rep,name=nics,proto3" json:"nics,omitempty" firestore:"nics"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Network.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Network) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 6}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) GetNics() []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC {
	if m != nil {
		return m.Nics
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) SetNics(fv []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nics", "Device_Status_DeviceInfo_HardwareInformation_Network"))
	}
	m.Nics = fv
}

type Device_Status_DeviceInfo_HardwareInformation_GPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	GraphicCards  []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard `protobuf:"bytes,1,rep,name=graphic_cards,json=graphicCards,proto3" json:"graphic_cards,omitempty" firestore:"graphicCards"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_GPU{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_GPU.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_GPU) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 7}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) GetGraphicCards() []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard {
	if m != nil {
		return m.GraphicCards
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) SetGraphicCards(fv []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GraphicCards", "Device_Status_DeviceInfo_HardwareInformation_GPU"))
	}
	m.GraphicCards = fv
}

// Revisit: May be just device ??
type Device_Status_DeviceInfo_HardwareInformation_PCIDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	Vendor        string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Product       string `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty" firestore:"product"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Subvendor     string `protobuf:"bytes,5,opt,name=subvendor,proto3" json:"subvendor,omitempty" firestore:"subvendor"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_PCIDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_PCIDevice.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 8}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetSubvendor() string {
	if m != nil {
		return m.Subvendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Address = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetProduct(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Product", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Product = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetSubvendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Subvendor", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Subvendor = fv
}

type Device_Status_DeviceInfo_HardwareInformation_MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Memory        []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory `protobuf:"bytes,1,rep,name=memory,proto3" json:"memory,omitempty" firestore:"memory"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_MemoryInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 9}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) GetMemory() []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) SetMemory(fv []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Memory", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo"))
	}
	m.Memory = fv
}

type Device_Status_DeviceInfo_HardwareInformation_HailoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Status        string                                                                    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	CliVersion    string                                                                    `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty" firestore:"cliVersion"`
	Modules       []*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo `protobuf:"bytes,10,rep,name=modules,proto3" json:"modules,omitempty" firestore:"modules"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_HailoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_HailoInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 10}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) GetCliVersion() string {
	if m != nil {
		return m.CliVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) GetModules() []*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) SetStatus(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo"))
	}
	m.Status = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) SetCliVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CliVersion", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo"))
	}
	m.CliVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) SetModules(fv []*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Modules", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo"))
	}
	m.Modules = fv
}

type Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Status        string                                                             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	DriverVersion string                                                             `protobuf:"bytes,2,opt,name=driver_version,json=driverVersion,proto3" json:"driver_version,omitempty" firestore:"driverVersion"`
	CudaVersion   string                                                             `protobuf:"bytes,3,opt,name=cuda_version,json=cudaVersion,proto3" json:"cuda_version,omitempty" firestore:"cudaVersion"`
	Gpus          []*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo `protobuf:"bytes,10,rep,name=gpus,proto3" json:"gpus,omitempty" firestore:"gpus"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 11}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) GetDriverVersion() string {
	if m != nil {
		return m.DriverVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) GetCudaVersion() string {
	if m != nil {
		return m.CudaVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) GetGpus() []*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo {
	if m != nil {
		return m.Gpus
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) SetStatus(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo"))
	}
	m.Status = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) SetDriverVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DriverVersion", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo"))
	}
	m.DriverVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) SetCudaVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CudaVersion", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo"))
	}
	m.CudaVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) SetGpus(fv []*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gpus", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo"))
	}
	m.Gpus = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Modem         *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem `protobuf:"bytes,1,opt,name=modem,proto3" json:"modem,omitempty" firestore:"modem"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) GetModem() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem {
	if m != nil {
		return m.Modem
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) SetModem(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Modem", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus"))
	}
	m.Modem = fv
}

type Device_Status_DeviceInfo_HardwareInformation_System_Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Chassis       string `protobuf:"bytes,1,opt,name=chassis,proto3" json:"chassis,omitempty" firestore:"chassis"`
	Uuid          string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty" firestore:"uuid"`
	SkuNumber     string `protobuf:"bytes,3,opt,name=sku_number,json=skuNumber,proto3" json:"sku_number,omitempty" firestore:"skuNumber"`
	Family        string `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty" firestore:"family"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_System_Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_System_Configuration.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 3, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetChassis() string {
	if m != nil {
		return m.Chassis
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetSkuNumber() string {
	if m != nil {
		return m.SkuNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetChassis(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Chassis", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.Chassis = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetUuid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Uuid", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.Uuid = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetSkuNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SkuNumber", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.SkuNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetFamily(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Family", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.Family = fv
}

type Device_Status_DeviceInfo_HardwareInformation_CPU_Processor struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	Vendor          string                                                              `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Model           string                                                              `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty" firestore:"model"`
	Capabilities    []*Device_Status_DeviceInfo_HardwareInformation_Capability          `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty" firestore:"capabilities"`
	NumThreads      uint32                                                              `protobuf:"varint,4,opt,name=num_threads,json=numThreads,proto3" json:"num_threads,omitempty" firestore:"numThreads"`
	NumCores        uint32                                                              `protobuf:"varint,5,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty" firestore:"numCores"`
	NumEnabledCores uint32                                                              `protobuf:"varint,6,opt,name=num_enabled_cores,json=numEnabledCores,proto3" json:"num_enabled_cores,omitempty" firestore:"numEnabledCores"`
	Name            string                                                              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Serial          string                                                              `protobuf:"bytes,8,opt,name=serial,proto3" json:"serial,omitempty" firestore:"serial"`
	FrequencyMhz    int64                                                               `protobuf:"varint,9,opt,name=frequency_mhz,json=frequencyMhz,proto3" json:"frequency_mhz,omitempty" firestore:"frequencyMhz"`
	MaxFrequencyMhz int64                                                               `protobuf:"varint,10,opt,name=max_frequency_mhz,json=maxFrequencyMhz,proto3" json:"max_frequency_mhz,omitempty" firestore:"maxFrequencyMhz"`
	CacheInfo       []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache `protobuf:"bytes,11,rep,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty" firestore:"cacheInfo"`
	Driver          string                                                              `protobuf:"bytes,12,opt,name=driver,proto3" json:"driver,omitempty" firestore:"driver"`
	Latency         int64                                                               `protobuf:"varint,13,opt,name=latency,proto3" json:"latency,omitempty" firestore:"latency"`
	Clock           int64                                                               `protobuf:"varint,14,opt,name=clock,proto3" json:"clock,omitempty" firestore:"clock"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_CPU_Processor{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_CPU_Processor.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 4, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetCapabilities() []*Device_Status_DeviceInfo_HardwareInformation_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetNumThreads() uint32 {
	if m != nil {
		return m.NumThreads
	}
	return uint32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetNumCores() uint32 {
	if m != nil {
		return m.NumCores
	}
	return uint32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetNumEnabledCores() uint32 {
	if m != nil {
		return m.NumEnabledCores
	}
	return uint32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetFrequencyMhz() int64 {
	if m != nil {
		return m.FrequencyMhz
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetMaxFrequencyMhz() int64 {
	if m != nil {
		return m.MaxFrequencyMhz
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetCacheInfo() []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache {
	if m != nil {
		return m.CacheInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetLatency() int64 {
	if m != nil {
		return m.Latency
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Model = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetCapabilities(fv []*Device_Status_DeviceInfo_HardwareInformation_Capability) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Capabilities", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Capabilities = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetNumThreads(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NumThreads", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.NumThreads = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetNumCores(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NumCores", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.NumCores = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetNumEnabledCores(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NumEnabledCores", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.NumEnabledCores = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetSerial(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Serial", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Serial = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetFrequencyMhz(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FrequencyMhz", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.FrequencyMhz = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetMaxFrequencyMhz(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxFrequencyMhz", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.MaxFrequencyMhz = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetCacheInfo(fv []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CacheInfo", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.CacheInfo = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetDriver(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Driver", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Driver = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetLatency(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Latency", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Latency = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetClock(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Clock", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Clock = fv
}

type Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Type          string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	SizeBytes     int64  `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 4, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache"))
	}
	m.Type = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache"))
	}
	m.SizeBytes = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Block_Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string                                                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	SizeBytes     int64                                                                `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	DriveType     string                                                               `protobuf:"bytes,3,opt,name=drive_type,json=driveType,proto3" json:"drive_type,omitempty" firestore:"driveType"`
	Vendor        string                                                               `protobuf:"bytes,4,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Model         string                                                               `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty" firestore:"model"`
	SerialNumber  string                                                               `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" firestore:"serialNumber"`
	Wwn           string                                                               `protobuf:"bytes,7,opt,name=wwn,proto3" json:"wwn,omitempty" firestore:"wwn"`
	Partitions    []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition `protobuf:"bytes,8,rep,name=partitions,proto3" json:"partitions,omitempty" firestore:"partitions"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Block_Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Block_Disk.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 5, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetDriveType() string {
	if m != nil {
		return m.DriveType
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetWwn() string {
	if m != nil {
		return m.Wwn
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetPartitions() []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetDriveType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DriveType", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.DriveType = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Model = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetSerialNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SerialNumber", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.SerialNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetWwn(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Wwn", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Wwn = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetPartitions(fv []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Partitions", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Partitions = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	SizeBytes     int64  `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	MountPoint    string `protobuf:"bytes,3,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty" firestore:"mountPoint"`
	Type          string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 5, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetMountPoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MountPoint", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.MountPoint = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.Type = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Network_NIC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	MacAddress    string            `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty" firestore:"macAddress"`
	Virtual       bool              `protobuf:"varint,3,opt,name=virtual,proto3" json:"virtual,omitempty" firestore:"virtual"`
	Description   string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	ProductName   string            `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty" firestore:"productName"`
	Vendor        string            `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Subvendor     string            `protobuf:"bytes,7,opt,name=subvendor,proto3" json:"subvendor,omitempty" firestore:"subvendor"`
	Setting       map[string]string `protobuf:"bytes,8,rep,name=setting,proto3" json:"setting,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"setting"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Network_NIC{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Network_NIC.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 6, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetVirtual() bool {
	if m != nil {
		return m.Virtual
	}
	return false
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetSubvendor() string {
	if m != nil {
		return m.Subvendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetSetting() map[string]string {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetMacAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MacAddress", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.MacAddress = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetVirtual(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Virtual", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Virtual = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Description = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetProductName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProductName", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.ProductName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetSubvendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Subvendor", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Subvendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetSetting(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Setting", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Setting = fv
}

type Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Index         int64                                                   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" firestore:"index"`
	Device        *Device_Status_DeviceInfo_HardwareInformation_PCIDevice `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty" firestore:"device"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 7, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) GetDevice() *Device_Status_DeviceInfo_HardwareInformation_PCIDevice {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) SetIndex(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Index", "Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard"))
	}
	m.Index = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) SetDevice(fv *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Device", "Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard"))
	}
	m.Device = fv
}

type Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Description   string                                                                       `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	SizeBytes     int64                                                                        `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	MemoryBanks   []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank `protobuf:"bytes,3,rep,name=memory_banks,json=memoryBanks,proto3" json:"memory_banks,omitempty" firestore:"memoryBanks"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 9, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GetMemoryBanks() []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank {
	if m != nil {
		return m.MemoryBanks
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory"))
	}
	m.Description = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) SetMemoryBanks(fv []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryBanks", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory"))
	}
	m.MemoryBanks = fv
}

type Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Description   string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	Product       string `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty" firestore:"product"`
	Vendor        string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Serial        string `protobuf:"bytes,4,opt,name=serial,proto3" json:"serial,omitempty" firestore:"serial"`
	Slot          string `protobuf:"bytes,5,opt,name=slot,proto3" json:"slot,omitempty" firestore:"slot"`
	SizeBytes     int64  `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	FrequencyHz   int64  `protobuf:"varint,7,opt,name=frequency_hz,json=frequencyHz,proto3" json:"frequency_hz,omitempty" firestore:"frequencyHz"`
	WidthBits     int32  `protobuf:"varint,8,opt,name=width_bits,json=widthBits,proto3" json:"width_bits,omitempty" firestore:"widthBits"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 9, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetSlot() string {
	if m != nil {
		return m.Slot
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetFrequencyHz() int64 {
	if m != nil {
		return m.FrequencyHz
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetWidthBits() int32 {
	if m != nil {
		return m.WidthBits
	}
	return int32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Description = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetProduct(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Product", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Product = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetSerial(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Serial", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Serial = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetSlot(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Slot", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Slot = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetFrequencyHz(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FrequencyHz", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.FrequencyHz = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetWidthBits(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WidthBits", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.WidthBits = fv
}

type Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo struct {
	state                      protoimpl.MessageState
	sizeCache                  protoimpl.SizeCache
	unknownFields              protoimpl.UnknownFields
	DevId                      string `protobuf:"bytes,1,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty" firestore:"devId"`
	ControlProtoVersion        string `protobuf:"bytes,2,opt,name=control_proto_version,json=controlProtoVersion,proto3" json:"control_proto_version,omitempty" firestore:"controlProtoVersion"`
	FirmwareVersion            string `protobuf:"bytes,3,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty" firestore:"firmwareVersion"`
	LoggerVersion              string `protobuf:"bytes,4,opt,name=logger_version,json=loggerVersion,proto3" json:"logger_version,omitempty" firestore:"loggerVersion"`
	BoardName                  string `protobuf:"bytes,5,opt,name=board_name,json=boardName,proto3" json:"board_name,omitempty" firestore:"boardName"`
	SerialNumber               string `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" firestore:"serialNumber"`
	PartNumber                 string `protobuf:"bytes,7,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty" firestore:"partNumber"`
	ProductName                string `protobuf:"bytes,8,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty" firestore:"productName"`
	NeuralNetworkCoreClockRate string `protobuf:"bytes,9,opt,name=neural_network_core_clock_rate,json=neuralNetworkCoreClockRate,proto3" json:"neural_network_core_clock_rate,omitempty" firestore:"neuralNetworkCoreClockRate"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 10, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetControlProtoVersion() string {
	if m != nil {
		return m.ControlProtoVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetLoggerVersion() string {
	if m != nil {
		return m.LoggerVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetBoardName() string {
	if m != nil {
		return m.BoardName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetPartNumber() string {
	if m != nil {
		return m.PartNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetNeuralNetworkCoreClockRate() string {
	if m != nil {
		return m.NeuralNetworkCoreClockRate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetDevId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DevId", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.DevId = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetControlProtoVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ControlProtoVersion", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.ControlProtoVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetFirmwareVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FirmwareVersion", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.FirmwareVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetLoggerVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LoggerVersion", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.LoggerVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetBoardName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BoardName", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.BoardName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetSerialNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SerialNumber", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.SerialNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetPartNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PartNumber", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.PartNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetProductName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProductName", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.ProductName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetNeuralNetworkCoreClockRate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NeuralNetworkCoreClockRate", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.NeuralNetworkCoreClockRate = fv
}

type Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id"`
	ProductName   string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty" firestore:"productName"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 11, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) SetId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Id", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo"))
	}
	m.Id = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) SetProductName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProductName", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo"))
	}
	m.ProductName = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	DrxCycle      string `protobuf:"bytes,1,opt,name=drx_cycle,json=drxCycle,proto3" json:"drx_cycle,omitempty" firestore:"drxCycle"`
	MicoMode      string `protobuf:"bytes,2,opt,name=mico_mode,json=micoMode,proto3" json:"mico_mode,omitempty" firestore:"micoMode"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) ProtoMessage() {
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) GotenMessage() {
}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) GetDrxCycle() string {
	if m != nil {
		return m.DrxCycle
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) GetMicoMode() string {
	if m != nil {
		return m.MicoMode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) SetDrxCycle(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DrxCycle", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings"))
	}
	m.DrxCycle = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) SetMicoMode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MicoMode", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings"))
	}
	m.MicoMode = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr struct {
	state                protoimpl.MessageState
	sizeCache            protoimpl.SizeCache
	unknownFields        protoimpl.UnknownFields
	RegistrationSettings *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings `protobuf:"bytes,1,opt,name=registration_settings,json=registrationSettings,proto3" json:"registration_settings,omitempty" firestore:"registrationSettings"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 1}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) GetRegistrationSettings() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings {
	if m != nil {
		return m.RegistrationSettings
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) SetRegistrationSettings(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegistrationSettings", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr"))
	}
	m.RegistrationSettings = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Apn           string `protobuf:"bytes,1,opt,name=apn,proto3" json:"apn,omitempty" firestore:"apn"`
	IpType        string `protobuf:"bytes,2,opt,name=ip_type,json=ipType,proto3" json:"ip_type,omitempty" firestore:"ipType"`
	Password      string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" firestore:"password"`
	User          string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty" firestore:"user"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 2}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) GetApn() string {
	if m != nil {
		return m.Apn
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) GetIpType() string {
	if m != nil {
		return m.IpType
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) SetApn(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Apn", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings"))
	}
	m.Apn = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) SetIpType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpType", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings"))
	}
	m.IpType = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) SetPassword(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Password", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings"))
	}
	m.Password = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) SetUser(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "User", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings"))
	}
	m.User = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	DbusPath      string                                                             `protobuf:"bytes,1,opt,name=dbus_path,json=dbusPath,proto3" json:"dbus_path,omitempty" firestore:"dbusPath"`
	Settings      *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty" firestore:"settings"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 3}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) GetDbusPath() string {
	if m != nil {
		return m.DbusPath
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) GetSettings() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) SetDbusPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbusPath", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer"))
	}
	m.DbusPath = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) SetSettings(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Settings", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer"))
	}
	m.Settings = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	InitialBearer   *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer `protobuf:"bytes,1,opt,name=initial_bearer,json=initialBearer,proto3" json:"initial_bearer,omitempty" firestore:"initialBearer"`
	UeModeOperation string                                                                  `protobuf:"bytes,2,opt,name=ue_mode_operation,json=ueModeOperation,proto3" json:"ue_mode_operation,omitempty" firestore:"ueModeOperation"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 4}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) GetInitialBearer() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer {
	if m != nil {
		return m.InitialBearer
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) GetUeModeOperation() string {
	if m != nil {
		return m.UeModeOperation
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) SetInitialBearer(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "InitialBearer", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps"))
	}
	m.InitialBearer = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) SetUeModeOperation(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UeModeOperation", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps"))
	}
	m.UeModeOperation = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp struct {
	state              protoimpl.MessageState
	sizeCache          protoimpl.SizeCache
	unknownFields      protoimpl.UnknownFields
	FivegNr            *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr `protobuf:"bytes,1,opt,name=fiveg_nr,json=fivegNr,proto3" json:"fiveg_nr,omitempty" firestore:"fivegNr"`
	EnabledLocks       []string                                                          `protobuf:"bytes,2,rep,name=enabled_locks,json=enabledLocks,proto3" json:"enabled_locks,omitempty" firestore:"enabledLocks"`
	Eps                *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps     `protobuf:"bytes,3,opt,name=eps,proto3" json:"eps,omitempty" firestore:"eps"`
	Imei               string                                                            `protobuf:"bytes,4,opt,name=imei,proto3" json:"imei,omitempty" firestore:"imei"`
	OperatorCode       string                                                            `protobuf:"bytes,5,opt,name=operator_code,json=operatorCode,proto3" json:"operator_code,omitempty" firestore:"operatorCode"`
	OperatorName       string                                                            `protobuf:"bytes,6,opt,name=operator_name,json=operatorName,proto3" json:"operator_name,omitempty" firestore:"operatorName"`
	PacketServiceState string                                                            `protobuf:"bytes,7,opt,name=packet_service_state,json=packetServiceState,proto3" json:"packet_service_state,omitempty" firestore:"packetServiceState"`
	Pco                string                                                            `protobuf:"bytes,8,opt,name=pco,proto3" json:"pco,omitempty" firestore:"pco"`
	RegistrationState  string                                                            `protobuf:"bytes,9,opt,name=registration_state,json=registrationState,proto3" json:"registration_state,omitempty" firestore:"registrationState"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 5}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetFivegNr() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr {
	if m != nil {
		return m.FivegNr
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetEnabledLocks() []string {
	if m != nil {
		return m.EnabledLocks
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetEps() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps {
	if m != nil {
		return m.Eps
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetOperatorCode() string {
	if m != nil {
		return m.OperatorCode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetOperatorName() string {
	if m != nil {
		return m.OperatorName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetPacketServiceState() string {
	if m != nil {
		return m.PacketServiceState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetPco() string {
	if m != nil {
		return m.Pco
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetRegistrationState() string {
	if m != nil {
		return m.RegistrationState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetFivegNr(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FivegNr", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.FivegNr = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetEnabledLocks(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnabledLocks", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.EnabledLocks = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetEps(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Eps", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.Eps = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetImei(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Imei", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.Imei = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetOperatorCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorCode", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.OperatorCode = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetOperatorName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorName", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.OperatorName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetPacketServiceState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PacketServiceState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.PacketServiceState = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetPco(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Pco", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.Pco = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetRegistrationState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegistrationState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.RegistrationState = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma struct {
	state                   protoimpl.MessageState
	sizeCache               protoimpl.SizeCache
	unknownFields           protoimpl.UnknownFields
	ActivationState         string `protobuf:"bytes,1,opt,name=activation_state,json=activationState,proto3" json:"activation_state,omitempty" firestore:"activationState"`
	Cdma1XRegistrationState string `protobuf:"bytes,2,opt,name=cdma1x_registration_state,json=cdma1xRegistrationState,proto3" json:"cdma1x_registration_state,omitempty" firestore:"cdma1xRegistrationState"`
	Esn                     string `protobuf:"bytes,3,opt,name=esn,proto3" json:"esn,omitempty" firestore:"esn"`
	EvdoRegistrationState   string `protobuf:"bytes,4,opt,name=evdo_registration_state,json=evdoRegistrationState,proto3" json:"evdo_registration_state,omitempty" firestore:"evdoRegistrationState"`
	Meid                    string `protobuf:"bytes,5,opt,name=meid,proto3" json:"meid,omitempty" firestore:"meid"`
	Nid                     string `protobuf:"bytes,6,opt,name=nid,proto3" json:"nid,omitempty" firestore:"nid"`
	Sid                     string `protobuf:"bytes,7,opt,name=sid,proto3" json:"sid,omitempty" firestore:"sid"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 6}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetActivationState() string {
	if m != nil {
		return m.ActivationState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetCdma1XRegistrationState() string {
	if m != nil {
		return m.Cdma1XRegistrationState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetEsn() string {
	if m != nil {
		return m.Esn
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetEvdoRegistrationState() string {
	if m != nil {
		return m.EvdoRegistrationState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetMeid() string {
	if m != nil {
		return m.Meid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetActivationState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActivationState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.ActivationState = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetCdma1XRegistrationState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cdma1XRegistrationState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.Cdma1XRegistrationState = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetEsn(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Esn", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.Esn = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetEvdoRegistrationState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EvdoRegistrationState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.EvdoRegistrationState = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetMeid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Meid", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.Meid = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetNid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nid", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.Nid = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetSid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Sid", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.Sid = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Recent        string `protobuf:"bytes,1,opt,name=recent,proto3" json:"recent,omitempty" firestore:"recent"`
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" firestore:"value"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 7}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) GetRecent() string {
	if m != nil {
		return m.Recent
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) SetRecent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Recent", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality"))
	}
	m.Recent = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) SetValue(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality"))
	}
	m.Value = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic struct {
	state                        protoimpl.MessageState
	sizeCache                    protoimpl.SizeCache
	unknownFields                protoimpl.UnknownFields
	AccessTechnologies           []string                                                                `protobuf:"bytes,1,rep,name=access_technologies,json=accessTechnologies,proto3" json:"access_technologies,omitempty" firestore:"accessTechnologies"`
	Bearers                      []string                                                                `protobuf:"bytes,2,rep,name=bearers,proto3" json:"bearers,omitempty" firestore:"bearers"`
	CarrierConfiguration         string                                                                  `protobuf:"bytes,3,opt,name=carrier_configuration,json=carrierConfiguration,proto3" json:"carrier_configuration,omitempty" firestore:"carrierConfiguration"`
	CarrierConfigurationRevision string                                                                  `protobuf:"bytes,4,opt,name=carrier_configuration_revision,json=carrierConfigurationRevision,proto3" json:"carrier_configuration_revision,omitempty" firestore:"carrierConfigurationRevision"`
	CurrentBands                 []string                                                                `protobuf:"bytes,5,rep,name=current_bands,json=currentBands,proto3" json:"current_bands,omitempty" firestore:"currentBands"`
	CurrentCapabilities          []string                                                                `protobuf:"bytes,6,rep,name=current_capabilities,json=currentCapabilities,proto3" json:"current_capabilities,omitempty" firestore:"currentCapabilities"`
	CurrentModes                 string                                                                  `protobuf:"bytes,7,opt,name=current_modes,json=currentModes,proto3" json:"current_modes,omitempty" firestore:"currentModes"`
	Device                       string                                                                  `protobuf:"bytes,8,opt,name=device,proto3" json:"device,omitempty" firestore:"device"`
	DeviceIdentifier             string                                                                  `protobuf:"bytes,9,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty" firestore:"deviceIdentifier"`
	Drivers                      []string                                                                `protobuf:"bytes,10,rep,name=drivers,proto3" json:"drivers,omitempty" firestore:"drivers"`
	EquipmentIdentifier          string                                                                  `protobuf:"bytes,11,opt,name=equipment_identifier,json=equipmentIdentifier,proto3" json:"equipment_identifier,omitempty" firestore:"equipmentIdentifier"`
	HardwareRevision             string                                                                  `protobuf:"bytes,12,opt,name=hardware_revision,json=hardwareRevision,proto3" json:"hardware_revision,omitempty" firestore:"hardwareRevision"`
	Manufacturer                 string                                                                  `protobuf:"bytes,13,opt,name=manufacturer,proto3" json:"manufacturer,omitempty" firestore:"manufacturer"`
	Model                        string                                                                  `protobuf:"bytes,14,opt,name=model,proto3" json:"model,omitempty" firestore:"model"`
	OwnNumbers                   []string                                                                `protobuf:"bytes,15,rep,name=own_numbers,json=ownNumbers,proto3" json:"own_numbers,omitempty" firestore:"ownNumbers"`
	Plugin                       string                                                                  `protobuf:"bytes,16,opt,name=plugin,proto3" json:"plugin,omitempty" firestore:"plugin"`
	Ports                        []string                                                                `protobuf:"bytes,17,rep,name=ports,proto3" json:"ports,omitempty" firestore:"ports"`
	PowerState                   string                                                                  `protobuf:"bytes,18,opt,name=power_state,json=powerState,proto3" json:"power_state,omitempty" firestore:"powerState"`
	PrimaryPort                  string                                                                  `protobuf:"bytes,19,opt,name=primary_port,json=primaryPort,proto3" json:"primary_port,omitempty" firestore:"primaryPort"`
	PrimarySimSlot               string                                                                  `protobuf:"bytes,20,opt,name=primary_sim_slot,json=primarySimSlot,proto3" json:"primary_sim_slot,omitempty" firestore:"primarySimSlot"`
	Revision                     string                                                                  `protobuf:"bytes,21,opt,name=revision,proto3" json:"revision,omitempty" firestore:"revision"`
	SignalQuality                *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality `protobuf:"bytes,22,opt,name=signal_quality,json=signalQuality,proto3" json:"signal_quality,omitempty" firestore:"signalQuality"`
	Sim                          string                                                                  `protobuf:"bytes,23,opt,name=sim,proto3" json:"sim,omitempty" firestore:"sim"`
	SimSlots                     []string                                                                `protobuf:"bytes,24,rep,name=sim_slots,json=simSlots,proto3" json:"sim_slots,omitempty" firestore:"simSlots"`
	State                        string                                                                  `protobuf:"bytes,25,opt,name=state,proto3" json:"state,omitempty" firestore:"state"`
	StateFailedReason            string                                                                  `protobuf:"bytes,26,opt,name=state_failed_reason,json=stateFailedReason,proto3" json:"state_failed_reason,omitempty" firestore:"stateFailedReason"`
	SupportedBands               []string                                                                `protobuf:"bytes,27,rep,name=supported_bands,json=supportedBands,proto3" json:"supported_bands,omitempty" firestore:"supportedBands"`
	SupportedCapabilities        []string                                                                `protobuf:"bytes,28,rep,name=supported_capabilities,json=supportedCapabilities,proto3" json:"supported_capabilities,omitempty" firestore:"supportedCapabilities"`
	SupportedIpFamilies          []string                                                                `protobuf:"bytes,29,rep,name=supported_ip_families,json=supportedIpFamilies,proto3" json:"supported_ip_families,omitempty" firestore:"supportedIpFamilies"`
	SupportedModes               []string                                                                `protobuf:"bytes,30,rep,name=supported_modes,json=supportedModes,proto3" json:"supported_modes,omitempty" firestore:"supportedModes"`
	UnlockRequired               string                                                                  `protobuf:"bytes,31,opt,name=unlock_required,json=unlockRequired,proto3" json:"unlock_required,omitempty" firestore:"unlockRequired"`
	UnlockRetries                []string                                                                `protobuf:"bytes,32,rep,name=unlock_retries,json=unlockRetries,proto3" json:"unlock_retries,omitempty" firestore:"unlockRetries"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 8}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetAccessTechnologies() []string {
	if m != nil {
		return m.AccessTechnologies
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetBearers() []string {
	if m != nil {
		return m.Bearers
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetCarrierConfiguration() string {
	if m != nil {
		return m.CarrierConfiguration
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetCarrierConfigurationRevision() string {
	if m != nil {
		return m.CarrierConfigurationRevision
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetCurrentBands() []string {
	if m != nil {
		return m.CurrentBands
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetCurrentCapabilities() []string {
	if m != nil {
		return m.CurrentCapabilities
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetCurrentModes() string {
	if m != nil {
		return m.CurrentModes
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetDeviceIdentifier() string {
	if m != nil {
		return m.DeviceIdentifier
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetDrivers() []string {
	if m != nil {
		return m.Drivers
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetEquipmentIdentifier() string {
	if m != nil {
		return m.EquipmentIdentifier
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetHardwareRevision() string {
	if m != nil {
		return m.HardwareRevision
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetOwnNumbers() []string {
	if m != nil {
		return m.OwnNumbers
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetPorts() []string {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetPowerState() string {
	if m != nil {
		return m.PowerState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetPrimaryPort() string {
	if m != nil {
		return m.PrimaryPort
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetPrimarySimSlot() string {
	if m != nil {
		return m.PrimarySimSlot
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSignalQuality() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality {
	if m != nil {
		return m.SignalQuality
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSim() string {
	if m != nil {
		return m.Sim
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSimSlots() []string {
	if m != nil {
		return m.SimSlots
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetStateFailedReason() string {
	if m != nil {
		return m.StateFailedReason
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSupportedBands() []string {
	if m != nil {
		return m.SupportedBands
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSupportedCapabilities() []string {
	if m != nil {
		return m.SupportedCapabilities
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSupportedIpFamilies() []string {
	if m != nil {
		return m.SupportedIpFamilies
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSupportedModes() []string {
	if m != nil {
		return m.SupportedModes
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetUnlockRequired() string {
	if m != nil {
		return m.UnlockRequired
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetUnlockRetries() []string {
	if m != nil {
		return m.UnlockRetries
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetAccessTechnologies(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AccessTechnologies", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.AccessTechnologies = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetBearers(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bearers", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Bearers = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetCarrierConfiguration(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CarrierConfiguration", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.CarrierConfiguration = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetCarrierConfigurationRevision(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CarrierConfigurationRevision", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.CarrierConfigurationRevision = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetCurrentBands(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentBands", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.CurrentBands = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetCurrentCapabilities(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentCapabilities", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.CurrentCapabilities = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetCurrentModes(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentModes", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.CurrentModes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetDevice(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Device", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Device = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetDeviceIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceIdentifier", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.DeviceIdentifier = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetDrivers(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Drivers", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Drivers = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetEquipmentIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EquipmentIdentifier", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.EquipmentIdentifier = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetHardwareRevision(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareRevision", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.HardwareRevision = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetManufacturer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Manufacturer", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Manufacturer = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Model = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetOwnNumbers(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OwnNumbers", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.OwnNumbers = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetPlugin(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Plugin", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Plugin = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetPorts(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ports", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Ports = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetPowerState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PowerState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.PowerState = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetPrimaryPort(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrimaryPort", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.PrimaryPort = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetPrimarySimSlot(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrimarySimSlot", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.PrimarySimSlot = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetRevision(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Revision", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Revision = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSignalQuality(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SignalQuality", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SignalQuality = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSim(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Sim", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Sim = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSimSlots(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimSlots", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SimSlots = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.State = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetStateFailedReason(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StateFailedReason", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.StateFailedReason = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSupportedBands(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportedBands", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SupportedBands = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSupportedCapabilities(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportedCapabilities", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SupportedCapabilities = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSupportedIpFamilies(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportedIpFamilies", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SupportedIpFamilies = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSupportedModes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportedModes", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SupportedModes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetUnlockRequired(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UnlockRequired", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.UnlockRequired = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetUnlockRetries(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UnlockRetries", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.UnlockRetries = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus struct {
	state            protoimpl.MessageState
	sizeCache        protoimpl.SizeCache
	unknownFields    protoimpl.UnknownFields
	DbusPath         string   `protobuf:"bytes,1,opt,name=dbus_path,json=dbusPath,proto3" json:"dbus_path,omitempty" firestore:"dbusPath"`
	Active           string   `protobuf:"bytes,2,opt,name=active,proto3" json:"active,omitempty" firestore:"active"`
	Eid              string   `protobuf:"bytes,3,opt,name=eid,proto3" json:"eid,omitempty" firestore:"eid"`
	EmergencyNumbers []string `protobuf:"bytes,4,rep,name=emergency_numbers,json=emergencyNumbers,proto3" json:"emergency_numbers,omitempty" firestore:"emergencyNumbers"`
	EsimStatus       string   `protobuf:"bytes,5,opt,name=esim_status,json=esimStatus,proto3" json:"esim_status,omitempty" firestore:"esimStatus"`
	Gid1             string   `protobuf:"bytes,6,opt,name=gid1,proto3" json:"gid1,omitempty" firestore:"gid1"`
	Gid2             string   `protobuf:"bytes,7,opt,name=gid2,proto3" json:"gid2,omitempty" firestore:"gid2"`
	Iccid            string   `protobuf:"bytes,8,opt,name=iccid,proto3" json:"iccid,omitempty" firestore:"iccid"`
	Imsi             string   `protobuf:"bytes,9,opt,name=imsi,proto3" json:"imsi,omitempty" firestore:"imsi"`
	OperatorCode     string   `protobuf:"bytes,10,opt,name=operator_code,json=operatorCode,proto3" json:"operator_code,omitempty" firestore:"operatorCode"`
	OperatorName     string   `protobuf:"bytes,11,opt,name=operator_name,json=operatorName,proto3" json:"operator_name,omitempty" firestore:"operatorName"`
	Removability     string   `protobuf:"bytes,12,opt,name=removability,proto3" json:"removability,omitempty" firestore:"removability"`
	SimType          string   `protobuf:"bytes,13,opt,name=sim_type,json=simType,proto3" json:"sim_type,omitempty" firestore:"simType"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 9}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetDbusPath() string {
	if m != nil {
		return m.DbusPath
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetActive() string {
	if m != nil {
		return m.Active
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetEid() string {
	if m != nil {
		return m.Eid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetEmergencyNumbers() []string {
	if m != nil {
		return m.EmergencyNumbers
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetEsimStatus() string {
	if m != nil {
		return m.EsimStatus
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetGid1() string {
	if m != nil {
		return m.Gid1
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetGid2() string {
	if m != nil {
		return m.Gid2
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetIccid() string {
	if m != nil {
		return m.Iccid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetOperatorCode() string {
	if m != nil {
		return m.OperatorCode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetOperatorName() string {
	if m != nil {
		return m.OperatorName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetRemovability() string {
	if m != nil {
		return m.Removability
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetSimType() string {
	if m != nil {
		return m.SimType
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetDbusPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbusPath", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.DbusPath = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetActive(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Active", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Active = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetEid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Eid", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Eid = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetEmergencyNumbers(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EmergencyNumbers", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.EmergencyNumbers = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetEsimStatus(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EsimStatus", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.EsimStatus = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetGid1(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gid1", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Gid1 = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetGid2(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gid2", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Gid2 = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetIccid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Iccid", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Iccid = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetImsi(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Imsi", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Imsi = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetOperatorCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorCode", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.OperatorCode = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetOperatorName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorName", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.OperatorName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetRemovability(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Removability", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Removability = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetSimType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimType", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.SimType = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ThreeGPp      *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp             `protobuf:"bytes,1,opt,name=three_g_pp,json=threeGPp,proto3" json:"three_g_pp,omitempty" firestore:"threeGPp"`
	Cdma          *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma                 `protobuf:"bytes,2,opt,name=cdma,proto3" json:"cdma,omitempty" firestore:"cdma"`
	DbusPath      string                                                                         `protobuf:"bytes,3,opt,name=dbus_path,json=dbusPath,proto3" json:"dbus_path,omitempty" firestore:"dbusPath"`
	Generic       *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic              `protobuf:"bytes,4,opt,name=generic,proto3" json:"generic,omitempty" firestore:"generic"`
	SimStatus     map[string]*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus `protobuf:"bytes,7,rep,name=sim_status,json=simStatus,proto3" json:"sim_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"simStatus"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 10}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GetThreeGPp() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp {
	if m != nil {
		return m.ThreeGPp
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GetCdma() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma {
	if m != nil {
		return m.Cdma
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GetDbusPath() string {
	if m != nil {
		return m.DbusPath
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GetGeneric() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic {
	if m != nil {
		return m.Generic
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GetSimStatus() map[string]*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus {
	if m != nil {
		return m.SimStatus
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) SetThreeGPp(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ThreeGPp", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem"))
	}
	m.ThreeGPp = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) SetCdma(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cdma", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem"))
	}
	m.Cdma = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) SetDbusPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbusPath", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem"))
	}
	m.DbusPath = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) SetGeneric(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Generic", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem"))
	}
	m.Generic = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) SetSimStatus(fv map[string]*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimStatus", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem"))
	}
	m.SimStatus = fv
}

type Device_Status_DeviceInfo_NetworkInterface_ASInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// AS Number string example AS7018
	Asn string `protobuf:"bytes,1,opt,name=asn,proto3" json:"asn,omitempty" firestore:"asn"`
	// AS Owner name example AT&T Services, Inc.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Domain name example att.com
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty" firestore:"domain"`
	// Routes exported from this ASN example 12.128.0.0/9
	Routes []string `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes,omitempty" firestore:"routes"`
	// ASN Owner type example isp(AT&T) / hosting(google)/ business
	// (Amazon)
	AsnType string `protobuf:"bytes,5,opt,name=asn_type,json=asnType,proto3" json:"asn_type,omitempty" firestore:"asnType"`
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) Reset() {
	*m = Device_Status_DeviceInfo_NetworkInterface_ASInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface_ASInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface_ASInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_NetworkInterface_ASInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_NetworkInterface_ASInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 1, 0}
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) GetAsn() string {
	if m != nil {
		return m.Asn
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) GetRoutes() []string {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) GetAsnType() string {
	if m != nil {
		return m.AsnType
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) SetAsn(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Asn", "Device_Status_DeviceInfo_NetworkInterface_ASInfo"))
	}
	m.Asn = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_NetworkInterface_ASInfo"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) SetDomain(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Domain", "Device_Status_DeviceInfo_NetworkInterface_ASInfo"))
	}
	m.Domain = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) SetRoutes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Routes", "Device_Status_DeviceInfo_NetworkInterface_ASInfo"))
	}
	m.Routes = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) SetAsnType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AsnType", "Device_Status_DeviceInfo_NetworkInterface_ASInfo"))
	}
	m.AsnType = fv
}

type Device_Status_DeviceInfo_NetworkInterface_Carrier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Mobile network carrier name example AT&T
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Mobile country code example 214
	MobileCountryCode string `protobuf:"bytes,2,opt,name=mobile_country_code,json=mobileCountryCode,proto3" json:"mobile_country_code,omitempty" firestore:"mobileCountryCode"`
	// Mobile network code example 7
	MobileNetworkCode string `protobuf:"bytes,3,opt,name=mobile_network_code,json=mobileNetworkCode,proto3" json:"mobile_network_code,omitempty" firestore:"mobileNetworkCode"`
	// Mobile location area code example 2862
	LocationAreaCode string `protobuf:"bytes,4,opt,name=location_area_code,json=locationAreaCode,proto3" json:"location_area_code,omitempty" firestore:"locationAreaCode"`
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) Reset() {
	*m = Device_Status_DeviceInfo_NetworkInterface_Carrier{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface_Carrier) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface_Carrier) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_NetworkInterface_Carrier.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_NetworkInterface_Carrier) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_proto_rawDescGZIP(), []int{0, 1, 4, 1, 1}
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) GetMobileCountryCode() string {
	if m != nil {
		return m.MobileCountryCode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) GetMobileNetworkCode() string {
	if m != nil {
		return m.MobileNetworkCode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) GetLocationAreaCode() string {
	if m != nil {
		return m.LocationAreaCode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_NetworkInterface_Carrier"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) SetMobileCountryCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MobileCountryCode", "Device_Status_DeviceInfo_NetworkInterface_Carrier"))
	}
	m.MobileCountryCode = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) SetMobileNetworkCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MobileNetworkCode", "Device_Status_DeviceInfo_NetworkInterface_Carrier"))
	}
	m.MobileNetworkCode = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) SetLocationAreaCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LocationAreaCode", "Device_Status_DeviceInfo_NetworkInterface_Carrier"))
	}
	m.LocationAreaCode = fv
}

var edgelq_devices_proto_v1_device_proto preflect.FileDescriptor

var edgelq_devices_proto_v1_device_proto_rawDesc = []byte{
	0x0a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x6c, 0x61, 0x74, 0x6c, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x8f, 0x01, 0x0a, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x58, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xc6, 0x16, 0x0a,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0xb2, 0xda, 0x21, 0x23, 0x12, 0x21, 0x0a, 0x1d, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xf0, 0xd9, 0x21,
	0x01, 0xb2, 0xda, 0x21, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x10, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x51, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xf0, 0xd9, 0x21, 0x01, 0xb2, 0xda, 0x21,
	0x22, 0x12, 0x20, 0x0a, 0x1c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x10, 0x01, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x79, 0x61, 0x6d,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x59, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x64, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x73, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x73, 0x68,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x53, 0x48, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5c, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a,
	0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x75, 0x73, 0x62, 0x5f, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x55, 0x53, 0x42, 0x47, 0x75, 0x61, 0x72, 0x64,
	0x52, 0x08, 0x75, 0x73, 0x62, 0x47, 0x75, 0x61, 0x72, 0x64, 0x1a, 0xc8, 0x06, 0x0a, 0x09, 0x53,
	0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x73, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x73, 0x68,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x73, 0x73, 0x68, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x53,
	0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52,
	0x0d, 0x73, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x44, 0x65, 0x6e, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x73, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x73, 0x68, 0x41, 0x75, 0x74,
	0x68, 0x6b, 0x65, 0x79, 0x1a, 0xce, 0x03, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x73, 0x68, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x73, 0x68, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x6e, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x6e, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x70, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6e, 0x6f, 0x50, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x78, 0x31, 0x31, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x6e, 0x6f, 0x58, 0x31, 0x31, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x6f, 0x70, 0x65,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x1a, 0xa7, 0x01, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x14, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x59,
	0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xb2, 0xda, 0x21, 0x26,
	0x12, 0x24, 0x0a, 0x20, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x10, 0x01, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a,
	0x75, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x93, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x42, 0x0a, 0x08,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0xf9, 0x03, 0x0a, 0x08, 0x55, 0x53, 0x42, 0x47, 0x75, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x55, 0x53, 0x42, 0x47, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x35, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x1a, 0x3a, 0x0a, 0x09, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x1a, 0x92, 0x02, 0x0a, 0x09, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x76, 0x69, 0x61, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x55, 0x53, 0x42, 0x47, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x07, 0x76, 0x69, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x55,
	0x53, 0x42, 0x47, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x11,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a,
	0x04, 0x08, 0x04, 0x10, 0x05, 0x1a, 0xec, 0x6d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x43, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x62,
	0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e,
	0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x43, 0x52, 0x52, 0x11, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e,
	0x0a, 0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x84, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x4b, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x65,
	0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xca, 0x05, 0x0a, 0x12, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x85, 0x01, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x19,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x1d, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x1a, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x6e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34,
	0x0a, 0x16, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03,
	0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x1a, 0xdb, 0x04, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x73, 0x0a,
	0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x75, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x13, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x46, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x02, 0x1a, 0xc7, 0x55, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x14, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x67, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xbf, 0x48, 0x0a, 0x13,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x53,
	0x52, 0x02, 0x6f, 0x73, 0x12, 0x55, 0x0a, 0x04, 0x62, 0x69, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x42, 0x49, 0x4f, 0x53, 0x52, 0x04, 0x62, 0x69, 0x6f, 0x73, 0x12, 0x5b, 0x0a, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x52, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x58, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x5e, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x52, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x50, 0x55, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x68, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x0a, 0x68, 0x61, 0x69, 0x6c, 0x6f, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x69, 0x6c, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x68, 0x61, 0x69, 0x6c, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x68, 0x0a, 0x0b, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6b, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x42, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xad, 0x01, 0x0a, 0x02, 0x4f, 0x53, 0x12, 0x29, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x64, 0x0a, 0x04, 0x42, 0x49, 0x4f, 0x53, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xfd, 0x02, 0x0a,
	0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x77, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x74, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x75, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6b, 0x75, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x1a, 0xf6, 0x05, 0x0a,
	0x03, 0x43, 0x50, 0x55, 0x12, 0x6a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73,
	0x1a, 0x82, 0x05, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x6b, 0x0a, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e,
	0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x68, 0x7a,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x4d, 0x68, 0x7a, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x68, 0x7a,
	0x12, 0x6f, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x3a, 0x0a, 0x05, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x8e, 0x04, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x5d, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x1a, 0xa5,
	0x03, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x77, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x77, 0x6e, 0x12, 0x71,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x73, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xe6, 0x03, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x5c, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x49, 0x43, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73,
	0x1a, 0xfc, 0x02, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x6f, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x49, 0x43, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xfe, 0x01, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x12, 0x71, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x50, 0x55,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x83, 0x01, 0x0a, 0x0b, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x5e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x43, 0x49, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x89, 0x01, 0x0a, 0x09, 0x50, 0x43, 0x49, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x1a, 0xae, 0x04, 0x0a,
	0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x66, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x1a, 0xb7, 0x03, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x7c, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x1a, 0xed, 0x01,
	0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x7a, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x12, 0x1d,
	0x0a, 0x0a, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x69, 0x74, 0x73, 0x1a, 0xb3, 0x04,
	0x0a, 0x09, 0x48, 0x61, 0x69, 0x6c, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x69, 0x6c, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x69, 0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0xfa, 0x02, 0x0a, 0x0f, 0x48, 0x61, 0x69, 0x6c, 0x6f,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x1e, 0x6e, 0x65, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6e, 0x65, 0x75, 0x72, 0x61, 0x6c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x61, 0x74, 0x65, 0x1a, 0x91, 0x02, 0x0a, 0x0a, 0x4e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x64, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x64, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x70, 0x75, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x67, 0x70, 0x75, 0x73, 0x1a, 0x3c, 0x0a, 0x07, 0x47, 0x70, 0x75,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xc3, 0x1e, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x64, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x1a, 0x50, 0x0a,
	0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x78, 0x5f, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x78, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x63, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x63, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x1a,
	0x9e, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x76, 0x65, 0x47, 0x4e, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x15,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0x65, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x9b, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x62, 0x75,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62,
	0x75, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x6d, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xb0, 0x01, 0x0a, 0x03, 0x45, 0x70, 0x73, 0x12, 0x7d, 0x0a,
	0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x0d, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x75, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xcd, 0x03, 0x0a, 0x08, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x47, 0x70, 0x70, 0x12, 0x6b, 0x0a, 0x08, 0x66, 0x69, 0x76, 0x65, 0x67, 0x5f, 0x6e,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x46, 0x69, 0x76, 0x65, 0x47, 0x4e, 0x72, 0x52, 0x07, 0x66, 0x69, 0x76, 0x65, 0x67,
	0x4e, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x5e, 0x0a, 0x03, 0x65, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45,
	0x70, 0x73, 0x52, 0x03, 0x65, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x63, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xef, 0x01, 0x0a, 0x04, 0x43, 0x64, 0x6d,
	0x61, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x19,
	0x63, 0x64, 0x6d, 0x61, 0x31, 0x78, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x63, 0x64, 0x6d, 0x61, 0x31, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x73, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x76,
	0x64, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x76, 0x64,
	0x6f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x1a, 0x3d, 0x0a, 0x0d, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9f, 0x0a, 0x0a, 0x07, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73,
	0x12, 0x33, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x73, 0x69, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x0e, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x6d,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x69, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x69, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xfb, 0x02, 0x0a, 0x09,
	0x53, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x62, 0x75,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62,
	0x75, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x73, 0x69, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x73, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x69, 0x64, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x69,
	0x64, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x69, 0x64, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x69, 0x64, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6d, 0x73, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x81, 0x05, 0x0a, 0x05, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x12, 0x6f, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x5f, 0x70,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x47, 0x70, 0x70, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65,
	0x65, 0x47, 0x50, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x64, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x64, 0x6d,
	0x61, 0x52, 0x04, 0x63, 0x64, 0x6d, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x62, 0x75, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62, 0x75, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x6a, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x12, 0x7c, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6d, 0x2e, 0x53, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x90,
	0x01, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x68, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x1a, 0xcc, 0x05,
	0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x34, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x34, 0x12, 0x33, 0x0a,
	0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x34, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x56, 0x34, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x76, 0x36, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x56, 0x36, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x36,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x36, 0x12, 0x59, 0x0a, 0x07, 0x61,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x1a, 0x79, 0x0a, 0x06, 0x41, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xab,
	0x01, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x7f, 0x0a, 0x16,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x9f, 0x01,
	0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x1e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a,
	0xda, 0x04, 0x0a, 0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x31, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x31, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x32, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x32, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x33,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x33, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x33, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x33, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x34, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x34, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x34, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x74,
	0x4c, 0x6e, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x22, 0x56, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x1a, 0x78, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x8f,
	0x07, 0xea, 0x41, 0x51, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x34, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x7d, 0x92, 0xd9, 0x21, 0x98, 0x02, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x18, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x38,
	0x05, 0x42, 0xde, 0x01, 0x08, 0x02, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x3b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x3c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x11,
	0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x0f, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x61,
	0x67, 0x73, 0xb2, 0xdf, 0x21, 0x83, 0x03, 0x0a, 0xb9, 0x02, 0x0a, 0x4b, 0x0a, 0x0c, 0x62, 0x79,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x1a, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2d, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2d, 0x0a, 0x7b, 0x0a, 0x0d, 0x62, 0x79, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x2d, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2d, 0x2a, 0x05, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x3e, 0x0a, 0x3c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x1b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x0c, 0x62, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x3c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xa3, 0x22, 0x41, 0x12, 0x3f, 0x0a, 0x22, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xc2, 0x85, 0x2c, 0x41, 0x22,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0xf9, 0x01, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x42, 0x0a, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x80,
	0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x0b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1_device_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1_device_proto_rawDescData = edgelq_devices_proto_v1_device_proto_rawDesc
)

func edgelq_devices_proto_v1_device_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1_device_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1_device_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1_device_proto_rawDescData)
	})
	return edgelq_devices_proto_v1_device_proto_rawDescData
}

var edgelq_devices_proto_v1_device_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var edgelq_devices_proto_v1_device_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var edgelq_devices_proto_v1_device_proto_goTypes = []interface{}{
	(Device_Spec_NetworkConfigMode)(0),                        // 0: ntt.devices.v1.Device_Spec_NetworkConfigMode
	(Device_Status_ConnectionStatus)(0),                       // 1: ntt.devices.v1.Device_Status_ConnectionStatus
	(Device_Status_NetworkConfigState_NetworkConfigSource)(0), // 2: ntt.devices.v1.Device_Status_NetworkConfigState_NetworkConfigSource
	(Device_Status_ProxyConfigStatus_ProxyConfigSource)(0),    // 3: ntt.devices.v1.Device_Status_ProxyConfigStatus_ProxyConfigSource
	(*Device)(nil),                                       // 4: ntt.devices.v1.Device
	(*Device_Spec)(nil),                                  // 5: ntt.devices.v1.Device.Spec
	(*Device_Status)(nil),                                // 6: ntt.devices.v1.Device.Status
	(*Device_PublicListingSpec)(nil),                     // 7: ntt.devices.v1.Device.PublicListingSpec
	(*Device_Spec_SSHConfig)(nil),                        // 8: ntt.devices.v1.Device.Spec.SSHConfig
	(*Device_Spec_AttestationConfig)(nil),                // 9: ntt.devices.v1.Device.Spec.AttestationConfig
	(*Device_Spec_LoggingConfig)(nil),                    // 10: ntt.devices.v1.Device.Spec.LoggingConfig
	(*Device_Spec_ProxyConfig)(nil),                      // 11: ntt.devices.v1.Device.Spec.ProxyConfig
	(*Device_Spec_Location)(nil),                         // 12: ntt.devices.v1.Device.Spec.Location
	(*Device_Spec_USBGuard)(nil),                         // 13: ntt.devices.v1.Device.Spec.USBGuard
	(*Device_Spec_SSHConfig_AuthKey)(nil),                // 14: ntt.devices.v1.Device.Spec.SSHConfig.AuthKey
	(*Device_Spec_USBGuard_Port)(nil),                    // 15: ntt.devices.v1.Device.Spec.USBGuard.Port
	(*Device_Spec_USBGuard_Interface)(nil),               // 16: ntt.devices.v1.Device.Spec.USBGuard.Interface
	(*Device_Spec_USBGuard_WhiteList)(nil),               // 17: ntt.devices.v1.Device.Spec.USBGuard.WhiteList
	(*Device_Status_Address)(nil),                        // 18: ntt.devices.v1.Device.Status.Address
	(*Device_Status_Condition)(nil),                      // 19: ntt.devices.v1.Device.Status.Condition
	(*Device_Status_NetworkConfigState)(nil),             // 20: ntt.devices.v1.Device.Status.NetworkConfigState
	(*Device_Status_ProxyConfigStatus)(nil),              // 21: ntt.devices.v1.Device.Status.ProxyConfigStatus
	(*Device_Status_DeviceInfo)(nil),                     // 22: ntt.devices.v1.Device.Status.DeviceInfo
	(*Device_Status_NormalizedAddress)(nil),              // 23: ntt.devices.v1.Device.Status.NormalizedAddress
	(*Device_Status_DeviceInfo_HardwareInformation)(nil), // 24: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation
	(*Device_Status_DeviceInfo_NetworkInterface)(nil),    // 25: ntt.devices.v1.Device.Status.DeviceInfo.NetworkInterface
	nil, // 26: ntt.devices.v1.Device.Status.DeviceInfo.NetworkInterfacesEntry
	(*Device_Status_DeviceInfo_ControlPlaneInterfaceInfo)(nil),                // 27: ntt.devices.v1.Device.Status.DeviceInfo.ControlPlaneInterfaceInfo
	(*Device_Status_DeviceInfo_HardwareInformation_Capability)(nil),           // 28: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Capability
	(*Device_Status_DeviceInfo_HardwareInformation_OS)(nil),                   // 29: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.OS
	(*Device_Status_DeviceInfo_HardwareInformation_BIOS)(nil),                 // 30: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.BIOS
	(*Device_Status_DeviceInfo_HardwareInformation_System)(nil),               // 31: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.System
	(*Device_Status_DeviceInfo_HardwareInformation_CPU)(nil),                  // 32: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.CPU
	(*Device_Status_DeviceInfo_HardwareInformation_Block)(nil),                // 33: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Block
	(*Device_Status_DeviceInfo_HardwareInformation_Network)(nil),              // 34: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Network
	(*Device_Status_DeviceInfo_HardwareInformation_GPU)(nil),                  // 35: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.GPU
	(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice)(nil),            // 36: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.PCIDevice
	(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)(nil),           // 37: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo
	(*Device_Status_DeviceInfo_HardwareInformation_HailoInfo)(nil),            // 38: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.HailoInfo
	(*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo)(nil),           // 39: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.NvidiaInfo
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus)(nil),          // 40: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus
	(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration)(nil), // 41: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.System.Configuration
	(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)(nil),        // 42: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor
	(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)(nil),  // 43: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.Cache
	(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)(nil),           // 44: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Block.Disk
	(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)(nil), // 45: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Block.Disk.Partition
	(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)(nil),          // 46: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Network.NIC
	nil, // 47: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Network.NIC.SettingEntry
	(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)(nil),                  // 48: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.GPU.GraphicCard
	(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)(nil),                // 49: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory
	(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)(nil),     // 50: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory.MemoryBank
	(*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo)(nil),        // 51: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.HailoInfo.HailoModuleInfo
	(*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo)(nil),               // 52: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.NvidiaInfo.GpuInfo
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings)(nil), // 53: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.RegistrationSettings
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr)(nil),              // 54: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.FiveGNr
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings)(nil),             // 55: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Settings
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer)(nil),        // 56: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.InitialBearer
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps)(nil),                  // 57: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Eps
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp)(nil),             // 58: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.ThreeGpp
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma)(nil),                 // 59: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Cdma
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality)(nil),        // 60: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalQuality
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic)(nil),              // 61: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Generic
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus)(nil),            // 62: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SimStatus
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem)(nil),                // 63: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem
	nil, // 64: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.SimStatusEntry
	(*Device_Status_DeviceInfo_NetworkInterface_ASInfo)(nil),  // 65: ntt.devices.v1.Device.Status.DeviceInfo.NetworkInterface.ASInfo
	(*Device_Status_DeviceInfo_NetworkInterface_Carrier)(nil), // 66: ntt.devices.v1.Device.Status.DeviceInfo.NetworkInterface.Carrier
	(*meta.Meta)(nil),             // 67: goten.types.Meta
	(*durationpb.Duration)(nil),   // 68: google.protobuf.Duration
	(*iam_iam_common.PCR)(nil),    // 69: ntt.iam.v1.PCR
	(*timestamppb.Timestamp)(nil), // 70: google.protobuf.Timestamp
	(*latlng.LatLng)(nil),         // 71: google.type.LatLng
	(*Device_FieldMask)(nil),      // 72: ntt.devices.v1.Device_FieldMask
}
var edgelq_devices_proto_v1_device_proto_depIdxs = []int32{
	67, // 0: ntt.devices.v1.Device.metadata:type_name -> goten.types.Meta
	5,  // 1: ntt.devices.v1.Device.spec:type_name -> ntt.devices.v1.Device.Spec
	6,  // 2: ntt.devices.v1.Device.status:type_name -> ntt.devices.v1.Device.Status
	7,  // 3: ntt.devices.v1.Device.public_listing_spec:type_name -> ntt.devices.v1.Device.PublicListingSpec
	0,  // 4: ntt.devices.v1.Device.Spec.netplan_api_config_mode:type_name -> ntt.devices.v1.Device_Spec_NetworkConfigMode
	8,  // 5: ntt.devices.v1.Device.Spec.ssh_config:type_name -> ntt.devices.v1.Device.Spec.SSHConfig
	9,  // 6: ntt.devices.v1.Device.Spec.attestation_config:type_name -> ntt.devices.v1.Device.Spec.AttestationConfig
	10, // 7: ntt.devices.v1.Device.Spec.logging_config:type_name -> ntt.devices.v1.Device.Spec.LoggingConfig
	11, // 8: ntt.devices.v1.Device.Spec.proxy_config:type_name -> ntt.devices.v1.Device.Spec.ProxyConfig
	12, // 9: ntt.devices.v1.Device.Spec.location:type_name -> ntt.devices.v1.Device.Spec.Location
	13, // 10: ntt.devices.v1.Device.Spec.usb_guard:type_name -> ntt.devices.v1.Device.Spec.USBGuard
	18, // 11: ntt.devices.v1.Device.Status.addresses:type_name -> ntt.devices.v1.Device.Status.Address
	19, // 12: ntt.devices.v1.Device.Status.conditions:type_name -> ntt.devices.v1.Device.Status.Condition
	20, // 13: ntt.devices.v1.Device.Status.network_config_state:type_name -> ntt.devices.v1.Device.Status.NetworkConfigState
	21, // 14: ntt.devices.v1.Device.Status.proxy_config_status:type_name -> ntt.devices.v1.Device.Status.ProxyConfigStatus
	22, // 15: ntt.devices.v1.Device.Status.device_info:type_name -> ntt.devices.v1.Device.Status.DeviceInfo
	69, // 16: ntt.devices.v1.Device.Status.attestation_status:type_name -> ntt.iam.v1.PCR
	23, // 17: ntt.devices.v1.Device.Status.normalized_address:type_name -> ntt.devices.v1.Device.Status.NormalizedAddress
	1,  // 18: ntt.devices.v1.Device.Status.connection_status:type_name -> ntt.devices.v1.Device_Status_ConnectionStatus
	70, // 19: ntt.devices.v1.Device.Status.connection_status_change_time:type_name -> google.protobuf.Timestamp
	72, // 20: ntt.devices.v1.Device.PublicListingSpec.field_mask:type_name -> ntt.devices.v1.Device_FieldMask
	14, // 21: ntt.devices.v1.Device.Spec.SSHConfig.ssh_authorized:type_name -> ntt.devices.v1.Device.Spec.SSHConfig.AuthKey
	68, // 22: ntt.devices.v1.Device.Spec.SSHConfig.reject_period:type_name -> google.protobuf.Duration
	17, // 23: ntt.devices.v1.Device.Spec.USBGuard.white_list:type_name -> ntt.devices.v1.Device.Spec.USBGuard.WhiteList
	15, // 24: ntt.devices.v1.Device.Spec.USBGuard.WhiteList.via_port:type_name -> ntt.devices.v1.Device.Spec.USBGuard.Port
	16, // 25: ntt.devices.v1.Device.Spec.USBGuard.WhiteList.with_interface:type_name -> ntt.devices.v1.Device.Spec.USBGuard.Interface
	70, // 26: ntt.devices.v1.Device.Status.Condition.last_heart_beat_time:type_name -> google.protobuf.Timestamp
	70, // 27: ntt.devices.v1.Device.Status.Condition.last_transition_time:type_name -> google.protobuf.Timestamp
	2,  // 28: ntt.devices.v1.Device.Status.NetworkConfigState.active_network_config_source:type_name -> ntt.devices.v1.Device_Status_NetworkConfigState_NetworkConfigSource
	2,  // 29: ntt.devices.v1.Device.Status.NetworkConfigState.desired_network_config_source:type_name -> ntt.devices.v1.Device_Status_NetworkConfigState_NetworkConfigSource
	3,  // 30: ntt.devices.v1.Device.Status.ProxyConfigStatus.active_config_source:type_name -> ntt.devices.v1.Device_Status_ProxyConfigStatus_ProxyConfigSource
	3,  // 31: ntt.devices.v1.Device.Status.ProxyConfigStatus.desired_config_source:type_name -> ntt.devices.v1.Device_Status_ProxyConfigStatus_ProxyConfigSource
	11, // 32: ntt.devices.v1.Device.Status.ProxyConfigStatus.default_config:type_name -> ntt.devices.v1.Device.Spec.ProxyConfig
	11, // 33: ntt.devices.v1.Device.Status.ProxyConfigStatus.active_config:type_name -> ntt.devices.v1.Device.Spec.ProxyConfig
	11, // 34: ntt.devices.v1.Device.Status.ProxyConfigStatus.api_config:type_name -> ntt.devices.v1.Device.Spec.ProxyConfig
	24, // 35: ntt.devices.v1.Device.Status.DeviceInfo.hardware_information:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation
	26, // 36: ntt.devices.v1.Device.Status.DeviceInfo.network_interfaces:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.NetworkInterfacesEntry
	27, // 37: ntt.devices.v1.Device.Status.DeviceInfo.control_plane_interface_info:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.ControlPlaneInterfaceInfo
	71, // 38: ntt.devices.v1.Device.Status.NormalizedAddress.coordinates:type_name -> google.type.LatLng
	29, // 39: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.os:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.OS
	30, // 40: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.bios:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.BIOS
	31, // 41: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.system:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.System
	32, // 42: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.cpu:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.CPU
	33, // 43: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.block:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Block
	34, // 44: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.network:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Network
	35, // 45: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.gpu:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.GPU
	37, // 46: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.memory_info:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo
	38, // 47: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.hailo_info:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.HailoInfo
	39, // 48: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.nvidia_info:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.NvidiaInfo
	40, // 49: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.modem_status:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus
	65, // 50: ntt.devices.v1.Device.Status.DeviceInfo.NetworkInterface.as_info:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.NetworkInterface.ASInfo
	66, // 51: ntt.devices.v1.Device.Status.DeviceInfo.NetworkInterface.carrier:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.NetworkInterface.Carrier
	25, // 52: ntt.devices.v1.Device.Status.DeviceInfo.NetworkInterfacesEntry.value:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.NetworkInterface
	41, // 53: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.System.configuration:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.System.Configuration
	42, // 54: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.CPU.processors:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor
	44, // 55: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Block.disks:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Block.Disk
	46, // 56: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Network.nics:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Network.NIC
	48, // 57: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.GPU.graphic_cards:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.GPU.GraphicCard
	49, // 58: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.memory:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory
	51, // 59: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.HailoInfo.modules:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.HailoInfo.HailoModuleInfo
	52, // 60: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.NvidiaInfo.gpus:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.NvidiaInfo.GpuInfo
	63, // 61: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.modem:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem
	28, // 62: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.capabilities:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Capability
	43, // 63: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.cache_info:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.Cache
	45, // 64: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Block.Disk.partitions:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Block.Disk.Partition
	47, // 65: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Network.NIC.setting:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.Network.NIC.SettingEntry
	36, // 66: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.GPU.GraphicCard.device:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.PCIDevice
	50, // 67: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory.memory_banks:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory.MemoryBank
	53, // 68: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.FiveGNr.registration_settings:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.RegistrationSettings
	55, // 69: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.InitialBearer.settings:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Settings
	56, // 70: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Eps.initial_bearer:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.InitialBearer
	54, // 71: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.ThreeGpp.fiveg_nr:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.FiveGNr
	57, // 72: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.ThreeGpp.eps:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Eps
	60, // 73: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Generic.signal_quality:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalQuality
	58, // 74: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.three_g_pp:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.ThreeGpp
	59, // 75: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.cdma:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Cdma
	61, // 76: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.generic:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Generic
	64, // 77: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.sim_status:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.SimStatusEntry
	62, // 78: ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.SimStatusEntry.value:type_name -> ntt.devices.v1.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SimStatus
	79, // [79:79] is the sub-list for method output_type
	79, // [79:79] is the sub-list for method input_type
	79, // [79:79] is the sub-list for extension type_name
	79, // [79:79] is the sub-list for extension extendee
	0,  // [0:79] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1_device_proto_init() }
func edgelq_devices_proto_v1_device_proto_init() {
	if edgelq_devices_proto_v1_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_PublicListingSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_SSHConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_AttestationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_LoggingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_ProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_USBGuard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_SSHConfig_AuthKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_USBGuard_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_USBGuard_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_USBGuard_WhiteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_NetworkConfigState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_ProxyConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_NormalizedAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_ControlPlaneInterfaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Capability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_OS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_BIOS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_CPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_GPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_HailoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_NetworkInterface_ASInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_NetworkInterface_Carrier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1_device_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_devices_proto_v1_device_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1_device_proto_depIdxs,
		EnumInfos:         edgelq_devices_proto_v1_device_proto_enumTypes,
		MessageInfos:      edgelq_devices_proto_v1_device_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1_device_proto = out.File
	edgelq_devices_proto_v1_device_proto_rawDesc = nil
	edgelq_devices_proto_v1_device_proto_goTypes = nil
	edgelq_devices_proto_v1_device_proto_depIdxs = nil
}
