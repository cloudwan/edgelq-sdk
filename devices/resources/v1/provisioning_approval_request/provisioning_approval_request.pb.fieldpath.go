// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1/provisioning_approval_request.proto
// DO NOT EDIT!!!

package provisioning_approval_request

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_policy"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1/service_account"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProvisioningApprovalRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProvisioningApprovalRequest_FieldPathSelector
	Get(source *ProvisioningApprovalRequest) []interface{}
	GetSingle(source *ProvisioningApprovalRequest) (interface{}, bool)
	ClearValue(item *ProvisioningApprovalRequest)

	// Those methods build corresponding ProvisioningApprovalRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProvisioningApprovalRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ProvisioningApprovalRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProvisioningApprovalRequest_FieldPathArrayItemValue
}

type ProvisioningApprovalRequest_FieldPathSelector int32

const (
	ProvisioningApprovalRequest_FieldPathSelectorName     ProvisioningApprovalRequest_FieldPathSelector = 0
	ProvisioningApprovalRequest_FieldPathSelectorMetadata ProvisioningApprovalRequest_FieldPathSelector = 1
	ProvisioningApprovalRequest_FieldPathSelectorSpec     ProvisioningApprovalRequest_FieldPathSelector = 2
	ProvisioningApprovalRequest_FieldPathSelectorStatus   ProvisioningApprovalRequest_FieldPathSelector = 3
)

func (s ProvisioningApprovalRequest_FieldPathSelector) String() string {
	switch s {
	case ProvisioningApprovalRequest_FieldPathSelectorName:
		return "name"
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		return "metadata"
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		return "spec"
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", s))
	}
}

func BuildProvisioningApprovalRequest_FieldPath(fp gotenobject.RawFieldPath) (ProvisioningApprovalRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProvisioningApprovalRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProvisioningApprovalRequest_FieldTerminalPath{selector: ProvisioningApprovalRequest_FieldPathSelectorName}, nil
		case "metadata":
			return &ProvisioningApprovalRequest_FieldTerminalPath{selector: ProvisioningApprovalRequest_FieldPathSelectorMetadata}, nil
		case "spec":
			return &ProvisioningApprovalRequest_FieldTerminalPath{selector: ProvisioningApprovalRequest_FieldPathSelectorSpec}, nil
		case "status":
			return &ProvisioningApprovalRequest_FieldTerminalPath{selector: ProvisioningApprovalRequest_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisioningApprovalRequest_FieldSubPath{selector: ProvisioningApprovalRequest_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildProvisioningApprovalRequestSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisioningApprovalRequest_FieldSubPath{selector: ProvisioningApprovalRequest_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildProvisioningApprovalRequestStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisioningApprovalRequest_FieldSubPath{selector: ProvisioningApprovalRequest_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProvisioningApprovalRequest", fp)
}

func ParseProvisioningApprovalRequest_FieldPath(rawField string) (ProvisioningApprovalRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProvisioningApprovalRequest_FieldPath(fp)
}

func MustParseProvisioningApprovalRequest_FieldPath(rawField string) ProvisioningApprovalRequest_FieldPath {
	fp, err := ParseProvisioningApprovalRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProvisioningApprovalRequest_FieldTerminalPath struct {
	selector ProvisioningApprovalRequest_FieldPathSelector
}

var _ ProvisioningApprovalRequest_FieldPath = (*ProvisioningApprovalRequest_FieldTerminalPath)(nil)

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) Selector() ProvisioningApprovalRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProvisioningApprovalRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProvisioningApprovalRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProvisioningApprovalRequest
func (fp *ProvisioningApprovalRequest_FieldTerminalPath) Get(source *ProvisioningApprovalRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProvisioningApprovalRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case ProvisioningApprovalRequest_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case ProvisioningApprovalRequest_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProvisioningApprovalRequest))
}

// GetSingle returns value pointed by specific field of from source ProvisioningApprovalRequest
func (fp *ProvisioningApprovalRequest_FieldTerminalPath) GetSingle(source *ProvisioningApprovalRequest) (interface{}, bool) {
	switch fp.selector {
	case ProvisioningApprovalRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProvisioningApprovalRequest))
}

// GetDefault returns a default value of the field type
func (fp *ProvisioningApprovalRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProvisioningApprovalRequest_FieldPathSelectorName:
		return (*Name)(nil)
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		return (*ProvisioningApprovalRequest_Spec)(nil)
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		return (*ProvisioningApprovalRequest_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) ClearValue(item *ProvisioningApprovalRequest) {
	if item != nil {
		switch fp.selector {
		case ProvisioningApprovalRequest_FieldPathSelectorName:
			item.Name = nil
		case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
			item.Metadata = nil
		case ProvisioningApprovalRequest_FieldPathSelectorSpec:
			item.Spec = nil
		case ProvisioningApprovalRequest_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fp.selector))
		}
	}
}

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProvisioningApprovalRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProvisioningApprovalRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProvisioningApprovalRequest_FieldPathSelectorName
}

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) WithIValue(value interface{}) ProvisioningApprovalRequest_FieldPathValue {
	switch fp.selector {
	case ProvisioningApprovalRequest_FieldPathSelectorName:
		return &ProvisioningApprovalRequest_FieldTerminalPathValue{ProvisioningApprovalRequest_FieldTerminalPath: *fp, value: value.(*Name)}
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		return &ProvisioningApprovalRequest_FieldTerminalPathValue{ProvisioningApprovalRequest_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		return &ProvisioningApprovalRequest_FieldTerminalPathValue{ProvisioningApprovalRequest_FieldTerminalPath: *fp, value: value.(*ProvisioningApprovalRequest_Spec)}
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		return &ProvisioningApprovalRequest_FieldTerminalPathValue{ProvisioningApprovalRequest_FieldTerminalPath: *fp, value: value.(*ProvisioningApprovalRequest_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProvisioningApprovalRequest_FieldPathArrayOfValues {
	fpaov := &ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues{ProvisioningApprovalRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProvisioningApprovalRequest_FieldPathSelectorName:
		return &ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues{ProvisioningApprovalRequest_FieldTerminalPath: *fp, values: values.([]*Name)}
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		return &ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues{ProvisioningApprovalRequest_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		return &ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues{ProvisioningApprovalRequest_FieldTerminalPath: *fp, values: values.([]*ProvisioningApprovalRequest_Spec)}
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		return &ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues{ProvisioningApprovalRequest_FieldTerminalPath: *fp, values: values.([]*ProvisioningApprovalRequest_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProvisioningApprovalRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProvisioningApprovalRequest_FieldSubPath struct {
	selector ProvisioningApprovalRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProvisioningApprovalRequest_FieldPath = (*ProvisioningApprovalRequest_FieldSubPath)(nil)

func (fps *ProvisioningApprovalRequest_FieldSubPath) Selector() ProvisioningApprovalRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ProvisioningApprovalRequest_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *ProvisioningApprovalRequest_FieldSubPath) AsSpecSubPath() (ProvisioningApprovalRequestSpec_FieldPath, bool) {
	res, ok := fps.subPath.(ProvisioningApprovalRequestSpec_FieldPath)
	return res, ok
}
func (fps *ProvisioningApprovalRequest_FieldSubPath) AsStatusSubPath() (ProvisioningApprovalRequestStatus_FieldPath, bool) {
	res, ok := fps.subPath.(ProvisioningApprovalRequestStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProvisioningApprovalRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProvisioningApprovalRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProvisioningApprovalRequest
func (fps *ProvisioningApprovalRequest_FieldSubPath) Get(source *ProvisioningApprovalRequest) (values []interface{}) {
	switch fps.selector {
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		values = append(values, fps.subPath.GetRaw(source.GetStatus())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fps.selector))
	}
	return
}

func (fps *ProvisioningApprovalRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProvisioningApprovalRequest))
}

// GetSingle returns value of selected field from source ProvisioningApprovalRequest
func (fps *ProvisioningApprovalRequest_FieldSubPath) GetSingle(source *ProvisioningApprovalRequest) (interface{}, bool) {
	switch fps.selector {
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fps.selector))
	}
}

func (fps *ProvisioningApprovalRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProvisioningApprovalRequest))
}

// GetDefault returns a default value of the field type
func (fps *ProvisioningApprovalRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProvisioningApprovalRequest_FieldSubPath) ClearValue(item *ProvisioningApprovalRequest) {
	if item != nil {
		switch fps.selector {
		case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case ProvisioningApprovalRequest_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case ProvisioningApprovalRequest_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fps.selector))
		}
	}
}

func (fps *ProvisioningApprovalRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProvisioningApprovalRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProvisioningApprovalRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProvisioningApprovalRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProvisioningApprovalRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProvisioningApprovalRequest_FieldSubPath) WithIValue(value interface{}) ProvisioningApprovalRequest_FieldPathValue {
	return &ProvisioningApprovalRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProvisioningApprovalRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProvisioningApprovalRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ProvisioningApprovalRequest_FieldPathArrayOfValues {
	return &ProvisioningApprovalRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProvisioningApprovalRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProvisioningApprovalRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ProvisioningApprovalRequest_FieldPathArrayItemValue {
	return &ProvisioningApprovalRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProvisioningApprovalRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProvisioningApprovalRequest_FieldPathValue allows storing values for ProvisioningApprovalRequest fields according to their type
type ProvisioningApprovalRequest_FieldPathValue interface {
	ProvisioningApprovalRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProvisioningApprovalRequest)
	CompareWith(*ProvisioningApprovalRequest) (cmp int, comparable bool)
}

func ParseProvisioningApprovalRequest_FieldPathValue(pathStr, valueStr string) (ProvisioningApprovalRequest_FieldPathValue, error) {
	fp, err := ParseProvisioningApprovalRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisioningApprovalRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProvisioningApprovalRequest_FieldPathValue), nil
}

func MustParseProvisioningApprovalRequest_FieldPathValue(pathStr, valueStr string) ProvisioningApprovalRequest_FieldPathValue {
	fpv, err := ParseProvisioningApprovalRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProvisioningApprovalRequest_FieldTerminalPathValue struct {
	ProvisioningApprovalRequest_FieldTerminalPath
	value interface{}
}

var _ ProvisioningApprovalRequest_FieldPathValue = (*ProvisioningApprovalRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProvisioningApprovalRequest' as interface{}
func (fpv *ProvisioningApprovalRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProvisioningApprovalRequest_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *ProvisioningApprovalRequest_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *ProvisioningApprovalRequest_FieldTerminalPathValue) AsSpecValue() (*ProvisioningApprovalRequest_Spec, bool) {
	res, ok := fpv.value.(*ProvisioningApprovalRequest_Spec)
	return res, ok
}
func (fpv *ProvisioningApprovalRequest_FieldTerminalPathValue) AsStatusValue() (*ProvisioningApprovalRequest_Status, bool) {
	res, ok := fpv.value.(*ProvisioningApprovalRequest_Status)
	return res, ok
}

// SetTo stores value for selected field for object ProvisioningApprovalRequest
func (fpv *ProvisioningApprovalRequest_FieldTerminalPathValue) SetTo(target **ProvisioningApprovalRequest) {
	if *target == nil {
		*target = new(ProvisioningApprovalRequest)
	}
	switch fpv.selector {
	case ProvisioningApprovalRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*ProvisioningApprovalRequest_Spec)
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*ProvisioningApprovalRequest_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fpv.selector))
	}
}

func (fpv *ProvisioningApprovalRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningApprovalRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisioningApprovalRequest_FieldTerminalPathValue' with the value under path in 'ProvisioningApprovalRequest'.
func (fpv *ProvisioningApprovalRequest_FieldTerminalPathValue) CompareWith(source *ProvisioningApprovalRequest) (int, bool) {
	switch fpv.selector {
	case ProvisioningApprovalRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		return 0, false
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		return 0, false
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fpv.selector))
	}
}

func (fpv *ProvisioningApprovalRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProvisioningApprovalRequest))
}

type ProvisioningApprovalRequest_FieldSubPathValue struct {
	ProvisioningApprovalRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProvisioningApprovalRequest_FieldPathValue = (*ProvisioningApprovalRequest_FieldSubPathValue)(nil)

func (fpvs *ProvisioningApprovalRequest_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *ProvisioningApprovalRequest_FieldSubPathValue) AsSpecPathValue() (ProvisioningApprovalRequestSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProvisioningApprovalRequestSpec_FieldPathValue)
	return res, ok
}
func (fpvs *ProvisioningApprovalRequest_FieldSubPathValue) AsStatusPathValue() (ProvisioningApprovalRequestStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProvisioningApprovalRequestStatus_FieldPathValue)
	return res, ok
}

func (fpvs *ProvisioningApprovalRequest_FieldSubPathValue) SetTo(target **ProvisioningApprovalRequest) {
	if *target == nil {
		*target = new(ProvisioningApprovalRequest)
	}
	switch fpvs.Selector() {
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		fpvs.subPathValue.(ProvisioningApprovalRequestSpec_FieldPathValue).SetTo(&(*target).Spec)
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		fpvs.subPathValue.(ProvisioningApprovalRequestStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisioningApprovalRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningApprovalRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProvisioningApprovalRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProvisioningApprovalRequest_FieldSubPathValue) CompareWith(source *ProvisioningApprovalRequest) (int, bool) {
	switch fpvs.Selector() {
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		return fpvs.subPathValue.(ProvisioningApprovalRequestSpec_FieldPathValue).CompareWith(source.GetSpec())
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		return fpvs.subPathValue.(ProvisioningApprovalRequestStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisioningApprovalRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProvisioningApprovalRequest))
}

// ProvisioningApprovalRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ProvisioningApprovalRequest according to their type
// Present only for array (repeated) types.
type ProvisioningApprovalRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProvisioningApprovalRequest_FieldPath
	ContainsValue(*ProvisioningApprovalRequest) bool
}

// ParseProvisioningApprovalRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProvisioningApprovalRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ProvisioningApprovalRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseProvisioningApprovalRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisioningApprovalRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProvisioningApprovalRequest_FieldPathArrayItemValue), nil
}

func MustParseProvisioningApprovalRequest_FieldPathArrayItemValue(pathStr, valueStr string) ProvisioningApprovalRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseProvisioningApprovalRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProvisioningApprovalRequest_FieldTerminalPathArrayItemValue struct {
	ProvisioningApprovalRequest_FieldTerminalPath
	value interface{}
}

var _ ProvisioningApprovalRequest_FieldPathArrayItemValue = (*ProvisioningApprovalRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProvisioningApprovalRequest as interface{}
func (fpaiv *ProvisioningApprovalRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProvisioningApprovalRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ProvisioningApprovalRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProvisioningApprovalRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProvisioningApprovalRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProvisioningApprovalRequest'
func (fpaiv *ProvisioningApprovalRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ProvisioningApprovalRequest) bool {
	slice := fpaiv.ProvisioningApprovalRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProvisioningApprovalRequest_FieldSubPathArrayItemValue struct {
	ProvisioningApprovalRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProvisioningApprovalRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProvisioningApprovalRequest_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProvisioningApprovalRequest_FieldSubPathArrayItemValue) AsSpecPathItemValue() (ProvisioningApprovalRequestSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProvisioningApprovalRequestSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProvisioningApprovalRequest_FieldSubPathArrayItemValue) AsStatusPathItemValue() (ProvisioningApprovalRequestStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProvisioningApprovalRequestStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProvisioningApprovalRequest'
func (fpaivs *ProvisioningApprovalRequest_FieldSubPathArrayItemValue) ContainsValue(source *ProvisioningApprovalRequest) bool {
	switch fpaivs.Selector() {
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(ProvisioningApprovalRequestSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(ProvisioningApprovalRequestStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest: %d", fpaivs.Selector()))
	}
}

// ProvisioningApprovalRequest_FieldPathArrayOfValues allows storing slice of values for ProvisioningApprovalRequest fields according to their type
type ProvisioningApprovalRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProvisioningApprovalRequest_FieldPath
}

func ParseProvisioningApprovalRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ProvisioningApprovalRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseProvisioningApprovalRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisioningApprovalRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProvisioningApprovalRequest_FieldPathArrayOfValues), nil
}

func MustParseProvisioningApprovalRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ProvisioningApprovalRequest_FieldPathArrayOfValues {
	fpaov, err := ParseProvisioningApprovalRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues struct {
	ProvisioningApprovalRequest_FieldTerminalPath
	values interface{}
}

var _ ProvisioningApprovalRequest_FieldPathArrayOfValues = (*ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProvisioningApprovalRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case ProvisioningApprovalRequest_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case ProvisioningApprovalRequest_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*ProvisioningApprovalRequest_Spec) {
			values = append(values, v)
		}
	case ProvisioningApprovalRequest_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*ProvisioningApprovalRequest_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*ProvisioningApprovalRequest_Spec, bool) {
	res, ok := fpaov.values.([]*ProvisioningApprovalRequest_Spec)
	return res, ok
}
func (fpaov *ProvisioningApprovalRequest_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*ProvisioningApprovalRequest_Status, bool) {
	res, ok := fpaov.values.([]*ProvisioningApprovalRequest_Status)
	return res, ok
}

type ProvisioningApprovalRequest_FieldSubPathArrayOfValues struct {
	ProvisioningApprovalRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProvisioningApprovalRequest_FieldPathArrayOfValues = (*ProvisioningApprovalRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProvisioningApprovalRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProvisioningApprovalRequest_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProvisioningApprovalRequest_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (ProvisioningApprovalRequestSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProvisioningApprovalRequestSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProvisioningApprovalRequest_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (ProvisioningApprovalRequestStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProvisioningApprovalRequestStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProvisioningApprovalRequestSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProvisioningApprovalRequestSpec_FieldPathSelector
	Get(source *ProvisioningApprovalRequest_Spec) []interface{}
	GetSingle(source *ProvisioningApprovalRequest_Spec) (interface{}, bool)
	ClearValue(item *ProvisioningApprovalRequest_Spec)

	// Those methods build corresponding ProvisioningApprovalRequestSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProvisioningApprovalRequestSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) ProvisioningApprovalRequestSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProvisioningApprovalRequestSpec_FieldPathArrayItemValue
}

type ProvisioningApprovalRequestSpec_FieldPathSelector int32

const (
	ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion     ProvisioningApprovalRequestSpec_FieldPathSelector = 0
	ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount ProvisioningApprovalRequestSpec_FieldPathSelector = 1
)

func (s ProvisioningApprovalRequestSpec_FieldPathSelector) String() string {
	switch s {
	case ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion:
		return "conclusion"
	case ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount:
		return "service_account"
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Spec: %d", s))
	}
}

func BuildProvisioningApprovalRequestSpec_FieldPath(fp gotenobject.RawFieldPath) (ProvisioningApprovalRequestSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProvisioningApprovalRequest_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conclusion":
			return &ProvisioningApprovalRequestSpec_FieldTerminalPath{selector: ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion}, nil
		case "service_account", "serviceAccount", "service-account":
			return &ProvisioningApprovalRequestSpec_FieldTerminalPath{selector: ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProvisioningApprovalRequest_Spec", fp)
}

func ParseProvisioningApprovalRequestSpec_FieldPath(rawField string) (ProvisioningApprovalRequestSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProvisioningApprovalRequestSpec_FieldPath(fp)
}

func MustParseProvisioningApprovalRequestSpec_FieldPath(rawField string) ProvisioningApprovalRequestSpec_FieldPath {
	fp, err := ParseProvisioningApprovalRequestSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProvisioningApprovalRequestSpec_FieldTerminalPath struct {
	selector ProvisioningApprovalRequestSpec_FieldPathSelector
}

var _ ProvisioningApprovalRequestSpec_FieldPath = (*ProvisioningApprovalRequestSpec_FieldTerminalPath)(nil)

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) Selector() ProvisioningApprovalRequestSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProvisioningApprovalRequest_Spec
func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) Get(source *ProvisioningApprovalRequest_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion:
			values = append(values, source.Conclusion)
		case ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount:
			if source.ServiceAccount != nil {
				values = append(values, source.ServiceAccount)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProvisioningApprovalRequest_Spec))
}

// GetSingle returns value pointed by specific field of from source ProvisioningApprovalRequest_Spec
func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) GetSingle(source *ProvisioningApprovalRequest_Spec) (interface{}, bool) {
	switch fp.selector {
	case ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion:
		return source.GetConclusion(), source != nil
	case ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount:
		res := source.GetServiceAccount()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Spec: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProvisioningApprovalRequest_Spec))
}

// GetDefault returns a default value of the field type
func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion:
		return ProvisioningApprovalRequest_Spec_CONCLUSION_NOT_SPECIFIED
	case ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount:
		return (*iam_service_account.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Spec: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) ClearValue(item *ProvisioningApprovalRequest_Spec) {
	if item != nil {
		switch fp.selector {
		case ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion:
			item.Conclusion = ProvisioningApprovalRequest_Spec_CONCLUSION_NOT_SPECIFIED
		case ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount:
			item.ServiceAccount = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Spec: %d", fp.selector))
		}
	}
}

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProvisioningApprovalRequest_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion ||
		fp.selector == ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount
}

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) WithIValue(value interface{}) ProvisioningApprovalRequestSpec_FieldPathValue {
	switch fp.selector {
	case ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion:
		return &ProvisioningApprovalRequestSpec_FieldTerminalPathValue{ProvisioningApprovalRequestSpec_FieldTerminalPath: *fp, value: value.(ProvisioningApprovalRequest_Spec_Conclusion)}
	case ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount:
		return &ProvisioningApprovalRequestSpec_FieldTerminalPathValue{ProvisioningApprovalRequestSpec_FieldTerminalPath: *fp, value: value.(*iam_service_account.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Spec: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProvisioningApprovalRequestSpec_FieldPathArrayOfValues {
	fpaov := &ProvisioningApprovalRequestSpec_FieldTerminalPathArrayOfValues{ProvisioningApprovalRequestSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion:
		return &ProvisioningApprovalRequestSpec_FieldTerminalPathArrayOfValues{ProvisioningApprovalRequestSpec_FieldTerminalPath: *fp, values: values.([]ProvisioningApprovalRequest_Spec_Conclusion)}
	case ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount:
		return &ProvisioningApprovalRequestSpec_FieldTerminalPathArrayOfValues{ProvisioningApprovalRequestSpec_FieldTerminalPath: *fp, values: values.([]*iam_service_account.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProvisioningApprovalRequestSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Spec: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequestSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProvisioningApprovalRequestSpec_FieldPathValue allows storing values for Spec fields according to their type
type ProvisioningApprovalRequestSpec_FieldPathValue interface {
	ProvisioningApprovalRequestSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProvisioningApprovalRequest_Spec)
	CompareWith(*ProvisioningApprovalRequest_Spec) (cmp int, comparable bool)
}

func ParseProvisioningApprovalRequestSpec_FieldPathValue(pathStr, valueStr string) (ProvisioningApprovalRequestSpec_FieldPathValue, error) {
	fp, err := ParseProvisioningApprovalRequestSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProvisioningApprovalRequestSpec_FieldPathValue), nil
}

func MustParseProvisioningApprovalRequestSpec_FieldPathValue(pathStr, valueStr string) ProvisioningApprovalRequestSpec_FieldPathValue {
	fpv, err := ParseProvisioningApprovalRequestSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProvisioningApprovalRequestSpec_FieldTerminalPathValue struct {
	ProvisioningApprovalRequestSpec_FieldTerminalPath
	value interface{}
}

var _ ProvisioningApprovalRequestSpec_FieldPathValue = (*ProvisioningApprovalRequestSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *ProvisioningApprovalRequestSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProvisioningApprovalRequestSpec_FieldTerminalPathValue) AsConclusionValue() (ProvisioningApprovalRequest_Spec_Conclusion, bool) {
	res, ok := fpv.value.(ProvisioningApprovalRequest_Spec_Conclusion)
	return res, ok
}
func (fpv *ProvisioningApprovalRequestSpec_FieldTerminalPathValue) AsServiceAccountValue() (*iam_service_account.Reference, bool) {
	res, ok := fpv.value.(*iam_service_account.Reference)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *ProvisioningApprovalRequestSpec_FieldTerminalPathValue) SetTo(target **ProvisioningApprovalRequest_Spec) {
	if *target == nil {
		*target = new(ProvisioningApprovalRequest_Spec)
	}
	switch fpv.selector {
	case ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion:
		(*target).Conclusion = fpv.value.(ProvisioningApprovalRequest_Spec_Conclusion)
	case ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount:
		(*target).ServiceAccount = fpv.value.(*iam_service_account.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Spec: %d", fpv.selector))
	}
}

func (fpv *ProvisioningApprovalRequestSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningApprovalRequest_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisioningApprovalRequestSpec_FieldTerminalPathValue' with the value under path in 'ProvisioningApprovalRequest_Spec'.
func (fpv *ProvisioningApprovalRequestSpec_FieldTerminalPathValue) CompareWith(source *ProvisioningApprovalRequest_Spec) (int, bool) {
	switch fpv.selector {
	case ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion:
		leftValue := fpv.value.(ProvisioningApprovalRequest_Spec_Conclusion)
		rightValue := source.GetConclusion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount:
		leftValue := fpv.value.(*iam_service_account.Reference)
		rightValue := source.GetServiceAccount()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Spec: %d", fpv.selector))
	}
}

func (fpv *ProvisioningApprovalRequestSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProvisioningApprovalRequest_Spec))
}

// ProvisioningApprovalRequestSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type ProvisioningApprovalRequestSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProvisioningApprovalRequestSpec_FieldPath
	ContainsValue(*ProvisioningApprovalRequest_Spec) bool
}

// ParseProvisioningApprovalRequestSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProvisioningApprovalRequestSpec_FieldPathArrayItemValue(pathStr, valueStr string) (ProvisioningApprovalRequestSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseProvisioningApprovalRequestSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProvisioningApprovalRequestSpec_FieldPathArrayItemValue), nil
}

func MustParseProvisioningApprovalRequestSpec_FieldPathArrayItemValue(pathStr, valueStr string) ProvisioningApprovalRequestSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseProvisioningApprovalRequestSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProvisioningApprovalRequestSpec_FieldTerminalPathArrayItemValue struct {
	ProvisioningApprovalRequestSpec_FieldTerminalPath
	value interface{}
}

var _ ProvisioningApprovalRequestSpec_FieldPathArrayItemValue = (*ProvisioningApprovalRequestSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProvisioningApprovalRequest_Spec as interface{}
func (fpaiv *ProvisioningApprovalRequestSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProvisioningApprovalRequestSpec_FieldTerminalPathArrayItemValue) GetSingle(source *ProvisioningApprovalRequest_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProvisioningApprovalRequestSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProvisioningApprovalRequest_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *ProvisioningApprovalRequestSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *ProvisioningApprovalRequest_Spec) bool {
	slice := fpaiv.ProvisioningApprovalRequestSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProvisioningApprovalRequestSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type ProvisioningApprovalRequestSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProvisioningApprovalRequestSpec_FieldPath
}

func ParseProvisioningApprovalRequestSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (ProvisioningApprovalRequestSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseProvisioningApprovalRequestSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProvisioningApprovalRequestSpec_FieldPathArrayOfValues), nil
}

func MustParseProvisioningApprovalRequestSpec_FieldPathArrayOfValues(pathStr, valuesStr string) ProvisioningApprovalRequestSpec_FieldPathArrayOfValues {
	fpaov, err := ParseProvisioningApprovalRequestSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProvisioningApprovalRequestSpec_FieldTerminalPathArrayOfValues struct {
	ProvisioningApprovalRequestSpec_FieldTerminalPath
	values interface{}
}

var _ ProvisioningApprovalRequestSpec_FieldPathArrayOfValues = (*ProvisioningApprovalRequestSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProvisioningApprovalRequestSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProvisioningApprovalRequestSpec_FieldPathSelectorConclusion:
		for _, v := range fpaov.values.([]ProvisioningApprovalRequest_Spec_Conclusion) {
			values = append(values, v)
		}
	case ProvisioningApprovalRequestSpec_FieldPathSelectorServiceAccount:
		for _, v := range fpaov.values.([]*iam_service_account.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProvisioningApprovalRequestSpec_FieldTerminalPathArrayOfValues) AsConclusionArrayOfValues() ([]ProvisioningApprovalRequest_Spec_Conclusion, bool) {
	res, ok := fpaov.values.([]ProvisioningApprovalRequest_Spec_Conclusion)
	return res, ok
}
func (fpaov *ProvisioningApprovalRequestSpec_FieldTerminalPathArrayOfValues) AsServiceAccountArrayOfValues() ([]*iam_service_account.Reference, bool) {
	res, ok := fpaov.values.([]*iam_service_account.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProvisioningApprovalRequestStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProvisioningApprovalRequestStatus_FieldPathSelector
	Get(source *ProvisioningApprovalRequest_Status) []interface{}
	GetSingle(source *ProvisioningApprovalRequest_Status) (interface{}, bool)
	ClearValue(item *ProvisioningApprovalRequest_Status)

	// Those methods build corresponding ProvisioningApprovalRequestStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProvisioningApprovalRequestStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) ProvisioningApprovalRequestStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProvisioningApprovalRequestStatus_FieldPathArrayItemValue
}

type ProvisioningApprovalRequestStatus_FieldPathSelector int32

func (s ProvisioningApprovalRequestStatus_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Status: %d", s))
	}
}

func BuildProvisioningApprovalRequestStatus_FieldPath(fp gotenobject.RawFieldPath) (ProvisioningApprovalRequestStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProvisioningApprovalRequest_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProvisioningApprovalRequest_Status", fp)
}

func ParseProvisioningApprovalRequestStatus_FieldPath(rawField string) (ProvisioningApprovalRequestStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProvisioningApprovalRequestStatus_FieldPath(fp)
}

func MustParseProvisioningApprovalRequestStatus_FieldPath(rawField string) ProvisioningApprovalRequestStatus_FieldPath {
	fp, err := ParseProvisioningApprovalRequestStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProvisioningApprovalRequestStatus_FieldTerminalPath struct {
	selector ProvisioningApprovalRequestStatus_FieldPathSelector
}

var _ ProvisioningApprovalRequestStatus_FieldPath = (*ProvisioningApprovalRequestStatus_FieldTerminalPath)(nil)

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) Selector() ProvisioningApprovalRequestStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProvisioningApprovalRequest_Status
func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) Get(source *ProvisioningApprovalRequest_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProvisioningApprovalRequest_Status))
}

// GetSingle returns value pointed by specific field of from source ProvisioningApprovalRequest_Status
func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) GetSingle(source *ProvisioningApprovalRequest_Status) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Status: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProvisioningApprovalRequest_Status))
}

// GetDefault returns a default value of the field type
func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Status: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) ClearValue(item *ProvisioningApprovalRequest_Status) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Status: %d", fp.selector))
		}
	}
}

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProvisioningApprovalRequest_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) WithIValue(value interface{}) ProvisioningApprovalRequestStatus_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Status: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProvisioningApprovalRequestStatus_FieldPathArrayOfValues {
	fpaov := &ProvisioningApprovalRequestStatus_FieldTerminalPathArrayOfValues{ProvisioningApprovalRequestStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProvisioningApprovalRequestStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Status: %d", fp.selector))
	}
}

func (fp *ProvisioningApprovalRequestStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProvisioningApprovalRequestStatus_FieldPathValue allows storing values for Status fields according to their type
type ProvisioningApprovalRequestStatus_FieldPathValue interface {
	ProvisioningApprovalRequestStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProvisioningApprovalRequest_Status)
	CompareWith(*ProvisioningApprovalRequest_Status) (cmp int, comparable bool)
}

func ParseProvisioningApprovalRequestStatus_FieldPathValue(pathStr, valueStr string) (ProvisioningApprovalRequestStatus_FieldPathValue, error) {
	fp, err := ParseProvisioningApprovalRequestStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProvisioningApprovalRequestStatus_FieldPathValue), nil
}

func MustParseProvisioningApprovalRequestStatus_FieldPathValue(pathStr, valueStr string) ProvisioningApprovalRequestStatus_FieldPathValue {
	fpv, err := ParseProvisioningApprovalRequestStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProvisioningApprovalRequestStatus_FieldTerminalPathValue struct {
	ProvisioningApprovalRequestStatus_FieldTerminalPath
	value interface{}
}

var _ ProvisioningApprovalRequestStatus_FieldPathValue = (*ProvisioningApprovalRequestStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *ProvisioningApprovalRequestStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object Status
func (fpv *ProvisioningApprovalRequestStatus_FieldTerminalPathValue) SetTo(target **ProvisioningApprovalRequest_Status) {
	if *target == nil {
		*target = new(ProvisioningApprovalRequest_Status)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Status: %d", fpv.selector))
	}
}

func (fpv *ProvisioningApprovalRequestStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisioningApprovalRequest_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisioningApprovalRequestStatus_FieldTerminalPathValue' with the value under path in 'ProvisioningApprovalRequest_Status'.
func (fpv *ProvisioningApprovalRequestStatus_FieldTerminalPathValue) CompareWith(source *ProvisioningApprovalRequest_Status) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisioningApprovalRequest_Status: %d", fpv.selector))
	}
}

func (fpv *ProvisioningApprovalRequestStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProvisioningApprovalRequest_Status))
}

// ProvisioningApprovalRequestStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type ProvisioningApprovalRequestStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProvisioningApprovalRequestStatus_FieldPath
	ContainsValue(*ProvisioningApprovalRequest_Status) bool
}

// ParseProvisioningApprovalRequestStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProvisioningApprovalRequestStatus_FieldPathArrayItemValue(pathStr, valueStr string) (ProvisioningApprovalRequestStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseProvisioningApprovalRequestStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProvisioningApprovalRequestStatus_FieldPathArrayItemValue), nil
}

func MustParseProvisioningApprovalRequestStatus_FieldPathArrayItemValue(pathStr, valueStr string) ProvisioningApprovalRequestStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseProvisioningApprovalRequestStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProvisioningApprovalRequestStatus_FieldTerminalPathArrayItemValue struct {
	ProvisioningApprovalRequestStatus_FieldTerminalPath
	value interface{}
}

var _ ProvisioningApprovalRequestStatus_FieldPathArrayItemValue = (*ProvisioningApprovalRequestStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProvisioningApprovalRequest_Status as interface{}
func (fpaiv *ProvisioningApprovalRequestStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProvisioningApprovalRequestStatus_FieldTerminalPathArrayItemValue) GetSingle(source *ProvisioningApprovalRequest_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProvisioningApprovalRequestStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProvisioningApprovalRequest_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *ProvisioningApprovalRequestStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *ProvisioningApprovalRequest_Status) bool {
	slice := fpaiv.ProvisioningApprovalRequestStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProvisioningApprovalRequestStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type ProvisioningApprovalRequestStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProvisioningApprovalRequestStatus_FieldPath
}

func ParseProvisioningApprovalRequestStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (ProvisioningApprovalRequestStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseProvisioningApprovalRequestStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProvisioningApprovalRequestStatus_FieldPathArrayOfValues), nil
}

func MustParseProvisioningApprovalRequestStatus_FieldPathArrayOfValues(pathStr, valuesStr string) ProvisioningApprovalRequestStatus_FieldPathArrayOfValues {
	fpaov, err := ParseProvisioningApprovalRequestStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProvisioningApprovalRequestStatus_FieldTerminalPathArrayOfValues struct {
	ProvisioningApprovalRequestStatus_FieldTerminalPath
	values interface{}
}

var _ ProvisioningApprovalRequestStatus_FieldPathArrayOfValues = (*ProvisioningApprovalRequestStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProvisioningApprovalRequestStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}
