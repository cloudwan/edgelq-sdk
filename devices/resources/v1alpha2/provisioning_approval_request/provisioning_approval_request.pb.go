// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1alpha2/provisioning_approval_request.proto
// DO NOT EDIT!!!

package provisioning_approval_request

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/provisioning_policy"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProvisioningApprovalRequest_Spec_Conclusion int32

const (
	ProvisioningApprovalRequest_Spec_CONCLUSION_NOT_SPECIFIED ProvisioningApprovalRequest_Spec_Conclusion = 0
	ProvisioningApprovalRequest_Spec_APPROVED                 ProvisioningApprovalRequest_Spec_Conclusion = 1
	ProvisioningApprovalRequest_Spec_REVOKED                  ProvisioningApprovalRequest_Spec_Conclusion = 2
)

var (
	ProvisioningApprovalRequest_Spec_Conclusion_name = map[int32]string{
		0: "CONCLUSION_NOT_SPECIFIED",
		1: "APPROVED",
		2: "REVOKED",
	}

	ProvisioningApprovalRequest_Spec_Conclusion_value = map[string]int32{
		"CONCLUSION_NOT_SPECIFIED": 0,
		"APPROVED":                 1,
		"REVOKED":                  2,
	}
)

func (x ProvisioningApprovalRequest_Spec_Conclusion) Enum() *ProvisioningApprovalRequest_Spec_Conclusion {
	p := new(ProvisioningApprovalRequest_Spec_Conclusion)
	*p = x
	return p
}

func (x ProvisioningApprovalRequest_Spec_Conclusion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (ProvisioningApprovalRequest_Spec_Conclusion) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_enumTypes[0].Descriptor()
}

func (ProvisioningApprovalRequest_Spec_Conclusion) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_enumTypes[0]
}

func (x ProvisioningApprovalRequest_Spec_Conclusion) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use ProvisioningApprovalRequest_Spec_Conclusion.ProtoReflect.Descriptor instead.
func (ProvisioningApprovalRequest_Spec_Conclusion) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDescGZIP(), []int{0, 0, 0}
}

// ProvisioningApprovalRequest Resource
type ProvisioningApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ProvisioningApprovalRequest
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\-]{0,28}[a-z0-9]
	Name     *Name                               `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Spec     *ProvisioningApprovalRequest_Spec   `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	Status   *ProvisioningApprovalRequest_Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	Metadata *meta.Meta                          `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
}

func (m *ProvisioningApprovalRequest) Reset() {
	*m = ProvisioningApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisioningApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisioningApprovalRequest) ProtoMessage() {}

func (m *ProvisioningApprovalRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisioningApprovalRequest) GotenMessage() {}

// Deprecated, Use ProvisioningApprovalRequest.ProtoReflect.Descriptor instead.
func (*ProvisioningApprovalRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDescGZIP(), []int{0}
}

func (m *ProvisioningApprovalRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisioningApprovalRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisioningApprovalRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisioningApprovalRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProvisioningApprovalRequest) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ProvisioningApprovalRequest) GetSpec() *ProvisioningApprovalRequest_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProvisioningApprovalRequest) GetStatus() *ProvisioningApprovalRequest_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProvisioningApprovalRequest) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ProvisioningApprovalRequest) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ProvisioningApprovalRequest"))
	}
	m.Name = fv
}

func (m *ProvisioningApprovalRequest) SetSpec(fv *ProvisioningApprovalRequest_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "ProvisioningApprovalRequest"))
	}
	m.Spec = fv
}

func (m *ProvisioningApprovalRequest) SetStatus(fv *ProvisioningApprovalRequest_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "ProvisioningApprovalRequest"))
	}
	m.Status = fv
}

func (m *ProvisioningApprovalRequest) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "ProvisioningApprovalRequest"))
	}
	m.Metadata = fv
}

type ProvisioningApprovalRequest_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The verdicit for the approval, approved or revoked.
	Conclusion ProvisioningApprovalRequest_Spec_Conclusion `protobuf:"varint,1,opt,name=conclusion,proto3,enum=ntt.devices.v1alpha2.ProvisioningApprovalRequest_Spec_Conclusion" json:"conclusion,omitempty" firestore:"conclusion"`
	// System managed, this service account will be used by the Device resource
	// once it's approved. A device finds its pending request using this field.
	ServiceAccount *iam_service_account.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty" firestore:"serviceAccount"`
}

func (m *ProvisioningApprovalRequest_Spec) Reset() {
	*m = ProvisioningApprovalRequest_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisioningApprovalRequest_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisioningApprovalRequest_Spec) ProtoMessage() {}

func (m *ProvisioningApprovalRequest_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisioningApprovalRequest_Spec) GotenMessage() {}

// Deprecated, Use ProvisioningApprovalRequest_Spec.ProtoReflect.Descriptor instead.
func (*ProvisioningApprovalRequest_Spec) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ProvisioningApprovalRequest_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisioningApprovalRequest_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisioningApprovalRequest_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisioningApprovalRequest_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProvisioningApprovalRequest_Spec) GetConclusion() ProvisioningApprovalRequest_Spec_Conclusion {
	if m != nil {
		return m.Conclusion
	}
	return ProvisioningApprovalRequest_Spec_CONCLUSION_NOT_SPECIFIED
}

func (m *ProvisioningApprovalRequest_Spec) GetServiceAccount() *iam_service_account.Reference {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func (m *ProvisioningApprovalRequest_Spec) SetConclusion(fv ProvisioningApprovalRequest_Spec_Conclusion) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Conclusion", "ProvisioningApprovalRequest_Spec"))
	}
	m.Conclusion = fv
}

func (m *ProvisioningApprovalRequest_Spec) SetServiceAccount(fv *iam_service_account.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceAccount", "ProvisioningApprovalRequest_Spec"))
	}
	m.ServiceAccount = fv
}

type ProvisioningApprovalRequest_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *ProvisioningApprovalRequest_Status) Reset() {
	*m = ProvisioningApprovalRequest_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisioningApprovalRequest_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisioningApprovalRequest_Status) ProtoMessage() {}

func (m *ProvisioningApprovalRequest_Status) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisioningApprovalRequest_Status) GotenMessage() {}

// Deprecated, Use ProvisioningApprovalRequest_Status.ProtoReflect.Descriptor instead.
func (*ProvisioningApprovalRequest_Status) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ProvisioningApprovalRequest_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisioningApprovalRequest_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisioningApprovalRequest_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisioningApprovalRequest_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

var edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto preflect.FileDescriptor

var edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDesc = []byte{
	0x0a, 0x41, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x09, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x0a, 0x1d, 0x0a, 0x1b, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x82, 0x02, 0x0a, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x61, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0xb2, 0xda, 0x21, 0x23, 0x12, 0x21, 0x0a, 0x1d, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x43, 0x4c,
	0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x02,
	0x1a, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x9e, 0x05, 0xea, 0x41, 0xbe,
	0x01, 0x0a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x8b, 0x01, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x7d, 0x92,
	0xd9, 0x21, 0x52, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x1c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a,
	0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x38, 0x03, 0xb2, 0xdf, 0x21, 0xd3, 0x02, 0x0a, 0xd0, 0x02, 0x0a, 0xb3, 0x02,
	0x0a, 0x06, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x52,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x2d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x2d, 0x1a, 0x59, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2d, 0x2f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x2d, 0x1a, 0x6d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x2d, 0x2a, 0x05, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x12, 0x18, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0xda, 0x94, 0x23,
	0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x1e, 0x22, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x04, 0x73, 0x70, 0x65, 0x63, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0xb0, 0x03, 0xe8, 0xde,
	0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x76, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x4f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xa2, 0x80, 0xd1,
	0x02, 0x78, 0x0a, 0x24, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x71, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x3b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDescData = edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDesc
)

func edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDescData)
	})
	return edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDescData
}

var edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_goTypes = []interface{}{
	(ProvisioningApprovalRequest_Spec_Conclusion)(0), // 0: ntt.devices.v1alpha2.ProvisioningApprovalRequest_Spec_Conclusion
	(*ProvisioningApprovalRequest)(nil),              // 1: ntt.devices.v1alpha2.ProvisioningApprovalRequest
	(*ProvisioningApprovalRequest_Spec)(nil),         // 2: ntt.devices.v1alpha2.ProvisioningApprovalRequest.Spec
	(*ProvisioningApprovalRequest_Status)(nil),       // 3: ntt.devices.v1alpha2.ProvisioningApprovalRequest.Status
	(*meta.Meta)(nil),                                // 4: goten.types.Meta
}
var edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_depIdxs = []int32{
	2, // 0: ntt.devices.v1alpha2.ProvisioningApprovalRequest.spec:type_name -> ntt.devices.v1alpha2.ProvisioningApprovalRequest.Spec
	3, // 1: ntt.devices.v1alpha2.ProvisioningApprovalRequest.status:type_name -> ntt.devices.v1alpha2.ProvisioningApprovalRequest.Status
	4, // 2: ntt.devices.v1alpha2.ProvisioningApprovalRequest.metadata:type_name -> goten.types.Meta
	0, // 3: ntt.devices.v1alpha2.ProvisioningApprovalRequest.Spec.conclusion:type_name -> ntt.devices.v1alpha2.ProvisioningApprovalRequest_Spec_Conclusion
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_init() }
func edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_init() {
	if edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisioningApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisioningApprovalRequest_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisioningApprovalRequest_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_depIdxs,
		EnumInfos:         edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_enumTypes,
		MessageInfos:      edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto = out.File
	edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_rawDesc = nil
	edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_goTypes = nil
	edgelq_devices_proto_v1alpha2_provisioning_approval_request_proto_depIdxs = nil
}
