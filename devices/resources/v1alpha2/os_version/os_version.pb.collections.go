// Code generated by protoc-gen-goten-resource
// Resource: OsVersion
// DO NOT EDIT!!!

package os_version

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	device_type "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device_type"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &device_type.DeviceType{}
)

type OsVersionList []*OsVersion

func (l OsVersionList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*OsVersion))
}

func (l OsVersionList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(OsVersionList)...)
}

func (l OsVersionList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l OsVersionList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l OsVersionList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*OsVersion)
}

func (l OsVersionList) Length() int {
	return len(l)
}

type OsVersionChangeList []*OsVersionChange

func (l OsVersionChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*OsVersionChange))
}

func (l OsVersionChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(OsVersionChangeList)...)
}

func (l OsVersionChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l OsVersionChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l OsVersionChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*OsVersionChange)
}

func (l OsVersionChangeList) Length() int {
	return len(l)
}

type OsVersionNameList []*Name

func (l OsVersionNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l OsVersionNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(OsVersionNameList)...)
}

func (l OsVersionNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l OsVersionNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l OsVersionNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l OsVersionNameList) Length() int {
	return len(l)
}

type OsVersionReferenceList []*Reference

func (l OsVersionReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l OsVersionReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(OsVersionReferenceList)...)
}

func (l OsVersionReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l OsVersionReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l OsVersionReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l OsVersionReferenceList) Length() int {
	return len(l)
}

type OsVersionMap map[Name]*OsVersion

func (m OsVersionMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m OsVersionMap) Set(res gotenresource.Resource) {
	tRes := res.(*OsVersion)
	m[*tRes.Name] = tRes
}

func (m OsVersionMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m OsVersionMap) Length() int {
	return len(m)
}

func (m OsVersionMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type OsVersionChangeMap map[Name]*OsVersionChange

func (m OsVersionChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m OsVersionChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*OsVersionChange)
	m[*tChange.GetOsVersionName()] = tChange
}

func (m OsVersionChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m OsVersionChangeMap) Length() int {
	return len(m)
}

func (m OsVersionChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
