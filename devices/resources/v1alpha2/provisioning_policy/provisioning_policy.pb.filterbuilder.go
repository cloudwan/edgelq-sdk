// Code generated by protoc-gen-goten-resource
// Resource: ProvisioningPolicy
// DO NOT EDIT!!!

package provisioning_policy

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/condition"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/permission"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	iam_role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/user"
	policy "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/policy"
	syncing_meta "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/syncing_meta"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.Actor{}
	_ = &iam_condition.Condition{}
	_ = &iam_organization.Organization{}
	_ = &iam_permission.Permission{}
	_ = &iam_project.Project{}
	_ = &iam_role.Role{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &iam_user.User{}
	_ = &policy.Policy{}
	_ = &syncing_meta.SyncingMeta{}
	_ = &meta_service.Service{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
)

type FilterBuilderOrCondition interface {
	_IsProvisioningPolicyFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsProvisioningPolicyFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp ProvisioningPolicy_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      ProvisioningPolicy_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Spec() *filterCndBuilderSpec {
	return &filterCndBuilderSpec{builder: b.builder}
}

func (b *filterCndBuilder) Status() *filterCndBuilderStatus {
	return &filterCndBuilderStatus{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpec) Eq(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpec) Neq(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpec) Gt(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpec) Gte(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpec) Lt(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpec) Lte(value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpec) In(values []*ProvisioningPolicy_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) NotIn(values []*ProvisioningPolicy_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) compare(op gotenfilter.CompareOperator, value *ProvisioningPolicy_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpec) Mode() *filterCndBuilderSpecMode {
	return &filterCndBuilderSpecMode{builder: b.builder}
}

func (b *filterCndBuilderSpec) ServiceAccount() *filterCndBuilderSpecServiceAccount {
	return &filterCndBuilderSpecServiceAccount{builder: b.builder}
}

func (b *filterCndBuilderSpec) DeviceNameFormat() *filterCndBuilderSpecDeviceNameFormat {
	return &filterCndBuilderSpecDeviceNameFormat{builder: b.builder}
}

func (b *filterCndBuilderSpec) Labels() *filterCndBuilderSpecLabels {
	return &filterCndBuilderSpecLabels{builder: b.builder}
}

func (b *filterCndBuilderSpec) Template() *filterCndBuilderSpecTemplate {
	return &filterCndBuilderSpecTemplate{builder: b.builder}
}

func (b *filterCndBuilderSpec) IdentityFieldPaths() *filterCndBuilderSpecIdentityFieldPaths {
	return &filterCndBuilderSpecIdentityFieldPaths{builder: b.builder}
}

func (b *filterCndBuilderSpec) Role() *filterCndBuilderSpecRole {
	return &filterCndBuilderSpecRole{builder: b.builder}
}

func (b *filterCndBuilderSpec) Condition() *filterCndBuilderSpecCondition {
	return &filterCndBuilderSpecCondition{builder: b.builder}
}

type filterCndBuilderSpecMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecMode) Eq(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecMode) Neq(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecMode) Gt(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecMode) Gte(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecMode) Lt(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecMode) Lte(value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecMode) In(values []ProvisioningPolicy_Mode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecMode) NotIn(values []ProvisioningPolicy_Mode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecMode) compare(op gotenfilter.CompareOperator, value ProvisioningPolicy_Mode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecServiceAccount struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecServiceAccount) Eq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecServiceAccount) Neq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecServiceAccount) Gt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecServiceAccount) Gte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecServiceAccount) Lt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecServiceAccount) Lte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecServiceAccount) In(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecServiceAccount) NotIn(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecServiceAccount) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderSpecServiceAccount) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderSpecServiceAccount) compare(op gotenfilter.CompareOperator, value *iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().ServiceAccount().WithValue(value),
	})
}

type filterCndBuilderSpecDeviceNameFormat struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecDeviceNameFormat) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecDeviceNameFormat) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().DeviceNameFormat().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecDeviceNameFormat) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().DeviceNameFormat().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecDeviceNameFormat) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().DeviceNameFormat().FieldPath(),
	})
}

func (b *filterCndBuilderSpecDeviceNameFormat) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().DeviceNameFormat().FieldPath(),
	})
}

func (b *filterCndBuilderSpecDeviceNameFormat) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().DeviceNameFormat().WithValue(value),
	})
}

type filterCndBuilderSpecLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderSpecLabels) WithKey(key string) *mapFilterCndBuilderSpecLabels {
	return &mapFilterCndBuilderSpecLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplate) Eq(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplate) Neq(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplate) Gt(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplate) Gte(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplate) Lt(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplate) Lte(value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplate) In(values []*ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplate) NotIn(values []*ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplate) compare(op gotenfilter.CompareOperator, value *ProvisioningPolicy_Spec_Template) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplate) Metadata() *filterCndBuilderSpecTemplateMetadata {
	return &filterCndBuilderSpecTemplateMetadata{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) Spec() *filterCndBuilderSpecTemplateSpec {
	return &filterCndBuilderSpecTemplateSpec{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) PublicListingSpec() *filterCndBuilderSpecTemplatePublicListingSpec {
	return &filterCndBuilderSpecTemplatePublicListingSpec{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) CreateTime() *filterCndBuilderSpecTemplateMetadataCreateTime {
	return &filterCndBuilderSpecTemplateMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) UpdateTime() *filterCndBuilderSpecTemplateMetadataUpdateTime {
	return &filterCndBuilderSpecTemplateMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Uuid() *filterCndBuilderSpecTemplateMetadataUuid {
	return &filterCndBuilderSpecTemplateMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Tags() *filterCndBuilderSpecTemplateMetadataTags {
	return &filterCndBuilderSpecTemplateMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Labels() *filterCndBuilderSpecTemplateMetadataLabels {
	return &filterCndBuilderSpecTemplateMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Annotations() *filterCndBuilderSpecTemplateMetadataAnnotations {
	return &filterCndBuilderSpecTemplateMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Generation() *filterCndBuilderSpecTemplateMetadataGeneration {
	return &filterCndBuilderSpecTemplateMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) ResourceVersion() *filterCndBuilderSpecTemplateMetadataResourceVersion {
	return &filterCndBuilderSpecTemplateMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) OwnerReferences() *filterCndBuilderSpecTemplateMetadataOwnerReferences {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Shards() *filterCndBuilderSpecTemplateMetadataShards {
	return &filterCndBuilderSpecTemplateMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Syncing() *filterCndBuilderSpecTemplateMetadataSyncing {
	return &filterCndBuilderSpecTemplateMetadataSyncing{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) WithKey(key string) *mapFilterCndBuilderSpecTemplateMetadataLabels {
	return &mapFilterCndBuilderSpecTemplateMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTemplateMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderSpecTemplateMetadataAnnotations {
	return &mapFilterCndBuilderSpecTemplateMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTemplateMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) ApiVersion() *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Kind() *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Name() *filterCndBuilderSpecTemplateMetadataOwnerReferencesName {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Uid() *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesUid{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Controller() *filterCndBuilderSpecTemplateMetadataOwnerReferencesController {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesApiVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().ApiVersion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesUid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Uid().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) WithKey(key string) *mapFilterCndBuilderSpecTemplateMetadataShards {
	return &mapFilterCndBuilderSpecTemplateMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTemplateMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Eq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Neq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Gt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Gte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Lt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Lte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) In(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) NotIn(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) compare(op gotenfilter.CompareOperator, value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) OwningRegion() *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion {
	return &filterCndBuilderSpecTemplateMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Regions() *filterCndBuilderSpecTemplateMetadataSyncingRegions {
	return &filterCndBuilderSpecTemplateMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpec) Eq(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Neq(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Gt(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Gte(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Lt(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Lte(value *device.Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpec) In(values []*device.Device_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) NotIn(values []*device.Device_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) compare(op gotenfilter.CompareOperator, value *device.Device_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) ServiceAccount() *filterCndBuilderSpecTemplateSpecServiceAccount {
	return &filterCndBuilderSpecTemplateSpecServiceAccount{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) OsVersion() *filterCndBuilderSpecTemplateSpecOsVersion {
	return &filterCndBuilderSpecTemplateSpecOsVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) NetConfig() *filterCndBuilderSpecTemplateSpecNetConfig {
	return &filterCndBuilderSpecTemplateSpecNetConfig{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) NetConfigMode() *filterCndBuilderSpecTemplateSpecNetConfigMode {
	return &filterCndBuilderSpecTemplateSpecNetConfigMode{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) OsImageUrl() *filterCndBuilderSpecTemplateSpecOsImageUrl {
	return &filterCndBuilderSpecTemplateSpecOsImageUrl{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) SshConfig() *filterCndBuilderSpecTemplateSpecSshConfig {
	return &filterCndBuilderSpecTemplateSpecSshConfig{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) AttestationConfig() *filterCndBuilderSpecTemplateSpecAttestationConfig {
	return &filterCndBuilderSpecTemplateSpecAttestationConfig{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecServiceAccount struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Eq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Neq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Gt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Gte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Lt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) Lte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) In(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) NotIn(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecServiceAccount) compare(op gotenfilter.CompareOperator, value *iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().ServiceAccount().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecOsVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsVersion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Eq(value *device.Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Neq(value *device.Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Gt(value *device.Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Gte(value *device.Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Lt(value *device.Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Lte(value *device.Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) In(values []*device.Device_Spec_NetworkConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) NotIn(values []*device.Device_Spec_NetworkConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Version() *filterCndBuilderSpecTemplateSpecNetConfigVersion {
	return &filterCndBuilderSpecTemplateSpecNetConfigVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Ethernets() *filterCndBuilderSpecTemplateSpecNetConfigEthernets {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernets{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Wifis() *filterCndBuilderSpecTemplateSpecNetConfigWifis {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifis{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Bridges() *filterCndBuilderSpecTemplateSpecNetConfigBridges {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridges{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Bonds() *filterCndBuilderSpecTemplateSpecNetConfigBonds {
	return &filterCndBuilderSpecTemplateSpecNetConfigBonds{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Tunnels() *filterCndBuilderSpecTemplateSpecNetConfigTunnels {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnels{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfig) Vlans() *filterCndBuilderSpecTemplateSpecNetConfigVlans {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlans{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVersion) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVersion) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVersion) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVersion) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVersion) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVersion) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVersion) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVersion) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Version().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Version().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVersion) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Version().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) Eq(value []*device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) Neq(value []*device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) Gt(value []*device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) Gte(value []*device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) Lt(value []*device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) Lte(value []*device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) In(values [][]*device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) NotIn(values [][]*device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) Contains(value *device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) ContainsAll(values []*device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) Match() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) SetName() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) Wakeonlan() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) Opts() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernets) Name() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsName{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) Eq(value *device.Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) Neq(value *device.Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) Gt(value *device.Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) Gte(value *device.Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) Lt(value *device.Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) Lte(value *device.Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) In(values []*device.Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) NotIn(values []*device.Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) Name() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) Macaddress() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatch) Driver() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Driver().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Driver().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Driver().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Driver().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsMatchDriver) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Match().Driver().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().SetName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().SetName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().SetName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().SetName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsSetName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().SetName().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Wakeonlan().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Wakeonlan().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Wakeonlan().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Wakeonlan().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsWakeonlan) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Wakeonlan().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) In(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Renderer() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Dhcp4() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Dhcp6() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Ipv6Privacy() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) LinkLocal() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Critical() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) DhcpIdentifier() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Dhcp4Overrides() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Dhcp6Overrides() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) AcceptRa() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Gateway4() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Gateway6() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Nameservers() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Macaddress() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Mtu() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Optional() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) OptionalAddresses() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Routes() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) RoutingPolicy() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOpts) Auth() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().LinkLocal().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) Search() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameservers) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Eq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Neq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Gt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Gte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Lt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Lte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) In(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) NotIn(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Contains(value *device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) ContainsAll(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) From() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) To() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Via() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) OnLink() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Metric() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Type() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Scope() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutes) Table() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) From() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) To() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) Table() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) Priority() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) Mark() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) Key() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) Password() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) Method() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) Identity() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) AnonymousIdentity() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) CaCertificate() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) ClientCertificate() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) ClientKey() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuth) ClientKeyPassword() *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigEthernetsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigEthernetsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Ethernets().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifis struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) Eq(value []*device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) Neq(value []*device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) Gt(value []*device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) Gte(value []*device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) Lt(value []*device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) Lte(value []*device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) In(values [][]*device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) NotIn(values [][]*device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) Contains(value *device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) ContainsAll(values []*device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) Match() *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisMatch{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) SetName() *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisSetName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) Wakeonlan() *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) Opts() *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) AccessPoints() *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifis) Name() *filterCndBuilderSpecTemplateSpecNetConfigWifisName {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisName{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisMatch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) Eq(value *device.Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) Neq(value *device.Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) Gt(value *device.Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) Gte(value *device.Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) Lt(value *device.Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) Lte(value *device.Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) In(values []*device.Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) NotIn(values []*device.Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) Name() *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) Macaddress() *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatch) Driver() *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Driver().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Driver().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Driver().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Driver().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisMatchDriver) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Match().Driver().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisSetName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().SetName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().SetName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().SetName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().SetName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisSetName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().SetName().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Wakeonlan().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Wakeonlan().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Wakeonlan().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Wakeonlan().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisWakeonlan) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Wakeonlan().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) In(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Renderer() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Dhcp4() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Dhcp6() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Ipv6Privacy() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) LinkLocal() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Critical() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) DhcpIdentifier() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Dhcp4Overrides() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Dhcp6Overrides() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) AcceptRa() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Gateway4() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Gateway6() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Nameservers() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Macaddress() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Mtu() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Optional() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) OptionalAddresses() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Routes() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) RoutingPolicy() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOpts) Auth() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().LinkLocal().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) Search() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameservers) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Search().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().OptionalAddresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Eq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Neq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Gt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Gte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Lt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Lte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) In(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) NotIn(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Contains(value *device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) ContainsAll(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) From() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) To() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Via() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) OnLink() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Metric() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Type() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Scope() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutes) Table() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) From() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) To() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) Table() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) Priority() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) Mark() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) Key() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) Password() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) Method() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) Identity() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) AnonymousIdentity() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) CaCertificate() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) ClientCertificate() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) ClientKey() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuth) ClientKeyPassword() *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) Eq(value []*device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) Neq(value []*device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) Gt(value []*device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) Gte(value []*device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) Lt(value []*device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) Lte(value []*device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) In(values [][]*device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) NotIn(values [][]*device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) Contains(value *device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) ContainsAll(values []*device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) Name() *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) Password() *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPoints) Mode() *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode {
	return &filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Password().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisAccessPointsMode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().AccessPoints().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigWifisName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigWifisName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Wifis().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridges struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) Eq(value []*device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) Neq(value []*device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) Gt(value []*device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) Gte(value []*device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) Lt(value []*device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) Lte(value []*device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) In(values [][]*device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) NotIn(values [][]*device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) Contains(value *device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) ContainsAll(values []*device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) Opts() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) Interfaces() *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) Parameters() *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridges) Name() *filterCndBuilderSpecTemplateSpecNetConfigBridgesName {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesName{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) In(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Renderer() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Dhcp4() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Dhcp6() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Ipv6Privacy() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) LinkLocal() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Critical() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) DhcpIdentifier() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Dhcp4Overrides() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Dhcp6Overrides() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) AcceptRa() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Gateway4() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Gateway6() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Nameservers() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Macaddress() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Mtu() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Optional() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) OptionalAddresses() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Routes() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) RoutingPolicy() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOpts) Auth() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().LinkLocal().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) Search() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameservers) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Search().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().OptionalAddresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Eq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Neq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Gt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Gte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Lt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Lte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) In(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) NotIn(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Contains(value *device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) ContainsAll(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) From() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) To() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Via() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) OnLink() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Metric() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Type() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Scope() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutes) Table() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) From() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) To() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) Table() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) Priority() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) Mark() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) Key() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) Password() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) Method() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) Identity() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) AnonymousIdentity() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) CaCertificate() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) ClientCertificate() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) ClientKey() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuth) ClientKeyPassword() *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Interfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Interfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Interfaces().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Interfaces().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Interfaces().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Interfaces().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Interfaces()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Interfaces().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Interfaces()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Interfaces().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesInterfaces) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Interfaces().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) Eq(value *device.Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) Neq(value *device.Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) Gt(value *device.Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) Gte(value *device.Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) Lt(value *device.Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) Lte(value *device.Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) In(values []*device.Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) NotIn(values []*device.Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) AgeingTime() *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) Priority() *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) PortPriority() *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) ForwardDelay() *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) HelloTime() *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) MaxAge() *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) PathCost() *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParameters) Stp() *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp {
	return &filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().AgeingTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().AgeingTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().AgeingTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().AgeingTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersAgeingTime) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().AgeingTime().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().PortPriority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().PortPriority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().PortPriority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().PortPriority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPortPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().PortPriority().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().ForwardDelay().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().ForwardDelay().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().ForwardDelay().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().ForwardDelay().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersForwardDelay) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().ForwardDelay().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().HelloTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().HelloTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().HelloTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().HelloTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersHelloTime) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().HelloTime().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().MaxAge().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().MaxAge().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().MaxAge().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().MaxAge().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersMaxAge) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().MaxAge().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().PathCost().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().PathCost().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().PathCost().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().PathCost().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersPathCost) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().PathCost().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().Stp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().Stp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().Stp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().Stp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesParametersStp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Parameters().Stp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBridgesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBridgesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bridges().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBonds struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) Eq(value []*device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) Neq(value []*device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) Gt(value []*device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) Gte(value []*device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) Lt(value []*device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) Lte(value []*device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) In(values [][]*device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) NotIn(values [][]*device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) Contains(value *device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) ContainsAll(values []*device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) Opts() *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) Interfaces() *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) Parameters() *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParameters{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBonds) Name() *filterCndBuilderSpecTemplateSpecNetConfigBondsName {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsName{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) In(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Renderer() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Dhcp4() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Dhcp6() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Ipv6Privacy() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) LinkLocal() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Critical() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) DhcpIdentifier() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Dhcp4Overrides() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Dhcp6Overrides() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) AcceptRa() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Gateway4() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Gateway6() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Nameservers() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Macaddress() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Mtu() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Optional() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) OptionalAddresses() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Routes() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) RoutingPolicy() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOpts) Auth() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().LinkLocal().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) Search() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameservers) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Search().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().OptionalAddresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Eq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Neq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Gt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Gte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Lt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Lte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) In(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) NotIn(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Contains(value *device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) ContainsAll(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) From() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) To() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Via() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) OnLink() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Metric() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Type() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Scope() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutes) Table() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) From() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) To() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) Table() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) Priority() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) Mark() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) Key() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) Password() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) Method() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) Identity() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) AnonymousIdentity() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) CaCertificate() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) ClientCertificate() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) ClientKey() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuth) ClientKeyPassword() *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Interfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Interfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Interfaces().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Interfaces().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Interfaces().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Interfaces().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Interfaces()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Interfaces().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Interfaces()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Interfaces().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsInterfaces) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Interfaces().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParameters struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) Eq(value *device.Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) Neq(value *device.Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) Gt(value *device.Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) Gte(value *device.Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) Lt(value *device.Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) Lte(value *device.Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) In(values []*device.Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) NotIn(values []*device.Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) Mode() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) LacpRate() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) MiiMonitorInterval() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) MinLinks() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) TransmitHashPolicy() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) AdSelect() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) AllSlavesActive() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) ArpIpTargets() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) ArpValidate() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) ArpAllTargets() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) UpDelay() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) FailOverMacPolicy() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) GratuitousArp() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) PacketsPerSlave() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) PrimaryReselectPolicy() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) ResendIgmp() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) LearnPacketInterval() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParameters) Primary() *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary {
	return &filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().LacpRate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().LacpRate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().LacpRate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().LacpRate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLacpRate) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().LacpRate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().MiiMonitorInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().MiiMonitorInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().MiiMonitorInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().MiiMonitorInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMiiMonitorInterval) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().MiiMonitorInterval().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().MinLinks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().MinLinks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().MinLinks().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().MinLinks().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersMinLinks) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().MinLinks().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().TransmitHashPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().TransmitHashPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().TransmitHashPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().TransmitHashPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersTransmitHashPolicy) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().TransmitHashPolicy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().AdSelect().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().AdSelect().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().AdSelect().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().AdSelect().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAdSelect) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().AdSelect().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().AllSlavesActive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().AllSlavesActive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().AllSlavesActive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().AllSlavesActive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersAllSlavesActive) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().AllSlavesActive().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpIpTargets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpIpTargets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpIpTargets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpIpTargets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpIpTargets) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpIpTargets().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpValidate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpValidate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpValidate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpValidate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpValidate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpValidate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpAllTargets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpAllTargets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpAllTargets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpAllTargets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersArpAllTargets) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ArpAllTargets().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().UpDelay().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().UpDelay().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().UpDelay().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().UpDelay().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersUpDelay) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().UpDelay().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().FailOverMacPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().FailOverMacPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().FailOverMacPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().FailOverMacPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersFailOverMacPolicy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().FailOverMacPolicy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().GratuitousArp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().GratuitousArp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().GratuitousArp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().GratuitousArp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersGratuitousArp) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().GratuitousArp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().PacketsPerSlave().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().PacketsPerSlave().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().PacketsPerSlave().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().PacketsPerSlave().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPacketsPerSlave) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().PacketsPerSlave().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().PrimaryReselectPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().PrimaryReselectPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().PrimaryReselectPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().PrimaryReselectPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimaryReselectPolicy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().PrimaryReselectPolicy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ResendIgmp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ResendIgmp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ResendIgmp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ResendIgmp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersResendIgmp) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().ResendIgmp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().LearnPacketInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().LearnPacketInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().LearnPacketInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().LearnPacketInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersLearnPacketInterval) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().LearnPacketInterval().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().Primary().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().Primary().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().Primary().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().Primary().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsParametersPrimary) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Parameters().Primary().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigBondsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigBondsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Bonds().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Eq(value []*device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Neq(value []*device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Gt(value []*device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Gte(value []*device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Lt(value []*device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Lte(value []*device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) In(values [][]*device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) NotIn(values [][]*device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Contains(value *device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) ContainsAll(values []*device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Opts() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Mode() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Local() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Remote() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Key() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnels) Name() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsName{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) In(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Renderer() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Dhcp4() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Dhcp6() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Ipv6Privacy() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) LinkLocal() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Critical() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) DhcpIdentifier() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Dhcp4Overrides() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Dhcp6Overrides() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) AcceptRa() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Gateway4() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Gateway6() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Nameservers() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Macaddress() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Mtu() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Optional() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) OptionalAddresses() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Routes() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) RoutingPolicy() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOpts) Auth() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().LinkLocal().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) Search() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameservers) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Eq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Neq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Gt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Gte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Lt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Lte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) In(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) NotIn(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Contains(value *device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) ContainsAll(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) From() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) To() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Via() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) OnLink() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Metric() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Type() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Scope() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutes) Table() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) From() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) To() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) Table() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) Priority() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) Mark() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) Key() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) Password() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) Method() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) Identity() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) AnonymousIdentity() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) CaCertificate() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) ClientCertificate() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) ClientKey() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuth) ClientKeyPassword() *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsMode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Local().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Local().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Local().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Local().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsLocal) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Local().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Remote().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Remote().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Remote().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Remote().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsRemote) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Remote().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsKey) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigTunnelsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigTunnelsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Tunnels().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlans struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) Eq(value []*device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) Neq(value []*device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) Gt(value []*device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) Gte(value []*device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) Lt(value []*device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) Lte(value []*device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) In(values [][]*device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) NotIn(values [][]*device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) Contains(value *device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) ContainsAll(values []*device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) Opts() *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) Id() *filterCndBuilderSpecTemplateSpecNetConfigVlansId {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansId{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) Link() *filterCndBuilderSpecTemplateSpecNetConfigVlansLink {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansLink{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlans) Name() *filterCndBuilderSpecTemplateSpecNetConfigVlansName {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansName{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) In(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Renderer() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Dhcp4() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Dhcp6() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Ipv6Privacy() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) LinkLocal() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Critical() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) DhcpIdentifier() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Dhcp4Overrides() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Dhcp6Overrides() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) AcceptRa() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Gateway4() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4 {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Gateway6() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6 {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Nameservers() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Macaddress() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Mtu() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Optional() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) OptionalAddresses() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Routes() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) RoutingPolicy() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOpts) Auth() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().LinkLocal().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().LinkLocal()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) Search() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameservers) Addresses() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Search().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Search()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().OptionalAddresses().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().OptionalAddresses()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Eq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Neq(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Gt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Gte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Lt(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Lte(value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) In(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) NotIn(values [][]*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Contains(value *device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) ContainsAnyOf(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) ContainsAll(values []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) From() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) To() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Via() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) OnLink() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Metric() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Type() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Scope() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutes) Table() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) From() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) To() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) Table() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) Priority() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) Mark() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) Eq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) Neq(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) Gt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) Gte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) Lt(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) Lte(value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) In(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) NotIn(values []*device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) Key() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) Password() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) Method() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) Identity() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) AnonymousIdentity() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) CaCertificate() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) ClientCertificate() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) ClientKey() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuth) ClientKeyPassword() *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansId struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansId) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansId) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansId) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansId) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansId) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansId) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansId) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Id().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansId) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Id().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansId) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Id().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansId) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Id().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansId) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Id().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansLink) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansLink) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansLink) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansLink) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansLink) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansLink) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansLink) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Link().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansLink) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Link().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Link().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Link().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansLink) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Link().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigVlansName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigVlansName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfig().Vlans().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecNetConfigMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigMode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigMode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigMode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigMode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigMode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigMode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigMode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfigMode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigMode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfigMode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfigMode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfigMode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNetConfigMode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().NetConfigMode().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecOsImageUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsImageUrl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsImageUrl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsImageUrl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsImageUrl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecOsImageUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().OsImageUrl().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Eq(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Neq(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Gt(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Gte(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Lt(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) Lte(value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) In(values []*device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) NotIn(values []*device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_SSHConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) DisableSshServer() *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer {
	return &filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) DisableSshPassword() *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword {
	return &filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) SshAuthorized() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) IpAllowList() *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList {
	return &filterCndBuilderSpecTemplateSpecSshConfigIpAllowList{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) IpDenyList() *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList {
	return &filterCndBuilderSpecTemplateSpecSshConfigIpDenyList{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) RejectPeriod() *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod {
	return &filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfig) DisableSshAuthkey() *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey {
	return &filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshServer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshServer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshServer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshServer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshServer) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshServer().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshPassword) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshPassword().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Eq(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Neq(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Gt(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Gte(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Lt(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Lte(value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) In(values [][]*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NotIn(values [][]*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Contains(value *device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) ContainsAnyOf(values []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) ContainsAll(values []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) compare(op gotenfilter.CompareOperator, value []*device.Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) SshaKey() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) CertAuthority() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Command() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Environment() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) From() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NoAgentForwarding() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NoPortForwarding() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NoPty() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NoUserRc() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) NoX11Forwarding() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Permitopen() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Principals() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Tunnel() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorized) Restrict() *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict {
	return &filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().SshaKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().SshaKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().SshaKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().SshaKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedSshaKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().SshaKey().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().CertAuthority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().CertAuthority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().CertAuthority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().CertAuthority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCertAuthority) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().CertAuthority().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Command().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Command().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Command().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Command().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedCommand) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Command().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Environment().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Environment().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Environment().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Environment().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedEnvironment) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Environment().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().From().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoAgentForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoAgentForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoAgentForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoAgentForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoAgentForwarding) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoAgentForwarding().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPortForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPortForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPortForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPortForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPortForwarding) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPortForwarding().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPty().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPty().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPty().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPty().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoPty) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoPty().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoUserRc().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoUserRc().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoUserRc().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoUserRc().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoUserRc) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoUserRc().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoX11Forwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoX11Forwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoX11Forwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoX11Forwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedNoX11Forwarding) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().NoX11Forwarding().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Permitopen().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Permitopen().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Permitopen().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Permitopen().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPermitopen) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Permitopen().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Principals().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Principals().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Principals().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Principals().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedPrincipals) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Principals().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Tunnel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Tunnel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Tunnel().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Tunnel().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedTunnel) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Tunnel().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Restrict().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Restrict().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Restrict().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Restrict().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigSshAuthorizedRestrict) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().SshAuthorized().Restrict().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigIpAllowList struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpAllowList) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpAllowList().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigIpDenyList struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigIpDenyList) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().IpDenyList().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().RejectPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().RejectPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().RejectPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().RejectPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigRejectPeriod) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().RejectPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshAuthkey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshAuthkey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshAuthkey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshAuthkey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecSshConfigDisableSshAuthkey) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().SshConfig().DisableSshAuthkey().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecAttestationConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Eq(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Neq(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Gt(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Gte(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Lt(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) Lte(value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) In(values []*device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) NotIn(values []*device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) compare(op gotenfilter.CompareOperator, value *device.Device_Spec_AttestationConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) AttestationExpected() *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected {
	return &filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) AttestationDomain() *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain {
	return &filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfig) InsecureUseTpmSimulatorSeed() *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed {
	return &filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationExpected().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationExpected().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationExpected().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationExpected().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationExpected) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationExpected().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Eq(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Neq(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Gt(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Gte(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Lt(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) Lte(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) In(values []*iam_attestation_domain.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationDomain().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) NotIn(values []*iam_attestation_domain.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationDomain().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationDomain().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationDomain().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigAttestationDomain) compare(op gotenfilter.CompareOperator, value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().AttestationDomain().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().InsecureUseTpmSimulatorSeed().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().InsecureUseTpmSimulatorSeed().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().InsecureUseTpmSimulatorSeed().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().InsecureUseTpmSimulatorSeed().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecAttestationConfigInsecureUseTpmSimulatorSeed) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().Spec().AttestationConfig().InsecureUseTpmSimulatorSeed().WithValue(value),
	})
}

type filterCndBuilderSpecTemplatePublicListingSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Eq(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Neq(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Gt(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Gte(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Lt(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Lte(value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) In(values []*device.Device_PublicListingSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) NotIn(values []*device.Device_PublicListingSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) compare(op gotenfilter.CompareOperator, value *device.Device_PublicListingSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) Enabled() *filterCndBuilderSpecTemplatePublicListingSpecEnabled {
	return &filterCndBuilderSpecTemplatePublicListingSpecEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplatePublicListingSpec) FieldMask() *filterCndBuilderSpecTemplatePublicListingSpecFieldMask {
	return &filterCndBuilderSpecTemplatePublicListingSpecFieldMask{builder: b.builder}
}

type filterCndBuilderSpecTemplatePublicListingSpecEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecTemplatePublicListingSpecFieldMask struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Eq(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Neq(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Gt(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Gte(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Lt(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) Lte(value *device.Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) In(values []*device.Device_FieldMask) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldMask().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) NotIn(values []*device.Device_FieldMask) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldMask().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldMask().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldMask().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplatePublicListingSpecFieldMask) compare(op gotenfilter.CompareOperator, value *device.Device_FieldMask) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Template().PublicListingSpec().FieldMask().WithValue(value),
	})
}

type filterCndBuilderSpecIdentityFieldPaths struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecIdentityFieldPaths) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().FieldPath(),
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().FieldPath(),
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecIdentityFieldPaths) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().IdentityFieldPaths().WithValue(value),
	})
}

type filterCndBuilderSpecRole struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecRole) Eq(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecRole) Neq(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecRole) Gt(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecRole) Gte(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecRole) Lt(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecRole) Lte(value *iam_role.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecRole) In(values []*iam_role.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Role().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecRole) NotIn(values []*iam_role.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Role().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecRole) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Role().FieldPath(),
	})
}

func (b *filterCndBuilderSpecRole) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Role().FieldPath(),
	})
}

func (b *filterCndBuilderSpecRole) compare(op gotenfilter.CompareOperator, value *iam_role.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Role().WithValue(value),
	})
}

type filterCndBuilderSpecCondition struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecCondition) Eq(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecCondition) Neq(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecCondition) Gt(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecCondition) Gte(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecCondition) Lt(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecCondition) Lte(value *iam_condition.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecCondition) In(values []*iam_condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Condition().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecCondition) NotIn(values []*iam_condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Spec().Condition().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecCondition) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Condition().FieldPath(),
	})
}

func (b *filterCndBuilderSpecCondition) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Spec().Condition().FieldPath(),
	})
}

func (b *filterCndBuilderSpecCondition) compare(op gotenfilter.CompareOperator, value *iam_condition.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Spec().Condition().WithValue(value),
	})
}

type filterCndBuilderStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatus) Eq(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatus) Neq(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatus) Gt(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatus) Gte(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatus) Lt(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatus) Lte(value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatus) In(values []*ProvisioningPolicy_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) NotIn(values []*ProvisioningPolicy_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) compare(op gotenfilter.CompareOperator, value *ProvisioningPolicy_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Status().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ApiVersion() *filterCndBuilderMetadataOwnerReferencesApiVersion {
	return &filterCndBuilderMetadataOwnerReferencesApiVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Uid() *filterCndBuilderMetadataOwnerReferencesUid {
	return &filterCndBuilderMetadataOwnerReferencesUid{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesApiVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Uid().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProvisioningPolicy_FieldPathArrayOfValues: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProvisioningPolicy_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                          op,
		ProvisioningPolicy_FieldPathValue: NewProvisioningPolicyFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}
