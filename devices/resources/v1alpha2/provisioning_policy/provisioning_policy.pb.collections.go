// Code generated by protoc-gen-goten-resource
// Resource: ProvisioningPolicy
// DO NOT EDIT!!!

package provisioning_policy

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/condition"
	iam_role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &iam_condition.Condition{}
	_ = &iam_role.Role{}
	_ = &iam_service_account.ServiceAccount{}
)

type ProvisioningPolicyList []*ProvisioningPolicy

func (l ProvisioningPolicyList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*ProvisioningPolicy))
}

func (l ProvisioningPolicyList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ProvisioningPolicyList)...)
}

func (l ProvisioningPolicyList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProvisioningPolicyList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ProvisioningPolicyList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*ProvisioningPolicy)
}

func (l ProvisioningPolicyList) Length() int {
	return len(l)
}

type ProvisioningPolicyChangeList []*ProvisioningPolicyChange

func (l ProvisioningPolicyChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ProvisioningPolicyChange))
}

func (l ProvisioningPolicyChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ProvisioningPolicyChangeList)...)
}

func (l ProvisioningPolicyChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProvisioningPolicyChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ProvisioningPolicyChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ProvisioningPolicyChange)
}

func (l ProvisioningPolicyChangeList) Length() int {
	return len(l)
}

type ProvisioningPolicyNameList []*Name

func (l ProvisioningPolicyNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ProvisioningPolicyNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ProvisioningPolicyNameList)...)
}

func (l ProvisioningPolicyNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProvisioningPolicyNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProvisioningPolicyNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ProvisioningPolicyNameList) Length() int {
	return len(l)
}

type ProvisioningPolicyReferenceList []*Reference

func (l ProvisioningPolicyReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ProvisioningPolicyReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ProvisioningPolicyReferenceList)...)
}

func (l ProvisioningPolicyReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProvisioningPolicyReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProvisioningPolicyReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ProvisioningPolicyReferenceList) Length() int {
	return len(l)
}

type ProvisioningPolicyParentNameList []*ParentName

func (l ProvisioningPolicyParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ProvisioningPolicyParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ProvisioningPolicyParentNameList)...)
}

func (l ProvisioningPolicyParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProvisioningPolicyParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProvisioningPolicyParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ProvisioningPolicyParentNameList) Length() int {
	return len(l)
}

type ProvisioningPolicyParentReferenceList []*ParentReference

func (l ProvisioningPolicyParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ProvisioningPolicyParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ProvisioningPolicyParentReferenceList)...)
}

func (l ProvisioningPolicyParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProvisioningPolicyParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProvisioningPolicyParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ProvisioningPolicyParentReferenceList) Length() int {
	return len(l)
}

type ProvisioningPolicyMap map[Name]*ProvisioningPolicy

func (m ProvisioningPolicyMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ProvisioningPolicyMap) Set(res gotenresource.Resource) {
	tRes := res.(*ProvisioningPolicy)
	m[*tRes.Name] = tRes
}

func (m ProvisioningPolicyMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProvisioningPolicyMap) Length() int {
	return len(m)
}

func (m ProvisioningPolicyMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ProvisioningPolicyChangeMap map[Name]*ProvisioningPolicyChange

func (m ProvisioningPolicyChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ProvisioningPolicyChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ProvisioningPolicyChange)
	m[*tChange.GetProvisioningPolicyName()] = tChange
}

func (m ProvisioningPolicyChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProvisioningPolicyChangeMap) Length() int {
	return len(m)
}

func (m ProvisioningPolicyChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
