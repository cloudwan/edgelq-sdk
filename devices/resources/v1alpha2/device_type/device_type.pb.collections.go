// Code generated by protoc-gen-goten-resource
// Resource: DeviceType
// DO NOT EDIT!!!

package device_type

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
)

type DeviceTypeList []*DeviceType

func (l DeviceTypeList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*DeviceType))
}

func (l DeviceTypeList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(DeviceTypeList)...)
}

func (l DeviceTypeList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DeviceTypeList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l DeviceTypeList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*DeviceType)
}

func (l DeviceTypeList) Length() int {
	return len(l)
}

type DeviceTypeChangeList []*DeviceTypeChange

func (l DeviceTypeChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*DeviceTypeChange))
}

func (l DeviceTypeChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(DeviceTypeChangeList)...)
}

func (l DeviceTypeChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DeviceTypeChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l DeviceTypeChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*DeviceTypeChange)
}

func (l DeviceTypeChangeList) Length() int {
	return len(l)
}

type DeviceTypeNameList []*Name

func (l DeviceTypeNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l DeviceTypeNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(DeviceTypeNameList)...)
}

func (l DeviceTypeNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DeviceTypeNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l DeviceTypeNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l DeviceTypeNameList) Length() int {
	return len(l)
}

type DeviceTypeReferenceList []*Reference

func (l DeviceTypeReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l DeviceTypeReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(DeviceTypeReferenceList)...)
}

func (l DeviceTypeReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DeviceTypeReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l DeviceTypeReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l DeviceTypeReferenceList) Length() int {
	return len(l)
}

type DeviceTypeMap map[Name]*DeviceType

func (m DeviceTypeMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m DeviceTypeMap) Set(res gotenresource.Resource) {
	tRes := res.(*DeviceType)
	m[*tRes.Name] = tRes
}

func (m DeviceTypeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m DeviceTypeMap) Length() int {
	return len(m)
}

func (m DeviceTypeMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type DeviceTypeChangeMap map[Name]*DeviceTypeChange

func (m DeviceTypeChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m DeviceTypeChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*DeviceTypeChange)
	m[*tChange.GetDeviceTypeName()] = tChange
}

func (m DeviceTypeChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m DeviceTypeChangeMap) Length() int {
	return len(m)
}

func (m DeviceTypeChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
