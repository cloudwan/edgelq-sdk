// Code generated by protoc-gen-goten-resource
// Resource: Device
// DO NOT EDIT!!!

package device

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	multi_region_policy "github.com/cloudwan/edgelq-sdk/common/types/multi_region_policy"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/condition"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/permission"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	iam_role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/user"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
	_ = &project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.Actor{}
	_ = &iam_condition.Condition{}
	_ = &iam_organization.Organization{}
	_ = &iam_permission.Permission{}
	_ = &iam_project.Project{}
	_ = &iam_role.Role{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &iam_user.User{}
	_ = &meta_service.Service{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
)

type FilterBuilderOrCondition interface {
	_IsDeviceFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsDeviceFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp Device_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      Device_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) Spec() *filterCndBuilderSpec {
	return &filterCndBuilderSpec{builder: b.builder}
}

func (b *filterCndBuilder) Status() *filterCndBuilderStatus {
	return &filterCndBuilderStatus{builder: b.builder}
}

func (b *filterCndBuilder) PublicListingSpec() *filterCndBuilderPublicListingSpec {
	return &filterCndBuilderPublicListingSpec{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ApiVersion() *filterCndBuilderMetadataOwnerReferencesApiVersion {
	return &filterCndBuilderMetadataOwnerReferencesApiVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Uid() *filterCndBuilderMetadataOwnerReferencesUid {
	return &filterCndBuilderMetadataOwnerReferencesUid{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesApiVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Uid().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpec) Eq(value *Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpec) Neq(value *Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpec) Gt(value *Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpec) Gte(value *Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpec) Lt(value *Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpec) Lte(value *Device_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpec) In(values []*Device_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) NotIn(values []*Device_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) compare(op gotenfilter.CompareOperator, value *Device_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpec) ServiceAccount() *filterCndBuilderSpecServiceAccount {
	return &filterCndBuilderSpecServiceAccount{builder: b.builder}
}

func (b *filterCndBuilderSpec) OsVersion() *filterCndBuilderSpecOsVersion {
	return &filterCndBuilderSpecOsVersion{builder: b.builder}
}

func (b *filterCndBuilderSpec) NetConfig() *filterCndBuilderSpecNetConfig {
	return &filterCndBuilderSpecNetConfig{builder: b.builder}
}

func (b *filterCndBuilderSpec) NetConfigMode() *filterCndBuilderSpecNetConfigMode {
	return &filterCndBuilderSpecNetConfigMode{builder: b.builder}
}

func (b *filterCndBuilderSpec) OsImageUrl() *filterCndBuilderSpecOsImageUrl {
	return &filterCndBuilderSpecOsImageUrl{builder: b.builder}
}

func (b *filterCndBuilderSpec) SshConfig() *filterCndBuilderSpecSshConfig {
	return &filterCndBuilderSpecSshConfig{builder: b.builder}
}

func (b *filterCndBuilderSpec) AttestationConfig() *filterCndBuilderSpecAttestationConfig {
	return &filterCndBuilderSpecAttestationConfig{builder: b.builder}
}

func (b *filterCndBuilderSpec) DisableDeviceDiscovery() *filterCndBuilderSpecDisableDeviceDiscovery {
	return &filterCndBuilderSpecDisableDeviceDiscovery{builder: b.builder}
}

func (b *filterCndBuilderSpec) LoggingConfig() *filterCndBuilderSpecLoggingConfig {
	return &filterCndBuilderSpecLoggingConfig{builder: b.builder}
}

type filterCndBuilderSpecServiceAccount struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecServiceAccount) Eq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecServiceAccount) Neq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecServiceAccount) Gt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecServiceAccount) Gte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecServiceAccount) Lt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecServiceAccount) Lte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecServiceAccount) In(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecServiceAccount) NotIn(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecServiceAccount) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderSpecServiceAccount) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderSpecServiceAccount) compare(op gotenfilter.CompareOperator, value *iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().ServiceAccount().WithValue(value),
	})
}

type filterCndBuilderSpecOsVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecOsVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecOsVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecOsVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecOsVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecOsVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecOsVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecOsVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().OsVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecOsVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().OsVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecOsVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().OsVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecOsVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().OsVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecOsVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().OsVersion().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfig) Eq(value *Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfig) Neq(value *Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfig) Gt(value *Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfig) Gte(value *Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfig) Lt(value *Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfig) Lte(value *Device_Spec_NetworkConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfig) In(values []*Device_Spec_NetworkConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfig) NotIn(values []*Device_Spec_NetworkConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfig) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfig) Version() *filterCndBuilderSpecNetConfigVersion {
	return &filterCndBuilderSpecNetConfigVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfig) Ethernets() *filterCndBuilderSpecNetConfigEthernets {
	return &filterCndBuilderSpecNetConfigEthernets{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfig) Wifis() *filterCndBuilderSpecNetConfigWifis {
	return &filterCndBuilderSpecNetConfigWifis{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfig) Bridges() *filterCndBuilderSpecNetConfigBridges {
	return &filterCndBuilderSpecNetConfigBridges{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfig) Bonds() *filterCndBuilderSpecNetConfigBonds {
	return &filterCndBuilderSpecNetConfigBonds{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfig) Tunnels() *filterCndBuilderSpecNetConfigTunnels {
	return &filterCndBuilderSpecNetConfigTunnels{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfig) Vlans() *filterCndBuilderSpecNetConfigVlans {
	return &filterCndBuilderSpecNetConfigVlans{builder: b.builder}
}

type filterCndBuilderSpecNetConfigVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVersion) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVersion) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVersion) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVersion) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVersion) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVersion) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVersion) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVersion) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Version().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Version().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVersion) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Version().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernets) Eq(value []*Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernets) Neq(value []*Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernets) Gt(value []*Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernets) Gte(value []*Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernets) Lt(value []*Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernets) Lte(value []*Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernets) In(values [][]*Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernets) NotIn(values [][]*Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernets) Contains(value *Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernets) ContainsAnyOf(values []*Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernets) ContainsAll(values []*Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernets) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_EthOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernets) Match() *filterCndBuilderSpecNetConfigEthernetsMatch {
	return &filterCndBuilderSpecNetConfigEthernetsMatch{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernets) SetName() *filterCndBuilderSpecNetConfigEthernetsSetName {
	return &filterCndBuilderSpecNetConfigEthernetsSetName{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernets) Wakeonlan() *filterCndBuilderSpecNetConfigEthernetsWakeonlan {
	return &filterCndBuilderSpecNetConfigEthernetsWakeonlan{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernets) Opts() *filterCndBuilderSpecNetConfigEthernetsOpts {
	return &filterCndBuilderSpecNetConfigEthernetsOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernets) Name() *filterCndBuilderSpecNetConfigEthernetsName {
	return &filterCndBuilderSpecNetConfigEthernetsName{builder: b.builder}
}

type filterCndBuilderSpecNetConfigEthernetsMatch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) Eq(value *Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) Neq(value *Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) Gt(value *Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) Gte(value *Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) Lt(value *Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) Lte(value *Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) In(values []*Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) NotIn(values []*Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_EthOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) Name() *filterCndBuilderSpecNetConfigEthernetsMatchName {
	return &filterCndBuilderSpecNetConfigEthernetsMatchName{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) Macaddress() *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress {
	return &filterCndBuilderSpecNetConfigEthernetsMatchMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatch) Driver() *filterCndBuilderSpecNetConfigEthernetsMatchDriver {
	return &filterCndBuilderSpecNetConfigEthernetsMatchDriver{builder: b.builder}
}

type filterCndBuilderSpecNetConfigEthernetsMatchName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Name().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsMatchMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsMatchDriver struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchDriver) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchDriver) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchDriver) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchDriver) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchDriver) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchDriver) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchDriver) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Driver().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchDriver) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Driver().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchDriver) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Driver().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchDriver) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Driver().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsMatchDriver) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Match().Driver().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsSetName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsSetName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsSetName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsSetName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsSetName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsSetName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsSetName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsSetName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().SetName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsSetName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().SetName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsSetName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().SetName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsSetName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().SetName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsSetName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().SetName().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsWakeonlan struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsWakeonlan) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsWakeonlan) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsWakeonlan) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsWakeonlan) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsWakeonlan) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsWakeonlan) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsWakeonlan) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Wakeonlan().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsWakeonlan) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Wakeonlan().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsWakeonlan) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Wakeonlan().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsWakeonlan) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Wakeonlan().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsWakeonlan) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Wakeonlan().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Eq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Neq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Gt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Gte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Lt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Lte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) In(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Renderer() *filterCndBuilderSpecNetConfigEthernetsOptsRenderer {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Dhcp4() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4 {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Dhcp6() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6 {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Ipv6Privacy() *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy {
	return &filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) LinkLocal() *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal {
	return &filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Critical() *filterCndBuilderSpecNetConfigEthernetsOptsCritical {
	return &filterCndBuilderSpecNetConfigEthernetsOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) DhcpIdentifier() *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Dhcp4Overrides() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Dhcp6Overrides() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) AcceptRa() *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Addresses() *filterCndBuilderSpecNetConfigEthernetsOptsAddresses {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Gateway4() *filterCndBuilderSpecNetConfigEthernetsOptsGateway4 {
	return &filterCndBuilderSpecNetConfigEthernetsOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Gateway6() *filterCndBuilderSpecNetConfigEthernetsOptsGateway6 {
	return &filterCndBuilderSpecNetConfigEthernetsOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Nameservers() *filterCndBuilderSpecNetConfigEthernetsOptsNameservers {
	return &filterCndBuilderSpecNetConfigEthernetsOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Macaddress() *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress {
	return &filterCndBuilderSpecNetConfigEthernetsOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Mtu() *filterCndBuilderSpecNetConfigEthernetsOptsMtu {
	return &filterCndBuilderSpecNetConfigEthernetsOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Optional() *filterCndBuilderSpecNetConfigEthernetsOptsOptional {
	return &filterCndBuilderSpecNetConfigEthernetsOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) OptionalAddresses() *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses {
	return &filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Routes() *filterCndBuilderSpecNetConfigEthernetsOptsRoutes {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) RoutingPolicy() *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOpts) Auth() *filterCndBuilderSpecNetConfigEthernetsOptsAuth {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecNetConfigEthernetsOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().LinkLocal().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) In(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) Search() *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch {
	return &filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameservers) Addresses() *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses {
	return &filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Eq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Neq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Gt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Gte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Lt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Lte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) In(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) NotIn(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Contains(value *Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) ContainsAnyOf(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) ContainsAll(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) From() *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) To() *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Via() *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) OnLink() *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Metric() *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Type() *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Scope() *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutes) Table() *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) Eq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) Neq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) Gt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) Gte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) Lt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) Lte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) In(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) From() *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) To() *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) Table() *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) Priority() *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) Mark() *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) In(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) Key() *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) Password() *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) Method() *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) Identity() *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) AnonymousIdentity() *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) CaCertificate() *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) ClientCertificate() *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) ClientKey() *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuth) ClientKeyPassword() *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecNetConfigEthernetsOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigEthernetsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigEthernetsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigEthernetsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigEthernetsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Ethernets().Name().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifis struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifis) Eq(value []*Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifis) Neq(value []*Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifis) Gt(value []*Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifis) Gte(value []*Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifis) Lt(value []*Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifis) Lte(value []*Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifis) In(values [][]*Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifis) NotIn(values [][]*Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifis) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifis) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifis) Contains(value *Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifis) ContainsAnyOf(values []*Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifis) ContainsAll(values []*Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifis) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_WifiOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifis) Match() *filterCndBuilderSpecNetConfigWifisMatch {
	return &filterCndBuilderSpecNetConfigWifisMatch{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifis) SetName() *filterCndBuilderSpecNetConfigWifisSetName {
	return &filterCndBuilderSpecNetConfigWifisSetName{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifis) Wakeonlan() *filterCndBuilderSpecNetConfigWifisWakeonlan {
	return &filterCndBuilderSpecNetConfigWifisWakeonlan{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifis) Opts() *filterCndBuilderSpecNetConfigWifisOpts {
	return &filterCndBuilderSpecNetConfigWifisOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifis) AccessPoints() *filterCndBuilderSpecNetConfigWifisAccessPoints {
	return &filterCndBuilderSpecNetConfigWifisAccessPoints{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifis) Name() *filterCndBuilderSpecNetConfigWifisName {
	return &filterCndBuilderSpecNetConfigWifisName{builder: b.builder}
}

type filterCndBuilderSpecNetConfigWifisMatch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) Eq(value *Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) Neq(value *Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) Gt(value *Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) Gte(value *Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) Lt(value *Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) Lte(value *Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) In(values []*Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) NotIn(values []*Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_WifiOpts_Match) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) Name() *filterCndBuilderSpecNetConfigWifisMatchName {
	return &filterCndBuilderSpecNetConfigWifisMatchName{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) Macaddress() *filterCndBuilderSpecNetConfigWifisMatchMacaddress {
	return &filterCndBuilderSpecNetConfigWifisMatchMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisMatch) Driver() *filterCndBuilderSpecNetConfigWifisMatchDriver {
	return &filterCndBuilderSpecNetConfigWifisMatchDriver{builder: b.builder}
}

type filterCndBuilderSpecNetConfigWifisMatchName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisMatchName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Name().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisMatchMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisMatchMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisMatchDriver struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisMatchDriver) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchDriver) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchDriver) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchDriver) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchDriver) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchDriver) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisMatchDriver) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Driver().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchDriver) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Driver().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchDriver) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Driver().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchDriver) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Driver().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisMatchDriver) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Match().Driver().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisSetName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisSetName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisSetName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisSetName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisSetName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisSetName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisSetName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisSetName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().SetName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisSetName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().SetName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisSetName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().SetName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisSetName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().SetName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisSetName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().SetName().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisWakeonlan struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisWakeonlan) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisWakeonlan) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisWakeonlan) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisWakeonlan) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisWakeonlan) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisWakeonlan) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisWakeonlan) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Wakeonlan().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisWakeonlan) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Wakeonlan().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisWakeonlan) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Wakeonlan().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisWakeonlan) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Wakeonlan().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisWakeonlan) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Wakeonlan().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Eq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Neq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Gt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Gte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Lt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Lte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) In(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Renderer() *filterCndBuilderSpecNetConfigWifisOptsRenderer {
	return &filterCndBuilderSpecNetConfigWifisOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Dhcp4() *filterCndBuilderSpecNetConfigWifisOptsDhcp4 {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Dhcp6() *filterCndBuilderSpecNetConfigWifisOptsDhcp6 {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Ipv6Privacy() *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy {
	return &filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) LinkLocal() *filterCndBuilderSpecNetConfigWifisOptsLinkLocal {
	return &filterCndBuilderSpecNetConfigWifisOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Critical() *filterCndBuilderSpecNetConfigWifisOptsCritical {
	return &filterCndBuilderSpecNetConfigWifisOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) DhcpIdentifier() *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Dhcp4Overrides() *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Dhcp6Overrides() *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) AcceptRa() *filterCndBuilderSpecNetConfigWifisOptsAcceptRa {
	return &filterCndBuilderSpecNetConfigWifisOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Addresses() *filterCndBuilderSpecNetConfigWifisOptsAddresses {
	return &filterCndBuilderSpecNetConfigWifisOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Gateway4() *filterCndBuilderSpecNetConfigWifisOptsGateway4 {
	return &filterCndBuilderSpecNetConfigWifisOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Gateway6() *filterCndBuilderSpecNetConfigWifisOptsGateway6 {
	return &filterCndBuilderSpecNetConfigWifisOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Nameservers() *filterCndBuilderSpecNetConfigWifisOptsNameservers {
	return &filterCndBuilderSpecNetConfigWifisOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Macaddress() *filterCndBuilderSpecNetConfigWifisOptsMacaddress {
	return &filterCndBuilderSpecNetConfigWifisOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Mtu() *filterCndBuilderSpecNetConfigWifisOptsMtu {
	return &filterCndBuilderSpecNetConfigWifisOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Optional() *filterCndBuilderSpecNetConfigWifisOptsOptional {
	return &filterCndBuilderSpecNetConfigWifisOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) OptionalAddresses() *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses {
	return &filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Routes() *filterCndBuilderSpecNetConfigWifisOptsRoutes {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) RoutingPolicy() *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOpts) Auth() *filterCndBuilderSpecNetConfigWifisOptsAuth {
	return &filterCndBuilderSpecNetConfigWifisOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecNetConfigWifisOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().LinkLocal().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) In(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) Search() *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch {
	return &filterCndBuilderSpecNetConfigWifisOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameservers) Addresses() *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses {
	return &filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecNetConfigWifisOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Search().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().OptionalAddresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Eq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Neq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Gt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Gte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Lt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Lte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) In(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) NotIn(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Contains(value *Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) ContainsAnyOf(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) ContainsAll(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) From() *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) To() *filterCndBuilderSpecNetConfigWifisOptsRoutesTo {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Via() *filterCndBuilderSpecNetConfigWifisOptsRoutesVia {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) OnLink() *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Metric() *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Type() *filterCndBuilderSpecNetConfigWifisOptsRoutesType {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Scope() *filterCndBuilderSpecNetConfigWifisOptsRoutesScope {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutes) Table() *filterCndBuilderSpecNetConfigWifisOptsRoutesTable {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecNetConfigWifisOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) Eq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) Neq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) Gt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) Gte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) Lt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) Lte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) In(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) From() *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) To() *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) Table() *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) Priority() *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) Mark() *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) In(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) Key() *filterCndBuilderSpecNetConfigWifisOptsAuthKey {
	return &filterCndBuilderSpecNetConfigWifisOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) Password() *filterCndBuilderSpecNetConfigWifisOptsAuthPassword {
	return &filterCndBuilderSpecNetConfigWifisOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) Method() *filterCndBuilderSpecNetConfigWifisOptsAuthMethod {
	return &filterCndBuilderSpecNetConfigWifisOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) Identity() *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity {
	return &filterCndBuilderSpecNetConfigWifisOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) AnonymousIdentity() *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) CaCertificate() *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate {
	return &filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) ClientCertificate() *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate {
	return &filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) ClientKey() *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey {
	return &filterCndBuilderSpecNetConfigWifisOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuth) ClientKeyPassword() *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecNetConfigWifisOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisAccessPoints struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) Eq(value []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) Neq(value []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) Gt(value []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) Gte(value []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) Lt(value []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) Lte(value []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) In(values [][]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) NotIn(values [][]*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) Contains(value *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) ContainsAnyOf(values []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) ContainsAll(values []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) Name() *filterCndBuilderSpecNetConfigWifisAccessPointsName {
	return &filterCndBuilderSpecNetConfigWifisAccessPointsName{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) Password() *filterCndBuilderSpecNetConfigWifisAccessPointsPassword {
	return &filterCndBuilderSpecNetConfigWifisAccessPointsPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPoints) Mode() *filterCndBuilderSpecNetConfigWifisAccessPointsMode {
	return &filterCndBuilderSpecNetConfigWifisAccessPointsMode{builder: b.builder}
}

type filterCndBuilderSpecNetConfigWifisAccessPointsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Name().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisAccessPointsPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Password().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisAccessPointsMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsMode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsMode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsMode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsMode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsMode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsMode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsMode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsMode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisAccessPointsMode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().AccessPoints().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigWifisName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigWifisName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigWifisName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigWifisName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigWifisName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigWifisName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Wifis().Name().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridges struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridges) Eq(value []*Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridges) Neq(value []*Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridges) Gt(value []*Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridges) Gte(value []*Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridges) Lt(value []*Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridges) Lte(value []*Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridges) In(values [][]*Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridges) NotIn(values [][]*Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridges) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridges) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridges) Contains(value *Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridges) ContainsAnyOf(values []*Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridges) ContainsAll(values []*Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridges) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_BridgesOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridges) Opts() *filterCndBuilderSpecNetConfigBridgesOpts {
	return &filterCndBuilderSpecNetConfigBridgesOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridges) Interfaces() *filterCndBuilderSpecNetConfigBridgesInterfaces {
	return &filterCndBuilderSpecNetConfigBridgesInterfaces{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridges) Parameters() *filterCndBuilderSpecNetConfigBridgesParameters {
	return &filterCndBuilderSpecNetConfigBridgesParameters{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridges) Name() *filterCndBuilderSpecNetConfigBridgesName {
	return &filterCndBuilderSpecNetConfigBridgesName{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBridgesOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Eq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Neq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Gt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Gte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Lt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Lte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) In(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Renderer() *filterCndBuilderSpecNetConfigBridgesOptsRenderer {
	return &filterCndBuilderSpecNetConfigBridgesOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Dhcp4() *filterCndBuilderSpecNetConfigBridgesOptsDhcp4 {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Dhcp6() *filterCndBuilderSpecNetConfigBridgesOptsDhcp6 {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Ipv6Privacy() *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy {
	return &filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) LinkLocal() *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal {
	return &filterCndBuilderSpecNetConfigBridgesOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Critical() *filterCndBuilderSpecNetConfigBridgesOptsCritical {
	return &filterCndBuilderSpecNetConfigBridgesOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) DhcpIdentifier() *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Dhcp4Overrides() *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Dhcp6Overrides() *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) AcceptRa() *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa {
	return &filterCndBuilderSpecNetConfigBridgesOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Addresses() *filterCndBuilderSpecNetConfigBridgesOptsAddresses {
	return &filterCndBuilderSpecNetConfigBridgesOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Gateway4() *filterCndBuilderSpecNetConfigBridgesOptsGateway4 {
	return &filterCndBuilderSpecNetConfigBridgesOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Gateway6() *filterCndBuilderSpecNetConfigBridgesOptsGateway6 {
	return &filterCndBuilderSpecNetConfigBridgesOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Nameservers() *filterCndBuilderSpecNetConfigBridgesOptsNameservers {
	return &filterCndBuilderSpecNetConfigBridgesOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Macaddress() *filterCndBuilderSpecNetConfigBridgesOptsMacaddress {
	return &filterCndBuilderSpecNetConfigBridgesOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Mtu() *filterCndBuilderSpecNetConfigBridgesOptsMtu {
	return &filterCndBuilderSpecNetConfigBridgesOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Optional() *filterCndBuilderSpecNetConfigBridgesOptsOptional {
	return &filterCndBuilderSpecNetConfigBridgesOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) OptionalAddresses() *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses {
	return &filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Routes() *filterCndBuilderSpecNetConfigBridgesOptsRoutes {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) RoutingPolicy() *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOpts) Auth() *filterCndBuilderSpecNetConfigBridgesOptsAuth {
	return &filterCndBuilderSpecNetConfigBridgesOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBridgesOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().LinkLocal().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) In(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) Search() *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch {
	return &filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameservers) Addresses() *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses {
	return &filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Search().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().OptionalAddresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Eq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Neq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Gt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Gte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Lt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Lte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) In(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) NotIn(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Contains(value *Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) ContainsAnyOf(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) ContainsAll(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) From() *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) To() *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Via() *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) OnLink() *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Metric() *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Type() *filterCndBuilderSpecNetConfigBridgesOptsRoutesType {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Scope() *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutes) Table() *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) Eq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) Neq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) Gt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) Gte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) Lt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) Lte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) In(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) From() *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) To() *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) Table() *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) Priority() *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) Mark() *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) In(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) Key() *filterCndBuilderSpecNetConfigBridgesOptsAuthKey {
	return &filterCndBuilderSpecNetConfigBridgesOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) Password() *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword {
	return &filterCndBuilderSpecNetConfigBridgesOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) Method() *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod {
	return &filterCndBuilderSpecNetConfigBridgesOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) Identity() *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity {
	return &filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) AnonymousIdentity() *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) CaCertificate() *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate {
	return &filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) ClientCertificate() *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate {
	return &filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) ClientKey() *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey {
	return &filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuth) ClientKeyPassword() *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBridgesOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesInterfaces struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Interfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Interfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Interfaces().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Interfaces().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Interfaces().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Interfaces().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Interfaces()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Interfaces().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Interfaces()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Interfaces().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesInterfaces) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Interfaces().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesParameters struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) Eq(value *Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) Neq(value *Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) Gt(value *Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) Gte(value *Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) Lt(value *Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) Lte(value *Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) In(values []*Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) NotIn(values []*Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_BridgesOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) AgeingTime() *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime {
	return &filterCndBuilderSpecNetConfigBridgesParametersAgeingTime{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) Priority() *filterCndBuilderSpecNetConfigBridgesParametersPriority {
	return &filterCndBuilderSpecNetConfigBridgesParametersPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) PortPriority() *filterCndBuilderSpecNetConfigBridgesParametersPortPriority {
	return &filterCndBuilderSpecNetConfigBridgesParametersPortPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) ForwardDelay() *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay {
	return &filterCndBuilderSpecNetConfigBridgesParametersForwardDelay{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) HelloTime() *filterCndBuilderSpecNetConfigBridgesParametersHelloTime {
	return &filterCndBuilderSpecNetConfigBridgesParametersHelloTime{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) MaxAge() *filterCndBuilderSpecNetConfigBridgesParametersMaxAge {
	return &filterCndBuilderSpecNetConfigBridgesParametersMaxAge{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) PathCost() *filterCndBuilderSpecNetConfigBridgesParametersPathCost {
	return &filterCndBuilderSpecNetConfigBridgesParametersPathCost{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBridgesParameters) Stp() *filterCndBuilderSpecNetConfigBridgesParametersStp {
	return &filterCndBuilderSpecNetConfigBridgesParametersStp{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBridgesParametersAgeingTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().AgeingTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().AgeingTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().AgeingTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().AgeingTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersAgeingTime) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().AgeingTime().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesParametersPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesParametersPortPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPortPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPortPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPortPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPortPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPortPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPortPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPortPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().PortPriority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPortPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().PortPriority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPortPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().PortPriority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPortPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().PortPriority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPortPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().PortPriority().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesParametersForwardDelay struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().ForwardDelay().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().ForwardDelay().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().ForwardDelay().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().ForwardDelay().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersForwardDelay) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().ForwardDelay().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesParametersHelloTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersHelloTime) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersHelloTime) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersHelloTime) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersHelloTime) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersHelloTime) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersHelloTime) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersHelloTime) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().HelloTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersHelloTime) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().HelloTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersHelloTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().HelloTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersHelloTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().HelloTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersHelloTime) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().HelloTime().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesParametersMaxAge struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersMaxAge) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersMaxAge) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersMaxAge) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersMaxAge) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersMaxAge) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersMaxAge) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersMaxAge) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().MaxAge().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersMaxAge) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().MaxAge().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersMaxAge) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().MaxAge().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersMaxAge) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().MaxAge().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersMaxAge) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().MaxAge().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesParametersPathCost struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPathCost) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPathCost) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPathCost) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPathCost) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPathCost) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPathCost) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPathCost) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().PathCost().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPathCost) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().PathCost().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPathCost) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().PathCost().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPathCost) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().PathCost().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersPathCost) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().PathCost().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesParametersStp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersStp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersStp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersStp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersStp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersStp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersStp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersStp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().Stp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersStp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().Stp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersStp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().Stp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersStp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().Stp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesParametersStp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Parameters().Stp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBridgesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBridgesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBridgesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBridgesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bridges().Name().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBonds struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBonds) Eq(value []*Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBonds) Neq(value []*Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBonds) Gt(value []*Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBonds) Gte(value []*Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBonds) Lt(value []*Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBonds) Lte(value []*Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBonds) In(values [][]*Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBonds) NotIn(values [][]*Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBonds) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBonds) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBonds) Contains(value *Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBonds) ContainsAnyOf(values []*Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBonds) ContainsAll(values []*Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBonds) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_BondsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBonds) Opts() *filterCndBuilderSpecNetConfigBondsOpts {
	return &filterCndBuilderSpecNetConfigBondsOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBonds) Interfaces() *filterCndBuilderSpecNetConfigBondsInterfaces {
	return &filterCndBuilderSpecNetConfigBondsInterfaces{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBonds) Parameters() *filterCndBuilderSpecNetConfigBondsParameters {
	return &filterCndBuilderSpecNetConfigBondsParameters{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBonds) Name() *filterCndBuilderSpecNetConfigBondsName {
	return &filterCndBuilderSpecNetConfigBondsName{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBondsOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Eq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Neq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Gt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Gte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Lt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Lte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) In(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Renderer() *filterCndBuilderSpecNetConfigBondsOptsRenderer {
	return &filterCndBuilderSpecNetConfigBondsOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Dhcp4() *filterCndBuilderSpecNetConfigBondsOptsDhcp4 {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Dhcp6() *filterCndBuilderSpecNetConfigBondsOptsDhcp6 {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Ipv6Privacy() *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy {
	return &filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) LinkLocal() *filterCndBuilderSpecNetConfigBondsOptsLinkLocal {
	return &filterCndBuilderSpecNetConfigBondsOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Critical() *filterCndBuilderSpecNetConfigBondsOptsCritical {
	return &filterCndBuilderSpecNetConfigBondsOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) DhcpIdentifier() *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Dhcp4Overrides() *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Dhcp6Overrides() *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) AcceptRa() *filterCndBuilderSpecNetConfigBondsOptsAcceptRa {
	return &filterCndBuilderSpecNetConfigBondsOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Addresses() *filterCndBuilderSpecNetConfigBondsOptsAddresses {
	return &filterCndBuilderSpecNetConfigBondsOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Gateway4() *filterCndBuilderSpecNetConfigBondsOptsGateway4 {
	return &filterCndBuilderSpecNetConfigBondsOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Gateway6() *filterCndBuilderSpecNetConfigBondsOptsGateway6 {
	return &filterCndBuilderSpecNetConfigBondsOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Nameservers() *filterCndBuilderSpecNetConfigBondsOptsNameservers {
	return &filterCndBuilderSpecNetConfigBondsOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Macaddress() *filterCndBuilderSpecNetConfigBondsOptsMacaddress {
	return &filterCndBuilderSpecNetConfigBondsOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Mtu() *filterCndBuilderSpecNetConfigBondsOptsMtu {
	return &filterCndBuilderSpecNetConfigBondsOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Optional() *filterCndBuilderSpecNetConfigBondsOptsOptional {
	return &filterCndBuilderSpecNetConfigBondsOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) OptionalAddresses() *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses {
	return &filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Routes() *filterCndBuilderSpecNetConfigBondsOptsRoutes {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) RoutingPolicy() *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOpts) Auth() *filterCndBuilderSpecNetConfigBondsOptsAuth {
	return &filterCndBuilderSpecNetConfigBondsOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBondsOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().LinkLocal().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) In(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) Search() *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch {
	return &filterCndBuilderSpecNetConfigBondsOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameservers) Addresses() *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses {
	return &filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBondsOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Search().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().OptionalAddresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Eq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Neq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Gt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Gte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Lt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Lte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) In(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) NotIn(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Contains(value *Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) ContainsAnyOf(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) ContainsAll(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) From() *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) To() *filterCndBuilderSpecNetConfigBondsOptsRoutesTo {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Via() *filterCndBuilderSpecNetConfigBondsOptsRoutesVia {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) OnLink() *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Metric() *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Type() *filterCndBuilderSpecNetConfigBondsOptsRoutesType {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Scope() *filterCndBuilderSpecNetConfigBondsOptsRoutesScope {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutes) Table() *filterCndBuilderSpecNetConfigBondsOptsRoutesTable {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBondsOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) Eq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) Neq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) Gt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) Gte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) Lt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) Lte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) In(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) From() *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) To() *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) Table() *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) Priority() *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) Mark() *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) In(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) Key() *filterCndBuilderSpecNetConfigBondsOptsAuthKey {
	return &filterCndBuilderSpecNetConfigBondsOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) Password() *filterCndBuilderSpecNetConfigBondsOptsAuthPassword {
	return &filterCndBuilderSpecNetConfigBondsOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) Method() *filterCndBuilderSpecNetConfigBondsOptsAuthMethod {
	return &filterCndBuilderSpecNetConfigBondsOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) Identity() *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity {
	return &filterCndBuilderSpecNetConfigBondsOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) AnonymousIdentity() *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) CaCertificate() *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate {
	return &filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) ClientCertificate() *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate {
	return &filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) ClientKey() *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey {
	return &filterCndBuilderSpecNetConfigBondsOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuth) ClientKeyPassword() *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBondsOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsInterfaces struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Interfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Interfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Interfaces().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Interfaces().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Interfaces().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Interfaces().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Interfaces()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Interfaces().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Interfaces()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Interfaces().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigBondsInterfaces) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Interfaces().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParameters struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) Eq(value *Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) Neq(value *Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) Gt(value *Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) Gte(value *Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) Lt(value *Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) Lte(value *Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) In(values []*Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) NotIn(values []*Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_BondsOpts_Parameters) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) Mode() *filterCndBuilderSpecNetConfigBondsParametersMode {
	return &filterCndBuilderSpecNetConfigBondsParametersMode{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) LacpRate() *filterCndBuilderSpecNetConfigBondsParametersLacpRate {
	return &filterCndBuilderSpecNetConfigBondsParametersLacpRate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) MiiMonitorInterval() *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval {
	return &filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) MinLinks() *filterCndBuilderSpecNetConfigBondsParametersMinLinks {
	return &filterCndBuilderSpecNetConfigBondsParametersMinLinks{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) TransmitHashPolicy() *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy {
	return &filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) AdSelect() *filterCndBuilderSpecNetConfigBondsParametersAdSelect {
	return &filterCndBuilderSpecNetConfigBondsParametersAdSelect{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) AllSlavesActive() *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive {
	return &filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) ArpIpTargets() *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets {
	return &filterCndBuilderSpecNetConfigBondsParametersArpIpTargets{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) ArpValidate() *filterCndBuilderSpecNetConfigBondsParametersArpValidate {
	return &filterCndBuilderSpecNetConfigBondsParametersArpValidate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) ArpAllTargets() *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets {
	return &filterCndBuilderSpecNetConfigBondsParametersArpAllTargets{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) UpDelay() *filterCndBuilderSpecNetConfigBondsParametersUpDelay {
	return &filterCndBuilderSpecNetConfigBondsParametersUpDelay{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) FailOverMacPolicy() *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy {
	return &filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) GratuitousArp() *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp {
	return &filterCndBuilderSpecNetConfigBondsParametersGratuitousArp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) PacketsPerSlave() *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave {
	return &filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) PrimaryReselectPolicy() *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy {
	return &filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) ResendIgmp() *filterCndBuilderSpecNetConfigBondsParametersResendIgmp {
	return &filterCndBuilderSpecNetConfigBondsParametersResendIgmp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) LearnPacketInterval() *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval {
	return &filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigBondsParameters) Primary() *filterCndBuilderSpecNetConfigBondsParametersPrimary {
	return &filterCndBuilderSpecNetConfigBondsParametersPrimary{builder: b.builder}
}

type filterCndBuilderSpecNetConfigBondsParametersMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersLacpRate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLacpRate) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLacpRate) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLacpRate) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLacpRate) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLacpRate) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLacpRate) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLacpRate) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().LacpRate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLacpRate) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().LacpRate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLacpRate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().LacpRate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLacpRate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().LacpRate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLacpRate) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().LacpRate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().MiiMonitorInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().MiiMonitorInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().MiiMonitorInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().MiiMonitorInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMiiMonitorInterval) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().MiiMonitorInterval().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersMinLinks struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMinLinks) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMinLinks) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMinLinks) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMinLinks) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMinLinks) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMinLinks) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMinLinks) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().MinLinks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMinLinks) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().MinLinks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMinLinks) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().MinLinks().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMinLinks) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().MinLinks().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersMinLinks) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().MinLinks().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().TransmitHashPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().TransmitHashPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().TransmitHashPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().TransmitHashPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersTransmitHashPolicy) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().TransmitHashPolicy().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersAdSelect struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAdSelect) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAdSelect) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAdSelect) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAdSelect) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAdSelect) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAdSelect) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAdSelect) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().AdSelect().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAdSelect) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().AdSelect().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAdSelect) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().AdSelect().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAdSelect) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().AdSelect().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAdSelect) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().AdSelect().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().AllSlavesActive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().AllSlavesActive().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().AllSlavesActive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().AllSlavesActive().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersAllSlavesActive) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().AllSlavesActive().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersArpIpTargets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpIpTargets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpIpTargets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpIpTargets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpIpTargets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpIpTargets) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpIpTargets().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersArpValidate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpValidate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpValidate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpValidate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpValidate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpValidate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpValidate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpValidate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpValidate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpValidate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpValidate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpValidate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpValidate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpValidate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpValidate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpValidate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpValidate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersArpAllTargets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpAllTargets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpAllTargets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpAllTargets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpAllTargets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersArpAllTargets) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ArpAllTargets().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersUpDelay struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersUpDelay) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersUpDelay) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersUpDelay) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersUpDelay) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersUpDelay) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersUpDelay) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersUpDelay) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().UpDelay().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersUpDelay) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().UpDelay().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersUpDelay) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().UpDelay().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersUpDelay) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().UpDelay().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersUpDelay) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().UpDelay().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().FailOverMacPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().FailOverMacPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().FailOverMacPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().FailOverMacPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersFailOverMacPolicy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().FailOverMacPolicy().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersGratuitousArp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().GratuitousArp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().GratuitousArp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().GratuitousArp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().GratuitousArp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersGratuitousArp) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().GratuitousArp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().PacketsPerSlave().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().PacketsPerSlave().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().PacketsPerSlave().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().PacketsPerSlave().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPacketsPerSlave) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().PacketsPerSlave().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().PrimaryReselectPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().PrimaryReselectPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().PrimaryReselectPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().PrimaryReselectPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimaryReselectPolicy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().PrimaryReselectPolicy().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersResendIgmp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersResendIgmp) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersResendIgmp) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersResendIgmp) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersResendIgmp) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersResendIgmp) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersResendIgmp) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersResendIgmp) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ResendIgmp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersResendIgmp) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ResendIgmp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersResendIgmp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ResendIgmp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersResendIgmp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ResendIgmp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersResendIgmp) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().ResendIgmp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().LearnPacketInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().LearnPacketInterval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().LearnPacketInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().LearnPacketInterval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersLearnPacketInterval) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().LearnPacketInterval().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsParametersPrimary struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimary) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimary) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimary) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimary) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimary) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimary) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimary) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().Primary().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimary) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().Primary().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimary) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().Primary().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimary) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().Primary().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsParametersPrimary) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Parameters().Primary().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigBondsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigBondsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigBondsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigBondsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigBondsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigBondsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Bonds().Name().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnels) Eq(value []*Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnels) Neq(value []*Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnels) Gt(value []*Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnels) Gte(value []*Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnels) Lt(value []*Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnels) Lte(value []*Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnels) In(values [][]*Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnels) NotIn(values [][]*Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnels) Contains(value *Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnels) ContainsAnyOf(values []*Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnels) ContainsAll(values []*Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnels) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_TunnelsOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnels) Opts() *filterCndBuilderSpecNetConfigTunnelsOpts {
	return &filterCndBuilderSpecNetConfigTunnelsOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnels) Mode() *filterCndBuilderSpecNetConfigTunnelsMode {
	return &filterCndBuilderSpecNetConfigTunnelsMode{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnels) Local() *filterCndBuilderSpecNetConfigTunnelsLocal {
	return &filterCndBuilderSpecNetConfigTunnelsLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnels) Remote() *filterCndBuilderSpecNetConfigTunnelsRemote {
	return &filterCndBuilderSpecNetConfigTunnelsRemote{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnels) Key() *filterCndBuilderSpecNetConfigTunnelsKey {
	return &filterCndBuilderSpecNetConfigTunnelsKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnels) Name() *filterCndBuilderSpecNetConfigTunnelsName {
	return &filterCndBuilderSpecNetConfigTunnelsName{builder: b.builder}
}

type filterCndBuilderSpecNetConfigTunnelsOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Eq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Neq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Gt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Gte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Lt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Lte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) In(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Renderer() *filterCndBuilderSpecNetConfigTunnelsOptsRenderer {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Dhcp4() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4 {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Dhcp6() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6 {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Ipv6Privacy() *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy {
	return &filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) LinkLocal() *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal {
	return &filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Critical() *filterCndBuilderSpecNetConfigTunnelsOptsCritical {
	return &filterCndBuilderSpecNetConfigTunnelsOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) DhcpIdentifier() *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Dhcp4Overrides() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Dhcp6Overrides() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) AcceptRa() *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Addresses() *filterCndBuilderSpecNetConfigTunnelsOptsAddresses {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Gateway4() *filterCndBuilderSpecNetConfigTunnelsOptsGateway4 {
	return &filterCndBuilderSpecNetConfigTunnelsOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Gateway6() *filterCndBuilderSpecNetConfigTunnelsOptsGateway6 {
	return &filterCndBuilderSpecNetConfigTunnelsOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Nameservers() *filterCndBuilderSpecNetConfigTunnelsOptsNameservers {
	return &filterCndBuilderSpecNetConfigTunnelsOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Macaddress() *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress {
	return &filterCndBuilderSpecNetConfigTunnelsOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Mtu() *filterCndBuilderSpecNetConfigTunnelsOptsMtu {
	return &filterCndBuilderSpecNetConfigTunnelsOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Optional() *filterCndBuilderSpecNetConfigTunnelsOptsOptional {
	return &filterCndBuilderSpecNetConfigTunnelsOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) OptionalAddresses() *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses {
	return &filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Routes() *filterCndBuilderSpecNetConfigTunnelsOptsRoutes {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) RoutingPolicy() *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOpts) Auth() *filterCndBuilderSpecNetConfigTunnelsOptsAuth {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecNetConfigTunnelsOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().LinkLocal().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) In(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) Search() *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch {
	return &filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameservers) Addresses() *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses {
	return &filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Eq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Neq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Gt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Gte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Lt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Lte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) In(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) NotIn(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Contains(value *Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) ContainsAnyOf(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) ContainsAll(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) From() *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) To() *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Via() *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) OnLink() *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Metric() *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Type() *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Scope() *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutes) Table() *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) Eq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) Neq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) Gt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) Gte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) Lt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) Lte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) In(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) From() *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) To() *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) Table() *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) Priority() *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) Mark() *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) In(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) Key() *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) Password() *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) Method() *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) Identity() *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) AnonymousIdentity() *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) CaCertificate() *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) ClientCertificate() *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) ClientKey() *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuth) ClientKeyPassword() *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecNetConfigTunnelsOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsMode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsMode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsMode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsMode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsMode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsMode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsMode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsMode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsMode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsLocal) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsLocal) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsLocal) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsLocal) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsLocal) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsLocal) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsLocal) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Local().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsLocal) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Local().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Local().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Local().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsLocal) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Local().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsRemote struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsRemote) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsRemote) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsRemote) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsRemote) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsRemote) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsRemote) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsRemote) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Remote().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsRemote) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Remote().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsRemote) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Remote().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsRemote) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Remote().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsRemote) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Remote().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsKey) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsKey) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsKey) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsKey) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsKey) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsKey) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsKey) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsKey) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsKey) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Key().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigTunnelsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigTunnelsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigTunnelsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigTunnelsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Tunnels().Name().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlans struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlans) Eq(value []*Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlans) Neq(value []*Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlans) Gt(value []*Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlans) Gte(value []*Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlans) Lt(value []*Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlans) Lte(value []*Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlans) In(values [][]*Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlans) NotIn(values [][]*Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlans) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlans) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlans) Contains(value *Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlans) ContainsAnyOf(values []*Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlans) ContainsAll(values []*Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlans) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_VlansOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlans) Opts() *filterCndBuilderSpecNetConfigVlansOpts {
	return &filterCndBuilderSpecNetConfigVlansOpts{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlans) Id() *filterCndBuilderSpecNetConfigVlansId {
	return &filterCndBuilderSpecNetConfigVlansId{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlans) Link() *filterCndBuilderSpecNetConfigVlansLink {
	return &filterCndBuilderSpecNetConfigVlansLink{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlans) Name() *filterCndBuilderSpecNetConfigVlansName {
	return &filterCndBuilderSpecNetConfigVlansName{builder: b.builder}
}

type filterCndBuilderSpecNetConfigVlansOpts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Eq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Neq(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Gt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Gte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Lt(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Lte(value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) In(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Renderer() *filterCndBuilderSpecNetConfigVlansOptsRenderer {
	return &filterCndBuilderSpecNetConfigVlansOptsRenderer{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Dhcp4() *filterCndBuilderSpecNetConfigVlansOptsDhcp4 {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Dhcp6() *filterCndBuilderSpecNetConfigVlansOptsDhcp6 {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Ipv6Privacy() *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy {
	return &filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) LinkLocal() *filterCndBuilderSpecNetConfigVlansOptsLinkLocal {
	return &filterCndBuilderSpecNetConfigVlansOptsLinkLocal{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Critical() *filterCndBuilderSpecNetConfigVlansOptsCritical {
	return &filterCndBuilderSpecNetConfigVlansOptsCritical{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) DhcpIdentifier() *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Dhcp4Overrides() *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Dhcp6Overrides() *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) AcceptRa() *filterCndBuilderSpecNetConfigVlansOptsAcceptRa {
	return &filterCndBuilderSpecNetConfigVlansOptsAcceptRa{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Addresses() *filterCndBuilderSpecNetConfigVlansOptsAddresses {
	return &filterCndBuilderSpecNetConfigVlansOptsAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Gateway4() *filterCndBuilderSpecNetConfigVlansOptsGateway4 {
	return &filterCndBuilderSpecNetConfigVlansOptsGateway4{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Gateway6() *filterCndBuilderSpecNetConfigVlansOptsGateway6 {
	return &filterCndBuilderSpecNetConfigVlansOptsGateway6{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Nameservers() *filterCndBuilderSpecNetConfigVlansOptsNameservers {
	return &filterCndBuilderSpecNetConfigVlansOptsNameservers{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Macaddress() *filterCndBuilderSpecNetConfigVlansOptsMacaddress {
	return &filterCndBuilderSpecNetConfigVlansOptsMacaddress{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Mtu() *filterCndBuilderSpecNetConfigVlansOptsMtu {
	return &filterCndBuilderSpecNetConfigVlansOptsMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Optional() *filterCndBuilderSpecNetConfigVlansOptsOptional {
	return &filterCndBuilderSpecNetConfigVlansOptsOptional{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) OptionalAddresses() *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses {
	return &filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Routes() *filterCndBuilderSpecNetConfigVlansOptsRoutes {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) RoutingPolicy() *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOpts) Auth() *filterCndBuilderSpecNetConfigVlansOptsAuth {
	return &filterCndBuilderSpecNetConfigVlansOptsAuth{builder: b.builder}
}

type filterCndBuilderSpecNetConfigVlansOptsRenderer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRenderer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRenderer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRenderer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRenderer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRenderer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRenderer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRenderer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRenderer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Renderer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRenderer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRenderer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Renderer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRenderer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Renderer().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Ipv6Privacy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Ipv6Privacy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsIpv6Privacy) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Ipv6Privacy().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsLinkLocal struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().LinkLocal().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().LinkLocal().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().LinkLocal().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().LinkLocal().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().LinkLocal()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().LinkLocal().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsLinkLocal) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().LinkLocal().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsCritical struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsCritical) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsCritical) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsCritical) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsCritical) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsCritical) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsCritical) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsCritical) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsCritical) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Critical().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsCritical) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsCritical) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Critical().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsCritical) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Critical().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().DhcpIdentifier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().DhcpIdentifier().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcpIdentifier) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().DhcpIdentifier().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) UseDns() *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) UseNtp() *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) SendHostname() *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) UseHostname() *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) UseMtu() *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) Hostname() *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) UseRoutes() *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4Overrides) RouteMetric() *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp4OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp4Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) Eq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) Neq(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) Gt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) Gte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) Lt(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) Lte(value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) In(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) UseDns() *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) UseNtp() *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) SendHostname() *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) UseHostname() *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) UseMtu() *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) Hostname() *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) UseRoutes() *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6Overrides) RouteMetric() *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric {
	return &filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric{builder: b.builder}
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseDns().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseDns().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseDns) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseDns().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseNtp().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseNtp().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseNtp) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseNtp().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().SendHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().SendHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesSendHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().SendHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseHostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseHostname) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseHostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseMtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseMtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseMtu) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseMtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().Hostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().Hostname().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().Hostname().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseRoutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseRoutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesUseRoutes) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().UseRoutes().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().RouteMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().RouteMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsDhcp6OverridesRouteMetric) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Dhcp6Overrides().RouteMetric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsAcceptRa struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAcceptRa) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAcceptRa) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAcceptRa) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAcceptRa) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAcceptRa) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAcceptRa) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAcceptRa) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAcceptRa) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().AcceptRa().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAcceptRa) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAcceptRa) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().AcceptRa().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAcceptRa) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().AcceptRa().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsGateway4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Gateway4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Gateway4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Gateway4().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsGateway6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Gateway6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Gateway6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsGateway6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Gateway6().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsNameservers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) In(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Nameservers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) Search() *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch {
	return &filterCndBuilderSpecNetConfigVlansOptsNameserversSearch{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameservers) Addresses() *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses {
	return &filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses{builder: b.builder}
}

type filterCndBuilderSpecNetConfigVlansOptsNameserversSearch struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Search().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Search().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Search().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Search().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Search()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Search().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversSearch) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Search().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsNameserversAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Nameservers().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsMacaddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMacaddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMacaddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMacaddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMacaddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMacaddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMacaddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMacaddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMacaddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Macaddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMacaddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMacaddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Macaddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMacaddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Macaddress().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsMtu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMtu) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMtu) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMtu) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMtu) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMtu) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMtu) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMtu) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMtu) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Mtu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMtu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMtu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Mtu().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsMtu) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Mtu().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().OptionalAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().OptionalAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().OptionalAddresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().OptionalAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().OptionalAddresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().OptionalAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsOptionalAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().OptionalAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Eq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Neq(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Gt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Gte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Lt(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Lte(value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) In(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) NotIn(values [][]*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Contains(value *Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) ContainsAnyOf(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) ContainsAll(values []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) compare(op gotenfilter.CompareOperator, value []*Device_Spec_NetworkConfig_CommonOpts_Routes) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) From() *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutesFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) To() *filterCndBuilderSpecNetConfigVlansOptsRoutesTo {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutesTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Via() *filterCndBuilderSpecNetConfigVlansOptsRoutesVia {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutesVia{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) OnLink() *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Metric() *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutesMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Type() *filterCndBuilderSpecNetConfigVlansOptsRoutesType {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutesType{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Scope() *filterCndBuilderSpecNetConfigVlansOptsRoutesScope {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutesScope{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutes) Table() *filterCndBuilderSpecNetConfigVlansOptsRoutesTable {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutesTable{builder: b.builder}
}

type filterCndBuilderSpecNetConfigVlansOptsRoutesFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutesTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutesVia struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesVia) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesVia) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesVia) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesVia) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesVia) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesVia) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesVia) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesVia) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Via().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesVia) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesVia) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Via().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesVia) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Via().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().OnLink().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().OnLink().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesOnLink) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().OnLink().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutesMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesMetric) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Metric().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Type().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutesScope struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesScope) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesScope) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesScope) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesScope) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesScope) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesScope) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesScope) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesScope) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Scope().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesScope) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesScope) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Scope().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesScope) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Scope().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutesTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutesTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Routes().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) Eq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) Neq(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) Gt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) Gte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) Lt(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) Lte(value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) In(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) From() *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) To() *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) Table() *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) Priority() *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) Mark() *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicy) TypeOfService() *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService {
	return &filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService{builder: b.builder}
}

type filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().From().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().To().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().To().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTo) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().To().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Table().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Table().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTable) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Table().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Mark().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Mark().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyMark) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().Mark().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().TypeOfService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().TypeOfService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsRoutingPolicyTypeOfService) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().RoutingPolicy().TypeOfService().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsAuth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) Eq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) Neq(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) Gt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) Gte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) Lt(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) Lte(value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) In(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) NotIn(values []*Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) compare(op gotenfilter.CompareOperator, value *Device_Spec_NetworkConfig_CommonOpts_Auth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().WithValue(value),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) Key() *filterCndBuilderSpecNetConfigVlansOptsAuthKey {
	return &filterCndBuilderSpecNetConfigVlansOptsAuthKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) Password() *filterCndBuilderSpecNetConfigVlansOptsAuthPassword {
	return &filterCndBuilderSpecNetConfigVlansOptsAuthPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) Method() *filterCndBuilderSpecNetConfigVlansOptsAuthMethod {
	return &filterCndBuilderSpecNetConfigVlansOptsAuthMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) Identity() *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity {
	return &filterCndBuilderSpecNetConfigVlansOptsAuthIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) AnonymousIdentity() *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity {
	return &filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) CaCertificate() *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate {
	return &filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) ClientCertificate() *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate {
	return &filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) ClientKey() *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey {
	return &filterCndBuilderSpecNetConfigVlansOptsAuthClientKey{builder: b.builder}
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuth) ClientKeyPassword() *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword {
	return &filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword{builder: b.builder}
}

type filterCndBuilderSpecNetConfigVlansOptsAuthKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Key().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsAuthPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Password().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsAuthMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthMethod) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthMethod) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthMethod) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthMethod) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthMethod) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthMethod) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthMethod) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthMethod) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Method().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Method().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthMethod) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Method().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsAuthIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Identity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Identity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().Identity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().AnonymousIdentity().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().AnonymousIdentity().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthAnonymousIdentity) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().AnonymousIdentity().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().CaCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().CaCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthCaCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().CaCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientCertificate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientCertificate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientCertificate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientCertificate().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsAuthClientKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientKey().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientKeyPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientKeyPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansOptsAuthClientKeyPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Opts().Auth().ClientKeyPassword().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansId struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansId) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansId) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansId) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansId) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansId) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansId) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansId) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Id().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansId) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Id().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansId) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Id().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansId) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Id().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansId) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Id().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansLink struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansLink) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansLink) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansLink) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansLink) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansLink) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansLink) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansLink) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Link().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansLink) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Link().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansLink) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Link().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansLink) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Link().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansLink) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Link().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigVlansName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigVlansName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigVlansName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigVlansName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigVlansName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigVlansName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfig().Vlans().Name().WithValue(value),
	})
}

type filterCndBuilderSpecNetConfigMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecNetConfigMode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecNetConfigMode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecNetConfigMode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecNetConfigMode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecNetConfigMode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecNetConfigMode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecNetConfigMode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfigMode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigMode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().NetConfigMode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecNetConfigMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfigMode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().NetConfigMode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecNetConfigMode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().NetConfigMode().WithValue(value),
	})
}

type filterCndBuilderSpecOsImageUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecOsImageUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecOsImageUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecOsImageUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecOsImageUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecOsImageUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecOsImageUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecOsImageUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().OsImageUrl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecOsImageUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().OsImageUrl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecOsImageUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().OsImageUrl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecOsImageUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().OsImageUrl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecOsImageUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().OsImageUrl().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfig) Eq(value *Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfig) Neq(value *Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfig) Gt(value *Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfig) Gte(value *Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfig) Lt(value *Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfig) Lte(value *Device_Spec_SSHConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfig) In(values []*Device_Spec_SSHConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfig) NotIn(values []*Device_Spec_SSHConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfig) compare(op gotenfilter.CompareOperator, value *Device_Spec_SSHConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecSshConfig) DisableSshServer() *filterCndBuilderSpecSshConfigDisableSshServer {
	return &filterCndBuilderSpecSshConfigDisableSshServer{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfig) DisableSshPassword() *filterCndBuilderSpecSshConfigDisableSshPassword {
	return &filterCndBuilderSpecSshConfigDisableSshPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfig) SshAuthorized() *filterCndBuilderSpecSshConfigSshAuthorized {
	return &filterCndBuilderSpecSshConfigSshAuthorized{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfig) IpAllowList() *filterCndBuilderSpecSshConfigIpAllowList {
	return &filterCndBuilderSpecSshConfigIpAllowList{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfig) IpDenyList() *filterCndBuilderSpecSshConfigIpDenyList {
	return &filterCndBuilderSpecSshConfigIpDenyList{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfig) RejectPeriod() *filterCndBuilderSpecSshConfigRejectPeriod {
	return &filterCndBuilderSpecSshConfigRejectPeriod{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfig) DisableSshAuthkey() *filterCndBuilderSpecSshConfigDisableSshAuthkey {
	return &filterCndBuilderSpecSshConfigDisableSshAuthkey{builder: b.builder}
}

type filterCndBuilderSpecSshConfigDisableSshServer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigDisableSshServer) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshServer) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshServer) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshServer) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshServer) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshServer) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshServer) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshServer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshServer) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshServer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshServer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshServer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshServer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshServer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshServer) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshServer().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigDisableSshPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigDisableSshPassword) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshPassword) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshPassword) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshPassword) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshPassword) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshPassword) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshPassword) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshPassword) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshPassword().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshPassword().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshPassword) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshPassword().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorized struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Eq(value []*Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Neq(value []*Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Gt(value []*Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Gte(value []*Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Lt(value []*Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Lte(value []*Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) In(values [][]*Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) NotIn(values [][]*Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Contains(value *Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) ContainsAnyOf(values []*Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) ContainsAll(values []*Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) compare(op gotenfilter.CompareOperator, value []*Device_Spec_SSHConfig_AuthKey) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().WithValue(value),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) SshaKey() *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey {
	return &filterCndBuilderSpecSshConfigSshAuthorizedSshaKey{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) CertAuthority() *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority {
	return &filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Command() *filterCndBuilderSpecSshConfigSshAuthorizedCommand {
	return &filterCndBuilderSpecSshConfigSshAuthorizedCommand{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Environment() *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment {
	return &filterCndBuilderSpecSshConfigSshAuthorizedEnvironment{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) From() *filterCndBuilderSpecSshConfigSshAuthorizedFrom {
	return &filterCndBuilderSpecSshConfigSshAuthorizedFrom{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) NoAgentForwarding() *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding {
	return &filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) NoPortForwarding() *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding {
	return &filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) NoPty() *filterCndBuilderSpecSshConfigSshAuthorizedNoPty {
	return &filterCndBuilderSpecSshConfigSshAuthorizedNoPty{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) NoUserRc() *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc {
	return &filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) NoX11Forwarding() *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding {
	return &filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Permitopen() *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen {
	return &filterCndBuilderSpecSshConfigSshAuthorizedPermitopen{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Principals() *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals {
	return &filterCndBuilderSpecSshConfigSshAuthorizedPrincipals{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Tunnel() *filterCndBuilderSpecSshConfigSshAuthorizedTunnel {
	return &filterCndBuilderSpecSshConfigSshAuthorizedTunnel{builder: b.builder}
}

func (b *filterCndBuilderSpecSshConfigSshAuthorized) Restrict() *filterCndBuilderSpecSshConfigSshAuthorizedRestrict {
	return &filterCndBuilderSpecSshConfigSshAuthorizedRestrict{builder: b.builder}
}

type filterCndBuilderSpecSshConfigSshAuthorizedSshaKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().SshaKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().SshaKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().SshaKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().SshaKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedSshaKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().SshaKey().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().CertAuthority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().CertAuthority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().CertAuthority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().CertAuthority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCertAuthority) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().CertAuthority().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedCommand struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCommand) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCommand) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCommand) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCommand) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCommand) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCommand) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCommand) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Command().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCommand) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Command().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCommand) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Command().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCommand) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Command().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedCommand) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Command().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedEnvironment struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Environment().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Environment().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Environment().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Environment().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedEnvironment) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Environment().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedFrom) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedFrom) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedFrom) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedFrom) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedFrom) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedFrom) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedFrom) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedFrom) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().From().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().From().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedFrom) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().From().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoAgentForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoAgentForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoAgentForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoAgentForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoAgentForwarding) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoAgentForwarding().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoPortForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoPortForwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoPortForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoPortForwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPortForwarding) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoPortForwarding().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedNoPty struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPty) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPty) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPty) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPty) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPty) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPty) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPty) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoPty().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPty) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoPty().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPty) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoPty().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPty) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoPty().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoPty) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoPty().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoUserRc().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoUserRc().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoUserRc().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoUserRc().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoUserRc) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoUserRc().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoX11Forwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoX11Forwarding().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoX11Forwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoX11Forwarding().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedNoX11Forwarding) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().NoX11Forwarding().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedPermitopen struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Permitopen().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Permitopen().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Permitopen().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Permitopen().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPermitopen) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Permitopen().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedPrincipals struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Principals().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Principals().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Principals().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Principals().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedPrincipals) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Principals().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedTunnel struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedTunnel) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedTunnel) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedTunnel) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedTunnel) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedTunnel) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedTunnel) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedTunnel) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Tunnel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedTunnel) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Tunnel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedTunnel) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Tunnel().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedTunnel) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Tunnel().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedTunnel) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Tunnel().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigSshAuthorizedRestrict struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedRestrict) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedRestrict) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedRestrict) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedRestrict) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedRestrict) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedRestrict) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedRestrict) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Restrict().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedRestrict) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Restrict().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedRestrict) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Restrict().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedRestrict) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Restrict().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigSshAuthorizedRestrict) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().SshAuthorized().Restrict().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigIpAllowList struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().IpAllowList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().IpAllowList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().IpAllowList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().IpAllowList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().IpAllowList().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().SshConfig().IpAllowList().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().SshConfig().IpAllowList()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().IpAllowList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().SshConfig().IpAllowList()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().IpAllowList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSshConfigIpAllowList) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().IpAllowList().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigIpDenyList struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().IpDenyList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().IpDenyList().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().IpDenyList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().IpDenyList().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().IpDenyList().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().SshConfig().IpDenyList().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().SshConfig().IpDenyList()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().IpDenyList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().SshConfig().IpDenyList()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().IpDenyList().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSshConfigIpDenyList) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().IpDenyList().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigRejectPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigRejectPeriod) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigRejectPeriod) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigRejectPeriod) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigRejectPeriod) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigRejectPeriod) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigRejectPeriod) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigRejectPeriod) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().RejectPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigRejectPeriod) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().RejectPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigRejectPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().RejectPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigRejectPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().RejectPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigRejectPeriod) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().RejectPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecSshConfigDisableSshAuthkey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSshConfigDisableSshAuthkey) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshAuthkey) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshAuthkey) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshAuthkey) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshAuthkey) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshAuthkey) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSshConfigDisableSshAuthkey) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshAuthkey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshAuthkey) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshAuthkey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshAuthkey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshAuthkey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshAuthkey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshAuthkey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSshConfigDisableSshAuthkey) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().SshConfig().DisableSshAuthkey().WithValue(value),
	})
}

type filterCndBuilderSpecAttestationConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAttestationConfig) Eq(value *Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAttestationConfig) Neq(value *Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAttestationConfig) Gt(value *Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAttestationConfig) Gte(value *Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAttestationConfig) Lt(value *Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAttestationConfig) Lte(value *Device_Spec_AttestationConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAttestationConfig) In(values []*Device_Spec_AttestationConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().AttestationConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAttestationConfig) NotIn(values []*Device_Spec_AttestationConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().AttestationConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAttestationConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().AttestationConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAttestationConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().AttestationConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAttestationConfig) compare(op gotenfilter.CompareOperator, value *Device_Spec_AttestationConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().AttestationConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecAttestationConfig) AttestationExpected() *filterCndBuilderSpecAttestationConfigAttestationExpected {
	return &filterCndBuilderSpecAttestationConfigAttestationExpected{builder: b.builder}
}

func (b *filterCndBuilderSpecAttestationConfig) AttestationDomain() *filterCndBuilderSpecAttestationConfigAttestationDomain {
	return &filterCndBuilderSpecAttestationConfigAttestationDomain{builder: b.builder}
}

func (b *filterCndBuilderSpecAttestationConfig) InsecureUseTpmSimulatorSeed() *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed {
	return &filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed{builder: b.builder}
}

type filterCndBuilderSpecAttestationConfigAttestationExpected struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAttestationConfigAttestationExpected) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationExpected) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationExpected) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationExpected) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationExpected) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationExpected) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationExpected) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().AttestationConfig().AttestationExpected().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAttestationConfigAttestationExpected) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().AttestationConfig().AttestationExpected().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAttestationConfigAttestationExpected) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().AttestationConfig().AttestationExpected().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAttestationConfigAttestationExpected) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().AttestationConfig().AttestationExpected().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAttestationConfigAttestationExpected) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().AttestationConfig().AttestationExpected().WithValue(value),
	})
}

type filterCndBuilderSpecAttestationConfigAttestationDomain struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAttestationConfigAttestationDomain) Eq(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationDomain) Neq(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationDomain) Gt(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationDomain) Gte(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationDomain) Lt(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationDomain) Lte(value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAttestationConfigAttestationDomain) In(values []*iam_attestation_domain.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().AttestationConfig().AttestationDomain().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAttestationConfigAttestationDomain) NotIn(values []*iam_attestation_domain.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().AttestationConfig().AttestationDomain().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAttestationConfigAttestationDomain) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().AttestationConfig().AttestationDomain().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAttestationConfigAttestationDomain) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().AttestationConfig().AttestationDomain().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAttestationConfigAttestationDomain) compare(op gotenfilter.CompareOperator, value *iam_attestation_domain.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().AttestationConfig().AttestationDomain().WithValue(value),
	})
}

type filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().AttestationConfig().InsecureUseTpmSimulatorSeed().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().AttestationConfig().InsecureUseTpmSimulatorSeed().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().AttestationConfig().InsecureUseTpmSimulatorSeed().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().AttestationConfig().InsecureUseTpmSimulatorSeed().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAttestationConfigInsecureUseTpmSimulatorSeed) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().AttestationConfig().InsecureUseTpmSimulatorSeed().WithValue(value),
	})
}

type filterCndBuilderSpecDisableDeviceDiscovery struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecDisableDeviceDiscovery) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecDisableDeviceDiscovery) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecDisableDeviceDiscovery) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecDisableDeviceDiscovery) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecDisableDeviceDiscovery) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecDisableDeviceDiscovery) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecDisableDeviceDiscovery) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().DisableDeviceDiscovery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecDisableDeviceDiscovery) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().DisableDeviceDiscovery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecDisableDeviceDiscovery) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().DisableDeviceDiscovery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecDisableDeviceDiscovery) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().DisableDeviceDiscovery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecDisableDeviceDiscovery) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().DisableDeviceDiscovery().WithValue(value),
	})
}

type filterCndBuilderSpecLoggingConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLoggingConfig) Eq(value *Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLoggingConfig) Neq(value *Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLoggingConfig) Gt(value *Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLoggingConfig) Gte(value *Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLoggingConfig) Lt(value *Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLoggingConfig) Lte(value *Device_Spec_LoggingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLoggingConfig) In(values []*Device_Spec_LoggingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().LoggingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLoggingConfig) NotIn(values []*Device_Spec_LoggingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().LoggingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLoggingConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().LoggingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLoggingConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().LoggingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLoggingConfig) compare(op gotenfilter.CompareOperator, value *Device_Spec_LoggingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().LoggingConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecLoggingConfig) Priority() *filterCndBuilderSpecLoggingConfigPriority {
	return &filterCndBuilderSpecLoggingConfigPriority{builder: b.builder}
}

func (b *filterCndBuilderSpecLoggingConfig) Units() *filterCndBuilderSpecLoggingConfigUnits {
	return &filterCndBuilderSpecLoggingConfigUnits{builder: b.builder}
}

func (b *filterCndBuilderSpecLoggingConfig) EnableJournalExport() *filterCndBuilderSpecLoggingConfigEnableJournalExport {
	return &filterCndBuilderSpecLoggingConfigEnableJournalExport{builder: b.builder}
}

type filterCndBuilderSpecLoggingConfigPriority struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLoggingConfigPriority) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLoggingConfigPriority) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLoggingConfigPriority) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLoggingConfigPriority) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLoggingConfigPriority) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLoggingConfigPriority) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLoggingConfigPriority) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLoggingConfigPriority) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Priority().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLoggingConfigPriority) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLoggingConfigPriority) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Priority().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLoggingConfigPriority) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Priority().WithValue(value),
	})
}

type filterCndBuilderSpecLoggingConfigUnits struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLoggingConfigUnits) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLoggingConfigUnits) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLoggingConfigUnits) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLoggingConfigUnits) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLoggingConfigUnits) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLoggingConfigUnits) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLoggingConfigUnits) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Units().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLoggingConfigUnits) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Units().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLoggingConfigUnits) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Units().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLoggingConfigUnits) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Units().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLoggingConfigUnits) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Units().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Spec().LoggingConfig().Units().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecLoggingConfigUnits) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().LoggingConfig().Units()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Units().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecLoggingConfigUnits) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Spec().LoggingConfig().Units()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Units().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecLoggingConfigUnits) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().LoggingConfig().Units().WithValue(value),
	})
}

type filterCndBuilderSpecLoggingConfigEnableJournalExport struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLoggingConfigEnableJournalExport) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLoggingConfigEnableJournalExport) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLoggingConfigEnableJournalExport) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLoggingConfigEnableJournalExport) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLoggingConfigEnableJournalExport) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLoggingConfigEnableJournalExport) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLoggingConfigEnableJournalExport) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().LoggingConfig().EnableJournalExport().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLoggingConfigEnableJournalExport) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Spec().LoggingConfig().EnableJournalExport().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLoggingConfigEnableJournalExport) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Spec().LoggingConfig().EnableJournalExport().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLoggingConfigEnableJournalExport) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Spec().LoggingConfig().EnableJournalExport().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLoggingConfigEnableJournalExport) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Spec().LoggingConfig().EnableJournalExport().WithValue(value),
	})
}

type filterCndBuilderStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatus) Eq(value *Device_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatus) Neq(value *Device_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatus) Gt(value *Device_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatus) Gte(value *Device_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatus) Lt(value *Device_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatus) Lte(value *Device_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatus) In(values []*Device_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) NotIn(values []*Device_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) compare(op gotenfilter.CompareOperator, value *Device_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().WithValue(value),
	})
}

func (b *filterCndBuilderStatus) Addresses() *filterCndBuilderStatusAddresses {
	return &filterCndBuilderStatusAddresses{builder: b.builder}
}

func (b *filterCndBuilderStatus) Conditions() *filterCndBuilderStatusConditions {
	return &filterCndBuilderStatusConditions{builder: b.builder}
}

func (b *filterCndBuilderStatus) DeviceInfo() *filterCndBuilderStatusDeviceInfo {
	return &filterCndBuilderStatusDeviceInfo{builder: b.builder}
}

func (b *filterCndBuilderStatus) AttestationStatus() *filterCndBuilderStatusAttestationStatus {
	return &filterCndBuilderStatusAttestationStatus{builder: b.builder}
}

type filterCndBuilderStatusAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAddresses) Eq(value []*Device_Status_Address) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAddresses) Neq(value []*Device_Status_Address) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAddresses) Gt(value []*Device_Status_Address) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAddresses) Gte(value []*Device_Status_Address) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAddresses) Lt(value []*Device_Status_Address) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAddresses) Lte(value []*Device_Status_Address) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAddresses) In(values [][]*Device_Status_Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAddresses) NotIn(values [][]*Device_Status_Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAddresses) Contains(value *Device_Status_Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().Addresses().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusAddresses) ContainsAnyOf(values []*Device_Status_Address) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusAddresses) ContainsAll(values []*Device_Status_Address) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().Addresses()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusAddresses) compare(op gotenfilter.CompareOperator, value []*Device_Status_Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().Addresses().WithValue(value),
	})
}

func (b *filterCndBuilderStatusAddresses) Address() *filterCndBuilderStatusAddressesAddress {
	return &filterCndBuilderStatusAddressesAddress{builder: b.builder}
}

func (b *filterCndBuilderStatusAddresses) Type() *filterCndBuilderStatusAddressesType {
	return &filterCndBuilderStatusAddressesType{builder: b.builder}
}

type filterCndBuilderStatusAddressesAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAddressesAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAddressesAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAddressesAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAddressesAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAddressesAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAddressesAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAddressesAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Addresses().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAddressesAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Addresses().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAddressesAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().Addresses().Address().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAddressesAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().Addresses().Address().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAddressesAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().Addresses().Address().WithValue(value),
	})
}

type filterCndBuilderStatusAddressesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAddressesType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAddressesType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAddressesType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAddressesType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAddressesType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAddressesType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAddressesType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Addresses().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAddressesType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Addresses().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAddressesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().Addresses().Type().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAddressesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().Addresses().Type().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAddressesType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().Addresses().Type().WithValue(value),
	})
}

type filterCndBuilderStatusConditions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusConditions) Eq(value []*Device_Status_Condition) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusConditions) Neq(value []*Device_Status_Condition) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusConditions) Gt(value []*Device_Status_Condition) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusConditions) Gte(value []*Device_Status_Condition) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusConditions) Lt(value []*Device_Status_Condition) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusConditions) Lte(value []*Device_Status_Condition) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusConditions) In(values [][]*Device_Status_Condition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditions) NotIn(values [][]*Device_Status_Condition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditions) Contains(value *Device_Status_Condition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().Conditions().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusConditions) ContainsAnyOf(values []*Device_Status_Condition) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().Conditions()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusConditions) ContainsAll(values []*Device_Status_Condition) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().Conditions()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusConditions) compare(op gotenfilter.CompareOperator, value []*Device_Status_Condition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().Conditions().WithValue(value),
	})
}

func (b *filterCndBuilderStatusConditions) Message() *filterCndBuilderStatusConditionsMessage {
	return &filterCndBuilderStatusConditionsMessage{builder: b.builder}
}

func (b *filterCndBuilderStatusConditions) Reason() *filterCndBuilderStatusConditionsReason {
	return &filterCndBuilderStatusConditionsReason{builder: b.builder}
}

func (b *filterCndBuilderStatusConditions) Status() *filterCndBuilderStatusConditionsStatus {
	return &filterCndBuilderStatusConditionsStatus{builder: b.builder}
}

func (b *filterCndBuilderStatusConditions) Type() *filterCndBuilderStatusConditionsType {
	return &filterCndBuilderStatusConditionsType{builder: b.builder}
}

func (b *filterCndBuilderStatusConditions) LastHeartBeatTime() *filterCndBuilderStatusConditionsLastHeartBeatTime {
	return &filterCndBuilderStatusConditionsLastHeartBeatTime{builder: b.builder}
}

func (b *filterCndBuilderStatusConditions) LastTransitionTime() *filterCndBuilderStatusConditionsLastTransitionTime {
	return &filterCndBuilderStatusConditionsLastTransitionTime{builder: b.builder}
}

type filterCndBuilderStatusConditionsMessage struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusConditionsMessage) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusConditionsMessage) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusConditionsMessage) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusConditionsMessage) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusConditionsMessage) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusConditionsMessage) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusConditionsMessage) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().Message().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsMessage) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().Message().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsMessage) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().Message().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsMessage) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().Message().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsMessage) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().Conditions().Message().WithValue(value),
	})
}

type filterCndBuilderStatusConditionsReason struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusConditionsReason) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusConditionsReason) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusConditionsReason) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusConditionsReason) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusConditionsReason) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusConditionsReason) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusConditionsReason) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().Reason().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsReason) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().Reason().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsReason) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().Reason().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsReason) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().Reason().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsReason) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().Conditions().Reason().WithValue(value),
	})
}

type filterCndBuilderStatusConditionsStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusConditionsStatus) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusConditionsStatus) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusConditionsStatus) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusConditionsStatus) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusConditionsStatus) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusConditionsStatus) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusConditionsStatus) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsStatus) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsStatus) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().Conditions().Status().WithValue(value),
	})
}

type filterCndBuilderStatusConditionsType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusConditionsType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusConditionsType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusConditionsType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusConditionsType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusConditionsType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusConditionsType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusConditionsType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().Type().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().Type().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().Conditions().Type().WithValue(value),
	})
}

type filterCndBuilderStatusConditionsLastHeartBeatTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusConditionsLastHeartBeatTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusConditionsLastHeartBeatTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusConditionsLastHeartBeatTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusConditionsLastHeartBeatTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusConditionsLastHeartBeatTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusConditionsLastHeartBeatTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusConditionsLastHeartBeatTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().LastHeartBeatTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsLastHeartBeatTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().LastHeartBeatTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsLastHeartBeatTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().LastHeartBeatTime().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsLastHeartBeatTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().LastHeartBeatTime().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsLastHeartBeatTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().Conditions().LastHeartBeatTime().WithValue(value),
	})
}

type filterCndBuilderStatusConditionsLastTransitionTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusConditionsLastTransitionTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusConditionsLastTransitionTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusConditionsLastTransitionTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusConditionsLastTransitionTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusConditionsLastTransitionTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusConditionsLastTransitionTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusConditionsLastTransitionTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().LastTransitionTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsLastTransitionTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().Conditions().LastTransitionTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConditionsLastTransitionTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().LastTransitionTime().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsLastTransitionTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().Conditions().LastTransitionTime().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConditionsLastTransitionTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().Conditions().LastTransitionTime().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfo) Eq(value *Device_Status_DeviceInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfo) Neq(value *Device_Status_DeviceInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfo) Gt(value *Device_Status_DeviceInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfo) Gte(value *Device_Status_DeviceInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfo) Lt(value *Device_Status_DeviceInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfo) Lte(value *Device_Status_DeviceInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfo) In(values []*Device_Status_DeviceInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfo) NotIn(values []*Device_Status_DeviceInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfo) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfo) Architecture() *filterCndBuilderStatusDeviceInfoArchitecture {
	return &filterCndBuilderStatusDeviceInfoArchitecture{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfo) OperatingSystem() *filterCndBuilderStatusDeviceInfoOperatingSystem {
	return &filterCndBuilderStatusDeviceInfoOperatingSystem{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfo) KernelVersion() *filterCndBuilderStatusDeviceInfoKernelVersion {
	return &filterCndBuilderStatusDeviceInfoKernelVersion{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfo) OsImage() *filterCndBuilderStatusDeviceInfoOsImage {
	return &filterCndBuilderStatusDeviceInfoOsImage{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfo) ContainerRuntimeVersion() *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion {
	return &filterCndBuilderStatusDeviceInfoContainerRuntimeVersion{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfo) OsVersion() *filterCndBuilderStatusDeviceInfoOsVersion {
	return &filterCndBuilderStatusDeviceInfoOsVersion{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfo) Driver() *filterCndBuilderStatusDeviceInfoDriver {
	return &filterCndBuilderStatusDeviceInfoDriver{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfo) HardwareInformation() *filterCndBuilderStatusDeviceInfoHardwareInformation {
	return &filterCndBuilderStatusDeviceInfoHardwareInformation{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoArchitecture struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoArchitecture) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoArchitecture) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoArchitecture) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoArchitecture) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoArchitecture) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoArchitecture) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoArchitecture) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().Architecture().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoArchitecture) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().Architecture().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoArchitecture) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().Architecture().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoArchitecture) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().Architecture().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoArchitecture) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().Architecture().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoOperatingSystem struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoOperatingSystem) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoOperatingSystem) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoOperatingSystem) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoOperatingSystem) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoOperatingSystem) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoOperatingSystem) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoOperatingSystem) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().OperatingSystem().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOperatingSystem) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().OperatingSystem().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOperatingSystem) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().OperatingSystem().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOperatingSystem) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().OperatingSystem().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOperatingSystem) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().OperatingSystem().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoKernelVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoKernelVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoKernelVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoKernelVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoKernelVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoKernelVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoKernelVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoKernelVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().KernelVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoKernelVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().KernelVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoKernelVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().KernelVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoKernelVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().KernelVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoKernelVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().KernelVersion().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoOsImage struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoOsImage) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsImage) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsImage) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsImage) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsImage) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsImage) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsImage) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().OsImage().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOsImage) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().OsImage().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOsImage) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().OsImage().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOsImage) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().OsImage().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOsImage) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().OsImage().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoContainerRuntimeVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().ContainerRuntimeVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().ContainerRuntimeVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().ContainerRuntimeVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().ContainerRuntimeVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoContainerRuntimeVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().ContainerRuntimeVersion().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoOsVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoOsVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoOsVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().OsVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOsVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().OsVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOsVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().OsVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOsVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().OsVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoOsVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().OsVersion().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoDriver struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoDriver) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoDriver) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoDriver) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoDriver) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoDriver) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoDriver) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoDriver) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().Driver().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoDriver) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().Driver().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoDriver) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().Driver().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoDriver) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().Driver().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoDriver) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().Driver().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Eq(value *Device_Status_DeviceInfo_HardwareInformation) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Neq(value *Device_Status_DeviceInfo_HardwareInformation) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Gt(value *Device_Status_DeviceInfo_HardwareInformation) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Gte(value *Device_Status_DeviceInfo_HardwareInformation) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Lt(value *Device_Status_DeviceInfo_HardwareInformation) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Lte(value *Device_Status_DeviceInfo_HardwareInformation) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) In(values []*Device_Status_DeviceInfo_HardwareInformation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) NotIn(values []*Device_Status_DeviceInfo_HardwareInformation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo_HardwareInformation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Os() *filterCndBuilderStatusDeviceInfoHardwareInformationOs {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationOs{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Bios() *filterCndBuilderStatusDeviceInfoHardwareInformationBios {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBios{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) System() *filterCndBuilderStatusDeviceInfoHardwareInformationSystem {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationSystem{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Cpu() *filterCndBuilderStatusDeviceInfoHardwareInformationCpu {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpu{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Block() *filterCndBuilderStatusDeviceInfoHardwareInformationBlock {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlock{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Network() *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationNetwork{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) Gpu() *filterCndBuilderStatusDeviceInfoHardwareInformationGpu {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationGpu{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformation) MemoryInfo() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationOs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) Eq(value *Device_Status_DeviceInfo_HardwareInformation_OS) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) Neq(value *Device_Status_DeviceInfo_HardwareInformation_OS) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) Gt(value *Device_Status_DeviceInfo_HardwareInformation_OS) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) Gte(value *Device_Status_DeviceInfo_HardwareInformation_OS) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) Lt(value *Device_Status_DeviceInfo_HardwareInformation_OS) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) Lte(value *Device_Status_DeviceInfo_HardwareInformation_OS) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) In(values []*Device_Status_DeviceInfo_HardwareInformation_OS) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) NotIn(values []*Device_Status_DeviceInfo_HardwareInformation_OS) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo_HardwareInformation_OS) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) OperatingSystem() *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) KernelVersion() *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) OsImage() *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOs) ContainerRuntimeVersion() *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().OperatingSystem().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().OperatingSystem().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().OperatingSystem().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().OperatingSystem().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOperatingSystem) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().OperatingSystem().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().KernelVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().KernelVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().KernelVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().KernelVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsKernelVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().KernelVersion().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().OsImage().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().OsImage().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().OsImage().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().OsImage().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsOsImage) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().OsImage().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().ContainerRuntimeVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().ContainerRuntimeVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().ContainerRuntimeVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().ContainerRuntimeVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationOsContainerRuntimeVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Os().ContainerRuntimeVersion().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBios struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) Eq(value *Device_Status_DeviceInfo_HardwareInformation_BIOS) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) Neq(value *Device_Status_DeviceInfo_HardwareInformation_BIOS) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) Gt(value *Device_Status_DeviceInfo_HardwareInformation_BIOS) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) Gte(value *Device_Status_DeviceInfo_HardwareInformation_BIOS) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) Lt(value *Device_Status_DeviceInfo_HardwareInformation_BIOS) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) Lte(value *Device_Status_DeviceInfo_HardwareInformation_BIOS) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) In(values []*Device_Status_DeviceInfo_HardwareInformation_BIOS) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) NotIn(values []*Device_Status_DeviceInfo_HardwareInformation_BIOS) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo_HardwareInformation_BIOS) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) Vendor() *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) BiosVersion() *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBios) ReleaseDate() *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosVendor) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().Vendor().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().BiosVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().BiosVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().BiosVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().BiosVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosBiosVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().BiosVersion().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().ReleaseDate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().ReleaseDate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().ReleaseDate().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().ReleaseDate().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBiosReleaseDate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Bios().ReleaseDate().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationSystem struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) Eq(value *Device_Status_DeviceInfo_HardwareInformation_System) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) Neq(value *Device_Status_DeviceInfo_HardwareInformation_System) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) Gt(value *Device_Status_DeviceInfo_HardwareInformation_System) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) Gte(value *Device_Status_DeviceInfo_HardwareInformation_System) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) Lt(value *Device_Status_DeviceInfo_HardwareInformation_System) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) Lte(value *Device_Status_DeviceInfo_HardwareInformation_System) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) In(values []*Device_Status_DeviceInfo_HardwareInformation_System) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) NotIn(values []*Device_Status_DeviceInfo_HardwareInformation_System) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo_HardwareInformation_System) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) Manufacturer() *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) ProductName() *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) Version() *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) SerialNumber() *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystem) Configuration() *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Manufacturer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Manufacturer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Manufacturer().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Manufacturer().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemManufacturer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Manufacturer().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().ProductName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().ProductName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().ProductName().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().ProductName().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemProductName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().ProductName().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Version().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Version().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Version().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().SerialNumber().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().SerialNumber().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().SerialNumber().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().SerialNumber().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemSerialNumber) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().SerialNumber().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) Eq(value *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) Neq(value *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) Gt(value *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) Gte(value *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) Lt(value *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) Lte(value *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) In(values []*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) NotIn(values []*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) Chassis() *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) Uuid() *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) SkuNumber() *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfiguration) Family() *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Chassis().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Chassis().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Chassis().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Chassis().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationChassis) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Chassis().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Uuid().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().SkuNumber().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().SkuNumber().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().SkuNumber().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().SkuNumber().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationSkuNumber) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().SkuNumber().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Family().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Family().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Family().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Family().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationSystemConfigurationFamily) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().System().Configuration().Family().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) Eq(value *Device_Status_DeviceInfo_HardwareInformation_CPU) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) Neq(value *Device_Status_DeviceInfo_HardwareInformation_CPU) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) Gt(value *Device_Status_DeviceInfo_HardwareInformation_CPU) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) Gte(value *Device_Status_DeviceInfo_HardwareInformation_CPU) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) Lt(value *Device_Status_DeviceInfo_HardwareInformation_CPU) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) Lte(value *Device_Status_DeviceInfo_HardwareInformation_CPU) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) In(values []*Device_Status_DeviceInfo_HardwareInformation_CPU) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) NotIn(values []*Device_Status_DeviceInfo_HardwareInformation_CPU) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo_HardwareInformation_CPU) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpu) Processors() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Eq(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Neq(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Gt(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Gte(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Lt(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Lte(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) In(values [][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) NotIn(values [][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Contains(value *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) ContainsAnyOf(values []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) ContainsAll(values []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) compare(op gotenfilter.CompareOperator, value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Vendor() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Model() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Capabilities() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) NumThreads() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) NumCores() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) NumEnabledCores() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Name() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) Serial() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) FrequencyMhz() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) MaxFrequencyMhz() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessors) CacheInfo() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsVendor) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Vendor().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Model().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Model().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Model().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Model().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsModel) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Model().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) Eq(value []*Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) Neq(value []*Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) Gt(value []*Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) Gte(value []*Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) Lt(value []*Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) Lte(value []*Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) In(values [][]*Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) NotIn(values [][]*Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) Contains(value *Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) ContainsAnyOf(values []*Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) ContainsAll(values []*Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) compare(op gotenfilter.CompareOperator, value []*Device_Status_DeviceInfo_HardwareInformation_Capability) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) Name() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilities) Description() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().Name().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().Description().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().Description().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCapabilitiesDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Capabilities().Description().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumThreads().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumThreads().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumThreads().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumThreads().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumThreads) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumThreads().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumCores().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumCores().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumCores().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumCores().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumCores) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumCores().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumEnabledCores().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumEnabledCores().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumEnabledCores().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumEnabledCores().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsNumEnabledCores) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().NumEnabledCores().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Name().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Serial().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Serial().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Serial().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Serial().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsSerial) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().Serial().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().FrequencyMhz().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().FrequencyMhz().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().FrequencyMhz().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().FrequencyMhz().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsFrequencyMhz) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().FrequencyMhz().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().MaxFrequencyMhz().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().MaxFrequencyMhz().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().MaxFrequencyMhz().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().MaxFrequencyMhz().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsMaxFrequencyMhz) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().MaxFrequencyMhz().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) Eq(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) Neq(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) Gt(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) Gte(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) Lt(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) Lte(value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) In(values [][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) NotIn(values [][]*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) Contains(value *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) ContainsAnyOf(values []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) ContainsAll(values []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) compare(op gotenfilter.CompareOperator, value []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) Type() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfo) SizeBytes() *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().Type().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().Type().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().Type().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().SizeBytes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().SizeBytes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().SizeBytes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().SizeBytes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationCpuProcessorsCacheInfoSizeBytes) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Cpu().Processors().CacheInfo().SizeBytes().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlock struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) Eq(value *Device_Status_DeviceInfo_HardwareInformation_Block) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) Neq(value *Device_Status_DeviceInfo_HardwareInformation_Block) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) Gt(value *Device_Status_DeviceInfo_HardwareInformation_Block) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) Gte(value *Device_Status_DeviceInfo_HardwareInformation_Block) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) Lt(value *Device_Status_DeviceInfo_HardwareInformation_Block) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) Lte(value *Device_Status_DeviceInfo_HardwareInformation_Block) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) In(values []*Device_Status_DeviceInfo_HardwareInformation_Block) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) NotIn(values []*Device_Status_DeviceInfo_HardwareInformation_Block) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo_HardwareInformation_Block) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlock) Disks() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Eq(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Neq(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Gt(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Gte(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Lt(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Lte(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) In(values [][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) NotIn(values [][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Contains(value *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) ContainsAnyOf(values []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) ContainsAll(values []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) compare(op gotenfilter.CompareOperator, value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Name() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) SizeBytes() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) DriveType() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Vendor() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Model() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) SerialNumber() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Wwn() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisks) Partitions() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Name().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().SizeBytes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().SizeBytes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().SizeBytes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().SizeBytes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSizeBytes) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().SizeBytes().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().DriveType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().DriveType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().DriveType().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().DriveType().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksDriveType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().DriveType().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksVendor) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Vendor().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Model().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Model().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Model().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Model().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksModel) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Model().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().SerialNumber().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().SerialNumber().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().SerialNumber().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().SerialNumber().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksSerialNumber) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().SerialNumber().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Wwn().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Wwn().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Wwn().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Wwn().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksWwn) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Wwn().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) Eq(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) Neq(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) Gt(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) Gte(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) Lt(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) Lte(value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) In(values [][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) NotIn(values [][]*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) Contains(value *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) ContainsAnyOf(values []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) ContainsAll(values []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) compare(op gotenfilter.CompareOperator, value []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) Name() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) SizeBytes() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) MountPoint() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitions) Type() *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().Name().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().SizeBytes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().SizeBytes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().SizeBytes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().SizeBytes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsSizeBytes) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().SizeBytes().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().MountPoint().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().MountPoint().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().MountPoint().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().MountPoint().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsMountPoint) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().MountPoint().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().Type().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().Type().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationBlockDisksPartitionsType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Block().Disks().Partitions().Type().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationNetwork struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) Eq(value *Device_Status_DeviceInfo_HardwareInformation_Network) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) Neq(value *Device_Status_DeviceInfo_HardwareInformation_Network) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) Gt(value *Device_Status_DeviceInfo_HardwareInformation_Network) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) Gte(value *Device_Status_DeviceInfo_HardwareInformation_Network) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) Lt(value *Device_Status_DeviceInfo_HardwareInformation_Network) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) Lte(value *Device_Status_DeviceInfo_HardwareInformation_Network) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) In(values []*Device_Status_DeviceInfo_HardwareInformation_Network) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) NotIn(values []*Device_Status_DeviceInfo_HardwareInformation_Network) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo_HardwareInformation_Network) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetwork) Nics() *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Eq(value []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Neq(value []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Gt(value []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Gte(value []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Lt(value []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Lte(value []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) In(values [][]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) NotIn(values [][]*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Contains(value *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) ContainsAnyOf(values []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) ContainsAll(values []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) compare(op gotenfilter.CompareOperator, value []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Name() *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) MacAddress() *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Virtual() *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Description() *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) ProductName() *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Vendor() *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Subvendor() *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNics) Setting() *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Name().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().MacAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().MacAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().MacAddress().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().MacAddress().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsMacAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().MacAddress().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Virtual().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Virtual().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Virtual().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Virtual().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVirtual) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Virtual().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Description().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Description().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Description().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().ProductName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().ProductName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().ProductName().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().ProductName().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsProductName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().ProductName().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsVendor) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Vendor().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Subvendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Subvendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Subvendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Subvendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSubvendor) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Subvendor().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Setting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Setting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Setting().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Setting().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Setting().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) WithKey(key string) *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting {
	return &mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting{builder: b.builder, key: key}
}

type mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Setting().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Setting().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Setting().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Setting().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderStatusDeviceInfoHardwareInformationNetworkNicsSetting) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Network().Nics().Setting().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationGpu struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) Eq(value *Device_Status_DeviceInfo_HardwareInformation_GPU) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) Neq(value *Device_Status_DeviceInfo_HardwareInformation_GPU) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) Gt(value *Device_Status_DeviceInfo_HardwareInformation_GPU) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) Gte(value *Device_Status_DeviceInfo_HardwareInformation_GPU) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) Lt(value *Device_Status_DeviceInfo_HardwareInformation_GPU) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) Lte(value *Device_Status_DeviceInfo_HardwareInformation_GPU) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) In(values []*Device_Status_DeviceInfo_HardwareInformation_GPU) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) NotIn(values []*Device_Status_DeviceInfo_HardwareInformation_GPU) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo_HardwareInformation_GPU) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpu) GraphicCards() *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) Eq(value []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) Neq(value []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) Gt(value []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) Gte(value []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) Lt(value []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) Lte(value []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) In(values [][]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) NotIn(values [][]*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) Contains(value *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) ContainsAnyOf(values []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) ContainsAll(values []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) compare(op gotenfilter.CompareOperator, value []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) Index() *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCards) Device() *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Index().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Index().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Index().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Index().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsIndex) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Index().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) Eq(value *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) Neq(value *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) Gt(value *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) Gte(value *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) Lt(value *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) Lte(value *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) In(values []*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) NotIn(values []*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) Address() *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) Vendor() *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) Product() *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) Name() *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDevice) Subvendor() *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Address().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Address().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Address().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceVendor) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Vendor().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Product().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Product().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Product().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Product().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceProduct) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Product().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Name().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Subvendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Subvendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Subvendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Subvendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationGpuGraphicCardsDeviceSubvendor) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().Gpu().GraphicCards().Device().Subvendor().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) Eq(value *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) Neq(value *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) Gt(value *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) Gte(value *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) Lt(value *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) Lte(value *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) In(values []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) NotIn(values []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) compare(op gotenfilter.CompareOperator, value *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfo) Memory() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) Eq(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) Neq(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) Gt(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) Gte(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) Lt(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) Lte(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) In(values [][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) NotIn(values [][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) Contains(value *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) ContainsAnyOf(values []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) ContainsAll(values []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) compare(op gotenfilter.CompareOperator, value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) Description() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) SizeBytes() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemory) MemoryBanks() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().Description().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().Description().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().Description().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().SizeBytes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().SizeBytes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().SizeBytes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().SizeBytes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemorySizeBytes) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().SizeBytes().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Eq(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Neq(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Gt(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Gte(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Lt(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Lte(value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) In(values [][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) NotIn(values [][]*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Contains(value *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) ContainsAnyOf(values []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) ContainsAll(values []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) compare(op gotenfilter.CompareOperator, value []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Description() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Product() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Vendor() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Serial() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) Slot() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) SizeBytes() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) FrequencyHz() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz{builder: b.builder}
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanks) WidthBits() *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits {
	return &filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits{builder: b.builder}
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Description().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Description().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Description().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Product().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Product().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Product().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Product().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksProduct) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Product().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Vendor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Vendor().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksVendor) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Vendor().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Serial().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Serial().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Serial().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Serial().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSerial) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Serial().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Slot().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Slot().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Slot().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Slot().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSlot) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().Slot().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().SizeBytes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().SizeBytes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().SizeBytes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().SizeBytes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksSizeBytes) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().SizeBytes().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().FrequencyHz().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().FrequencyHz().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().FrequencyHz().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().FrequencyHz().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksFrequencyHz) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().FrequencyHz().WithValue(value),
	})
}

type filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().WidthBits().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().WidthBits().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().WidthBits().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().WidthBits().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDeviceInfoHardwareInformationMemoryInfoMemoryMemoryBanksWidthBits) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().DeviceInfo().HardwareInformation().MemoryInfo().Memory().MemoryBanks().WidthBits().WithValue(value),
	})
}

type filterCndBuilderStatusAttestationStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAttestationStatus) Eq(value []*iam_iam_common.PCR) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAttestationStatus) Neq(value []*iam_iam_common.PCR) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAttestationStatus) Gt(value []*iam_iam_common.PCR) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAttestationStatus) Gte(value []*iam_iam_common.PCR) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAttestationStatus) Lt(value []*iam_iam_common.PCR) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAttestationStatus) Lte(value []*iam_iam_common.PCR) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAttestationStatus) In(values [][]*iam_iam_common.PCR) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().AttestationStatus().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAttestationStatus) NotIn(values [][]*iam_iam_common.PCR) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().AttestationStatus().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAttestationStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAttestationStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAttestationStatus) Contains(value *iam_iam_common.PCR) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().FieldPath(),
		Value:     NewDeviceFieldPathBuilder().Status().AttestationStatus().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusAttestationStatus) ContainsAnyOf(values []*iam_iam_common.PCR) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().AttestationStatus()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusAttestationStatus) ContainsAll(values []*iam_iam_common.PCR) *FilterBuilder {
	pathSelector := NewDeviceFieldPathBuilder().Status().AttestationStatus()
	itemValues := make([]Device_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusAttestationStatus) compare(op gotenfilter.CompareOperator, value []*iam_iam_common.PCR) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().AttestationStatus().WithValue(value),
	})
}

func (b *filterCndBuilderStatusAttestationStatus) Index() *filterCndBuilderStatusAttestationStatusIndex {
	return &filterCndBuilderStatusAttestationStatusIndex{builder: b.builder}
}

func (b *filterCndBuilderStatusAttestationStatus) DigestHex() *filterCndBuilderStatusAttestationStatusDigestHex {
	return &filterCndBuilderStatusAttestationStatusDigestHex{builder: b.builder}
}

func (b *filterCndBuilderStatusAttestationStatus) DigestAlg() *filterCndBuilderStatusAttestationStatusDigestAlg {
	return &filterCndBuilderStatusAttestationStatusDigestAlg{builder: b.builder}
}

func (b *filterCndBuilderStatusAttestationStatus) Comment() *filterCndBuilderStatusAttestationStatusComment {
	return &filterCndBuilderStatusAttestationStatusComment{builder: b.builder}
}

type filterCndBuilderStatusAttestationStatusIndex struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAttestationStatusIndex) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAttestationStatusIndex) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAttestationStatusIndex) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAttestationStatusIndex) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAttestationStatusIndex) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAttestationStatusIndex) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAttestationStatusIndex) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().AttestationStatus().Index().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAttestationStatusIndex) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().AttestationStatus().Index().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAttestationStatusIndex) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().Index().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAttestationStatusIndex) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().Index().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAttestationStatusIndex) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().AttestationStatus().Index().WithValue(value),
	})
}

type filterCndBuilderStatusAttestationStatusDigestHex struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAttestationStatusDigestHex) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestHex) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestHex) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestHex) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestHex) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestHex) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestHex) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().AttestationStatus().DigestHex().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAttestationStatusDigestHex) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().AttestationStatus().DigestHex().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAttestationStatusDigestHex) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().DigestHex().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAttestationStatusDigestHex) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().DigestHex().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAttestationStatusDigestHex) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().AttestationStatus().DigestHex().WithValue(value),
	})
}

type filterCndBuilderStatusAttestationStatusDigestAlg struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAttestationStatusDigestAlg) Eq(value iam_iam_common.DigestAlg) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestAlg) Neq(value iam_iam_common.DigestAlg) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestAlg) Gt(value iam_iam_common.DigestAlg) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestAlg) Gte(value iam_iam_common.DigestAlg) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestAlg) Lt(value iam_iam_common.DigestAlg) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestAlg) Lte(value iam_iam_common.DigestAlg) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAttestationStatusDigestAlg) In(values []iam_iam_common.DigestAlg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().AttestationStatus().DigestAlg().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAttestationStatusDigestAlg) NotIn(values []iam_iam_common.DigestAlg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().AttestationStatus().DigestAlg().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAttestationStatusDigestAlg) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().DigestAlg().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAttestationStatusDigestAlg) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().DigestAlg().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAttestationStatusDigestAlg) compare(op gotenfilter.CompareOperator, value iam_iam_common.DigestAlg) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().AttestationStatus().DigestAlg().WithValue(value),
	})
}

type filterCndBuilderStatusAttestationStatusComment struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAttestationStatusComment) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAttestationStatusComment) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAttestationStatusComment) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAttestationStatusComment) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAttestationStatusComment) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAttestationStatusComment) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAttestationStatusComment) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().AttestationStatus().Comment().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAttestationStatusComment) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().Status().AttestationStatus().Comment().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAttestationStatusComment) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().Comment().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAttestationStatusComment) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().Status().AttestationStatus().Comment().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAttestationStatusComment) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().Status().AttestationStatus().Comment().WithValue(value),
	})
}

type filterCndBuilderPublicListingSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderPublicListingSpec) Eq(value *Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderPublicListingSpec) Neq(value *Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderPublicListingSpec) Gt(value *Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderPublicListingSpec) Gte(value *Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderPublicListingSpec) Lt(value *Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderPublicListingSpec) Lte(value *Device_PublicListingSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderPublicListingSpec) In(values []*Device_PublicListingSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().PublicListingSpec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPublicListingSpec) NotIn(values []*Device_PublicListingSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().PublicListingSpec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPublicListingSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().PublicListingSpec().FieldPath(),
	})
}

func (b *filterCndBuilderPublicListingSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().PublicListingSpec().FieldPath(),
	})
}

func (b *filterCndBuilderPublicListingSpec) compare(op gotenfilter.CompareOperator, value *Device_PublicListingSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().PublicListingSpec().WithValue(value),
	})
}

func (b *filterCndBuilderPublicListingSpec) Enabled() *filterCndBuilderPublicListingSpecEnabled {
	return &filterCndBuilderPublicListingSpecEnabled{builder: b.builder}
}

func (b *filterCndBuilderPublicListingSpec) FieldMask() *filterCndBuilderPublicListingSpecFieldMask {
	return &filterCndBuilderPublicListingSpecFieldMask{builder: b.builder}
}

type filterCndBuilderPublicListingSpecEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderPublicListingSpecEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderPublicListingSpecEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderPublicListingSpecEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderPublicListingSpecEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderPublicListingSpecEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderPublicListingSpecEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderPublicListingSpecEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().PublicListingSpec().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPublicListingSpecEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().PublicListingSpec().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPublicListingSpecEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().PublicListingSpec().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderPublicListingSpecEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().PublicListingSpec().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderPublicListingSpecEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().PublicListingSpec().Enabled().WithValue(value),
	})
}

type filterCndBuilderPublicListingSpecFieldMask struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderPublicListingSpecFieldMask) Eq(value *Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderPublicListingSpecFieldMask) Neq(value *Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderPublicListingSpecFieldMask) Gt(value *Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderPublicListingSpecFieldMask) Gte(value *Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderPublicListingSpecFieldMask) Lt(value *Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderPublicListingSpecFieldMask) Lte(value *Device_FieldMask) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderPublicListingSpecFieldMask) In(values []*Device_FieldMask) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().PublicListingSpec().FieldMask().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPublicListingSpecFieldMask) NotIn(values []*Device_FieldMask) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().PublicListingSpec().FieldMask().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPublicListingSpecFieldMask) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().PublicListingSpec().FieldMask().FieldPath(),
	})
}

func (b *filterCndBuilderPublicListingSpecFieldMask) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().PublicListingSpec().FieldMask().FieldPath(),
	})
}

func (b *filterCndBuilderPublicListingSpecFieldMask) compare(op gotenfilter.CompareOperator, value *Device_FieldMask) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().PublicListingSpec().FieldMask().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Device_FieldPathArrayOfValues: NewDeviceFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDeviceFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDeviceFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:              op,
		Device_FieldPathValue: NewDeviceFieldPathBuilder().DisplayName().WithValue(value),
	})
}
