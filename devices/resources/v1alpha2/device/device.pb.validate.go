// Code generated by protoc-gen-goten-validate
// File: edgelq/devices/proto/v1alpha2/device.proto
// DO NOT EDIT!!!

package device

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.PCR{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = &latlng.LatLng{}
	_ = &meta.Meta{}
)

func (obj *Device) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Device", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Spec).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Device", "spec", obj.Spec, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Status).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Device", "status", obj.Status, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.PublicListingSpec).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Device", "publicListingSpec", obj.PublicListingSpec, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.NetplanConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Spec", "netplanConfig", obj.NetplanConfig, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.SshConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Spec", "sshConfig", obj.SshConfig, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AttestationConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Spec", "attestationConfig", obj.AttestationConfig, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.LoggingConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Spec", "loggingConfig", obj.LoggingConfig, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.ProxyConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Spec", "proxyConfig", obj.ProxyConfig, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Location).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Spec", "location", obj.Location, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Addresses {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Status", "addresses", obj.Addresses[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.Conditions {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Status", "conditions", obj.Conditions[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.NetworkConfigState).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Status", "networkConfigState", obj.NetworkConfigState, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.ProxyConfigStatus).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Status", "proxyConfigStatus", obj.ProxyConfigStatus, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.DeviceInfo).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Status", "deviceInfo", obj.DeviceInfo, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.AttestationStatus {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Status", "attestationStatus", obj.AttestationStatus[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.NormalizedAddress).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Status", "normalizedAddress", obj.NormalizedAddress, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_PublicListingSpec) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetplanConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Network).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NetplanConfig", "network", obj.Network, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_SSHConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.SshAuthorized {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("SSHConfig", "sshAuthorized", obj.SshAuthorized[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_AttestationConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_LoggingConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_ProxyConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_Location) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_CommonOpts) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_EthOpts) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Match).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("EthOpts", "match", obj.Match, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Dhcp4Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("EthOpts", "dhcp4Overrides", obj.Dhcp4Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Dhcp6Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("EthOpts", "dhcp6Overrides", obj.Dhcp6Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Nameservers).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("EthOpts", "nameservers", obj.Nameservers, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.Routes {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("EthOpts", "routes", obj.Routes[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.RoutingPolicy).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("EthOpts", "routingPolicy", obj.RoutingPolicy, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Auth).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("EthOpts", "auth", obj.Auth, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_WifiOpts) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Match).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("WifiOpts", "match", obj.Match, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Dhcp4Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("WifiOpts", "dhcp4Overrides", obj.Dhcp4Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Dhcp6Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("WifiOpts", "dhcp6Overrides", obj.Dhcp6Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Nameservers).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("WifiOpts", "nameservers", obj.Nameservers, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.Routes {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("WifiOpts", "routes", obj.Routes[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.RoutingPolicy).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("WifiOpts", "routingPolicy", obj.RoutingPolicy, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Auth).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("WifiOpts", "auth", obj.Auth, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_BridgesOpts) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Parameters).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BridgesOpts", "parameters", obj.Parameters, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Dhcp4Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BridgesOpts", "dhcp4Overrides", obj.Dhcp4Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Dhcp6Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BridgesOpts", "dhcp6Overrides", obj.Dhcp6Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Nameservers).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BridgesOpts", "nameservers", obj.Nameservers, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.Routes {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("BridgesOpts", "routes", obj.Routes[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.RoutingPolicy).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BridgesOpts", "routingPolicy", obj.RoutingPolicy, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Auth).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BridgesOpts", "auth", obj.Auth, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_BondsOpts) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Parameters).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BondsOpts", "parameters", obj.Parameters, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Dhcp4Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BondsOpts", "dhcp4Overrides", obj.Dhcp4Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Dhcp6Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BondsOpts", "dhcp6Overrides", obj.Dhcp6Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Nameservers).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BondsOpts", "nameservers", obj.Nameservers, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.Routes {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("BondsOpts", "routes", obj.Routes[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.RoutingPolicy).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BondsOpts", "routingPolicy", obj.RoutingPolicy, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Auth).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("BondsOpts", "auth", obj.Auth, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_TunnelsOpts) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Dhcp4Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("TunnelsOpts", "dhcp4Overrides", obj.Dhcp4Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Dhcp6Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("TunnelsOpts", "dhcp6Overrides", obj.Dhcp6Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Nameservers).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("TunnelsOpts", "nameservers", obj.Nameservers, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.Routes {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("TunnelsOpts", "routes", obj.Routes[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.RoutingPolicy).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("TunnelsOpts", "routingPolicy", obj.RoutingPolicy, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Auth).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("TunnelsOpts", "auth", obj.Auth, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_VlansOpts) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Dhcp4Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("VlansOpts", "dhcp4Overrides", obj.Dhcp4Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Dhcp6Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("VlansOpts", "dhcp6Overrides", obj.Dhcp6Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Nameservers).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("VlansOpts", "nameservers", obj.Nameservers, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.Routes {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("VlansOpts", "routes", obj.Routes[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.RoutingPolicy).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("VlansOpts", "routingPolicy", obj.RoutingPolicy, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Auth).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("VlansOpts", "auth", obj.Auth, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_ModemOpts) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Dhcp4Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ModemOpts", "dhcp4Overrides", obj.Dhcp4Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Dhcp6Overrides).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ModemOpts", "dhcp6Overrides", obj.Dhcp6Overrides, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Nameservers).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ModemOpts", "nameservers", obj.Nameservers, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.Routes {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ModemOpts", "routes", obj.Routes[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.RoutingPolicy).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ModemOpts", "routingPolicy", obj.RoutingPolicy, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Auth).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ModemOpts", "auth", obj.Auth, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_CommonOpts_Routes) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_CommonOpts_Auth) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_EthOpts_Match) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_WifiOpts_Match) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Auth).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("AccessPoint", "auth", obj.Auth, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_NetworkingConfig_TunnelsOpts_Key) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Spec_SSHConfig_AuthKey) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_Address) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_Condition) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_NetworkConfigState) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.DefaultConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NetworkConfigState", "defaultConfig", obj.DefaultConfig, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.ActiveConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NetworkConfigState", "activeConfig", obj.ActiveConfig, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.DesiredConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NetworkConfigState", "desiredConfig", obj.DesiredConfig, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_ProxyConfigStatus) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.DefaultConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ProxyConfigStatus", "defaultConfig", obj.DefaultConfig, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.ActiveConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ProxyConfigStatus", "activeConfig", obj.ActiveConfig, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.ApiConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ProxyConfigStatus", "apiConfig", obj.ApiConfig, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.HardwareInformation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("DeviceInfo", "hardwareInformation", obj.HardwareInformation, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.ControlPlaneInterfaceInfo).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("DeviceInfo", "controlPlaneInterfaceInfo", obj.ControlPlaneInterfaceInfo, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_NormalizedAddress) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Coordinates).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NormalizedAddress", "coordinates", obj.Coordinates, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Os).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HardwareInformation", "os", obj.Os, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Bios).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HardwareInformation", "bios", obj.Bios, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.System).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HardwareInformation", "system", obj.System, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Cpu).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HardwareInformation", "cpu", obj.Cpu, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Block).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HardwareInformation", "block", obj.Block, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Network).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HardwareInformation", "network", obj.Network, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Gpu).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HardwareInformation", "gpu", obj.Gpu, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.MemoryInfo).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HardwareInformation", "memoryInfo", obj.MemoryInfo, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.HailoInfo).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HardwareInformation", "hailoInfo", obj.HailoInfo, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.NvidiaInfo).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HardwareInformation", "nvidiaInfo", obj.NvidiaInfo, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.ModemStatus {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("HardwareInformation", "modemStatus", obj.ModemStatus[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_NetworkInterface) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.AsInfo).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NetworkInterface", "asInfo", obj.AsInfo, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Carrier).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("NetworkInterface", "carrier", obj.Carrier, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_Capability) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_OS) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_BIOS) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_System) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Configuration).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("System", "configuration", obj.Configuration, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_CPU) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Processors {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CPU", "processors", obj.Processors[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_Block) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Disks {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Block", "disks", obj.Disks[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_Network) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Nics {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Network", "nics", obj.Nics[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_GPU) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.GraphicCards {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("GPU", "graphicCards", obj.GraphicCards[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Memory {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("MemoryInfo", "memory", obj.Memory[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Modules {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("HailoInfo", "modules", obj.Modules[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Gpus {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("NvidiaInfo", "gpus", obj.Gpus[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Modem).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ModemStatus", "modem", obj.Modem, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Capabilities {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Processor", "capabilities", obj.Capabilities[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.CacheInfo {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Processor", "cacheInfo", obj.CacheInfo[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Partitions {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Disk", "partitions", obj.Partitions[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Device).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("GraphicCard", "device", obj.Device, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.MemoryBanks {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Memory", "memoryBanks", obj.MemoryBanks[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.RegistrationSettings).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("FiveGNr", "registrationSettings", obj.RegistrationSettings, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Settings).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("InitialBearer", "settings", obj.Settings, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.InitialBearer).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Eps", "initialBearer", obj.InitialBearer, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.FivegNr).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ThreeGpp", "fivegNr", obj.FivegNr, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Eps).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ThreeGpp", "eps", obj.Eps, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.SignalQuality).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Generic", "signalQuality", obj.SignalQuality, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.FiveG).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Signal", "fiveG", obj.FiveG, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Cdma1X).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Signal", "cdma1X", obj.Cdma1X, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Evdo).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Signal", "evdo", obj.Evdo, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Gsm).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Signal", "gsm", obj.Gsm, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.LteSignal).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Signal", "lteSignal", obj.LteSignal, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Refresh).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Signal", "refresh", obj.Refresh, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Threshold).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Signal", "threshold", obj.Threshold, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Umts).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Signal", "umts", obj.Umts, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.ThreeGPp).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Modem", "threeGPp", obj.ThreeGPp, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Cdma).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Modem", "cdma", obj.Cdma, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Generic).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Modem", "generic", obj.Generic, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Signal).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Modem", "signal", obj.Signal, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_NetworkInterface_ASInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Device_Status_DeviceInfo_NetworkInterface_Carrier) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
