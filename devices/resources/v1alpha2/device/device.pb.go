// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1alpha2/device.proto
// DO NOT EDIT!!!

package device

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.PCR{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = &latlng.LatLng{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MERGE or REPLACE the api netplan_config with the baked in config in the
// device
type Device_Spec_NetworkConfigMode int32

const (
	Device_Spec_MERGE   Device_Spec_NetworkConfigMode = 0
	Device_Spec_REPLACE Device_Spec_NetworkConfigMode = 1
)

var (
	Device_Spec_NetworkConfigMode_name = map[int32]string{
		0: "MERGE",
		1: "REPLACE",
	}

	Device_Spec_NetworkConfigMode_value = map[string]int32{
		"MERGE":   0,
		"REPLACE": 1,
	}
)

func (x Device_Spec_NetworkConfigMode) Enum() *Device_Spec_NetworkConfigMode {
	p := new(Device_Spec_NetworkConfigMode)
	*p = x
	return p
}

func (x Device_Spec_NetworkConfigMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Device_Spec_NetworkConfigMode) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1alpha2_device_proto_enumTypes[0].Descriptor()
}

func (Device_Spec_NetworkConfigMode) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1alpha2_device_proto_enumTypes[0]
}

func (x Device_Spec_NetworkConfigMode) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Device_Spec_NetworkConfigMode.ProtoReflect.Descriptor instead.
func (Device_Spec_NetworkConfigMode) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Device_Status_NetworkConfigState_NetworkConfigSource int32

const (
	Device_Status_NetworkConfigState_UNKNOWN                                Device_Status_NetworkConfigState_NetworkConfigSource = 0
	Device_Status_NetworkConfigState_DEFAULT_CONFIG                         Device_Status_NetworkConfigState_NetworkConfigSource = 1
	Device_Status_NetworkConfigState_API_CONFIG                             Device_Status_NetworkConfigState_NetworkConfigSource = 2
	Device_Status_NetworkConfigState_MERGED_DEFAULT_AND_API_CONFIG          Device_Status_NetworkConfigState_NetworkConfigSource = 3
	Device_Status_NetworkConfigState_PREVIOUS_MERGED_DEFAULT_AND_API_CONFIG Device_Status_NetworkConfigState_NetworkConfigSource = 4
	Device_Status_NetworkConfigState_PREVIOUS_API_CONFIG                    Device_Status_NetworkConfigState_NetworkConfigSource = 5
)

var (
	Device_Status_NetworkConfigState_NetworkConfigSource_name = map[int32]string{
		0: "UNKNOWN",
		1: "DEFAULT_CONFIG",
		2: "API_CONFIG",
		3: "MERGED_DEFAULT_AND_API_CONFIG",
		4: "PREVIOUS_MERGED_DEFAULT_AND_API_CONFIG",
		5: "PREVIOUS_API_CONFIG",
	}

	Device_Status_NetworkConfigState_NetworkConfigSource_value = map[string]int32{
		"UNKNOWN":                                0,
		"DEFAULT_CONFIG":                         1,
		"API_CONFIG":                             2,
		"MERGED_DEFAULT_AND_API_CONFIG":          3,
		"PREVIOUS_MERGED_DEFAULT_AND_API_CONFIG": 4,
		"PREVIOUS_API_CONFIG":                    5,
	}
)

func (x Device_Status_NetworkConfigState_NetworkConfigSource) Enum() *Device_Status_NetworkConfigState_NetworkConfigSource {
	p := new(Device_Status_NetworkConfigState_NetworkConfigSource)
	*p = x
	return p
}

func (x Device_Status_NetworkConfigState_NetworkConfigSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Device_Status_NetworkConfigState_NetworkConfigSource) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1alpha2_device_proto_enumTypes[1].Descriptor()
}

func (Device_Status_NetworkConfigState_NetworkConfigSource) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1alpha2_device_proto_enumTypes[1]
}

func (x Device_Status_NetworkConfigState_NetworkConfigSource) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Device_Status_NetworkConfigState_NetworkConfigSource.ProtoReflect.Descriptor instead.
func (Device_Status_NetworkConfigState_NetworkConfigSource) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

type Device_Status_ProxyConfigStatus_ProxyConfigSource int32

const (
	Device_Status_ProxyConfigStatus_NO_CONFIG      Device_Status_ProxyConfigStatus_ProxyConfigSource = 0
	Device_Status_ProxyConfigStatus_DEFAULT_CONFIG Device_Status_ProxyConfigStatus_ProxyConfigSource = 1
	Device_Status_ProxyConfigStatus_API_CONFIG     Device_Status_ProxyConfigStatus_ProxyConfigSource = 2
)

var (
	Device_Status_ProxyConfigStatus_ProxyConfigSource_name = map[int32]string{
		0: "NO_CONFIG",
		1: "DEFAULT_CONFIG",
		2: "API_CONFIG",
	}

	Device_Status_ProxyConfigStatus_ProxyConfigSource_value = map[string]int32{
		"NO_CONFIG":      0,
		"DEFAULT_CONFIG": 1,
		"API_CONFIG":     2,
	}
)

func (x Device_Status_ProxyConfigStatus_ProxyConfigSource) Enum() *Device_Status_ProxyConfigStatus_ProxyConfigSource {
	p := new(Device_Status_ProxyConfigStatus_ProxyConfigSource)
	*p = x
	return p
}

func (x Device_Status_ProxyConfigStatus_ProxyConfigSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Device_Status_ProxyConfigStatus_ProxyConfigSource) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1alpha2_device_proto_enumTypes[2].Descriptor()
}

func (Device_Status_ProxyConfigStatus_ProxyConfigSource) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1alpha2_device_proto_enumTypes[2]
}

func (x Device_Status_ProxyConfigStatus_ProxyConfigSource) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Device_Status_ProxyConfigStatus_ProxyConfigSource.ProtoReflect.Descriptor instead.
func (Device_Status_ProxyConfigStatus_ProxyConfigSource) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 3, 0}
}

// Device Resource
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Device
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Metadata of Device
	Metadata *ntt_meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// Spec holds the expected state of the Device, meaning configurations.
	Spec *Device_Spec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	// Status of the Device reported from the actual device.
	Status            *Device_Status            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	PublicListingSpec *Device_PublicListingSpec `protobuf:"bytes,5,opt,name=public_listing_spec,json=publicListingSpec,proto3" json:"public_listing_spec,omitempty" firestore:"publicListingSpec"`
	// Display name for the device
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
}

func (m *Device) Reset() {
	*m = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device) ProtoMessage() {}

func (m *Device) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device) GotenMessage() {}

// Deprecated, Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0}
}

func (m *Device) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Device) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Device) GetSpec() *Device_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Device) GetStatus() *Device_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Device) GetPublicListingSpec() *Device_PublicListingSpec {
	if m != nil {
		return m.PublicListingSpec
	}
	return nil
}

func (m *Device) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Device) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device"))
	}
	m.Name = fv
}

func (m *Device) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Device"))
	}
	m.Metadata = fv
}

func (m *Device) SetSpec(fv *Device_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "Device"))
	}
	m.Spec = fv
}

func (m *Device) SetStatus(fv *Device_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Device"))
	}
	m.Status = fv
}

func (m *Device) SetPublicListingSpec(fv *Device_PublicListingSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PublicListingSpec", "Device"))
	}
	m.PublicListingSpec = fv
}

func (m *Device) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Device"))
	}
	m.DisplayName = fv
}

type Device_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The associated service account to the Device.
	// The agents in the device uses a key from this service account
	// when they issue any requests to our endpoints for authoroization and
	// authentication. `ProvisionServiceAccountToDevice` creates a new service
	// account and a key for the Device and asign the account to this fileld. If
	// you change the value of this field, the existing device would lose the
	// access to the resources in our services, that means you can revoke the
	// permissions from the device. You can manually set an empty value to do
	// so, or call `RemoveServiceAccountFromDevice`.
	ServiceAccount *iam_service_account.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty" firestore:"serviceAccount"`
	// The expected OS version in string (e.g. 1.0.2).
	// The device will automatically download the OS image and upgrade itself
	// with it. You can stack the OS upgrade progress in the Condition named
	// `OSReady` in Status.Conditions.
	OsVersion            string                        `protobuf:"bytes,2,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty" firestore:"osVersion"`
	NetplanConfig        *Device_Spec_NetplanConfig    `protobuf:"bytes,11,opt,name=netplan_config,json=netplanConfig,proto3" json:"netplan_config,omitempty" firestore:"netplanConfig"`
	NetplanApiConfigMode Device_Spec_NetworkConfigMode `protobuf:"varint,12,opt,name=netplan_api_config_mode,json=netplanApiConfigMode,proto3,enum=ntt.devices.v1alpha2.Device_Spec_NetworkConfigMode" json:"netplan_api_config_mode,omitempty" firestore:"netplanApiConfigMode"`
	// The URL is dynamically constructed once the device is created or updated.
	// The URL will be based on the device hardware information
	// URL format: base_url/dedicated_path/iso_version/architecture/os_type
	OsImageUrl        string                         `protobuf:"bytes,5,opt,name=os_image_url,json=osImageUrl,proto3" json:"os_image_url,omitempty" firestore:"osImageUrl"`
	SshConfig         *Device_Spec_SSHConfig         `protobuf:"bytes,6,opt,name=ssh_config,json=sshConfig,proto3" json:"ssh_config,omitempty" firestore:"sshConfig"`
	AttestationConfig *Device_Spec_AttestationConfig `protobuf:"bytes,7,opt,name=attestation_config,json=attestationConfig,proto3" json:"attestation_config,omitempty" firestore:"attestationConfig"`
	// Disables the daemon on the device for device auto discovery on the
	// network. When it's enabled, avahi-daemon is launched on the device which
	// listens at UDP 5353. This daemon is useful to locate the device that
	// acquires an IP address with DHCP.
	DisableDeviceDiscovery bool                       `protobuf:"varint,8,opt,name=disable_device_discovery,json=disableDeviceDiscovery,proto3" json:"disable_device_discovery,omitempty" firestore:"disableDeviceDiscovery"`
	LoggingConfig          *Device_Spec_LoggingConfig `protobuf:"bytes,9,opt,name=logging_config,json=loggingConfig,proto3" json:"logging_config,omitempty" firestore:"loggingConfig"`
	ProxyConfig            *Device_Spec_ProxyConfig   `protobuf:"bytes,10,opt,name=proxy_config,json=proxyConfig,proto3" json:"proxy_config,omitempty" firestore:"proxyConfig"`
	Location               *Device_Spec_Location      `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty" firestore:"location"`
}

func (m *Device_Spec) Reset() {
	*m = Device_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec) ProtoMessage() {}

func (m *Device_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec) GotenMessage() {}

// Deprecated, Use Device_Spec.ProtoReflect.Descriptor instead.
func (*Device_Spec) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Device_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec) GetServiceAccount() *iam_service_account.Reference {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func (m *Device_Spec) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *Device_Spec) GetNetplanConfig() *Device_Spec_NetplanConfig {
	if m != nil {
		return m.NetplanConfig
	}
	return nil
}

func (m *Device_Spec) GetNetplanApiConfigMode() Device_Spec_NetworkConfigMode {
	if m != nil {
		return m.NetplanApiConfigMode
	}
	return Device_Spec_MERGE
}

func (m *Device_Spec) GetOsImageUrl() string {
	if m != nil {
		return m.OsImageUrl
	}
	return ""
}

func (m *Device_Spec) GetSshConfig() *Device_Spec_SSHConfig {
	if m != nil {
		return m.SshConfig
	}
	return nil
}

func (m *Device_Spec) GetAttestationConfig() *Device_Spec_AttestationConfig {
	if m != nil {
		return m.AttestationConfig
	}
	return nil
}

func (m *Device_Spec) GetDisableDeviceDiscovery() bool {
	if m != nil {
		return m.DisableDeviceDiscovery
	}
	return false
}

func (m *Device_Spec) GetLoggingConfig() *Device_Spec_LoggingConfig {
	if m != nil {
		return m.LoggingConfig
	}
	return nil
}

func (m *Device_Spec) GetProxyConfig() *Device_Spec_ProxyConfig {
	if m != nil {
		return m.ProxyConfig
	}
	return nil
}

func (m *Device_Spec) GetLocation() *Device_Spec_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Device_Spec) SetServiceAccount(fv *iam_service_account.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceAccount", "Device_Spec"))
	}
	m.ServiceAccount = fv
}

func (m *Device_Spec) SetOsVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsVersion", "Device_Spec"))
	}
	m.OsVersion = fv
}

func (m *Device_Spec) SetNetplanConfig(fv *Device_Spec_NetplanConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetplanConfig", "Device_Spec"))
	}
	m.NetplanConfig = fv
}

func (m *Device_Spec) SetNetplanApiConfigMode(fv Device_Spec_NetworkConfigMode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetplanApiConfigMode", "Device_Spec"))
	}
	m.NetplanApiConfigMode = fv
}

func (m *Device_Spec) SetOsImageUrl(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsImageUrl", "Device_Spec"))
	}
	m.OsImageUrl = fv
}

func (m *Device_Spec) SetSshConfig(fv *Device_Spec_SSHConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SshConfig", "Device_Spec"))
	}
	m.SshConfig = fv
}

func (m *Device_Spec) SetAttestationConfig(fv *Device_Spec_AttestationConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationConfig", "Device_Spec"))
	}
	m.AttestationConfig = fv
}

func (m *Device_Spec) SetDisableDeviceDiscovery(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableDeviceDiscovery", "Device_Spec"))
	}
	m.DisableDeviceDiscovery = fv
}

func (m *Device_Spec) SetLoggingConfig(fv *Device_Spec_LoggingConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LoggingConfig", "Device_Spec"))
	}
	m.LoggingConfig = fv
}

func (m *Device_Spec) SetProxyConfig(fv *Device_Spec_ProxyConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyConfig", "Device_Spec"))
	}
	m.ProxyConfig = fv
}

func (m *Device_Spec) SetLocation(fv *Device_Spec_Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Location", "Device_Spec"))
	}
	m.Location = fv
}

type Device_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of network addresses.
	Addresses []*Device_Status_Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	// List of conditions of the Device.
	Conditions         []*Device_Status_Condition        `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty" firestore:"conditions"`
	NetworkConfigState *Device_Status_NetworkConfigState `protobuf:"bytes,105,opt,name=network_config_state,json=networkConfigState,proto3" json:"network_config_state,omitempty" firestore:"networkConfigState"`
	ProxyConfigStatus  *Device_Status_ProxyConfigStatus  `protobuf:"bytes,106,opt,name=proxy_config_status,json=proxyConfigStatus,proto3" json:"proxy_config_status,omitempty" firestore:"proxyConfigStatus"`
	// Device detailed information
	DeviceInfo        *Device_Status_DeviceInfo `protobuf:"bytes,3,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty" firestore:"deviceInfo"`
	AttestationStatus []*iam_iam_common.PCR     `protobuf:"bytes,4,rep,name=attestation_status,json=attestationStatus,proto3" json:"attestation_status,omitempty" firestore:"attestationStatus"`
	// Normalized Address.
	NormalizedAddress *Device_Status_NormalizedAddress `protobuf:"bytes,5,opt,name=normalized_address,json=normalizedAddress,proto3" json:"normalized_address,omitempty" firestore:"normalizedAddress"`
}

func (m *Device_Status) Reset() {
	*m = Device_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status) ProtoMessage() {}

func (m *Device_Status) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status) GotenMessage() {}

// Deprecated, Use Device_Status.ProtoReflect.Descriptor instead.
func (*Device_Status) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Device_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status) GetAddresses() []*Device_Status_Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Status) GetConditions() []*Device_Status_Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Device_Status) GetNetworkConfigState() *Device_Status_NetworkConfigState {
	if m != nil {
		return m.NetworkConfigState
	}
	return nil
}

func (m *Device_Status) GetProxyConfigStatus() *Device_Status_ProxyConfigStatus {
	if m != nil {
		return m.ProxyConfigStatus
	}
	return nil
}

func (m *Device_Status) GetDeviceInfo() *Device_Status_DeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (m *Device_Status) GetAttestationStatus() []*iam_iam_common.PCR {
	if m != nil {
		return m.AttestationStatus
	}
	return nil
}

func (m *Device_Status) GetNormalizedAddress() *Device_Status_NormalizedAddress {
	if m != nil {
		return m.NormalizedAddress
	}
	return nil
}

func (m *Device_Status) SetAddresses(fv []*Device_Status_Address) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Status"))
	}
	m.Addresses = fv
}

func (m *Device_Status) SetConditions(fv []*Device_Status_Condition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Conditions", "Device_Status"))
	}
	m.Conditions = fv
}

func (m *Device_Status) SetNetworkConfigState(fv *Device_Status_NetworkConfigState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetworkConfigState", "Device_Status"))
	}
	m.NetworkConfigState = fv
}

func (m *Device_Status) SetProxyConfigStatus(fv *Device_Status_ProxyConfigStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyConfigStatus", "Device_Status"))
	}
	m.ProxyConfigStatus = fv
}

func (m *Device_Status) SetDeviceInfo(fv *Device_Status_DeviceInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceInfo", "Device_Status"))
	}
	m.DeviceInfo = fv
}

func (m *Device_Status) SetAttestationStatus(fv []*iam_iam_common.PCR) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationStatus", "Device_Status"))
	}
	m.AttestationStatus = fv
}

func (m *Device_Status) SetNormalizedAddress(fv *Device_Status_NormalizedAddress) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NormalizedAddress", "Device_Status"))
	}
	m.NormalizedAddress = fv
}

type Device_PublicListingSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Enabled       bool              `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" firestore:"enabled"`
	FieldMask     *Device_FieldMask `protobuf:"bytes,2,opt,customtype=Device_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *Device_PublicListingSpec) Reset() {
	*m = Device_PublicListingSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_PublicListingSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_PublicListingSpec) ProtoMessage() {}

func (m *Device_PublicListingSpec) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_PublicListingSpec) GotenMessage() {}

// Deprecated, Use Device_PublicListingSpec.ProtoReflect.Descriptor instead.
func (*Device_PublicListingSpec) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Device_PublicListingSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_PublicListingSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_PublicListingSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_PublicListingSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_PublicListingSpec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Device_PublicListingSpec) GetFieldMask() *Device_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *Device_PublicListingSpec) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "Device_PublicListingSpec"))
	}
	m.Enabled = fv
}

func (m *Device_PublicListingSpec) SetFieldMask(fv *Device_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "Device_PublicListingSpec"))
	}
	m.FieldMask = fv
}

type Device_Spec_NetworkingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Version       int32                                                `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty" firestore:"version"`
	Renderer      string                                               `protobuf:"bytes,9,opt,name=renderer,proto3" json:"renderer,omitempty" firestore:"renderer"`
	Ethernets     map[string]*Device_Spec_NetworkingConfig_EthOpts     `protobuf:"bytes,10,rep,name=ethernets,proto3" json:"ethernets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"ethernets"`
	Wifis         map[string]*Device_Spec_NetworkingConfig_WifiOpts    `protobuf:"bytes,11,rep,name=wifis,proto3" json:"wifis,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"wifis"`
	Bridges       map[string]*Device_Spec_NetworkingConfig_BridgesOpts `protobuf:"bytes,12,rep,name=bridges,proto3" json:"bridges,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"bridges"`
	Bonds         map[string]*Device_Spec_NetworkingConfig_BondsOpts   `protobuf:"bytes,13,rep,name=bonds,proto3" json:"bonds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"bonds"`
	Tunnels       map[string]*Device_Spec_NetworkingConfig_TunnelsOpts `protobuf:"bytes,14,rep,name=tunnels,proto3" json:"tunnels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"tunnels"`
	Vlans         map[string]*Device_Spec_NetworkingConfig_VlansOpts   `protobuf:"bytes,15,rep,name=vlans,proto3" json:"vlans,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"vlans"`
	Modems        map[string]*Device_Spec_NetworkingConfig_ModemOpts   `protobuf:"bytes,16,rep,name=modems,proto3" json:"modems,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"modems"`
}

func (m *Device_Spec_NetworkingConfig) Reset() {
	*m = Device_Spec_NetworkingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Device_Spec_NetworkingConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig) GetRenderer() string {
	if m != nil {
		return m.Renderer
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig) GetEthernets() map[string]*Device_Spec_NetworkingConfig_EthOpts {
	if m != nil {
		return m.Ethernets
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig) GetWifis() map[string]*Device_Spec_NetworkingConfig_WifiOpts {
	if m != nil {
		return m.Wifis
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig) GetBridges() map[string]*Device_Spec_NetworkingConfig_BridgesOpts {
	if m != nil {
		return m.Bridges
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig) GetBonds() map[string]*Device_Spec_NetworkingConfig_BondsOpts {
	if m != nil {
		return m.Bonds
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig) GetTunnels() map[string]*Device_Spec_NetworkingConfig_TunnelsOpts {
	if m != nil {
		return m.Tunnels
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig) GetVlans() map[string]*Device_Spec_NetworkingConfig_VlansOpts {
	if m != nil {
		return m.Vlans
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig) GetModems() map[string]*Device_Spec_NetworkingConfig_ModemOpts {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig) SetVersion(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Version", "Device_Spec_NetworkingConfig"))
	}
	m.Version = fv
}

func (m *Device_Spec_NetworkingConfig) SetRenderer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Renderer", "Device_Spec_NetworkingConfig"))
	}
	m.Renderer = fv
}

func (m *Device_Spec_NetworkingConfig) SetEthernets(fv map[string]*Device_Spec_NetworkingConfig_EthOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ethernets", "Device_Spec_NetworkingConfig"))
	}
	m.Ethernets = fv
}

func (m *Device_Spec_NetworkingConfig) SetWifis(fv map[string]*Device_Spec_NetworkingConfig_WifiOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Wifis", "Device_Spec_NetworkingConfig"))
	}
	m.Wifis = fv
}

func (m *Device_Spec_NetworkingConfig) SetBridges(fv map[string]*Device_Spec_NetworkingConfig_BridgesOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bridges", "Device_Spec_NetworkingConfig"))
	}
	m.Bridges = fv
}

func (m *Device_Spec_NetworkingConfig) SetBonds(fv map[string]*Device_Spec_NetworkingConfig_BondsOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bonds", "Device_Spec_NetworkingConfig"))
	}
	m.Bonds = fv
}

func (m *Device_Spec_NetworkingConfig) SetTunnels(fv map[string]*Device_Spec_NetworkingConfig_TunnelsOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tunnels", "Device_Spec_NetworkingConfig"))
	}
	m.Tunnels = fv
}

func (m *Device_Spec_NetworkingConfig) SetVlans(fv map[string]*Device_Spec_NetworkingConfig_VlansOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vlans", "Device_Spec_NetworkingConfig"))
	}
	m.Vlans = fv
}

func (m *Device_Spec_NetworkingConfig) SetModems(fv map[string]*Device_Spec_NetworkingConfig_ModemOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Modems", "Device_Spec_NetworkingConfig"))
	}
	m.Modems = fv
}

type Device_Spec_NetplanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Network       *Device_Spec_NetworkingConfig `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty" firestore:"network"`
}

func (m *Device_Spec_NetplanConfig) Reset() {
	*m = Device_Spec_NetplanConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetplanConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetplanConfig) ProtoMessage() {}

func (m *Device_Spec_NetplanConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetplanConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_NetplanConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetplanConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *Device_Spec_NetplanConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetplanConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetplanConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetplanConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetplanConfig) GetNetwork() *Device_Spec_NetworkingConfig {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Device_Spec_NetplanConfig) SetNetwork(fv *Device_Spec_NetworkingConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Network", "Device_Spec_NetplanConfig"))
	}
	m.Network = fv
}

// SSHConfig defines the ssh configuration for the Device.
type Device_Spec_SSHConfig struct {
	state              protoimpl.MessageState
	sizeCache          protoimpl.SizeCache
	unknownFields      protoimpl.UnknownFields
	DisableSshServer   bool                             `protobuf:"varint,1,opt,name=disable_ssh_server,json=disableSshServer,proto3" json:"disable_ssh_server,omitempty" firestore:"disableSshServer"`
	DisableSshPassword bool                             `protobuf:"varint,2,opt,name=disable_ssh_password,json=disableSshPassword,proto3" json:"disable_ssh_password,omitempty" firestore:"disableSshPassword"`
	SshAuthorized      []*Device_Spec_SSHConfig_AuthKey `protobuf:"bytes,3,rep,name=ssh_authorized,json=sshAuthorized,proto3" json:"ssh_authorized,omitempty" firestore:"sshAuthorized"`
	IpAllowList        []string                         `protobuf:"bytes,4,rep,name=ip_allow_list,json=ipAllowList,proto3" json:"ip_allow_list,omitempty" firestore:"ipAllowList"`
	IpDenyList         []string                         `protobuf:"bytes,5,rep,name=ip_deny_list,json=ipDenyList,proto3" json:"ip_deny_list,omitempty" firestore:"ipDenyList"`
	RejectPeriod       *duration.Duration               `protobuf:"bytes,6,opt,name=reject_period,json=rejectPeriod,proto3" json:"reject_period,omitempty" firestore:"rejectPeriod"`
	DisableSshAuthkey  bool                             `protobuf:"varint,7,opt,name=disable_ssh_authkey,json=disableSshAuthkey,proto3" json:"disable_ssh_authkey,omitempty" firestore:"disableSshAuthkey"`
}

func (m *Device_Spec_SSHConfig) Reset() {
	*m = Device_Spec_SSHConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_SSHConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_SSHConfig) ProtoMessage() {}

func (m *Device_Spec_SSHConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_SSHConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_SSHConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_SSHConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (m *Device_Spec_SSHConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_SSHConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_SSHConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_SSHConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_SSHConfig) GetDisableSshServer() bool {
	if m != nil {
		return m.DisableSshServer
	}
	return false
}

func (m *Device_Spec_SSHConfig) GetDisableSshPassword() bool {
	if m != nil {
		return m.DisableSshPassword
	}
	return false
}

func (m *Device_Spec_SSHConfig) GetSshAuthorized() []*Device_Spec_SSHConfig_AuthKey {
	if m != nil {
		return m.SshAuthorized
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetIpAllowList() []string {
	if m != nil {
		return m.IpAllowList
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetIpDenyList() []string {
	if m != nil {
		return m.IpDenyList
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetRejectPeriod() *duration.Duration {
	if m != nil {
		return m.RejectPeriod
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetDisableSshAuthkey() bool {
	if m != nil {
		return m.DisableSshAuthkey
	}
	return false
}

func (m *Device_Spec_SSHConfig) SetDisableSshServer(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableSshServer", "Device_Spec_SSHConfig"))
	}
	m.DisableSshServer = fv
}

func (m *Device_Spec_SSHConfig) SetDisableSshPassword(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableSshPassword", "Device_Spec_SSHConfig"))
	}
	m.DisableSshPassword = fv
}

func (m *Device_Spec_SSHConfig) SetSshAuthorized(fv []*Device_Spec_SSHConfig_AuthKey) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SshAuthorized", "Device_Spec_SSHConfig"))
	}
	m.SshAuthorized = fv
}

func (m *Device_Spec_SSHConfig) SetIpAllowList(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAllowList", "Device_Spec_SSHConfig"))
	}
	m.IpAllowList = fv
}

func (m *Device_Spec_SSHConfig) SetIpDenyList(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpDenyList", "Device_Spec_SSHConfig"))
	}
	m.IpDenyList = fv
}

func (m *Device_Spec_SSHConfig) SetRejectPeriod(fv *duration.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RejectPeriod", "Device_Spec_SSHConfig"))
	}
	m.RejectPeriod = fv
}

func (m *Device_Spec_SSHConfig) SetDisableSshAuthkey(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableSshAuthkey", "Device_Spec_SSHConfig"))
	}
	m.DisableSshAuthkey = fv
}

type Device_Spec_AttestationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// If true, the droplet will try to attest itself.
	AttestationExpected bool `protobuf:"varint,1,opt,name=attestation_expected,json=attestationExpected,proto3" json:"attestation_expected,omitempty" firestore:"attestationExpected"`
	// Attestation domain for device attestation.
	AttestationDomain *iam_attestation_domain.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=attestation_domain,json=attestationDomain,proto3" json:"attestation_domain,omitempty" firestore:"attestationDomain"`
	// Insecure, use for dev only.
	// If non-zero, droplet will use an in-memory TPM simulator instead of an
	// actual, physical one, using the provided seed as initialization seed.
	// OK, this is not *actually* insecure, since server-side should verify
	// trustworthiness of the key anyways (the entire point of verification
	// protocol after all), but it's better to mark it this way for people who
	// don't read the documentation.
	//
	// This field is designed to be used for development purposes, as it
	// allows for running the attestation protocol on devices which don't have
	// a TMP chip. To make it work, ensure that attestation domain policies
	// are configured for development as well (depends on which aspect we're
	// testing; at the very least
	// insecure_skip_manufacturer_ekcert_verification should be probably set
	// to true).
	InsecureUseTpmSimulatorSeed int32 `protobuf:"varint,3,opt,name=insecure_use_tpm_simulator_seed,json=insecureUseTpmSimulatorSeed,proto3" json:"insecure_use_tpm_simulator_seed,omitempty" firestore:"insecureUseTpmSimulatorSeed"`
}

func (m *Device_Spec_AttestationConfig) Reset() {
	*m = Device_Spec_AttestationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_AttestationConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_AttestationConfig) ProtoMessage() {}

func (m *Device_Spec_AttestationConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_AttestationConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_AttestationConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_AttestationConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (m *Device_Spec_AttestationConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_AttestationConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_AttestationConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_AttestationConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_AttestationConfig) GetAttestationExpected() bool {
	if m != nil {
		return m.AttestationExpected
	}
	return false
}

func (m *Device_Spec_AttestationConfig) GetAttestationDomain() *iam_attestation_domain.Reference {
	if m != nil {
		return m.AttestationDomain
	}
	return nil
}

func (m *Device_Spec_AttestationConfig) GetInsecureUseTpmSimulatorSeed() int32 {
	if m != nil {
		return m.InsecureUseTpmSimulatorSeed
	}
	return int32(0)
}

func (m *Device_Spec_AttestationConfig) SetAttestationExpected(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationExpected", "Device_Spec_AttestationConfig"))
	}
	m.AttestationExpected = fv
}

func (m *Device_Spec_AttestationConfig) SetAttestationDomain(fv *iam_attestation_domain.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationDomain", "Device_Spec_AttestationConfig"))
	}
	m.AttestationDomain = fv
}

func (m *Device_Spec_AttestationConfig) SetInsecureUseTpmSimulatorSeed(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "InsecureUseTpmSimulatorSeed", "Device_Spec_AttestationConfig"))
	}
	m.InsecureUseTpmSimulatorSeed = fv
}

type Device_Spec_LoggingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Log priority as understood by systemd (0 - emergency, 1 - alert, 2 -
	// critical, 3 - error, 4 - warning, 5 - notice, 6 - informational, 7 -
	// debug). Journal logs with this priority and higher will be uploaded to
	// the server.
	Priority int32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty" firestore:"priority"`
	// List of systemd unit names to monitor for logs, e.g.
	// NetworkManager.service, docker.service.
	// Leave empty to export all journald logs.
	Units []string `protobuf:"bytes,2,rep,name=units,proto3" json:"units,omitempty" firestore:"units"`
	// Whether the journald log exporter is enabled.
	EnableJournalExport bool `protobuf:"varint,3,opt,name=enable_journal_export,json=enableJournalExport,proto3" json:"enable_journal_export,omitempty" firestore:"enableJournalExport"`
}

func (m *Device_Spec_LoggingConfig) Reset() {
	*m = Device_Spec_LoggingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_LoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_LoggingConfig) ProtoMessage() {}

func (m *Device_Spec_LoggingConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_LoggingConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_LoggingConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_LoggingConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (m *Device_Spec_LoggingConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_LoggingConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_LoggingConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_LoggingConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_LoggingConfig) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return int32(0)
}

func (m *Device_Spec_LoggingConfig) GetUnits() []string {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *Device_Spec_LoggingConfig) GetEnableJournalExport() bool {
	if m != nil {
		return m.EnableJournalExport
	}
	return false
}

func (m *Device_Spec_LoggingConfig) SetPriority(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Priority", "Device_Spec_LoggingConfig"))
	}
	m.Priority = fv
}

func (m *Device_Spec_LoggingConfig) SetUnits(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Units", "Device_Spec_LoggingConfig"))
	}
	m.Units = fv
}

func (m *Device_Spec_LoggingConfig) SetEnableJournalExport(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnableJournalExport", "Device_Spec_LoggingConfig"))
	}
	m.EnableJournalExport = fv
}

type Device_Spec_ProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	HttpProxy     string `protobuf:"bytes,1,opt,name=http_proxy,json=httpProxy,proto3" json:"http_proxy,omitempty" firestore:"httpProxy"`
	HttpsProxy    string `protobuf:"bytes,2,opt,name=https_proxy,json=httpsProxy,proto3" json:"https_proxy,omitempty" firestore:"httpsProxy"`
	NoProxy       string `protobuf:"bytes,3,opt,name=no_proxy,json=noProxy,proto3" json:"no_proxy,omitempty" firestore:"noProxy"`
	// By default proxy is applicable for all interfaces
	// configuring proxy_interfaces allows to restrict proxy setting to be
	// used only with specific interfaces At present this is only used for
	// Control Plane (for eg LTE fallback)
	ProxyInterfaces []string `protobuf:"bytes,4,rep,name=proxy_interfaces,json=proxyInterfaces,proto3" json:"proxy_interfaces,omitempty" firestore:"proxyInterfaces"`
}

func (m *Device_Spec_ProxyConfig) Reset() {
	*m = Device_Spec_ProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_ProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_ProxyConfig) ProtoMessage() {}

func (m *Device_Spec_ProxyConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_ProxyConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_ProxyConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_ProxyConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (m *Device_Spec_ProxyConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_ProxyConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_ProxyConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_ProxyConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_ProxyConfig) GetHttpProxy() string {
	if m != nil {
		return m.HttpProxy
	}
	return ""
}

func (m *Device_Spec_ProxyConfig) GetHttpsProxy() string {
	if m != nil {
		return m.HttpsProxy
	}
	return ""
}

func (m *Device_Spec_ProxyConfig) GetNoProxy() string {
	if m != nil {
		return m.NoProxy
	}
	return ""
}

func (m *Device_Spec_ProxyConfig) GetProxyInterfaces() []string {
	if m != nil {
		return m.ProxyInterfaces
	}
	return nil
}

func (m *Device_Spec_ProxyConfig) SetHttpProxy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpProxy", "Device_Spec_ProxyConfig"))
	}
	m.HttpProxy = fv
}

func (m *Device_Spec_ProxyConfig) SetHttpsProxy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpsProxy", "Device_Spec_ProxyConfig"))
	}
	m.HttpsProxy = fv
}

func (m *Device_Spec_ProxyConfig) SetNoProxy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoProxy", "Device_Spec_ProxyConfig"))
	}
	m.NoProxy = fv
}

func (m *Device_Spec_ProxyConfig) SetProxyInterfaces(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyInterfaces", "Device_Spec_ProxyConfig"))
	}
	m.ProxyInterfaces = fv
}

// Device location of the device.
type Device_Spec_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	Placement     string `protobuf:"bytes,2,opt,name=placement,proto3" json:"placement,omitempty" firestore:"placement"`
}

func (m *Device_Spec_Location) Reset() {
	*m = Device_Spec_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_Location) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_Location) ProtoMessage() {}

func (m *Device_Spec_Location) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_Location) GotenMessage() {}

// Deprecated, Use Device_Spec_Location.ProtoReflect.Descriptor instead.
func (*Device_Spec_Location) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (m *Device_Spec_Location) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_Location) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_Location) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_Location) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_Location) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Device_Spec_Location) GetPlacement() string {
	if m != nil {
		return m.Placement
	}
	return ""
}

func (m *Device_Spec_Location) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "Device_Spec_Location"))
	}
	m.Address = fv
}

func (m *Device_Spec_Location) SetPlacement(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Placement", "Device_Spec_Location"))
	}
	m.Placement = fv
}

type Device_Spec_NetworkingConfig_CommonOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *Device_Spec_NetworkingConfig_CommonOpts) Reset() {
	*m = Device_Spec_NetworkingConfig_CommonOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_CommonOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_CommonOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_CommonOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type Device_Spec_NetworkingConfig_EthOpts struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	Match             *Device_Spec_NetworkingConfig_EthOpts_Match            `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty" firestore:"match"`
	SetName           string                                                 `protobuf:"bytes,2,opt,name=set_name,json=set-name,proto3" json:"set_name,omitempty" firestore:"set-name"`
	Wakeonlan         bool                                                   `protobuf:"varint,3,opt,name=wakeonlan,proto3" json:"wakeonlan,omitempty" firestore:"wakeonlan"`
	Renderer          string                                                 `protobuf:"bytes,6,opt,name=renderer,proto3" json:"renderer,omitempty" firestore:"renderer"`
	Dhcp4             bool                                                   `protobuf:"varint,7,opt,name=dhcp4,proto3" json:"dhcp4,omitempty" firestore:"dhcp4"`
	Dhcp6             bool                                                   `protobuf:"varint,8,opt,name=dhcp6,proto3" json:"dhcp6,omitempty" firestore:"dhcp6"`
	Ipv6Privacy       bool                                                   `protobuf:"varint,9,opt,name=ipv6_privacy,json=ipv6-privacy,proto3" json:"ipv6_privacy,omitempty" firestore:"ipv6-privacy"`
	LinkLocal         []string                                               `protobuf:"bytes,10,rep,name=link_local,json=link-local,proto3" json:"link_local,omitempty" firestore:"link-local"`
	Critical          bool                                                   `protobuf:"varint,11,opt,name=critical,proto3" json:"critical,omitempty" firestore:"critical"`
	DhcpIdentifier    string                                                 `protobuf:"bytes,12,opt,name=dhcp_identifier,json=dhcp-identifier,proto3" json:"dhcp_identifier,omitempty" firestore:"dhcp-identifier"`
	Dhcp4Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,13,opt,name=dhcp4_overrides,json=dhcp4-overrides,proto3" json:"dhcp4_overrides,omitempty" firestore:"dhcp4-overrides"`
	Dhcp6Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,14,opt,name=dhcp6_overrides,json=dhcp6-overrides,proto3" json:"dhcp6_overrides,omitempty" firestore:"dhcp6-overrides"`
	AcceptRa          bool                                                   `protobuf:"varint,15,opt,name=accept_ra,json=acceptRa,proto3" json:"accept_ra,omitempty" firestore:"acceptRa"`
	Addresses         []string                                               `protobuf:"bytes,16,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	Nameservers       *Device_Spec_NetworkingConfig_CommonOpts_Nameservers   `protobuf:"bytes,17,opt,name=nameservers,proto3" json:"nameservers,omitempty" firestore:"nameservers"`
	Macaddress        string                                                 `protobuf:"bytes,18,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Mtu               int32                                                  `protobuf:"varint,19,opt,name=mtu,proto3" json:"mtu,omitempty" firestore:"mtu"`
	Optional          bool                                                   `protobuf:"varint,20,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
	OptionalAddresses []string                                               `protobuf:"bytes,21,rep,name=optional_addresses,json=optional-addresses,proto3" json:"optional_addresses,omitempty" firestore:"optional-addresses"`
	Routes            []*Device_Spec_NetworkingConfig_CommonOpts_Routes      `protobuf:"bytes,22,rep,name=routes,proto3" json:"routes,omitempty" firestore:"routes"`
	RoutingPolicy     *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy `protobuf:"bytes,23,opt,name=routing_policy,json=routing-policy,proto3" json:"routing_policy,omitempty" firestore:"routing-policy"`
	Auth              *Device_Spec_NetworkingConfig_CommonOpts_Auth          `protobuf:"bytes,24,opt,name=auth,proto3" json:"auth,omitempty" firestore:"auth"`
	// Deprecated
	Gateway4 string `protobuf:"bytes,25,opt,name=gateway4,proto3" json:"gateway4,omitempty" firestore:"gateway4"`
	// Deprecated
	Gateway6 string `protobuf:"bytes,26,opt,name=gateway6,proto3" json:"gateway6,omitempty" firestore:"gateway6"`
}

func (m *Device_Spec_NetworkingConfig_EthOpts) Reset() {
	*m = Device_Spec_NetworkingConfig_EthOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_EthOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_EthOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_EthOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_EthOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_EthOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_EthOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (m *Device_Spec_NetworkingConfig_EthOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_EthOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_EthOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_EthOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetMatch() *Device_Spec_NetworkingConfig_EthOpts_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetSetName() string {
	if m != nil {
		return m.SetName
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetWakeonlan() bool {
	if m != nil {
		return m.Wakeonlan
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetRenderer() string {
	if m != nil {
		return m.Renderer
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetDhcp4() bool {
	if m != nil {
		return m.Dhcp4
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetDhcp6() bool {
	if m != nil {
		return m.Dhcp6
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetIpv6Privacy() bool {
	if m != nil {
		return m.Ipv6Privacy
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetLinkLocal() []string {
	if m != nil {
		return m.LinkLocal
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetCritical() bool {
	if m != nil {
		return m.Critical
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetDhcpIdentifier() string {
	if m != nil {
		return m.DhcpIdentifier
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetDhcp4Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp4Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetDhcp6Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp6Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetAcceptRa() bool {
	if m != nil {
		return m.AcceptRa
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetNameservers() *Device_Spec_NetworkingConfig_CommonOpts_Nameservers {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetOptionalAddresses() []string {
	if m != nil {
		return m.OptionalAddresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetRoutes() []*Device_Spec_NetworkingConfig_CommonOpts_Routes {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetRoutingPolicy() *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy {
	if m != nil {
		return m.RoutingPolicy
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetAuth() *Device_Spec_NetworkingConfig_CommonOpts_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetGateway4() string {
	if m != nil {
		return m.Gateway4
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_EthOpts) GetGateway6() string {
	if m != nil {
		return m.Gateway6
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetMatch(fv *Device_Spec_NetworkingConfig_EthOpts_Match) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Match", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Match = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetSetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SetName", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.SetName = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetWakeonlan(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Wakeonlan", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Wakeonlan = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetRenderer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Renderer", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Renderer = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetDhcp4(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Dhcp4 = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetDhcp6(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Dhcp6 = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetIpv6Privacy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ipv6Privacy", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Ipv6Privacy = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetLinkLocal(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LinkLocal", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.LinkLocal = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetCritical(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Critical", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Critical = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetDhcpIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DhcpIdentifier", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.DhcpIdentifier = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetDhcp4Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4Overrides", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Dhcp4Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetDhcp6Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6Overrides", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Dhcp6Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetAcceptRa(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AcceptRa", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.AcceptRa = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Addresses = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetNameservers(fv *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nameservers", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Nameservers = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetMtu(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mtu", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Mtu = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Optional = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetOptionalAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OptionalAddresses", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.OptionalAddresses = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetRoutes(fv []*Device_Spec_NetworkingConfig_CommonOpts_Routes) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Routes", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Routes = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetRoutingPolicy(fv *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RoutingPolicy", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.RoutingPolicy = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetAuth(fv *Device_Spec_NetworkingConfig_CommonOpts_Auth) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Auth", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Auth = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetGateway4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway4", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Gateway4 = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts) SetGateway6(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway6", "Device_Spec_NetworkingConfig_EthOpts"))
	}
	m.Gateway6 = fv
}

type Device_Spec_NetworkingConfig_WifiOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Match         *Device_Spec_NetworkingConfig_WifiOpts_Match                  `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty" firestore:"match"`
	SetName       string                                                        `protobuf:"bytes,2,opt,name=set_name,json=set-name,proto3" json:"set_name,omitempty" firestore:"set-name"`
	Wakeonlan     bool                                                          `protobuf:"varint,3,opt,name=wakeonlan,proto3" json:"wakeonlan,omitempty" firestore:"wakeonlan"`
	AccessPoints  map[string]*Device_Spec_NetworkingConfig_WifiOpts_AccessPoint `protobuf:"bytes,5,rep,name=access_points,json=access-points,proto3" json:"access_points,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"access-points"`
	// This enables WakeOnWLan on supported devices. Not all drivers support
	// all options. May be any combination of any, disconnect, magic_pkt,
	// gtk_rekey_failure, eap_identity_req, four_way_handshake,
	// rfkill_release or tcp (NetworkManager only). Or the exclusive default
	// flag (the default).
	Wakeonwlan []string `protobuf:"bytes,28,rep,name=wakeonwlan,proto3" json:"wakeonwlan,omitempty" firestore:"wakeonwlan"`
	// This can be used to define the radio’s regulatory domain, to make use
	// of additional WiFi channels outside the “world domain”. Takes an ISO
	// / IEC 3166 country code (like GB) or 00 to reset to the “world
	// domain”
	RegulatoryDomain  string                                                 `protobuf:"bytes,29,opt,name=regulatory_domain,json=regulatory-domain,proto3" json:"regulatory_domain,omitempty" firestore:"regulatory-domain"`
	Renderer          string                                                 `protobuf:"bytes,7,opt,name=renderer,proto3" json:"renderer,omitempty" firestore:"renderer"`
	Dhcp4             bool                                                   `protobuf:"varint,8,opt,name=dhcp4,proto3" json:"dhcp4,omitempty" firestore:"dhcp4"`
	Dhcp6             bool                                                   `protobuf:"varint,9,opt,name=dhcp6,proto3" json:"dhcp6,omitempty" firestore:"dhcp6"`
	Ipv6Privacy       bool                                                   `protobuf:"varint,10,opt,name=ipv6_privacy,json=ipv6-privacy,proto3" json:"ipv6_privacy,omitempty" firestore:"ipv6-privacy"`
	LinkLocal         []string                                               `protobuf:"bytes,11,rep,name=link_local,json=link-local,proto3" json:"link_local,omitempty" firestore:"link-local"`
	Critical          bool                                                   `protobuf:"varint,12,opt,name=critical,proto3" json:"critical,omitempty" firestore:"critical"`
	DhcpIdentifier    string                                                 `protobuf:"bytes,13,opt,name=dhcp_identifier,json=dhcp-identifier,proto3" json:"dhcp_identifier,omitempty" firestore:"dhcp-identifier"`
	Dhcp4Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,14,opt,name=dhcp4_overrides,json=dhcp4-overrides,proto3" json:"dhcp4_overrides,omitempty" firestore:"dhcp4-overrides"`
	Dhcp6Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,15,opt,name=dhcp6_overrides,json=dhcp6-overrides,proto3" json:"dhcp6_overrides,omitempty" firestore:"dhcp6-overrides"`
	AcceptRa          bool                                                   `protobuf:"varint,16,opt,name=accept_ra,json=acceptRa,proto3" json:"accept_ra,omitempty" firestore:"acceptRa"`
	Addresses         []string                                               `protobuf:"bytes,17,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	Nameservers       *Device_Spec_NetworkingConfig_CommonOpts_Nameservers   `protobuf:"bytes,18,opt,name=nameservers,proto3" json:"nameservers,omitempty" firestore:"nameservers"`
	Macaddress        string                                                 `protobuf:"bytes,19,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Mtu               int32                                                  `protobuf:"varint,20,opt,name=mtu,proto3" json:"mtu,omitempty" firestore:"mtu"`
	Optional          bool                                                   `protobuf:"varint,21,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
	OptionalAddresses []string                                               `protobuf:"bytes,22,rep,name=optional_addresses,json=optional-addresses,proto3" json:"optional_addresses,omitempty" firestore:"optional-addresses"`
	Routes            []*Device_Spec_NetworkingConfig_CommonOpts_Routes      `protobuf:"bytes,23,rep,name=routes,proto3" json:"routes,omitempty" firestore:"routes"`
	RoutingPolicy     *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy `protobuf:"bytes,24,opt,name=routing_policy,json=routing-policy,proto3" json:"routing_policy,omitempty" firestore:"routing-policy"`
	Auth              *Device_Spec_NetworkingConfig_CommonOpts_Auth          `protobuf:"bytes,25,opt,name=auth,proto3" json:"auth,omitempty" firestore:"auth"`
	// Deprecated
	Gateway4 string `protobuf:"bytes,26,opt,name=gateway4,proto3" json:"gateway4,omitempty" firestore:"gateway4"`
	// Deprecated
	Gateway6 string `protobuf:"bytes,27,opt,name=gateway6,proto3" json:"gateway6,omitempty" firestore:"gateway6"`
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) Reset() {
	*m = Device_Spec_NetworkingConfig_WifiOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_WifiOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_WifiOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_WifiOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_WifiOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_WifiOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetMatch() *Device_Spec_NetworkingConfig_WifiOpts_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetSetName() string {
	if m != nil {
		return m.SetName
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetWakeonlan() bool {
	if m != nil {
		return m.Wakeonlan
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetAccessPoints() map[string]*Device_Spec_NetworkingConfig_WifiOpts_AccessPoint {
	if m != nil {
		return m.AccessPoints
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetWakeonwlan() []string {
	if m != nil {
		return m.Wakeonwlan
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetRegulatoryDomain() string {
	if m != nil {
		return m.RegulatoryDomain
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetRenderer() string {
	if m != nil {
		return m.Renderer
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetDhcp4() bool {
	if m != nil {
		return m.Dhcp4
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetDhcp6() bool {
	if m != nil {
		return m.Dhcp6
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetIpv6Privacy() bool {
	if m != nil {
		return m.Ipv6Privacy
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetLinkLocal() []string {
	if m != nil {
		return m.LinkLocal
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetCritical() bool {
	if m != nil {
		return m.Critical
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetDhcpIdentifier() string {
	if m != nil {
		return m.DhcpIdentifier
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetDhcp4Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp4Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetDhcp6Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp6Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetAcceptRa() bool {
	if m != nil {
		return m.AcceptRa
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetNameservers() *Device_Spec_NetworkingConfig_CommonOpts_Nameservers {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetOptionalAddresses() []string {
	if m != nil {
		return m.OptionalAddresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetRoutes() []*Device_Spec_NetworkingConfig_CommonOpts_Routes {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetRoutingPolicy() *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy {
	if m != nil {
		return m.RoutingPolicy
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetAuth() *Device_Spec_NetworkingConfig_CommonOpts_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetGateway4() string {
	if m != nil {
		return m.Gateway4
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) GetGateway6() string {
	if m != nil {
		return m.Gateway6
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetMatch(fv *Device_Spec_NetworkingConfig_WifiOpts_Match) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Match", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Match = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetSetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SetName", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.SetName = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetWakeonlan(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Wakeonlan", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Wakeonlan = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetAccessPoints(fv map[string]*Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AccessPoints", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.AccessPoints = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetWakeonwlan(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Wakeonwlan", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Wakeonwlan = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetRegulatoryDomain(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegulatoryDomain", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.RegulatoryDomain = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetRenderer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Renderer", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Renderer = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetDhcp4(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Dhcp4 = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetDhcp6(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Dhcp6 = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetIpv6Privacy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ipv6Privacy", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Ipv6Privacy = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetLinkLocal(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LinkLocal", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.LinkLocal = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetCritical(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Critical", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Critical = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetDhcpIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DhcpIdentifier", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.DhcpIdentifier = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetDhcp4Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4Overrides", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Dhcp4Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetDhcp6Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6Overrides", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Dhcp6Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetAcceptRa(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AcceptRa", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.AcceptRa = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Addresses = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetNameservers(fv *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nameservers", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Nameservers = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetMtu(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mtu", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Mtu = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Optional = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetOptionalAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OptionalAddresses", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.OptionalAddresses = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetRoutes(fv []*Device_Spec_NetworkingConfig_CommonOpts_Routes) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Routes", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Routes = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetRoutingPolicy(fv *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RoutingPolicy", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.RoutingPolicy = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetAuth(fv *Device_Spec_NetworkingConfig_CommonOpts_Auth) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Auth", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Auth = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetGateway4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway4", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Gateway4 = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts) SetGateway6(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway6", "Device_Spec_NetworkingConfig_WifiOpts"))
	}
	m.Gateway6 = fv
}

type Device_Spec_NetworkingConfig_BridgesOpts struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	Interfaces        []string                                               `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty" firestore:"interfaces"`
	Parameters        *Device_Spec_NetworkingConfig_BridgesOpts_Parameters   `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" firestore:"parameters"`
	Renderer          string                                                 `protobuf:"bytes,5,opt,name=renderer,proto3" json:"renderer,omitempty" firestore:"renderer"`
	Dhcp4             bool                                                   `protobuf:"varint,6,opt,name=dhcp4,proto3" json:"dhcp4,omitempty" firestore:"dhcp4"`
	Dhcp6             bool                                                   `protobuf:"varint,7,opt,name=dhcp6,proto3" json:"dhcp6,omitempty" firestore:"dhcp6"`
	Ipv6Privacy       bool                                                   `protobuf:"varint,8,opt,name=ipv6_privacy,json=ipv6-privacy,proto3" json:"ipv6_privacy,omitempty" firestore:"ipv6-privacy"`
	LinkLocal         []string                                               `protobuf:"bytes,9,rep,name=link_local,json=link-local,proto3" json:"link_local,omitempty" firestore:"link-local"`
	Critical          bool                                                   `protobuf:"varint,10,opt,name=critical,proto3" json:"critical,omitempty" firestore:"critical"`
	DhcpIdentifier    string                                                 `protobuf:"bytes,11,opt,name=dhcp_identifier,json=dhcp-identifier,proto3" json:"dhcp_identifier,omitempty" firestore:"dhcp-identifier"`
	Dhcp4Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,12,opt,name=dhcp4_overrides,json=dhcp4-overrides,proto3" json:"dhcp4_overrides,omitempty" firestore:"dhcp4-overrides"`
	Dhcp6Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,13,opt,name=dhcp6_overrides,json=dhcp6-overrides,proto3" json:"dhcp6_overrides,omitempty" firestore:"dhcp6-overrides"`
	AcceptRa          bool                                                   `protobuf:"varint,14,opt,name=accept_ra,json=acceptRa,proto3" json:"accept_ra,omitempty" firestore:"acceptRa"`
	Addresses         []string                                               `protobuf:"bytes,15,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	Nameservers       *Device_Spec_NetworkingConfig_CommonOpts_Nameservers   `protobuf:"bytes,16,opt,name=nameservers,proto3" json:"nameservers,omitempty" firestore:"nameservers"`
	Macaddress        string                                                 `protobuf:"bytes,17,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Mtu               int32                                                  `protobuf:"varint,18,opt,name=mtu,proto3" json:"mtu,omitempty" firestore:"mtu"`
	Optional          bool                                                   `protobuf:"varint,19,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
	OptionalAddresses []string                                               `protobuf:"bytes,20,rep,name=optional_addresses,json=optional-addresses,proto3" json:"optional_addresses,omitempty" firestore:"optional-addresses"`
	Routes            []*Device_Spec_NetworkingConfig_CommonOpts_Routes      `protobuf:"bytes,21,rep,name=routes,proto3" json:"routes,omitempty" firestore:"routes"`
	RoutingPolicy     *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy `protobuf:"bytes,22,opt,name=routing_policy,json=routing-policy,proto3" json:"routing_policy,omitempty" firestore:"routing-policy"`
	Auth              *Device_Spec_NetworkingConfig_CommonOpts_Auth          `protobuf:"bytes,23,opt,name=auth,proto3" json:"auth,omitempty" firestore:"auth"`
	// Deprecated
	Gateway4 string `protobuf:"bytes,24,opt,name=gateway4,proto3" json:"gateway4,omitempty" firestore:"gateway4"`
	// Deprecated
	Gateway6 string `protobuf:"bytes,25,opt,name=gateway6,proto3" json:"gateway6,omitempty" firestore:"gateway6"`
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) Reset() {
	*m = Device_Spec_NetworkingConfig_BridgesOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_BridgesOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_BridgesOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_BridgesOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_BridgesOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetParameters() *Device_Spec_NetworkingConfig_BridgesOpts_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetRenderer() string {
	if m != nil {
		return m.Renderer
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetDhcp4() bool {
	if m != nil {
		return m.Dhcp4
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetDhcp6() bool {
	if m != nil {
		return m.Dhcp6
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetIpv6Privacy() bool {
	if m != nil {
		return m.Ipv6Privacy
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetLinkLocal() []string {
	if m != nil {
		return m.LinkLocal
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetCritical() bool {
	if m != nil {
		return m.Critical
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetDhcpIdentifier() string {
	if m != nil {
		return m.DhcpIdentifier
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetDhcp4Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp4Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetDhcp6Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp6Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetAcceptRa() bool {
	if m != nil {
		return m.AcceptRa
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetNameservers() *Device_Spec_NetworkingConfig_CommonOpts_Nameservers {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetOptionalAddresses() []string {
	if m != nil {
		return m.OptionalAddresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetRoutes() []*Device_Spec_NetworkingConfig_CommonOpts_Routes {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetRoutingPolicy() *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy {
	if m != nil {
		return m.RoutingPolicy
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetAuth() *Device_Spec_NetworkingConfig_CommonOpts_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetGateway4() string {
	if m != nil {
		return m.Gateway4
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) GetGateway6() string {
	if m != nil {
		return m.Gateway6
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetInterfaces(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interfaces", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Interfaces = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetParameters(fv *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parameters", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Parameters = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetRenderer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Renderer", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Renderer = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetDhcp4(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Dhcp4 = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetDhcp6(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Dhcp6 = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetIpv6Privacy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ipv6Privacy", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Ipv6Privacy = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetLinkLocal(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LinkLocal", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.LinkLocal = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetCritical(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Critical", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Critical = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetDhcpIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DhcpIdentifier", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.DhcpIdentifier = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetDhcp4Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4Overrides", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Dhcp4Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetDhcp6Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6Overrides", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Dhcp6Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetAcceptRa(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AcceptRa", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.AcceptRa = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Addresses = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetNameservers(fv *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nameservers", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Nameservers = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetMtu(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mtu", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Mtu = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Optional = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetOptionalAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OptionalAddresses", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.OptionalAddresses = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetRoutes(fv []*Device_Spec_NetworkingConfig_CommonOpts_Routes) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Routes", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Routes = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetRoutingPolicy(fv *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RoutingPolicy", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.RoutingPolicy = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetAuth(fv *Device_Spec_NetworkingConfig_CommonOpts_Auth) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Auth", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Auth = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetGateway4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway4", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Gateway4 = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts) SetGateway6(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway6", "Device_Spec_NetworkingConfig_BridgesOpts"))
	}
	m.Gateway6 = fv
}

type Device_Spec_NetworkingConfig_BondsOpts struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	Interfaces        []string                                               `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty" firestore:"interfaces"`
	Parameters        *Device_Spec_NetworkingConfig_BondsOpts_Parameters     `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" firestore:"parameters"`
	Renderer          string                                                 `protobuf:"bytes,5,opt,name=renderer,proto3" json:"renderer,omitempty" firestore:"renderer"`
	Dhcp4             bool                                                   `protobuf:"varint,6,opt,name=dhcp4,proto3" json:"dhcp4,omitempty" firestore:"dhcp4"`
	Dhcp6             bool                                                   `protobuf:"varint,7,opt,name=dhcp6,proto3" json:"dhcp6,omitempty" firestore:"dhcp6"`
	Ipv6Privacy       bool                                                   `protobuf:"varint,8,opt,name=ipv6_privacy,json=ipv6-privacy,proto3" json:"ipv6_privacy,omitempty" firestore:"ipv6-privacy"`
	LinkLocal         []string                                               `protobuf:"bytes,9,rep,name=link_local,json=link-local,proto3" json:"link_local,omitempty" firestore:"link-local"`
	Critical          bool                                                   `protobuf:"varint,10,opt,name=critical,proto3" json:"critical,omitempty" firestore:"critical"`
	DhcpIdentifier    string                                                 `protobuf:"bytes,11,opt,name=dhcp_identifier,json=dhcp-identifier,proto3" json:"dhcp_identifier,omitempty" firestore:"dhcp-identifier"`
	Dhcp4Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,12,opt,name=dhcp4_overrides,json=dhcp4-overrides,proto3" json:"dhcp4_overrides,omitempty" firestore:"dhcp4-overrides"`
	Dhcp6Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,13,opt,name=dhcp6_overrides,json=dhcp6-overrides,proto3" json:"dhcp6_overrides,omitempty" firestore:"dhcp6-overrides"`
	AcceptRa          bool                                                   `protobuf:"varint,14,opt,name=accept_ra,json=acceptRa,proto3" json:"accept_ra,omitempty" firestore:"acceptRa"`
	Addresses         []string                                               `protobuf:"bytes,15,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	Nameservers       *Device_Spec_NetworkingConfig_CommonOpts_Nameservers   `protobuf:"bytes,16,opt,name=nameservers,proto3" json:"nameservers,omitempty" firestore:"nameservers"`
	Macaddress        string                                                 `protobuf:"bytes,17,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Mtu               int32                                                  `protobuf:"varint,18,opt,name=mtu,proto3" json:"mtu,omitempty" firestore:"mtu"`
	Optional          bool                                                   `protobuf:"varint,19,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
	OptionalAddresses []string                                               `protobuf:"bytes,20,rep,name=optional_addresses,json=optional-addresses,proto3" json:"optional_addresses,omitempty" firestore:"optional-addresses"`
	Routes            []*Device_Spec_NetworkingConfig_CommonOpts_Routes      `protobuf:"bytes,21,rep,name=routes,proto3" json:"routes,omitempty" firestore:"routes"`
	RoutingPolicy     *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy `protobuf:"bytes,22,opt,name=routing_policy,json=routing-policy,proto3" json:"routing_policy,omitempty" firestore:"routing-policy"`
	Auth              *Device_Spec_NetworkingConfig_CommonOpts_Auth          `protobuf:"bytes,23,opt,name=auth,proto3" json:"auth,omitempty" firestore:"auth"`
	// Deprecated
	Gateway4 string `protobuf:"bytes,24,opt,name=gateway4,proto3" json:"gateway4,omitempty" firestore:"gateway4"`
	// Deprecated
	Gateway6 string `protobuf:"bytes,25,opt,name=gateway6,proto3" json:"gateway6,omitempty" firestore:"gateway6"`
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) Reset() {
	*m = Device_Spec_NetworkingConfig_BondsOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_BondsOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_BondsOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_BondsOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_BondsOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_BondsOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetParameters() *Device_Spec_NetworkingConfig_BondsOpts_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetRenderer() string {
	if m != nil {
		return m.Renderer
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetDhcp4() bool {
	if m != nil {
		return m.Dhcp4
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetDhcp6() bool {
	if m != nil {
		return m.Dhcp6
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetIpv6Privacy() bool {
	if m != nil {
		return m.Ipv6Privacy
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetLinkLocal() []string {
	if m != nil {
		return m.LinkLocal
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetCritical() bool {
	if m != nil {
		return m.Critical
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetDhcpIdentifier() string {
	if m != nil {
		return m.DhcpIdentifier
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetDhcp4Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp4Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetDhcp6Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp6Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetAcceptRa() bool {
	if m != nil {
		return m.AcceptRa
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetNameservers() *Device_Spec_NetworkingConfig_CommonOpts_Nameservers {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetOptionalAddresses() []string {
	if m != nil {
		return m.OptionalAddresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetRoutes() []*Device_Spec_NetworkingConfig_CommonOpts_Routes {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetRoutingPolicy() *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy {
	if m != nil {
		return m.RoutingPolicy
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetAuth() *Device_Spec_NetworkingConfig_CommonOpts_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetGateway4() string {
	if m != nil {
		return m.Gateway4
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) GetGateway6() string {
	if m != nil {
		return m.Gateway6
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetInterfaces(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interfaces", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Interfaces = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetParameters(fv *Device_Spec_NetworkingConfig_BondsOpts_Parameters) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parameters", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Parameters = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetRenderer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Renderer", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Renderer = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetDhcp4(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Dhcp4 = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetDhcp6(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Dhcp6 = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetIpv6Privacy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ipv6Privacy", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Ipv6Privacy = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetLinkLocal(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LinkLocal", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.LinkLocal = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetCritical(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Critical", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Critical = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetDhcpIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DhcpIdentifier", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.DhcpIdentifier = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetDhcp4Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4Overrides", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Dhcp4Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetDhcp6Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6Overrides", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Dhcp6Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetAcceptRa(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AcceptRa", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.AcceptRa = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Addresses = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetNameservers(fv *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nameservers", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Nameservers = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetMtu(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mtu", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Mtu = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Optional = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetOptionalAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OptionalAddresses", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.OptionalAddresses = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetRoutes(fv []*Device_Spec_NetworkingConfig_CommonOpts_Routes) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Routes", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Routes = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetRoutingPolicy(fv *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RoutingPolicy", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.RoutingPolicy = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetAuth(fv *Device_Spec_NetworkingConfig_CommonOpts_Auth) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Auth", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Auth = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetGateway4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway4", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Gateway4 = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts) SetGateway6(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway6", "Device_Spec_NetworkingConfig_BondsOpts"))
	}
	m.Gateway6 = fv
}

type Device_Spec_NetworkingConfig_TunnelsOpts struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	Mode              string                                                 `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty" firestore:"mode"`
	Local             string                                                 `protobuf:"bytes,3,opt,name=local,proto3" json:"local,omitempty" firestore:"local"`
	Remote            string                                                 `protobuf:"bytes,4,opt,name=remote,proto3" json:"remote,omitempty" firestore:"remote"`
	Key               int32                                                  `protobuf:"varint,5,opt,name=key,proto3" json:"key,omitempty" firestore:"key"`
	Renderer          string                                                 `protobuf:"bytes,7,opt,name=renderer,proto3" json:"renderer,omitempty" firestore:"renderer"`
	Dhcp4             bool                                                   `protobuf:"varint,8,opt,name=dhcp4,proto3" json:"dhcp4,omitempty" firestore:"dhcp4"`
	Dhcp6             bool                                                   `protobuf:"varint,9,opt,name=dhcp6,proto3" json:"dhcp6,omitempty" firestore:"dhcp6"`
	Ipv6Privacy       bool                                                   `protobuf:"varint,10,opt,name=ipv6_privacy,json=ipv6-privacy,proto3" json:"ipv6_privacy,omitempty" firestore:"ipv6-privacy"`
	LinkLocal         []string                                               `protobuf:"bytes,11,rep,name=link_local,json=link-local,proto3" json:"link_local,omitempty" firestore:"link-local"`
	Critical          bool                                                   `protobuf:"varint,12,opt,name=critical,proto3" json:"critical,omitempty" firestore:"critical"`
	DhcpIdentifier    string                                                 `protobuf:"bytes,13,opt,name=dhcp_identifier,json=dhcp-identifier,proto3" json:"dhcp_identifier,omitempty" firestore:"dhcp-identifier"`
	Dhcp4Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,14,opt,name=dhcp4_overrides,json=dhcp4-overrides,proto3" json:"dhcp4_overrides,omitempty" firestore:"dhcp4-overrides"`
	Dhcp6Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,15,opt,name=dhcp6_overrides,json=dhcp6-overrides,proto3" json:"dhcp6_overrides,omitempty" firestore:"dhcp6-overrides"`
	AcceptRa          bool                                                   `protobuf:"varint,16,opt,name=accept_ra,json=acceptRa,proto3" json:"accept_ra,omitempty" firestore:"acceptRa"`
	Addresses         []string                                               `protobuf:"bytes,17,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	Nameservers       *Device_Spec_NetworkingConfig_CommonOpts_Nameservers   `protobuf:"bytes,18,opt,name=nameservers,proto3" json:"nameservers,omitempty" firestore:"nameservers"`
	Macaddress        string                                                 `protobuf:"bytes,19,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Mtu               int32                                                  `protobuf:"varint,20,opt,name=mtu,proto3" json:"mtu,omitempty" firestore:"mtu"`
	Optional          bool                                                   `protobuf:"varint,21,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
	OptionalAddresses []string                                               `protobuf:"bytes,22,rep,name=optional_addresses,json=optional-addresses,proto3" json:"optional_addresses,omitempty" firestore:"optional-addresses"`
	Routes            []*Device_Spec_NetworkingConfig_CommonOpts_Routes      `protobuf:"bytes,23,rep,name=routes,proto3" json:"routes,omitempty" firestore:"routes"`
	RoutingPolicy     *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy `protobuf:"bytes,24,opt,name=routing_policy,json=routing-policy,proto3" json:"routing_policy,omitempty" firestore:"routing-policy"`
	Auth              *Device_Spec_NetworkingConfig_CommonOpts_Auth          `protobuf:"bytes,25,opt,name=auth,proto3" json:"auth,omitempty" firestore:"auth"`
	// Deprecated
	Gateway4 string `protobuf:"bytes,26,opt,name=gateway4,proto3" json:"gateway4,omitempty" firestore:"gateway4"`
	// Deprecated
	Gateway6 string `protobuf:"bytes,27,opt,name=gateway6,proto3" json:"gateway6,omitempty" firestore:"gateway6"`
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) Reset() {
	*m = Device_Spec_NetworkingConfig_TunnelsOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_TunnelsOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_TunnelsOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_TunnelsOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_TunnelsOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 5}
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetLocal() string {
	if m != nil {
		return m.Local
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetRemote() string {
	if m != nil {
		return m.Remote
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetRenderer() string {
	if m != nil {
		return m.Renderer
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetDhcp4() bool {
	if m != nil {
		return m.Dhcp4
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetDhcp6() bool {
	if m != nil {
		return m.Dhcp6
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetIpv6Privacy() bool {
	if m != nil {
		return m.Ipv6Privacy
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetLinkLocal() []string {
	if m != nil {
		return m.LinkLocal
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetCritical() bool {
	if m != nil {
		return m.Critical
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetDhcpIdentifier() string {
	if m != nil {
		return m.DhcpIdentifier
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetDhcp4Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp4Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetDhcp6Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp6Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetAcceptRa() bool {
	if m != nil {
		return m.AcceptRa
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetNameservers() *Device_Spec_NetworkingConfig_CommonOpts_Nameservers {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetOptionalAddresses() []string {
	if m != nil {
		return m.OptionalAddresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetRoutes() []*Device_Spec_NetworkingConfig_CommonOpts_Routes {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetRoutingPolicy() *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy {
	if m != nil {
		return m.RoutingPolicy
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetAuth() *Device_Spec_NetworkingConfig_CommonOpts_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetGateway4() string {
	if m != nil {
		return m.Gateway4
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) GetGateway6() string {
	if m != nil {
		return m.Gateway6
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetMode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Mode = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetLocal(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Local", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Local = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetRemote(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Remote", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Remote = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetKey(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Key = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetRenderer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Renderer", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Renderer = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetDhcp4(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Dhcp4 = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetDhcp6(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Dhcp6 = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetIpv6Privacy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ipv6Privacy", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Ipv6Privacy = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetLinkLocal(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LinkLocal", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.LinkLocal = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetCritical(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Critical", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Critical = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetDhcpIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DhcpIdentifier", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.DhcpIdentifier = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetDhcp4Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4Overrides", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Dhcp4Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetDhcp6Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6Overrides", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Dhcp6Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetAcceptRa(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AcceptRa", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.AcceptRa = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Addresses = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetNameservers(fv *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nameservers", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Nameservers = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetMtu(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mtu", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Mtu = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Optional = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetOptionalAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OptionalAddresses", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.OptionalAddresses = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetRoutes(fv []*Device_Spec_NetworkingConfig_CommonOpts_Routes) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Routes", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Routes = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetRoutingPolicy(fv *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RoutingPolicy", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.RoutingPolicy = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetAuth(fv *Device_Spec_NetworkingConfig_CommonOpts_Auth) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Auth", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Auth = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetGateway4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway4", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Gateway4 = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts) SetGateway6(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway6", "Device_Spec_NetworkingConfig_TunnelsOpts"))
	}
	m.Gateway6 = fv
}

type Device_Spec_NetworkingConfig_VlansOpts struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	Id                int32                                                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" firestore:"id"`
	Link              string                                                 `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty" firestore:"link"`
	Renderer          string                                                 `protobuf:"bytes,5,opt,name=renderer,proto3" json:"renderer,omitempty" firestore:"renderer"`
	Dhcp4             bool                                                   `protobuf:"varint,6,opt,name=dhcp4,proto3" json:"dhcp4,omitempty" firestore:"dhcp4"`
	Dhcp6             bool                                                   `protobuf:"varint,7,opt,name=dhcp6,proto3" json:"dhcp6,omitempty" firestore:"dhcp6"`
	Ipv6Privacy       bool                                                   `protobuf:"varint,8,opt,name=ipv6_privacy,json=ipv6-privacy,proto3" json:"ipv6_privacy,omitempty" firestore:"ipv6-privacy"`
	LinkLocal         []string                                               `protobuf:"bytes,9,rep,name=link_local,json=link-local,proto3" json:"link_local,omitempty" firestore:"link-local"`
	Critical          bool                                                   `protobuf:"varint,10,opt,name=critical,proto3" json:"critical,omitempty" firestore:"critical"`
	DhcpIdentifier    string                                                 `protobuf:"bytes,11,opt,name=dhcp_identifier,json=dhcp-identifier,proto3" json:"dhcp_identifier,omitempty" firestore:"dhcp-identifier"`
	Dhcp4Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,12,opt,name=dhcp4_overrides,json=dhcp4-overrides,proto3" json:"dhcp4_overrides,omitempty" firestore:"dhcp4-overrides"`
	Dhcp6Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,13,opt,name=dhcp6_overrides,json=dhcp6-overrides,proto3" json:"dhcp6_overrides,omitempty" firestore:"dhcp6-overrides"`
	AcceptRa          bool                                                   `protobuf:"varint,14,opt,name=accept_ra,json=acceptRa,proto3" json:"accept_ra,omitempty" firestore:"acceptRa"`
	Addresses         []string                                               `protobuf:"bytes,15,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	Nameservers       *Device_Spec_NetworkingConfig_CommonOpts_Nameservers   `protobuf:"bytes,16,opt,name=nameservers,proto3" json:"nameservers,omitempty" firestore:"nameservers"`
	Macaddress        string                                                 `protobuf:"bytes,17,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Mtu               int32                                                  `protobuf:"varint,18,opt,name=mtu,proto3" json:"mtu,omitempty" firestore:"mtu"`
	Optional          bool                                                   `protobuf:"varint,19,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
	OptionalAddresses []string                                               `protobuf:"bytes,20,rep,name=optional_addresses,json=optional-addresses,proto3" json:"optional_addresses,omitempty" firestore:"optional-addresses"`
	Routes            []*Device_Spec_NetworkingConfig_CommonOpts_Routes      `protobuf:"bytes,21,rep,name=routes,proto3" json:"routes,omitempty" firestore:"routes"`
	RoutingPolicy     *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy `protobuf:"bytes,22,opt,name=routing_policy,json=routing-policy,proto3" json:"routing_policy,omitempty" firestore:"routing-policy"`
	Auth              *Device_Spec_NetworkingConfig_CommonOpts_Auth          `protobuf:"bytes,23,opt,name=auth,proto3" json:"auth,omitempty" firestore:"auth"`
	// Deprecated
	Gateway4 string `protobuf:"bytes,24,opt,name=gateway4,proto3" json:"gateway4,omitempty" firestore:"gateway4"`
	// Deprecated
	Gateway6 string `protobuf:"bytes,25,opt,name=gateway6,proto3" json:"gateway6,omitempty" firestore:"gateway6"`
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) Reset() {
	*m = Device_Spec_NetworkingConfig_VlansOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_VlansOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_VlansOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_VlansOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_VlansOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_VlansOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 6}
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetRenderer() string {
	if m != nil {
		return m.Renderer
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetDhcp4() bool {
	if m != nil {
		return m.Dhcp4
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetDhcp6() bool {
	if m != nil {
		return m.Dhcp6
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetIpv6Privacy() bool {
	if m != nil {
		return m.Ipv6Privacy
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetLinkLocal() []string {
	if m != nil {
		return m.LinkLocal
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetCritical() bool {
	if m != nil {
		return m.Critical
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetDhcpIdentifier() string {
	if m != nil {
		return m.DhcpIdentifier
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetDhcp4Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp4Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetDhcp6Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp6Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetAcceptRa() bool {
	if m != nil {
		return m.AcceptRa
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetNameservers() *Device_Spec_NetworkingConfig_CommonOpts_Nameservers {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetOptionalAddresses() []string {
	if m != nil {
		return m.OptionalAddresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetRoutes() []*Device_Spec_NetworkingConfig_CommonOpts_Routes {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetRoutingPolicy() *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy {
	if m != nil {
		return m.RoutingPolicy
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetAuth() *Device_Spec_NetworkingConfig_CommonOpts_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetGateway4() string {
	if m != nil {
		return m.Gateway4
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) GetGateway6() string {
	if m != nil {
		return m.Gateway6
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetId(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Id", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Id = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetLink(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Link", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Link = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetRenderer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Renderer", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Renderer = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetDhcp4(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Dhcp4 = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetDhcp6(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Dhcp6 = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetIpv6Privacy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ipv6Privacy", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Ipv6Privacy = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetLinkLocal(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LinkLocal", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.LinkLocal = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetCritical(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Critical", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Critical = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetDhcpIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DhcpIdentifier", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.DhcpIdentifier = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetDhcp4Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4Overrides", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Dhcp4Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetDhcp6Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6Overrides", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Dhcp6Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetAcceptRa(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AcceptRa", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.AcceptRa = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Addresses = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetNameservers(fv *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nameservers", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Nameservers = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetMtu(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mtu", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Mtu = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Optional = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetOptionalAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OptionalAddresses", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.OptionalAddresses = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetRoutes(fv []*Device_Spec_NetworkingConfig_CommonOpts_Routes) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Routes", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Routes = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetRoutingPolicy(fv *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RoutingPolicy", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.RoutingPolicy = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetAuth(fv *Device_Spec_NetworkingConfig_CommonOpts_Auth) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Auth", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Auth = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetGateway4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway4", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Gateway4 = fv
}

func (m *Device_Spec_NetworkingConfig_VlansOpts) SetGateway6(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway6", "Device_Spec_NetworkingConfig_VlansOpts"))
	}
	m.Gateway6 = fv
}

type Device_Spec_NetworkingConfig_ModemOpts struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	Apn               string                                                 `protobuf:"bytes,1,opt,name=apn,proto3" json:"apn,omitempty" firestore:"apn"`
	Username          string                                                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" firestore:"username"`
	Password          string                                                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" firestore:"password"`
	Number            string                                                 `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty" firestore:"number"`
	NetworkId         string                                                 `protobuf:"bytes,5,opt,name=network_id,json=network-id,proto3" json:"network_id,omitempty" firestore:"network-id"`
	DeviceId          string                                                 `protobuf:"bytes,6,opt,name=device_id,json=device-id,proto3" json:"device_id,omitempty" firestore:"device-id"`
	Pin               string                                                 `protobuf:"bytes,7,opt,name=pin,proto3" json:"pin,omitempty" firestore:"pin"`
	SimId             string                                                 `protobuf:"bytes,8,opt,name=sim_id,json=sim-id,proto3" json:"sim_id,omitempty" firestore:"sim-id"`
	SimOperatorId     string                                                 `protobuf:"bytes,9,opt,name=sim_operator_id,json=sim-operator-id,proto3" json:"sim_operator_id,omitempty" firestore:"sim-operator-id"`
	AutoConfig        bool                                                   `protobuf:"varint,11,opt,name=auto_config,json=auto-config,proto3" json:"auto_config,omitempty" firestore:"auto-config"`
	Renderer          string                                                 `protobuf:"bytes,12,opt,name=renderer,proto3" json:"renderer,omitempty" firestore:"renderer"`
	Dhcp4             bool                                                   `protobuf:"varint,13,opt,name=dhcp4,proto3" json:"dhcp4,omitempty" firestore:"dhcp4"`
	Dhcp6             bool                                                   `protobuf:"varint,14,opt,name=dhcp6,proto3" json:"dhcp6,omitempty" firestore:"dhcp6"`
	Ipv6Privacy       bool                                                   `protobuf:"varint,15,opt,name=ipv6_privacy,json=ipv6-privacy,proto3" json:"ipv6_privacy,omitempty" firestore:"ipv6-privacy"`
	LinkLocal         []string                                               `protobuf:"bytes,16,rep,name=link_local,json=link-local,proto3" json:"link_local,omitempty" firestore:"link-local"`
	Critical          bool                                                   `protobuf:"varint,17,opt,name=critical,proto3" json:"critical,omitempty" firestore:"critical"`
	DhcpIdentifier    string                                                 `protobuf:"bytes,18,opt,name=dhcp_identifier,json=dhcp-identifier,proto3" json:"dhcp_identifier,omitempty" firestore:"dhcp-identifier"`
	Dhcp4Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,19,opt,name=dhcp4_overrides,json=dhcp4-overrides,proto3" json:"dhcp4_overrides,omitempty" firestore:"dhcp4-overrides"`
	Dhcp6Overrides    *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,20,opt,name=dhcp6_overrides,json=dhcp6-overrides,proto3" json:"dhcp6_overrides,omitempty" firestore:"dhcp6-overrides"`
	AcceptRa          bool                                                   `protobuf:"varint,21,opt,name=accept_ra,json=acceptRa,proto3" json:"accept_ra,omitempty" firestore:"acceptRa"`
	Addresses         []string                                               `protobuf:"bytes,22,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	Nameservers       *Device_Spec_NetworkingConfig_CommonOpts_Nameservers   `protobuf:"bytes,23,opt,name=nameservers,proto3" json:"nameservers,omitempty" firestore:"nameservers"`
	Macaddress        string                                                 `protobuf:"bytes,24,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Mtu               int32                                                  `protobuf:"varint,25,opt,name=mtu,proto3" json:"mtu,omitempty" firestore:"mtu"`
	Optional          bool                                                   `protobuf:"varint,26,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
	OptionalAddresses []string                                               `protobuf:"bytes,27,rep,name=optional_addresses,json=optional-addresses,proto3" json:"optional_addresses,omitempty" firestore:"optional-addresses"`
	Routes            []*Device_Spec_NetworkingConfig_CommonOpts_Routes      `protobuf:"bytes,28,rep,name=routes,proto3" json:"routes,omitempty" firestore:"routes"`
	RoutingPolicy     *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy `protobuf:"bytes,29,opt,name=routing_policy,json=routing-policy,proto3" json:"routing_policy,omitempty" firestore:"routing-policy"`
	Auth              *Device_Spec_NetworkingConfig_CommonOpts_Auth          `protobuf:"bytes,30,opt,name=auth,proto3" json:"auth,omitempty" firestore:"auth"`
	// Deprecated
	Gateway4 string `protobuf:"bytes,31,opt,name=gateway4,proto3" json:"gateway4,omitempty" firestore:"gateway4"`
	// Deprecated
	Gateway6 string `protobuf:"bytes,32,opt,name=gateway6,proto3" json:"gateway6,omitempty" firestore:"gateway6"`
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) Reset() {
	*m = Device_Spec_NetworkingConfig_ModemOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_ModemOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_ModemOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_ModemOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_ModemOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_ModemOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 7}
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetApn() string {
	if m != nil {
		return m.Apn
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetSimId() string {
	if m != nil {
		return m.SimId
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetSimOperatorId() string {
	if m != nil {
		return m.SimOperatorId
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetAutoConfig() bool {
	if m != nil {
		return m.AutoConfig
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetRenderer() string {
	if m != nil {
		return m.Renderer
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetDhcp4() bool {
	if m != nil {
		return m.Dhcp4
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetDhcp6() bool {
	if m != nil {
		return m.Dhcp6
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetIpv6Privacy() bool {
	if m != nil {
		return m.Ipv6Privacy
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetLinkLocal() []string {
	if m != nil {
		return m.LinkLocal
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetCritical() bool {
	if m != nil {
		return m.Critical
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetDhcpIdentifier() string {
	if m != nil {
		return m.DhcpIdentifier
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetDhcp4Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp4Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetDhcp6Overrides() *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp6Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetAcceptRa() bool {
	if m != nil {
		return m.AcceptRa
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetNameservers() *Device_Spec_NetworkingConfig_CommonOpts_Nameservers {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetOptionalAddresses() []string {
	if m != nil {
		return m.OptionalAddresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetRoutes() []*Device_Spec_NetworkingConfig_CommonOpts_Routes {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetRoutingPolicy() *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy {
	if m != nil {
		return m.RoutingPolicy
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetAuth() *Device_Spec_NetworkingConfig_CommonOpts_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetGateway4() string {
	if m != nil {
		return m.Gateway4
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) GetGateway6() string {
	if m != nil {
		return m.Gateway6
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetApn(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Apn", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Apn = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetUsername(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Username", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Username = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetPassword(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Password", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Password = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Number", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Number = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetNetworkId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetworkId", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.NetworkId = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetDeviceId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceId", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.DeviceId = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetPin(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Pin", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Pin = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetSimId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimId", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.SimId = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetSimOperatorId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimOperatorId", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.SimOperatorId = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetAutoConfig(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AutoConfig", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.AutoConfig = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetRenderer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Renderer", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Renderer = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetDhcp4(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Dhcp4 = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetDhcp6(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Dhcp6 = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetIpv6Privacy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ipv6Privacy", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Ipv6Privacy = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetLinkLocal(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LinkLocal", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.LinkLocal = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetCritical(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Critical", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Critical = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetDhcpIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DhcpIdentifier", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.DhcpIdentifier = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetDhcp4Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4Overrides", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Dhcp4Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetDhcp6Overrides(fv *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6Overrides", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Dhcp6Overrides = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetAcceptRa(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AcceptRa", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.AcceptRa = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Addresses = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetNameservers(fv *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nameservers", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Nameservers = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetMtu(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mtu", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Mtu = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Optional = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetOptionalAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OptionalAddresses", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.OptionalAddresses = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetRoutes(fv []*Device_Spec_NetworkingConfig_CommonOpts_Routes) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Routes", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Routes = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetRoutingPolicy(fv *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RoutingPolicy", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.RoutingPolicy = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetAuth(fv *Device_Spec_NetworkingConfig_CommonOpts_Auth) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Auth", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Auth = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetGateway4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway4", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Gateway4 = fv
}

func (m *Device_Spec_NetworkingConfig_ModemOpts) SetGateway6(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway6", "Device_Spec_NetworkingConfig_ModemOpts"))
	}
	m.Gateway6 = fv
}

type Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	UseDns        bool   `protobuf:"varint,1,opt,name=use_dns,json=use-dns,proto3" json:"use_dns,omitempty" firestore:"use-dns"`
	UseNtp        bool   `protobuf:"varint,2,opt,name=use_ntp,json=use-ntp,proto3" json:"use_ntp,omitempty" firestore:"use-ntp"`
	SendHostname  bool   `protobuf:"varint,3,opt,name=send_hostname,json=send-hostname,proto3" json:"send_hostname,omitempty" firestore:"send-hostname"`
	UseHostname   bool   `protobuf:"varint,4,opt,name=use_hostname,json=use-hostname,proto3" json:"use_hostname,omitempty" firestore:"use-hostname"`
	UseMtu        bool   `protobuf:"varint,5,opt,name=use_mtu,json=use-mtu,proto3" json:"use_mtu,omitempty" firestore:"use-mtu"`
	Hostname      string `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty" firestore:"hostname"`
	UseRoutes     bool   `protobuf:"varint,7,opt,name=use_routes,json=use-routes,proto3" json:"use_routes,omitempty" firestore:"use-routes"`
	RouteMetric   int32  `protobuf:"varint,9,opt,name=route_metric,json=route-metric,proto3" json:"route_metric,omitempty" firestore:"route-metric"`
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) Reset() {
	*m = Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) GetUseDns() bool {
	if m != nil {
		return m.UseDns
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) GetUseNtp() bool {
	if m != nil {
		return m.UseNtp
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) GetSendHostname() bool {
	if m != nil {
		return m.SendHostname
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) GetUseHostname() bool {
	if m != nil {
		return m.UseHostname
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) GetUseMtu() bool {
	if m != nil {
		return m.UseMtu
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) GetUseRoutes() bool {
	if m != nil {
		return m.UseRoutes
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) GetRouteMetric() int32 {
	if m != nil {
		return m.RouteMetric
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) SetUseDns(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseDns", "Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides"))
	}
	m.UseDns = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) SetUseNtp(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseNtp", "Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides"))
	}
	m.UseNtp = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) SetSendHostname(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SendHostname", "Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides"))
	}
	m.SendHostname = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) SetUseHostname(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseHostname", "Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides"))
	}
	m.UseHostname = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) SetUseMtu(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseMtu", "Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides"))
	}
	m.UseMtu = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) SetHostname(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Hostname", "Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides"))
	}
	m.Hostname = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) SetUseRoutes(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseRoutes", "Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides"))
	}
	m.UseRoutes = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides) SetRouteMetric(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RouteMetric", "Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides"))
	}
	m.RouteMetric = fv
}

type Device_Spec_NetworkingConfig_CommonOpts_Nameservers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Search        []string `protobuf:"bytes,1,rep,name=search,proto3" json:"search,omitempty" firestore:"search"`
	Addresses     []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) Reset() {
	*m = Device_Spec_NetworkingConfig_CommonOpts_Nameservers{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts_Nameservers) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts_Nameservers) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_CommonOpts_Nameservers.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_CommonOpts_Nameservers) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) GetSearch() []string {
	if m != nil {
		return m.Search
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) SetSearch(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Search", "Device_Spec_NetworkingConfig_CommonOpts_Nameservers"))
	}
	m.Search = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Nameservers) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Spec_NetworkingConfig_CommonOpts_Nameservers"))
	}
	m.Addresses = fv
}

type Device_Spec_NetworkingConfig_CommonOpts_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	From          string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" firestore:"from"`
	To            string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty" firestore:"to"`
	Via           string `protobuf:"bytes,3,opt,name=via,proto3" json:"via,omitempty" firestore:"via"`
	OnLink        bool   `protobuf:"varint,4,opt,name=on_link,json=on-link,proto3" json:"on_link,omitempty" firestore:"on-link"`
	Metric        int32  `protobuf:"varint,5,opt,name=metric,proto3" json:"metric,omitempty" firestore:"metric"`
	Type          string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	Scope         string `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty" firestore:"scope"`
	Table         int32  `protobuf:"varint,8,opt,name=table,proto3" json:"table,omitempty" firestore:"table"`
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) Reset() {
	*m = Device_Spec_NetworkingConfig_CommonOpts_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts_Routes) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts_Routes) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_CommonOpts_Routes.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_CommonOpts_Routes) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) GetVia() string {
	if m != nil {
		return m.Via
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) GetOnLink() bool {
	if m != nil {
		return m.OnLink
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) GetMetric() int32 {
	if m != nil {
		return m.Metric
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) GetTable() int32 {
	if m != nil {
		return m.Table
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) SetFrom(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "From", "Device_Spec_NetworkingConfig_CommonOpts_Routes"))
	}
	m.From = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) SetTo(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "To", "Device_Spec_NetworkingConfig_CommonOpts_Routes"))
	}
	m.To = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) SetVia(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Via", "Device_Spec_NetworkingConfig_CommonOpts_Routes"))
	}
	m.Via = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) SetOnLink(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OnLink", "Device_Spec_NetworkingConfig_CommonOpts_Routes"))
	}
	m.OnLink = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) SetMetric(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metric", "Device_Spec_NetworkingConfig_CommonOpts_Routes"))
	}
	m.Metric = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Spec_NetworkingConfig_CommonOpts_Routes"))
	}
	m.Type = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) SetScope(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Scope", "Device_Spec_NetworkingConfig_CommonOpts_Routes"))
	}
	m.Scope = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Routes) SetTable(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Table", "Device_Spec_NetworkingConfig_CommonOpts_Routes"))
	}
	m.Table = fv
}

type Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	From          string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" firestore:"from"`
	To            string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty" firestore:"to"`
	Table         int32  `protobuf:"varint,3,opt,name=table,proto3" json:"table,omitempty" firestore:"table"`
	Priority      int32  `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty" firestore:"priority"`
	Mark          int32  `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty" firestore:"mark"`
	TypeOfService int32  `protobuf:"varint,6,opt,name=type_of_service,json=type-of-service,proto3" json:"type_of_service,omitempty" firestore:"type-of-service"`
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) Reset() {
	*m = Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0, 3}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) GetTable() int32 {
	if m != nil {
		return m.Table
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) GetMark() int32 {
	if m != nil {
		return m.Mark
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) GetTypeOfService() int32 {
	if m != nil {
		return m.TypeOfService
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) SetFrom(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "From", "Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy"))
	}
	m.From = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) SetTo(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "To", "Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy"))
	}
	m.To = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) SetTable(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Table", "Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy"))
	}
	m.Table = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) SetPriority(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Priority", "Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy"))
	}
	m.Priority = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) SetMark(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mark", "Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy"))
	}
	m.Mark = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy) SetTypeOfService(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TypeOfService", "Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy"))
	}
	m.TypeOfService = fv
}

type Device_Spec_NetworkingConfig_CommonOpts_Auth struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	KeyManagement     string `protobuf:"bytes,1,opt,name=key_management,json=key-management,proto3" json:"key_management,omitempty" firestore:"key-management"`
	Password          string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" firestore:"password"`
	Method            string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty" firestore:"method"`
	Identity          string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty" firestore:"identity"`
	AnonymousIdentity string `protobuf:"bytes,5,opt,name=anonymous_identity,json=anonymous-identity,proto3" json:"anonymous_identity,omitempty" firestore:"anonymous-identity"`
	CaCertificate     string `protobuf:"bytes,6,opt,name=ca_certificate,json=ca-certificate,proto3" json:"ca_certificate,omitempty" firestore:"ca-certificate"`
	ClientCertificate string `protobuf:"bytes,7,opt,name=client_certificate,json=client-certificate,proto3" json:"client_certificate,omitempty" firestore:"client-certificate"`
	ClientKey         string `protobuf:"bytes,8,opt,name=client_key,json=client-key,proto3" json:"client_key,omitempty" firestore:"client-key"`
	ClientKeyPassword string `protobuf:"bytes,9,opt,name=client_key_password,json=client-key-password,proto3" json:"client_key_password,omitempty" firestore:"client-key-password"`
	Phase2Auth        string `protobuf:"bytes,10,opt,name=phase2_auth,json=phase2-auth,proto3" json:"phase2_auth,omitempty" firestore:"phase2-auth"`
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) Reset() {
	*m = Device_Spec_NetworkingConfig_CommonOpts_Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts_Auth) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_CommonOpts_Auth) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_CommonOpts_Auth.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_CommonOpts_Auth) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0, 4}
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) GetKeyManagement() string {
	if m != nil {
		return m.KeyManagement
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) GetAnonymousIdentity() string {
	if m != nil {
		return m.AnonymousIdentity
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) GetCaCertificate() string {
	if m != nil {
		return m.CaCertificate
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) GetClientCertificate() string {
	if m != nil {
		return m.ClientCertificate
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) GetClientKeyPassword() string {
	if m != nil {
		return m.ClientKeyPassword
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) GetPhase2Auth() string {
	if m != nil {
		return m.Phase2Auth
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) SetKeyManagement(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "KeyManagement", "Device_Spec_NetworkingConfig_CommonOpts_Auth"))
	}
	m.KeyManagement = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) SetPassword(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Password", "Device_Spec_NetworkingConfig_CommonOpts_Auth"))
	}
	m.Password = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) SetMethod(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Method", "Device_Spec_NetworkingConfig_CommonOpts_Auth"))
	}
	m.Method = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) SetIdentity(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Identity", "Device_Spec_NetworkingConfig_CommonOpts_Auth"))
	}
	m.Identity = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) SetAnonymousIdentity(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AnonymousIdentity", "Device_Spec_NetworkingConfig_CommonOpts_Auth"))
	}
	m.AnonymousIdentity = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) SetCaCertificate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CaCertificate", "Device_Spec_NetworkingConfig_CommonOpts_Auth"))
	}
	m.CaCertificate = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) SetClientCertificate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientCertificate", "Device_Spec_NetworkingConfig_CommonOpts_Auth"))
	}
	m.ClientCertificate = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) SetClientKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientKey", "Device_Spec_NetworkingConfig_CommonOpts_Auth"))
	}
	m.ClientKey = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) SetClientKeyPassword(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientKeyPassword", "Device_Spec_NetworkingConfig_CommonOpts_Auth"))
	}
	m.ClientKeyPassword = fv
}

func (m *Device_Spec_NetworkingConfig_CommonOpts_Auth) SetPhase2Auth(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Phase2Auth", "Device_Spec_NetworkingConfig_CommonOpts_Auth"))
	}
	m.Phase2Auth = fv
}

type Device_Spec_NetworkingConfig_EthOpts_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Macaddress    string `protobuf:"bytes,2,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Driver        string `protobuf:"bytes,3,opt,name=driver,proto3" json:"driver,omitempty" firestore:"driver"`
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) Reset() {
	*m = Device_Spec_NetworkingConfig_EthOpts_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_EthOpts_Match) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_EthOpts_Match) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_EthOpts_Match.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_EthOpts_Match) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Spec_NetworkingConfig_EthOpts_Match"))
	}
	m.Name = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkingConfig_EthOpts_Match"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkingConfig_EthOpts_Match) SetDriver(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Driver", "Device_Spec_NetworkingConfig_EthOpts_Match"))
	}
	m.Driver = fv
}

type Device_Spec_NetworkingConfig_WifiOpts_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Macaddress    string `protobuf:"bytes,2,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Driver        string `protobuf:"bytes,3,opt,name=driver,proto3" json:"driver,omitempty" firestore:"driver"`
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) Reset() {
	*m = Device_Spec_NetworkingConfig_WifiOpts_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_WifiOpts_Match) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_WifiOpts_Match) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_WifiOpts_Match.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_WifiOpts_Match) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Spec_NetworkingConfig_WifiOpts_Match"))
	}
	m.Name = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkingConfig_WifiOpts_Match"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_Match) SetDriver(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Driver", "Device_Spec_NetworkingConfig_WifiOpts_Match"))
	}
	m.Driver = fv
}

type Device_Spec_NetworkingConfig_WifiOpts_AccessPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Setting password here is equivalent to using auth with
	// key-management: psk
	Password string                                        `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" firestore:"password"`
	Mode     string                                        `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty" firestore:"mode"`
	Bssid    string                                        `protobuf:"bytes,4,opt,name=bssid,proto3" json:"bssid,omitempty" firestore:"bssid"`
	Band     string                                        `protobuf:"bytes,5,opt,name=band,proto3" json:"band,omitempty" firestore:"band"`
	Channel  string                                        `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty" firestore:"channel"`
	Hidden   string                                        `protobuf:"bytes,7,opt,name=hidden,proto3" json:"hidden,omitempty" firestore:"hidden"`
	Auth     *Device_Spec_NetworkingConfig_CommonOpts_Auth `protobuf:"bytes,8,opt,name=auth,proto3" json:"auth,omitempty" firestore:"auth"`
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) Reset() {
	*m = Device_Spec_NetworkingConfig_WifiOpts_AccessPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_WifiOpts_AccessPoint.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) GetBssid() string {
	if m != nil {
		return m.Bssid
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) GetBand() string {
	if m != nil {
		return m.Band
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) GetHidden() string {
	if m != nil {
		return m.Hidden
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) GetAuth() *Device_Spec_NetworkingConfig_CommonOpts_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) SetPassword(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Password", "Device_Spec_NetworkingConfig_WifiOpts_AccessPoint"))
	}
	m.Password = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) SetMode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "Device_Spec_NetworkingConfig_WifiOpts_AccessPoint"))
	}
	m.Mode = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) SetBssid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bssid", "Device_Spec_NetworkingConfig_WifiOpts_AccessPoint"))
	}
	m.Bssid = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) SetBand(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Band", "Device_Spec_NetworkingConfig_WifiOpts_AccessPoint"))
	}
	m.Band = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) SetChannel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Channel", "Device_Spec_NetworkingConfig_WifiOpts_AccessPoint"))
	}
	m.Channel = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) SetHidden(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Hidden", "Device_Spec_NetworkingConfig_WifiOpts_AccessPoint"))
	}
	m.Hidden = fv
}

func (m *Device_Spec_NetworkingConfig_WifiOpts_AccessPoint) SetAuth(fv *Device_Spec_NetworkingConfig_CommonOpts_Auth) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Auth", "Device_Spec_NetworkingConfig_WifiOpts_AccessPoint"))
	}
	m.Auth = fv
}

type Device_Spec_NetworkingConfig_BridgesOpts_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	AgeingTime    int32 `protobuf:"varint,1,opt,name=ageing_time,json=ageing-time,proto3" json:"ageing_time,omitempty" firestore:"ageing-time"`
	Priority      int32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty" firestore:"priority"`
	PortPriority  int32 `protobuf:"varint,3,opt,name=port_priority,json=port-priority,proto3" json:"port_priority,omitempty" firestore:"port-priority"`
	ForwardDelay  int32 `protobuf:"varint,4,opt,name=forward_delay,json=forward-delay,proto3" json:"forward_delay,omitempty" firestore:"forward-delay"`
	HelloTime     int32 `protobuf:"varint,5,opt,name=hello_time,json=hello-time,proto3" json:"hello_time,omitempty" firestore:"hello-time"`
	MaxAge        int32 `protobuf:"varint,6,opt,name=max_age,json=max-age,proto3" json:"max_age,omitempty" firestore:"max-age"`
	PathCost      int32 `protobuf:"varint,7,opt,name=path_cost,json=path-cost,proto3" json:"path_cost,omitempty" firestore:"path-cost"`
	Stp           bool  `protobuf:"varint,8,opt,name=stp,proto3" json:"stp,omitempty" firestore:"stp"`
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) Reset() {
	*m = Device_Spec_NetworkingConfig_BridgesOpts_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_BridgesOpts_Parameters) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_BridgesOpts_Parameters) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_BridgesOpts_Parameters.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_BridgesOpts_Parameters) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0}
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) GetAgeingTime() int32 {
	if m != nil {
		return m.AgeingTime
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) GetPortPriority() int32 {
	if m != nil {
		return m.PortPriority
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) GetForwardDelay() int32 {
	if m != nil {
		return m.ForwardDelay
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) GetHelloTime() int32 {
	if m != nil {
		return m.HelloTime
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) GetMaxAge() int32 {
	if m != nil {
		return m.MaxAge
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) GetPathCost() int32 {
	if m != nil {
		return m.PathCost
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) GetStp() bool {
	if m != nil {
		return m.Stp
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) SetAgeingTime(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AgeingTime", "Device_Spec_NetworkingConfig_BridgesOpts_Parameters"))
	}
	m.AgeingTime = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) SetPriority(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Priority", "Device_Spec_NetworkingConfig_BridgesOpts_Parameters"))
	}
	m.Priority = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) SetPortPriority(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PortPriority", "Device_Spec_NetworkingConfig_BridgesOpts_Parameters"))
	}
	m.PortPriority = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) SetForwardDelay(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ForwardDelay", "Device_Spec_NetworkingConfig_BridgesOpts_Parameters"))
	}
	m.ForwardDelay = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) SetHelloTime(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HelloTime", "Device_Spec_NetworkingConfig_BridgesOpts_Parameters"))
	}
	m.HelloTime = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) SetMaxAge(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxAge", "Device_Spec_NetworkingConfig_BridgesOpts_Parameters"))
	}
	m.MaxAge = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) SetPathCost(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PathCost", "Device_Spec_NetworkingConfig_BridgesOpts_Parameters"))
	}
	m.PathCost = fv
}

func (m *Device_Spec_NetworkingConfig_BridgesOpts_Parameters) SetStp(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Stp", "Device_Spec_NetworkingConfig_BridgesOpts_Parameters"))
	}
	m.Stp = fv
}

type Device_Spec_NetworkingConfig_BondsOpts_Parameters struct {
	state                 protoimpl.MessageState
	sizeCache             protoimpl.SizeCache
	unknownFields         protoimpl.UnknownFields
	Mode                  string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty" firestore:"mode"`
	LacpRate              int32  `protobuf:"varint,2,opt,name=lacp_rate,json=lacp-rate,proto3" json:"lacp_rate,omitempty" firestore:"lacp-rate"`
	MiiMonitorInterval    int32  `protobuf:"varint,3,opt,name=mii_monitor_interval,json=mii-monitor-interval,proto3" json:"mii_monitor_interval,omitempty" firestore:"mii-monitor-interval"`
	MinLinks              int32  `protobuf:"varint,4,opt,name=min_links,json=min-links,proto3" json:"min_links,omitempty" firestore:"min-links"`
	TransmitHashPolicy    int32  `protobuf:"varint,5,opt,name=transmit_hash_policy,json=transmit-hash-policy,proto3" json:"transmit_hash_policy,omitempty" firestore:"transmit-hash-policy"`
	AdSelect              int32  `protobuf:"varint,6,opt,name=ad_select,json=ad-select,proto3" json:"ad_select,omitempty" firestore:"ad-select"`
	AllSlavesActive       int32  `protobuf:"varint,7,opt,name=all_slaves_active,json=all-slaves-active,proto3" json:"all_slaves_active,omitempty" firestore:"all-slaves-active"`
	ArpIpTargets          bool   `protobuf:"varint,8,opt,name=arp_ip_targets,json=arp-ip-targets,proto3" json:"arp_ip_targets,omitempty" firestore:"arp-ip-targets"`
	ArpValidate           string `protobuf:"bytes,9,opt,name=arp_validate,json=arp-validate,proto3" json:"arp_validate,omitempty" firestore:"arp-validate"`
	ArpAllTargets         string `protobuf:"bytes,10,opt,name=arp_all_targets,json=arp-all-targets,proto3" json:"arp_all_targets,omitempty" firestore:"arp-all-targets"`
	UpDelay               string `protobuf:"bytes,11,opt,name=up_delay,json=up-delay,proto3" json:"up_delay,omitempty" firestore:"up-delay"`
	FailOverMacPolicy     string `protobuf:"bytes,12,opt,name=fail_over_mac_policy,json=fail-over-mac-policy,proto3" json:"fail_over_mac_policy,omitempty" firestore:"fail-over-mac-policy"`
	GratuitousArp         int32  `protobuf:"varint,13,opt,name=gratuitous_arp,json=gratuitous-arp,proto3" json:"gratuitous_arp,omitempty" firestore:"gratuitous-arp"`
	PacketsPerSlave       string `protobuf:"bytes,14,opt,name=packets_per_slave,json=packets-per-slave,proto3" json:"packets_per_slave,omitempty" firestore:"packets-per-slave"`
	PrimaryReselectPolicy string `protobuf:"bytes,15,opt,name=primary_reselect_policy,json=primary-reselect-policy,proto3" json:"primary_reselect_policy,omitempty" firestore:"primary-reselect-policy"`
	ResendIgmp            string `protobuf:"bytes,16,opt,name=resend_igmp,json=resend-igmp,proto3" json:"resend_igmp,omitempty" firestore:"resend-igmp"`
	LearnPacketInterval   string `protobuf:"bytes,17,opt,name=learn_packet_interval,json=learn-packet-interval,proto3" json:"learn_packet_interval,omitempty" firestore:"learn-packet-interval"`
	Primary               string `protobuf:"bytes,18,opt,name=primary,proto3" json:"primary,omitempty" firestore:"primary"`
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) Reset() {
	*m = Device_Spec_NetworkingConfig_BondsOpts_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_BondsOpts_Parameters) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_BondsOpts_Parameters) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_BondsOpts_Parameters.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_BondsOpts_Parameters) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0}
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetLacpRate() int32 {
	if m != nil {
		return m.LacpRate
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetMiiMonitorInterval() int32 {
	if m != nil {
		return m.MiiMonitorInterval
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetMinLinks() int32 {
	if m != nil {
		return m.MinLinks
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetTransmitHashPolicy() int32 {
	if m != nil {
		return m.TransmitHashPolicy
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetAdSelect() int32 {
	if m != nil {
		return m.AdSelect
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetAllSlavesActive() int32 {
	if m != nil {
		return m.AllSlavesActive
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetArpIpTargets() bool {
	if m != nil {
		return m.ArpIpTargets
	}
	return false
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetArpValidate() string {
	if m != nil {
		return m.ArpValidate
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetArpAllTargets() string {
	if m != nil {
		return m.ArpAllTargets
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetUpDelay() string {
	if m != nil {
		return m.UpDelay
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetFailOverMacPolicy() string {
	if m != nil {
		return m.FailOverMacPolicy
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetGratuitousArp() int32 {
	if m != nil {
		return m.GratuitousArp
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetPacketsPerSlave() string {
	if m != nil {
		return m.PacketsPerSlave
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetPrimaryReselectPolicy() string {
	if m != nil {
		return m.PrimaryReselectPolicy
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetResendIgmp() string {
	if m != nil {
		return m.ResendIgmp
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetLearnPacketInterval() string {
	if m != nil {
		return m.LearnPacketInterval
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) GetPrimary() string {
	if m != nil {
		return m.Primary
	}
	return ""
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetMode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.Mode = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetLacpRate(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LacpRate", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.LacpRate = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetMiiMonitorInterval(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MiiMonitorInterval", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.MiiMonitorInterval = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetMinLinks(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MinLinks", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.MinLinks = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetTransmitHashPolicy(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TransmitHashPolicy", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.TransmitHashPolicy = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetAdSelect(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdSelect", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.AdSelect = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetAllSlavesActive(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllSlavesActive", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.AllSlavesActive = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetArpIpTargets(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ArpIpTargets", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.ArpIpTargets = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetArpValidate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ArpValidate", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.ArpValidate = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetArpAllTargets(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ArpAllTargets", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.ArpAllTargets = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetUpDelay(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpDelay", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.UpDelay = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetFailOverMacPolicy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FailOverMacPolicy", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.FailOverMacPolicy = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetGratuitousArp(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GratuitousArp", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.GratuitousArp = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetPacketsPerSlave(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PacketsPerSlave", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.PacketsPerSlave = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetPrimaryReselectPolicy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrimaryReselectPolicy", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.PrimaryReselectPolicy = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetResendIgmp(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResendIgmp", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.ResendIgmp = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetLearnPacketInterval(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LearnPacketInterval", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.LearnPacketInterval = fv
}

func (m *Device_Spec_NetworkingConfig_BondsOpts_Parameters) SetPrimary(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Primary", "Device_Spec_NetworkingConfig_BondsOpts_Parameters"))
	}
	m.Primary = fv
}

type Device_Spec_NetworkingConfig_TunnelsOpts_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Input         int32 `protobuf:"varint,1,opt,name=input,proto3" json:"input,omitempty" firestore:"input"`
	Output        int32 `protobuf:"varint,2,opt,name=output,proto3" json:"output,omitempty" firestore:"output"`
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts_Key) Reset() {
	*m = Device_Spec_NetworkingConfig_TunnelsOpts_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts_Key) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkingConfig_TunnelsOpts_Key) ProtoMessage() {}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts_Key) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkingConfig_TunnelsOpts_Key) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkingConfig_TunnelsOpts_Key.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkingConfig_TunnelsOpts_Key) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 5, 0}
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts_Key) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts_Key) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts_Key) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts_Key) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts_Key) GetInput() int32 {
	if m != nil {
		return m.Input
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts_Key) GetOutput() int32 {
	if m != nil {
		return m.Output
	}
	return int32(0)
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts_Key) SetInput(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Input", "Device_Spec_NetworkingConfig_TunnelsOpts_Key"))
	}
	m.Input = fv
}

func (m *Device_Spec_NetworkingConfig_TunnelsOpts_Key) SetOutput(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Output", "Device_Spec_NetworkingConfig_TunnelsOpts_Key"))
	}
	m.Output = fv
}

type Device_Spec_SSHConfig_AuthKey struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	SshaKey           string `protobuf:"bytes,1,opt,name=ssha_key,json=sshaKey,proto3" json:"ssha_key,omitempty" firestore:"sshaKey"`
	CertAuthority     bool   `protobuf:"varint,2,opt,name=cert_authority,json=certAuthority,proto3" json:"cert_authority,omitempty" firestore:"certAuthority"`
	Command           string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty" firestore:"command"`
	Environment       string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty" firestore:"environment"`
	From              string `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty" firestore:"from"`
	NoAgentForwarding bool   `protobuf:"varint,6,opt,name=no_agent_forwarding,json=noAgentForwarding,proto3" json:"no_agent_forwarding,omitempty" firestore:"noAgentForwarding"`
	NoPortForwarding  bool   `protobuf:"varint,7,opt,name=no_port_forwarding,json=noPortForwarding,proto3" json:"no_port_forwarding,omitempty" firestore:"noPortForwarding"`
	NoPty             bool   `protobuf:"varint,8,opt,name=no_pty,json=noPty,proto3" json:"no_pty,omitempty" firestore:"noPty"`
	NoUserRc          bool   `protobuf:"varint,9,opt,name=no_user_rc,json=noUserRc,proto3" json:"no_user_rc,omitempty" firestore:"noUserRc"`
	NoX11Forwarding   bool   `protobuf:"varint,10,opt,name=no_x11_forwarding,json=noX11Forwarding,proto3" json:"no_x11_forwarding,omitempty" firestore:"noX11Forwarding"`
	Permitopen        string `protobuf:"bytes,11,opt,name=permitopen,proto3" json:"permitopen,omitempty" firestore:"permitopen"`
	Principals        string `protobuf:"bytes,12,opt,name=principals,proto3" json:"principals,omitempty" firestore:"principals"`
	Tunnel            string `protobuf:"bytes,13,opt,name=tunnel,proto3" json:"tunnel,omitempty" firestore:"tunnel"`
	Restrict          bool   `protobuf:"varint,14,opt,name=restrict,proto3" json:"restrict,omitempty" firestore:"restrict"`
}

func (m *Device_Spec_SSHConfig_AuthKey) Reset() {
	*m = Device_Spec_SSHConfig_AuthKey{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_SSHConfig_AuthKey) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_SSHConfig_AuthKey) ProtoMessage() {}

func (m *Device_Spec_SSHConfig_AuthKey) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_SSHConfig_AuthKey) GotenMessage() {}

// Deprecated, Use Device_Spec_SSHConfig_AuthKey.ProtoReflect.Descriptor instead.
func (*Device_Spec_SSHConfig_AuthKey) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (m *Device_Spec_SSHConfig_AuthKey) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_SSHConfig_AuthKey) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_SSHConfig_AuthKey) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_SSHConfig_AuthKey) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_SSHConfig_AuthKey) GetSshaKey() string {
	if m != nil {
		return m.SshaKey
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetCertAuthority() bool {
	if m != nil {
		return m.CertAuthority
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoAgentForwarding() bool {
	if m != nil {
		return m.NoAgentForwarding
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoPortForwarding() bool {
	if m != nil {
		return m.NoPortForwarding
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoPty() bool {
	if m != nil {
		return m.NoPty
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoUserRc() bool {
	if m != nil {
		return m.NoUserRc
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoX11Forwarding() bool {
	if m != nil {
		return m.NoX11Forwarding
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetPermitopen() string {
	if m != nil {
		return m.Permitopen
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetPrincipals() string {
	if m != nil {
		return m.Principals
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetTunnel() string {
	if m != nil {
		return m.Tunnel
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetRestrict() bool {
	if m != nil {
		return m.Restrict
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) SetSshaKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SshaKey", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.SshaKey = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetCertAuthority(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CertAuthority", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.CertAuthority = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetCommand(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Command", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Command = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetEnvironment(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Environment", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Environment = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetFrom(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "From", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.From = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoAgentForwarding(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoAgentForwarding", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoAgentForwarding = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoPortForwarding(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoPortForwarding", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoPortForwarding = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoPty(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoPty", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoPty = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoUserRc(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoUserRc", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoUserRc = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoX11Forwarding(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoX11Forwarding", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoX11Forwarding = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetPermitopen(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Permitopen", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Permitopen = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetPrincipals(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Principals", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Principals = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetTunnel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tunnel", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Tunnel = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetRestrict(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Restrict", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Restrict = fv
}

// Interface addresses of the Device.
type Device_Status_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// IPv4 or IPv6 address such as `203.0.113.5` (no suffix for subnet)
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	// Always `InternalIP`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
}

func (m *Device_Status_Address) Reset() {
	*m = Device_Status_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_Address) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_Address) ProtoMessage() {}

func (m *Device_Status_Address) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_Address) GotenMessage() {}

// Deprecated, Use Device_Status_Address.ProtoReflect.Descriptor instead.
func (*Device_Status_Address) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Device_Status_Address) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_Address) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_Address) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_Address) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Device_Status_Address) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_Address) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "Device_Status_Address"))
	}
	m.Address = fv
}

func (m *Device_Status_Address) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_Address"))
	}
	m.Type = fv
}

// Condition holds status of each sub component or module of the device.
type Device_Status_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The message describes the status.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty" firestore:"message"`
	// The reason for the status.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty" firestore:"reason"`
	// The status name.
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	// Type name of the status.
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	// When the status has been updated last time.
	LastHeartBeatTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_heart_beat_time,json=lastHeartBeatTime,proto3" json:"last_heart_beat_time,omitempty" firestore:"lastHeartBeatTime"`
	// When the status has tuned into the current value.
	LastTransitionTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty" firestore:"lastTransitionTime"`
}

func (m *Device_Status_Condition) Reset() {
	*m = Device_Status_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_Condition) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_Condition) ProtoMessage() {}

func (m *Device_Status_Condition) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_Condition) GotenMessage() {}

// Deprecated, Use Device_Status_Condition.ProtoReflect.Descriptor instead.
func (*Device_Status_Condition) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *Device_Status_Condition) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_Condition) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_Condition) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_Condition) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_Condition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Device_Status_Condition) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Device_Status_Condition) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Device_Status_Condition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_Condition) GetLastHeartBeatTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastHeartBeatTime
	}
	return nil
}

func (m *Device_Status_Condition) GetLastTransitionTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *Device_Status_Condition) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "Device_Status_Condition"))
	}
	m.Message = fv
}

func (m *Device_Status_Condition) SetReason(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reason", "Device_Status_Condition"))
	}
	m.Reason = fv
}

func (m *Device_Status_Condition) SetStatus(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Device_Status_Condition"))
	}
	m.Status = fv
}

func (m *Device_Status_Condition) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_Condition"))
	}
	m.Type = fv
}

func (m *Device_Status_Condition) SetLastHeartBeatTime(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastHeartBeatTime", "Device_Status_Condition"))
	}
	m.LastHeartBeatTime = fv
}

func (m *Device_Status_Condition) SetLastTransitionTime(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastTransitionTime", "Device_Status_Condition"))
	}
	m.LastTransitionTime = fv
}

type Device_Status_NetworkConfigState struct {
	state                      protoimpl.MessageState
	sizeCache                  protoimpl.SizeCache
	unknownFields              protoimpl.UnknownFields
	ActiveNetworkConfigSource  Device_Status_NetworkConfigState_NetworkConfigSource `protobuf:"varint,1,opt,name=active_network_config_source,json=activeNetworkConfigSource,proto3,enum=ntt.devices.v1alpha2.Device_Status_NetworkConfigState_NetworkConfigSource" json:"active_network_config_source,omitempty" firestore:"activeNetworkConfigSource"`
	DesiredNetworkConfigSource Device_Status_NetworkConfigState_NetworkConfigSource `protobuf:"varint,2,opt,name=desired_network_config_source,json=desiredNetworkConfigSource,proto3,enum=ntt.devices.v1alpha2.Device_Status_NetworkConfigState_NetworkConfigSource" json:"desired_network_config_source,omitempty" firestore:"desiredNetworkConfigSource"`
	DesiredNetworkConfigError  string                                               `protobuf:"bytes,3,opt,name=desired_network_config_error,json=desiredNetworkConfigError,proto3" json:"desired_network_config_error,omitempty" firestore:"desiredNetworkConfigError"`
	DefaultConfig              *Device_Spec_NetplanConfig                           `protobuf:"bytes,4,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty" firestore:"defaultConfig"`
	ActiveConfig               *Device_Spec_NetplanConfig                           `protobuf:"bytes,5,opt,name=active_config,json=activeConfig,proto3" json:"active_config,omitempty" firestore:"activeConfig"`
	DesiredConfig              *Device_Spec_NetplanConfig                           `protobuf:"bytes,6,opt,name=desired_config,json=desiredConfig,proto3" json:"desired_config,omitempty" firestore:"desiredConfig"`
}

func (m *Device_Status_NetworkConfigState) Reset() {
	*m = Device_Status_NetworkConfigState{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_NetworkConfigState) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_NetworkConfigState) ProtoMessage() {}

func (m *Device_Status_NetworkConfigState) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_NetworkConfigState) GotenMessage() {}

// Deprecated, Use Device_Status_NetworkConfigState.ProtoReflect.Descriptor instead.
func (*Device_Status_NetworkConfigState) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (m *Device_Status_NetworkConfigState) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_NetworkConfigState) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_NetworkConfigState) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_NetworkConfigState) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_NetworkConfigState) GetActiveNetworkConfigSource() Device_Status_NetworkConfigState_NetworkConfigSource {
	if m != nil {
		return m.ActiveNetworkConfigSource
	}
	return Device_Status_NetworkConfigState_UNKNOWN
}

func (m *Device_Status_NetworkConfigState) GetDesiredNetworkConfigSource() Device_Status_NetworkConfigState_NetworkConfigSource {
	if m != nil {
		return m.DesiredNetworkConfigSource
	}
	return Device_Status_NetworkConfigState_UNKNOWN
}

func (m *Device_Status_NetworkConfigState) GetDesiredNetworkConfigError() string {
	if m != nil {
		return m.DesiredNetworkConfigError
	}
	return ""
}

func (m *Device_Status_NetworkConfigState) GetDefaultConfig() *Device_Spec_NetplanConfig {
	if m != nil {
		return m.DefaultConfig
	}
	return nil
}

func (m *Device_Status_NetworkConfigState) GetActiveConfig() *Device_Spec_NetplanConfig {
	if m != nil {
		return m.ActiveConfig
	}
	return nil
}

func (m *Device_Status_NetworkConfigState) GetDesiredConfig() *Device_Spec_NetplanConfig {
	if m != nil {
		return m.DesiredConfig
	}
	return nil
}

func (m *Device_Status_NetworkConfigState) SetActiveNetworkConfigSource(fv Device_Status_NetworkConfigState_NetworkConfigSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveNetworkConfigSource", "Device_Status_NetworkConfigState"))
	}
	m.ActiveNetworkConfigSource = fv
}

func (m *Device_Status_NetworkConfigState) SetDesiredNetworkConfigSource(fv Device_Status_NetworkConfigState_NetworkConfigSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DesiredNetworkConfigSource", "Device_Status_NetworkConfigState"))
	}
	m.DesiredNetworkConfigSource = fv
}

func (m *Device_Status_NetworkConfigState) SetDesiredNetworkConfigError(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DesiredNetworkConfigError", "Device_Status_NetworkConfigState"))
	}
	m.DesiredNetworkConfigError = fv
}

func (m *Device_Status_NetworkConfigState) SetDefaultConfig(fv *Device_Spec_NetplanConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DefaultConfig", "Device_Status_NetworkConfigState"))
	}
	m.DefaultConfig = fv
}

func (m *Device_Status_NetworkConfigState) SetActiveConfig(fv *Device_Spec_NetplanConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveConfig", "Device_Status_NetworkConfigState"))
	}
	m.ActiveConfig = fv
}

func (m *Device_Status_NetworkConfigState) SetDesiredConfig(fv *Device_Spec_NetplanConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DesiredConfig", "Device_Status_NetworkConfigState"))
	}
	m.DesiredConfig = fv
}

type Device_Status_ProxyConfigStatus struct {
	state               protoimpl.MessageState
	sizeCache           protoimpl.SizeCache
	unknownFields       protoimpl.UnknownFields
	ActiveConfigSource  Device_Status_ProxyConfigStatus_ProxyConfigSource `protobuf:"varint,1,opt,name=active_config_source,json=activeConfigSource,proto3,enum=ntt.devices.v1alpha2.Device_Status_ProxyConfigStatus_ProxyConfigSource" json:"active_config_source,omitempty" firestore:"activeConfigSource"`
	DesiredConfigSource Device_Status_ProxyConfigStatus_ProxyConfigSource `protobuf:"varint,2,opt,name=desired_config_source,json=desiredConfigSource,proto3,enum=ntt.devices.v1alpha2.Device_Status_ProxyConfigStatus_ProxyConfigSource" json:"desired_config_source,omitempty" firestore:"desiredConfigSource"`
	ProxyConfigError    string                                            `protobuf:"bytes,3,opt,name=proxy_config_error,json=proxyConfigError,proto3" json:"proxy_config_error,omitempty" firestore:"proxyConfigError"`
	DefaultConfig       *Device_Spec_ProxyConfig                          `protobuf:"bytes,4,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty" firestore:"defaultConfig"`
	ActiveConfig        *Device_Spec_ProxyConfig                          `protobuf:"bytes,5,opt,name=active_config,json=activeConfig,proto3" json:"active_config,omitempty" firestore:"activeConfig"`
	ApiConfig           *Device_Spec_ProxyConfig                          `protobuf:"bytes,6,opt,name=api_config,json=apiConfig,proto3" json:"api_config,omitempty" firestore:"apiConfig"`
}

func (m *Device_Status_ProxyConfigStatus) Reset() {
	*m = Device_Status_ProxyConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_ProxyConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_ProxyConfigStatus) ProtoMessage() {}

func (m *Device_Status_ProxyConfigStatus) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_ProxyConfigStatus) GotenMessage() {}

// Deprecated, Use Device_Status_ProxyConfigStatus.ProtoReflect.Descriptor instead.
func (*Device_Status_ProxyConfigStatus) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (m *Device_Status_ProxyConfigStatus) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_ProxyConfigStatus) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_ProxyConfigStatus) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_ProxyConfigStatus) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_ProxyConfigStatus) GetActiveConfigSource() Device_Status_ProxyConfigStatus_ProxyConfigSource {
	if m != nil {
		return m.ActiveConfigSource
	}
	return Device_Status_ProxyConfigStatus_NO_CONFIG
}

func (m *Device_Status_ProxyConfigStatus) GetDesiredConfigSource() Device_Status_ProxyConfigStatus_ProxyConfigSource {
	if m != nil {
		return m.DesiredConfigSource
	}
	return Device_Status_ProxyConfigStatus_NO_CONFIG
}

func (m *Device_Status_ProxyConfigStatus) GetProxyConfigError() string {
	if m != nil {
		return m.ProxyConfigError
	}
	return ""
}

func (m *Device_Status_ProxyConfigStatus) GetDefaultConfig() *Device_Spec_ProxyConfig {
	if m != nil {
		return m.DefaultConfig
	}
	return nil
}

func (m *Device_Status_ProxyConfigStatus) GetActiveConfig() *Device_Spec_ProxyConfig {
	if m != nil {
		return m.ActiveConfig
	}
	return nil
}

func (m *Device_Status_ProxyConfigStatus) GetApiConfig() *Device_Spec_ProxyConfig {
	if m != nil {
		return m.ApiConfig
	}
	return nil
}

func (m *Device_Status_ProxyConfigStatus) SetActiveConfigSource(fv Device_Status_ProxyConfigStatus_ProxyConfigSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveConfigSource", "Device_Status_ProxyConfigStatus"))
	}
	m.ActiveConfigSource = fv
}

func (m *Device_Status_ProxyConfigStatus) SetDesiredConfigSource(fv Device_Status_ProxyConfigStatus_ProxyConfigSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DesiredConfigSource", "Device_Status_ProxyConfigStatus"))
	}
	m.DesiredConfigSource = fv
}

func (m *Device_Status_ProxyConfigStatus) SetProxyConfigError(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyConfigError", "Device_Status_ProxyConfigStatus"))
	}
	m.ProxyConfigError = fv
}

func (m *Device_Status_ProxyConfigStatus) SetDefaultConfig(fv *Device_Spec_ProxyConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DefaultConfig", "Device_Status_ProxyConfigStatus"))
	}
	m.DefaultConfig = fv
}

func (m *Device_Status_ProxyConfigStatus) SetActiveConfig(fv *Device_Spec_ProxyConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveConfig", "Device_Status_ProxyConfigStatus"))
	}
	m.ActiveConfig = fv
}

func (m *Device_Status_ProxyConfigStatus) SetApiConfig(fv *Device_Spec_ProxyConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ApiConfig", "Device_Status_ProxyConfigStatus"))
	}
	m.ApiConfig = fv
}

// Device Information
type Device_Status_DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The architecture of the CPU (and the software compilied for) (e.g.
	// `arm64`)
	Architecture string `protobuf:"bytes,1,opt,name=architecture,proto3" json:"architecture,omitempty" firestore:"architecture"`
	// Base OS name (e.g. `Linux`)
	OperatingSystem string `protobuf:"bytes,2,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty" firestore:"operatingSystem"`
	// OS kernel version
	KernelVersion string `protobuf:"bytes,3,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty" firestore:"kernelVersion"`
	// OS base Image name
	OsImage string `protobuf:"bytes,4,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty" firestore:"osImage"`
	// Not used
	ContainerRuntimeVersion string `protobuf:"bytes,5,opt,name=container_runtime_version,json=containerRuntimeVersion,proto3" json:"container_runtime_version,omitempty" firestore:"containerRuntimeVersion"`
	// Liquid OS version currently used.
	OsVersion string `protobuf:"bytes,6,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty" firestore:"osVersion"`
	// Container driver name (e.g. `/var/lib/droplet/compose`)
	Driver                    string                                                `protobuf:"bytes,101,opt,name=driver,proto3" json:"driver,omitempty" firestore:"driver"`
	HardwareInformation       *Device_Status_DeviceInfo_HardwareInformation         `protobuf:"bytes,102,opt,name=hardware_information,json=hardwareInformation,proto3" json:"hardware_information,omitempty" firestore:"hardwareInformation"`
	NetworkInterfaces         map[string]*Device_Status_DeviceInfo_NetworkInterface `protobuf:"bytes,103,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"networkInterfaces"`
	ControlPlaneInterfaceInfo *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo   `protobuf:"bytes,104,opt,name=control_plane_interface_info,json=controlPlaneInterfaceInfo,proto3" json:"control_plane_interface_info,omitempty" firestore:"controlPlaneInterfaceInfo"`
}

func (m *Device_Status_DeviceInfo) Reset() {
	*m = Device_Status_DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4}
}

func (m *Device_Status_DeviceInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetContainerRuntimeVersion() string {
	if m != nil {
		return m.ContainerRuntimeVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetHardwareInformation() *Device_Status_DeviceInfo_HardwareInformation {
	if m != nil {
		return m.HardwareInformation
	}
	return nil
}

func (m *Device_Status_DeviceInfo) GetNetworkInterfaces() map[string]*Device_Status_DeviceInfo_NetworkInterface {
	if m != nil {
		return m.NetworkInterfaces
	}
	return nil
}

func (m *Device_Status_DeviceInfo) GetControlPlaneInterfaceInfo() *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo {
	if m != nil {
		return m.ControlPlaneInterfaceInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo) SetArchitecture(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Architecture", "Device_Status_DeviceInfo"))
	}
	m.Architecture = fv
}

func (m *Device_Status_DeviceInfo) SetOperatingSystem(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatingSystem", "Device_Status_DeviceInfo"))
	}
	m.OperatingSystem = fv
}

func (m *Device_Status_DeviceInfo) SetKernelVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "KernelVersion", "Device_Status_DeviceInfo"))
	}
	m.KernelVersion = fv
}

func (m *Device_Status_DeviceInfo) SetOsImage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsImage", "Device_Status_DeviceInfo"))
	}
	m.OsImage = fv
}

func (m *Device_Status_DeviceInfo) SetContainerRuntimeVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerRuntimeVersion", "Device_Status_DeviceInfo"))
	}
	m.ContainerRuntimeVersion = fv
}

func (m *Device_Status_DeviceInfo) SetOsVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsVersion", "Device_Status_DeviceInfo"))
	}
	m.OsVersion = fv
}

func (m *Device_Status_DeviceInfo) SetDriver(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Driver", "Device_Status_DeviceInfo"))
	}
	m.Driver = fv
}

func (m *Device_Status_DeviceInfo) SetHardwareInformation(fv *Device_Status_DeviceInfo_HardwareInformation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareInformation", "Device_Status_DeviceInfo"))
	}
	m.HardwareInformation = fv
}

func (m *Device_Status_DeviceInfo) SetNetworkInterfaces(fv map[string]*Device_Status_DeviceInfo_NetworkInterface) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetworkInterfaces", "Device_Status_DeviceInfo"))
	}
	m.NetworkInterfaces = fv
}

func (m *Device_Status_DeviceInfo) SetControlPlaneInterfaceInfo(fv *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ControlPlaneInterfaceInfo", "Device_Status_DeviceInfo"))
	}
	m.ControlPlaneInterfaceInfo = fv
}

type Device_Status_NormalizedAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Postal code
	PostalCode string `protobuf:"bytes,1,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty" firestore:"postalCode"`
	// Country code example US, JP
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty" firestore:"countryCode"`
	// Continent, e.g. North America, Asia
	Continent   string `protobuf:"bytes,3,opt,name=continent,proto3" json:"continent,omitempty" firestore:"continent"`
	ContinentId string `protobuf:"bytes,4,opt,name=continent_id,json=continentId,proto3" json:"continent_id,omitempty" firestore:"continentId"`
	// Country name example United States, Japan
	Country   string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty" firestore:"country"`
	CountryId string `protobuf:"bytes,6,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty" firestore:"countryId"`
	// Probe Location Administrative Area level 1 name, e.g. California
	// (state), Chiba (prefecture)
	AdminArea1   string `protobuf:"bytes,7,opt,name=admin_area1,json=adminArea1,proto3" json:"admin_area1,omitempty" firestore:"adminArea1"`
	AdminArea1Id string `protobuf:"bytes,8,opt,name=admin_area1_id,json=adminArea1Id,proto3" json:"admin_area1_id,omitempty" firestore:"adminArea1Id"`
	// Probe Location Administrative Area level 2 name, e.g. Santa Clara
	// (county), Tateyama (town)
	AdminArea2   string `protobuf:"bytes,9,opt,name=admin_area2,json=adminArea2,proto3" json:"admin_area2,omitempty" firestore:"adminArea2"`
	AdminArea2Id string `protobuf:"bytes,10,opt,name=admin_area2_id,json=adminArea2Id,proto3" json:"admin_area2_id,omitempty" firestore:"adminArea2Id"`
	// Probe Location Administrative Area level 3 name, e.g. Sunnyvale (city)
	AdminArea3   string `protobuf:"bytes,11,opt,name=admin_area3,json=adminArea3,proto3" json:"admin_area3,omitempty" firestore:"adminArea3"`
	AdminArea3Id string `protobuf:"bytes,12,opt,name=admin_area3_id,json=adminArea3Id,proto3" json:"admin_area3_id,omitempty" firestore:"adminArea3Id"`
	// Probe Location Administrative Area level 4 name, e.g. Sunnyvale (city)
	AdminArea4   string `protobuf:"bytes,13,opt,name=admin_area4,json=adminArea4,proto3" json:"admin_area4,omitempty" firestore:"adminArea4"`
	AdminArea4Id string `protobuf:"bytes,14,opt,name=admin_area4_id,json=adminArea4Id,proto3" json:"admin_area4_id,omitempty" firestore:"adminArea4Id"`
	// Original address.
	Address string `protobuf:"bytes,15,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	// coordinates
	Coordinates *latlng.LatLng `protobuf:"bytes,16,opt,name=coordinates,proto3" json:"coordinates,omitempty" firestore:"coordinates"`
	// location accuracy in meters
	Accuracy float64 `protobuf:"fixed64,17,opt,name=accuracy,proto3" json:"accuracy,omitempty" firestore:"accuracy"`
}

func (m *Device_Status_NormalizedAddress) Reset() {
	*m = Device_Status_NormalizedAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_NormalizedAddress) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_NormalizedAddress) ProtoMessage() {}

func (m *Device_Status_NormalizedAddress) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_NormalizedAddress) GotenMessage() {}

// Deprecated, Use Device_Status_NormalizedAddress.ProtoReflect.Descriptor instead.
func (*Device_Status_NormalizedAddress) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 5}
}

func (m *Device_Status_NormalizedAddress) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_NormalizedAddress) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_NormalizedAddress) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_NormalizedAddress) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_NormalizedAddress) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetContinent() string {
	if m != nil {
		return m.Continent
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetContinentId() string {
	if m != nil {
		return m.ContinentId
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetCountryId() string {
	if m != nil {
		return m.CountryId
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea1() string {
	if m != nil {
		return m.AdminArea1
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea1Id() string {
	if m != nil {
		return m.AdminArea1Id
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea2() string {
	if m != nil {
		return m.AdminArea2
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea2Id() string {
	if m != nil {
		return m.AdminArea2Id
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea3() string {
	if m != nil {
		return m.AdminArea3
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea3Id() string {
	if m != nil {
		return m.AdminArea3Id
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea4() string {
	if m != nil {
		return m.AdminArea4
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAdminArea4Id() string {
	if m != nil {
		return m.AdminArea4Id
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Device_Status_NormalizedAddress) GetCoordinates() *latlng.LatLng {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *Device_Status_NormalizedAddress) GetAccuracy() float64 {
	if m != nil {
		return m.Accuracy
	}
	return float64(0)
}

func (m *Device_Status_NormalizedAddress) SetPostalCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PostalCode", "Device_Status_NormalizedAddress"))
	}
	m.PostalCode = fv
}

func (m *Device_Status_NormalizedAddress) SetCountryCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CountryCode", "Device_Status_NormalizedAddress"))
	}
	m.CountryCode = fv
}

func (m *Device_Status_NormalizedAddress) SetContinent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Continent", "Device_Status_NormalizedAddress"))
	}
	m.Continent = fv
}

func (m *Device_Status_NormalizedAddress) SetContinentId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContinentId", "Device_Status_NormalizedAddress"))
	}
	m.ContinentId = fv
}

func (m *Device_Status_NormalizedAddress) SetCountry(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Country", "Device_Status_NormalizedAddress"))
	}
	m.Country = fv
}

func (m *Device_Status_NormalizedAddress) SetCountryId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CountryId", "Device_Status_NormalizedAddress"))
	}
	m.CountryId = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea1(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea1", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea1 = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea1Id(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea1Id", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea1Id = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea2(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea2", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea2 = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea2Id(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea2Id", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea2Id = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea3(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea3", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea3 = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea3Id(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea3Id", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea3Id = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea4", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea4 = fv
}

func (m *Device_Status_NormalizedAddress) SetAdminArea4Id(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea4Id", "Device_Status_NormalizedAddress"))
	}
	m.AdminArea4Id = fv
}

func (m *Device_Status_NormalizedAddress) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "Device_Status_NormalizedAddress"))
	}
	m.Address = fv
}

func (m *Device_Status_NormalizedAddress) SetCoordinates(fv *latlng.LatLng) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Coordinates", "Device_Status_NormalizedAddress"))
	}
	m.Coordinates = fv
}

func (m *Device_Status_NormalizedAddress) SetAccuracy(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Accuracy", "Device_Status_NormalizedAddress"))
	}
	m.Accuracy = fv
}

type Device_Status_DeviceInfo_HardwareInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Os            *Device_Status_DeviceInfo_HardwareInformation_OS            `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty" firestore:"os"`
	Bios          *Device_Status_DeviceInfo_HardwareInformation_BIOS          `protobuf:"bytes,2,opt,name=bios,proto3" json:"bios,omitempty" firestore:"bios"`
	System        *Device_Status_DeviceInfo_HardwareInformation_System        `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty" firestore:"system"`
	Cpu           *Device_Status_DeviceInfo_HardwareInformation_CPU           `protobuf:"bytes,4,opt,name=cpu,proto3" json:"cpu,omitempty" firestore:"cpu"`
	Block         *Device_Status_DeviceInfo_HardwareInformation_Block         `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty" firestore:"block"`
	Network       *Device_Status_DeviceInfo_HardwareInformation_Network       `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty" firestore:"network"`
	Gpu           *Device_Status_DeviceInfo_HardwareInformation_GPU           `protobuf:"bytes,7,opt,name=gpu,proto3" json:"gpu,omitempty" firestore:"gpu"`
	MemoryInfo    *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo    `protobuf:"bytes,8,opt,name=memory_info,json=memoryInfo,proto3" json:"memory_info,omitempty" firestore:"memoryInfo"`
	HailoInfo     *Device_Status_DeviceInfo_HardwareInformation_HailoInfo     `protobuf:"bytes,20,opt,name=hailo_info,json=hailoInfo,proto3" json:"hailo_info,omitempty" firestore:"hailoInfo"`
	NvidiaInfo    *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo    `protobuf:"bytes,21,opt,name=nvidia_info,json=nvidiaInfo,proto3" json:"nvidia_info,omitempty" firestore:"nvidiaInfo"`
	ModemStatus   []*Device_Status_DeviceInfo_HardwareInformation_ModemStatus `protobuf:"bytes,22,rep,name=modem_status,json=modemStatus,proto3" json:"modem_status,omitempty" firestore:"modemStatus"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetOs() *Device_Status_DeviceInfo_HardwareInformation_OS {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetBios() *Device_Status_DeviceInfo_HardwareInformation_BIOS {
	if m != nil {
		return m.Bios
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetSystem() *Device_Status_DeviceInfo_HardwareInformation_System {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetCpu() *Device_Status_DeviceInfo_HardwareInformation_CPU {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetBlock() *Device_Status_DeviceInfo_HardwareInformation_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetNetwork() *Device_Status_DeviceInfo_HardwareInformation_Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetGpu() *Device_Status_DeviceInfo_HardwareInformation_GPU {
	if m != nil {
		return m.Gpu
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetMemoryInfo() *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo {
	if m != nil {
		return m.MemoryInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetHailoInfo() *Device_Status_DeviceInfo_HardwareInformation_HailoInfo {
	if m != nil {
		return m.HailoInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetNvidiaInfo() *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo {
	if m != nil {
		return m.NvidiaInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetModemStatus() []*Device_Status_DeviceInfo_HardwareInformation_ModemStatus {
	if m != nil {
		return m.ModemStatus
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetOs(fv *Device_Status_DeviceInfo_HardwareInformation_OS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Os", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Os = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetBios(fv *Device_Status_DeviceInfo_HardwareInformation_BIOS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bios", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Bios = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetSystem(fv *Device_Status_DeviceInfo_HardwareInformation_System) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "System", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.System = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetCpu(fv *Device_Status_DeviceInfo_HardwareInformation_CPU) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cpu", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Cpu = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetBlock(fv *Device_Status_DeviceInfo_HardwareInformation_Block) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Block", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Block = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetNetwork(fv *Device_Status_DeviceInfo_HardwareInformation_Network) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Network", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Network = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetGpu(fv *Device_Status_DeviceInfo_HardwareInformation_GPU) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gpu", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Gpu = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetMemoryInfo(fv *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryInfo", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.MemoryInfo = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetHailoInfo(fv *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HailoInfo", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.HailoInfo = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetNvidiaInfo(fv *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NvidiaInfo", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.NvidiaInfo = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetModemStatus(fv []*Device_Status_DeviceInfo_HardwareInformation_ModemStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModemStatus", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.ModemStatus = fv
}

// Network Interface
type Device_Status_DeviceInfo_NetworkInterface struct {
	state               protoimpl.MessageState
	sizeCache           protoimpl.SizeCache
	unknownFields       protoimpl.UnknownFields
	InterfaceName       string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty" firestore:"interfaceName"`
	IpAddressV4         []string `protobuf:"bytes,2,rep,name=ip_address_v4,json=ipAddressV4,proto3" json:"ip_address_v4,omitempty" firestore:"ipAddressV4"`
	ExternalIpAddressV4 []string `protobuf:"bytes,3,rep,name=external_ip_address_v4,json=externalIpAddressV4,proto3" json:"external_ip_address_v4,omitempty" firestore:"externalIpAddressV4"`
	IpAddressV6         []string `protobuf:"bytes,4,rep,name=ip_address_v6,json=ipAddressV6,proto3" json:"ip_address_v6,omitempty" firestore:"ipAddressV6"`
	ExternalIpAddressV6 []string `protobuf:"bytes,5,rep,name=external_ip_address_v6,json=externalIpAddressV6,proto3" json:"external_ip_address_v6,omitempty" firestore:"externalIpAddressV6"`
	// Asinfo describes the ISP (ASN) details for the interface
	// This is resolved automatically from the external_ip_address.
	AsInfo *Device_Status_DeviceInfo_NetworkInterface_ASInfo `protobuf:"bytes,10,opt,name=as_info,json=asInfo,proto3" json:"as_info,omitempty" firestore:"asInfo"`
	// Carrier.
	Carrier *Device_Status_DeviceInfo_NetworkInterface_Carrier `protobuf:"bytes,14,opt,name=carrier,proto3" json:"carrier,omitempty" firestore:"carrier"`
}

func (m *Device_Status_DeviceInfo_NetworkInterface) Reset() {
	*m = Device_Status_DeviceInfo_NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_NetworkInterface) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_NetworkInterface.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_NetworkInterface) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 1}
}

func (m *Device_Status_DeviceInfo_NetworkInterface) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetIpAddressV4() []string {
	if m != nil {
		return m.IpAddressV4
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetExternalIpAddressV4() []string {
	if m != nil {
		return m.ExternalIpAddressV4
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetIpAddressV6() []string {
	if m != nil {
		return m.IpAddressV6
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetExternalIpAddressV6() []string {
	if m != nil {
		return m.ExternalIpAddressV6
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetAsInfo() *Device_Status_DeviceInfo_NetworkInterface_ASInfo {
	if m != nil {
		return m.AsInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) GetCarrier() *Device_Status_DeviceInfo_NetworkInterface_Carrier {
	if m != nil {
		return m.Carrier
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetInterfaceName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "InterfaceName", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.InterfaceName = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetIpAddressV4(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAddressV4", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.IpAddressV4 = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetExternalIpAddressV4(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExternalIpAddressV4", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.ExternalIpAddressV4 = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetIpAddressV6(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAddressV6", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.IpAddressV6 = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetExternalIpAddressV6(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExternalIpAddressV6", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.ExternalIpAddressV6 = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetAsInfo(fv *Device_Status_DeviceInfo_NetworkInterface_ASInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AsInfo", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.AsInfo = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface) SetCarrier(fv *Device_Status_DeviceInfo_NetworkInterface_Carrier) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Carrier", "Device_Status_DeviceInfo_NetworkInterface"))
	}
	m.Carrier = fv
}

type Device_Status_DeviceInfo_ControlPlaneInterfaceInfo struct {
	state                       protoimpl.MessageState
	sizeCache                   protoimpl.SizeCache
	unknownFields               protoimpl.UnknownFields
	ActiveControlPlaneInterface string `protobuf:"bytes,1,opt,name=active_control_plane_interface,json=activeControlPlaneInterface,proto3" json:"active_control_plane_interface,omitempty" firestore:"activeControlPlaneInterface"`
	UsesProxy                   bool   `protobuf:"varint,2,opt,name=usesProxy,proto3" json:"usesProxy,omitempty" firestore:"usesProxy"`
	// is_fallback would be true if droplet could not connect using the best
	// default route and explicitly uses this interface to connect to api
	// endpoint
	IsFallback bool `protobuf:"varint,3,opt,name=is_fallback,json=isFallback,proto3" json:"is_fallback,omitempty" firestore:"isFallback"`
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) Reset() {
	*m = Device_Status_DeviceInfo_ControlPlaneInterfaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_ControlPlaneInterfaceInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 3}
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) GetActiveControlPlaneInterface() string {
	if m != nil {
		return m.ActiveControlPlaneInterface
	}
	return ""
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) GetUsesProxy() bool {
	if m != nil {
		return m.UsesProxy
	}
	return false
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) GetIsFallback() bool {
	if m != nil {
		return m.IsFallback
	}
	return false
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) SetActiveControlPlaneInterface(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveControlPlaneInterface", "Device_Status_DeviceInfo_ControlPlaneInterfaceInfo"))
	}
	m.ActiveControlPlaneInterface = fv
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) SetUsesProxy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UsesProxy", "Device_Status_DeviceInfo_ControlPlaneInterfaceInfo"))
	}
	m.UsesProxy = fv
}

func (m *Device_Status_DeviceInfo_ControlPlaneInterfaceInfo) SetIsFallback(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsFallback", "Device_Status_DeviceInfo_ControlPlaneInterfaceInfo"))
	}
	m.IsFallback = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Capability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Capability{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Capability) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Capability) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Capability.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Capability) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Capability"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_Capability"))
	}
	m.Description = fv
}

type Device_Status_DeviceInfo_HardwareInformation_OS struct {
	state                   protoimpl.MessageState
	sizeCache               protoimpl.SizeCache
	unknownFields           protoimpl.UnknownFields
	OperatingSystem         string `protobuf:"bytes,1,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty" firestore:"operatingSystem"`
	KernelVersion           string `protobuf:"bytes,2,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty" firestore:"kernelVersion"`
	OsImage                 string `protobuf:"bytes,3,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty" firestore:"osImage"`
	ContainerRuntimeVersion string `protobuf:"bytes,4,opt,name=container_runtime_version,json=containerRuntimeVersion,proto3" json:"container_runtime_version,omitempty" firestore:"containerRuntimeVersion"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_OS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_OS) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_OS) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_OS.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_OS) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 1}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetContainerRuntimeVersion() string {
	if m != nil {
		return m.ContainerRuntimeVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetOperatingSystem(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatingSystem", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.OperatingSystem = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetKernelVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "KernelVersion", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.KernelVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetOsImage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsImage", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.OsImage = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetContainerRuntimeVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerRuntimeVersion", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.ContainerRuntimeVersion = fv
}

// TODO: Add capabilities and size
type Device_Status_DeviceInfo_HardwareInformation_BIOS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Vendor        string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	BiosVersion   string `protobuf:"bytes,2,opt,name=bios_version,json=biosVersion,proto3" json:"bios_version,omitempty" firestore:"biosVersion"`
	ReleaseDate   string `protobuf:"bytes,3,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty" firestore:"releaseDate"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_BIOS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_BIOS) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_BIOS) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_BIOS.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_BIOS) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 2}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) GetBiosVersion() string {
	if m != nil {
		return m.BiosVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) GetReleaseDate() string {
	if m != nil {
		return m.ReleaseDate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_BIOS"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) SetBiosVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BiosVersion", "Device_Status_DeviceInfo_HardwareInformation_BIOS"))
	}
	m.BiosVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) SetReleaseDate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReleaseDate", "Device_Status_DeviceInfo_HardwareInformation_BIOS"))
	}
	m.ReleaseDate = fv
}

type Device_Status_DeviceInfo_HardwareInformation_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Manufacturer  string                                                             `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty" firestore:"manufacturer"`
	ProductName   string                                                             `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty" firestore:"productName"`
	Version       string                                                             `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" firestore:"version"`
	SerialNumber  string                                                             `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" firestore:"serialNumber"`
	Configuration *Device_Status_DeviceInfo_HardwareInformation_System_Configuration `protobuf:"bytes,5,opt,name=configuration,proto3" json:"configuration,omitempty" firestore:"configuration"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_System{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_System.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_System) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 3}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetConfiguration() *Device_Status_DeviceInfo_HardwareInformation_System_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetManufacturer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Manufacturer", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.Manufacturer = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetProductName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProductName", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.ProductName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Version", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.Version = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetSerialNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SerialNumber", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.SerialNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetConfiguration(fv *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Configuration", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.Configuration = fv
}

type Device_Status_DeviceInfo_HardwareInformation_CPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Processors    []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor `protobuf:"bytes,1,rep,name=processors,proto3" json:"processors,omitempty" firestore:"processors"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_CPU{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_CPU.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_CPU) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 4}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) GetProcessors() []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor {
	if m != nil {
		return m.Processors
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) SetProcessors(fv []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Processors", "Device_Status_DeviceInfo_HardwareInformation_CPU"))
	}
	m.Processors = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Disks         []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty" firestore:"disks"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Block{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Block.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Block) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 5}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) GetDisks() []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk {
	if m != nil {
		return m.Disks
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) SetDisks(fv []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Disks", "Device_Status_DeviceInfo_HardwareInformation_Block"))
	}
	m.Disks = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Nics          []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC `protobuf:"bytes,1,rep,name=nics,proto3" json:"nics,omitempty" firestore:"nics"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Network.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Network) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 6}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) GetNics() []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC {
	if m != nil {
		return m.Nics
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) SetNics(fv []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nics", "Device_Status_DeviceInfo_HardwareInformation_Network"))
	}
	m.Nics = fv
}

type Device_Status_DeviceInfo_HardwareInformation_GPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	GraphicCards  []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard `protobuf:"bytes,1,rep,name=graphic_cards,json=graphicCards,proto3" json:"graphic_cards,omitempty" firestore:"graphicCards"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_GPU{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_GPU.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_GPU) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 7}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) GetGraphicCards() []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard {
	if m != nil {
		return m.GraphicCards
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) SetGraphicCards(fv []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GraphicCards", "Device_Status_DeviceInfo_HardwareInformation_GPU"))
	}
	m.GraphicCards = fv
}

// Revisit: May be just device ??
type Device_Status_DeviceInfo_HardwareInformation_PCIDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	Vendor        string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Product       string `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty" firestore:"product"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Subvendor     string `protobuf:"bytes,5,opt,name=subvendor,proto3" json:"subvendor,omitempty" firestore:"subvendor"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_PCIDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_PCIDevice.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 8}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetSubvendor() string {
	if m != nil {
		return m.Subvendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Address = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetProduct(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Product", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Product = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetSubvendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Subvendor", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Subvendor = fv
}

type Device_Status_DeviceInfo_HardwareInformation_MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Memory        []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory `protobuf:"bytes,1,rep,name=memory,proto3" json:"memory,omitempty" firestore:"memory"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_MemoryInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 9}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) GetMemory() []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) SetMemory(fv []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Memory", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo"))
	}
	m.Memory = fv
}

type Device_Status_DeviceInfo_HardwareInformation_HailoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Status        string                                                                    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	CliVersion    string                                                                    `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty" firestore:"cliVersion"`
	Modules       []*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo `protobuf:"bytes,10,rep,name=modules,proto3" json:"modules,omitempty" firestore:"modules"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_HailoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_HailoInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 10}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) GetCliVersion() string {
	if m != nil {
		return m.CliVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) GetModules() []*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) SetStatus(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo"))
	}
	m.Status = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) SetCliVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CliVersion", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo"))
	}
	m.CliVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo) SetModules(fv []*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Modules", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo"))
	}
	m.Modules = fv
}

type Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Status        string                                                             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	DriverVersion string                                                             `protobuf:"bytes,2,opt,name=driver_version,json=driverVersion,proto3" json:"driver_version,omitempty" firestore:"driverVersion"`
	CudaVersion   string                                                             `protobuf:"bytes,3,opt,name=cuda_version,json=cudaVersion,proto3" json:"cuda_version,omitempty" firestore:"cudaVersion"`
	Gpus          []*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo `protobuf:"bytes,10,rep,name=gpus,proto3" json:"gpus,omitempty" firestore:"gpus"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 11}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) GetDriverVersion() string {
	if m != nil {
		return m.DriverVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) GetCudaVersion() string {
	if m != nil {
		return m.CudaVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) GetGpus() []*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo {
	if m != nil {
		return m.Gpus
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) SetStatus(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo"))
	}
	m.Status = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) SetDriverVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DriverVersion", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo"))
	}
	m.DriverVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) SetCudaVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CudaVersion", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo"))
	}
	m.CudaVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo) SetGpus(fv []*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gpus", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo"))
	}
	m.Gpus = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Modem         *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem `protobuf:"bytes,1,opt,name=modem,proto3" json:"modem,omitempty" firestore:"modem"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) GetModem() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem {
	if m != nil {
		return m.Modem
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus) SetModem(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Modem", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus"))
	}
	m.Modem = fv
}

type Device_Status_DeviceInfo_HardwareInformation_System_Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Chassis       string `protobuf:"bytes,1,opt,name=chassis,proto3" json:"chassis,omitempty" firestore:"chassis"`
	Uuid          string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty" firestore:"uuid"`
	SkuNumber     string `protobuf:"bytes,3,opt,name=sku_number,json=skuNumber,proto3" json:"sku_number,omitempty" firestore:"skuNumber"`
	Family        string `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty" firestore:"family"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_System_Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_System_Configuration.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 3, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetChassis() string {
	if m != nil {
		return m.Chassis
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetSkuNumber() string {
	if m != nil {
		return m.SkuNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetChassis(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Chassis", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.Chassis = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetUuid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Uuid", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.Uuid = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetSkuNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SkuNumber", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.SkuNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetFamily(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Family", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.Family = fv
}

type Device_Status_DeviceInfo_HardwareInformation_CPU_Processor struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	Vendor          string                                                              `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Model           string                                                              `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty" firestore:"model"`
	Capabilities    []*Device_Status_DeviceInfo_HardwareInformation_Capability          `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty" firestore:"capabilities"`
	NumThreads      uint32                                                              `protobuf:"varint,4,opt,name=num_threads,json=numThreads,proto3" json:"num_threads,omitempty" firestore:"numThreads"`
	NumCores        uint32                                                              `protobuf:"varint,5,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty" firestore:"numCores"`
	NumEnabledCores uint32                                                              `protobuf:"varint,6,opt,name=num_enabled_cores,json=numEnabledCores,proto3" json:"num_enabled_cores,omitempty" firestore:"numEnabledCores"`
	Name            string                                                              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Serial          string                                                              `protobuf:"bytes,8,opt,name=serial,proto3" json:"serial,omitempty" firestore:"serial"`
	FrequencyMhz    int64                                                               `protobuf:"varint,9,opt,name=frequency_mhz,json=frequencyMhz,proto3" json:"frequency_mhz,omitempty" firestore:"frequencyMhz"`
	MaxFrequencyMhz int64                                                               `protobuf:"varint,10,opt,name=max_frequency_mhz,json=maxFrequencyMhz,proto3" json:"max_frequency_mhz,omitempty" firestore:"maxFrequencyMhz"`
	CacheInfo       []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache `protobuf:"bytes,11,rep,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty" firestore:"cacheInfo"`
	Driver          string                                                              `protobuf:"bytes,12,opt,name=driver,proto3" json:"driver,omitempty" firestore:"driver"`
	Latency         int64                                                               `protobuf:"varint,13,opt,name=latency,proto3" json:"latency,omitempty" firestore:"latency"`
	Clock           int64                                                               `protobuf:"varint,14,opt,name=clock,proto3" json:"clock,omitempty" firestore:"clock"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_CPU_Processor{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_CPU_Processor.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 4, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetCapabilities() []*Device_Status_DeviceInfo_HardwareInformation_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetNumThreads() uint32 {
	if m != nil {
		return m.NumThreads
	}
	return uint32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetNumCores() uint32 {
	if m != nil {
		return m.NumCores
	}
	return uint32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetNumEnabledCores() uint32 {
	if m != nil {
		return m.NumEnabledCores
	}
	return uint32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetFrequencyMhz() int64 {
	if m != nil {
		return m.FrequencyMhz
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetMaxFrequencyMhz() int64 {
	if m != nil {
		return m.MaxFrequencyMhz
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetCacheInfo() []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache {
	if m != nil {
		return m.CacheInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetLatency() int64 {
	if m != nil {
		return m.Latency
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Model = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetCapabilities(fv []*Device_Status_DeviceInfo_HardwareInformation_Capability) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Capabilities", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Capabilities = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetNumThreads(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NumThreads", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.NumThreads = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetNumCores(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NumCores", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.NumCores = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetNumEnabledCores(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NumEnabledCores", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.NumEnabledCores = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetSerial(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Serial", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Serial = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetFrequencyMhz(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FrequencyMhz", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.FrequencyMhz = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetMaxFrequencyMhz(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxFrequencyMhz", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.MaxFrequencyMhz = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetCacheInfo(fv []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CacheInfo", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.CacheInfo = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetDriver(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Driver", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Driver = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetLatency(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Latency", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Latency = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetClock(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Clock", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Clock = fv
}

type Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Type          string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	SizeBytes     int64  `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 4, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache"))
	}
	m.Type = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache"))
	}
	m.SizeBytes = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Block_Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string                                                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	SizeBytes     int64                                                                `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	DriveType     string                                                               `protobuf:"bytes,3,opt,name=drive_type,json=driveType,proto3" json:"drive_type,omitempty" firestore:"driveType"`
	Vendor        string                                                               `protobuf:"bytes,4,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Model         string                                                               `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty" firestore:"model"`
	SerialNumber  string                                                               `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" firestore:"serialNumber"`
	Wwn           string                                                               `protobuf:"bytes,7,opt,name=wwn,proto3" json:"wwn,omitempty" firestore:"wwn"`
	Partitions    []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition `protobuf:"bytes,8,rep,name=partitions,proto3" json:"partitions,omitempty" firestore:"partitions"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Block_Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Block_Disk.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 5, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetDriveType() string {
	if m != nil {
		return m.DriveType
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetWwn() string {
	if m != nil {
		return m.Wwn
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetPartitions() []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetDriveType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DriveType", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.DriveType = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Model = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetSerialNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SerialNumber", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.SerialNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetWwn(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Wwn", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Wwn = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetPartitions(fv []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Partitions", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Partitions = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	SizeBytes     int64  `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	MountPoint    string `protobuf:"bytes,3,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty" firestore:"mountPoint"`
	Type          string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 5, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetMountPoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MountPoint", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.MountPoint = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.Type = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Network_NIC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	MacAddress    string            `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty" firestore:"macAddress"`
	Virtual       bool              `protobuf:"varint,3,opt,name=virtual,proto3" json:"virtual,omitempty" firestore:"virtual"`
	Description   string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	ProductName   string            `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty" firestore:"productName"`
	Vendor        string            `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Subvendor     string            `protobuf:"bytes,7,opt,name=subvendor,proto3" json:"subvendor,omitempty" firestore:"subvendor"`
	Setting       map[string]string `protobuf:"bytes,8,rep,name=setting,proto3" json:"setting,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"setting"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Network_NIC{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Network_NIC.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 6, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetVirtual() bool {
	if m != nil {
		return m.Virtual
	}
	return false
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetSubvendor() string {
	if m != nil {
		return m.Subvendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetSetting() map[string]string {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetMacAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MacAddress", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.MacAddress = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetVirtual(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Virtual", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Virtual = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Description = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetProductName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProductName", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.ProductName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetSubvendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Subvendor", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Subvendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetSetting(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Setting", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Setting = fv
}

type Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Index         int64                                                   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" firestore:"index"`
	Device        *Device_Status_DeviceInfo_HardwareInformation_PCIDevice `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty" firestore:"device"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 7, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) GetDevice() *Device_Status_DeviceInfo_HardwareInformation_PCIDevice {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) SetIndex(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Index", "Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard"))
	}
	m.Index = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) SetDevice(fv *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Device", "Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard"))
	}
	m.Device = fv
}

type Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Description   string                                                                       `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	SizeBytes     int64                                                                        `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	MemoryBanks   []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank `protobuf:"bytes,3,rep,name=memory_banks,json=memoryBanks,proto3" json:"memory_banks,omitempty" firestore:"memoryBanks"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 9, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GetMemoryBanks() []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank {
	if m != nil {
		return m.MemoryBanks
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory"))
	}
	m.Description = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) SetMemoryBanks(fv []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryBanks", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory"))
	}
	m.MemoryBanks = fv
}

type Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Description   string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	Product       string `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty" firestore:"product"`
	Vendor        string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Serial        string `protobuf:"bytes,4,opt,name=serial,proto3" json:"serial,omitempty" firestore:"serial"`
	Slot          string `protobuf:"bytes,5,opt,name=slot,proto3" json:"slot,omitempty" firestore:"slot"`
	SizeBytes     int64  `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	FrequencyHz   int64  `protobuf:"varint,7,opt,name=frequency_hz,json=frequencyHz,proto3" json:"frequency_hz,omitempty" firestore:"frequencyHz"`
	WidthBits     int32  `protobuf:"varint,8,opt,name=width_bits,json=widthBits,proto3" json:"width_bits,omitempty" firestore:"widthBits"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 9, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetSlot() string {
	if m != nil {
		return m.Slot
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetFrequencyHz() int64 {
	if m != nil {
		return m.FrequencyHz
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetWidthBits() int32 {
	if m != nil {
		return m.WidthBits
	}
	return int32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Description = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetProduct(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Product", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Product = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetSerial(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Serial", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Serial = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetSlot(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Slot", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Slot = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetFrequencyHz(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FrequencyHz", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.FrequencyHz = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetWidthBits(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WidthBits", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.WidthBits = fv
}

type Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo struct {
	state                      protoimpl.MessageState
	sizeCache                  protoimpl.SizeCache
	unknownFields              protoimpl.UnknownFields
	DevId                      string `protobuf:"bytes,1,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty" firestore:"devId"`
	ControlProtoVersion        string `protobuf:"bytes,2,opt,name=control_proto_version,json=controlProtoVersion,proto3" json:"control_proto_version,omitempty" firestore:"controlProtoVersion"`
	FirmwareVersion            string `protobuf:"bytes,3,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty" firestore:"firmwareVersion"`
	LoggerVersion              string `protobuf:"bytes,4,opt,name=logger_version,json=loggerVersion,proto3" json:"logger_version,omitempty" firestore:"loggerVersion"`
	BoardName                  string `protobuf:"bytes,5,opt,name=board_name,json=boardName,proto3" json:"board_name,omitempty" firestore:"boardName"`
	SerialNumber               string `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" firestore:"serialNumber"`
	PartNumber                 string `protobuf:"bytes,7,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty" firestore:"partNumber"`
	ProductName                string `protobuf:"bytes,8,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty" firestore:"productName"`
	NeuralNetworkCoreClockRate string `protobuf:"bytes,9,opt,name=neural_network_core_clock_rate,json=neuralNetworkCoreClockRate,proto3" json:"neural_network_core_clock_rate,omitempty" firestore:"neuralNetworkCoreClockRate"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 10, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetControlProtoVersion() string {
	if m != nil {
		return m.ControlProtoVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetLoggerVersion() string {
	if m != nil {
		return m.LoggerVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetBoardName() string {
	if m != nil {
		return m.BoardName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetPartNumber() string {
	if m != nil {
		return m.PartNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) GetNeuralNetworkCoreClockRate() string {
	if m != nil {
		return m.NeuralNetworkCoreClockRate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetDevId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DevId", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.DevId = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetControlProtoVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ControlProtoVersion", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.ControlProtoVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetFirmwareVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FirmwareVersion", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.FirmwareVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetLoggerVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LoggerVersion", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.LoggerVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetBoardName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BoardName", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.BoardName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetSerialNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SerialNumber", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.SerialNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetPartNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PartNumber", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.PartNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetProductName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProductName", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.ProductName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo) SetNeuralNetworkCoreClockRate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NeuralNetworkCoreClockRate", "Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo"))
	}
	m.NeuralNetworkCoreClockRate = fv
}

type Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id"`
	ProductName   string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty" firestore:"productName"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 11, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) SetId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Id", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo"))
	}
	m.Id = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo) SetProductName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProductName", "Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo"))
	}
	m.ProductName = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	DrxCycle      string `protobuf:"bytes,1,opt,name=drx_cycle,json=drxCycle,proto3" json:"drx_cycle,omitempty" firestore:"drxCycle"`
	MicoMode      string `protobuf:"bytes,2,opt,name=mico_mode,json=micoMode,proto3" json:"mico_mode,omitempty" firestore:"micoMode"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) ProtoMessage() {
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) GotenMessage() {
}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) GetDrxCycle() string {
	if m != nil {
		return m.DrxCycle
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) GetMicoMode() string {
	if m != nil {
		return m.MicoMode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) SetDrxCycle(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DrxCycle", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings"))
	}
	m.DrxCycle = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) SetMicoMode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MicoMode", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings"))
	}
	m.MicoMode = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr struct {
	state                protoimpl.MessageState
	sizeCache            protoimpl.SizeCache
	unknownFields        protoimpl.UnknownFields
	RegistrationSettings *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings `protobuf:"bytes,1,opt,name=registration_settings,json=registrationSettings,proto3" json:"registration_settings,omitempty" firestore:"registrationSettings"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 1}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) GetRegistrationSettings() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings {
	if m != nil {
		return m.RegistrationSettings
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) SetRegistrationSettings(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegistrationSettings", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr"))
	}
	m.RegistrationSettings = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Apn           string `protobuf:"bytes,1,opt,name=apn,proto3" json:"apn,omitempty" firestore:"apn"`
	IpType        string `protobuf:"bytes,2,opt,name=ip_type,json=ipType,proto3" json:"ip_type,omitempty" firestore:"ipType"`
	Password      string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" firestore:"password"`
	User          string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty" firestore:"user"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 2}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) GetApn() string {
	if m != nil {
		return m.Apn
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) GetIpType() string {
	if m != nil {
		return m.IpType
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) SetApn(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Apn", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings"))
	}
	m.Apn = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) SetIpType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpType", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings"))
	}
	m.IpType = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) SetPassword(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Password", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings"))
	}
	m.Password = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) SetUser(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "User", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings"))
	}
	m.User = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	DbusPath      string                                                             `protobuf:"bytes,1,opt,name=dbus_path,json=dbusPath,proto3" json:"dbus_path,omitempty" firestore:"dbusPath"`
	Settings      *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty" firestore:"settings"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 3}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) GetDbusPath() string {
	if m != nil {
		return m.DbusPath
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) GetSettings() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) SetDbusPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbusPath", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer"))
	}
	m.DbusPath = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) SetSettings(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Settings", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer"))
	}
	m.Settings = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	InitialBearer   *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer `protobuf:"bytes,1,opt,name=initial_bearer,json=initialBearer,proto3" json:"initial_bearer,omitempty" firestore:"initialBearer"`
	UeModeOperation string                                                                  `protobuf:"bytes,2,opt,name=ue_mode_operation,json=ueModeOperation,proto3" json:"ue_mode_operation,omitempty" firestore:"ueModeOperation"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 4}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) GetInitialBearer() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer {
	if m != nil {
		return m.InitialBearer
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) GetUeModeOperation() string {
	if m != nil {
		return m.UeModeOperation
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) SetInitialBearer(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "InitialBearer", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps"))
	}
	m.InitialBearer = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) SetUeModeOperation(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UeModeOperation", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps"))
	}
	m.UeModeOperation = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp struct {
	state              protoimpl.MessageState
	sizeCache          protoimpl.SizeCache
	unknownFields      protoimpl.UnknownFields
	FivegNr            *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr `protobuf:"bytes,1,opt,name=fiveg_nr,json=fivegNr,proto3" json:"fiveg_nr,omitempty" firestore:"fivegNr"`
	EnabledLocks       []string                                                          `protobuf:"bytes,2,rep,name=enabled_locks,json=enabledLocks,proto3" json:"enabled_locks,omitempty" firestore:"enabledLocks"`
	Eps                *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps     `protobuf:"bytes,3,opt,name=eps,proto3" json:"eps,omitempty" firestore:"eps"`
	Imei               string                                                            `protobuf:"bytes,4,opt,name=imei,proto3" json:"imei,omitempty" firestore:"imei"`
	OperatorCode       string                                                            `protobuf:"bytes,5,opt,name=operator_code,json=operatorCode,proto3" json:"operator_code,omitempty" firestore:"operatorCode"`
	OperatorName       string                                                            `protobuf:"bytes,6,opt,name=operator_name,json=operatorName,proto3" json:"operator_name,omitempty" firestore:"operatorName"`
	PacketServiceState string                                                            `protobuf:"bytes,7,opt,name=packet_service_state,json=packetServiceState,proto3" json:"packet_service_state,omitempty" firestore:"packetServiceState"`
	Pco                string                                                            `protobuf:"bytes,8,opt,name=pco,proto3" json:"pco,omitempty" firestore:"pco"`
	RegistrationState  string                                                            `protobuf:"bytes,9,opt,name=registration_state,json=registrationState,proto3" json:"registration_state,omitempty" firestore:"registrationState"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 5}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetFivegNr() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr {
	if m != nil {
		return m.FivegNr
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetEnabledLocks() []string {
	if m != nil {
		return m.EnabledLocks
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetEps() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps {
	if m != nil {
		return m.Eps
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetOperatorCode() string {
	if m != nil {
		return m.OperatorCode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetOperatorName() string {
	if m != nil {
		return m.OperatorName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetPacketServiceState() string {
	if m != nil {
		return m.PacketServiceState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetPco() string {
	if m != nil {
		return m.Pco
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) GetRegistrationState() string {
	if m != nil {
		return m.RegistrationState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetFivegNr(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FivegNr", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.FivegNr = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetEnabledLocks(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnabledLocks", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.EnabledLocks = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetEps(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Eps", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.Eps = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetImei(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Imei", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.Imei = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetOperatorCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorCode", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.OperatorCode = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetOperatorName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorName", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.OperatorName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetPacketServiceState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PacketServiceState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.PacketServiceState = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetPco(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Pco", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.Pco = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) SetRegistrationState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegistrationState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp"))
	}
	m.RegistrationState = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma struct {
	state                   protoimpl.MessageState
	sizeCache               protoimpl.SizeCache
	unknownFields           protoimpl.UnknownFields
	ActivationState         string `protobuf:"bytes,1,opt,name=activation_state,json=activationState,proto3" json:"activation_state,omitempty" firestore:"activationState"`
	Cdma1XRegistrationState string `protobuf:"bytes,2,opt,name=cdma1x_registration_state,json=cdma1xRegistrationState,proto3" json:"cdma1x_registration_state,omitempty" firestore:"cdma1xRegistrationState"`
	Esn                     string `protobuf:"bytes,3,opt,name=esn,proto3" json:"esn,omitempty" firestore:"esn"`
	EvdoRegistrationState   string `protobuf:"bytes,4,opt,name=evdo_registration_state,json=evdoRegistrationState,proto3" json:"evdo_registration_state,omitempty" firestore:"evdoRegistrationState"`
	Meid                    string `protobuf:"bytes,5,opt,name=meid,proto3" json:"meid,omitempty" firestore:"meid"`
	Nid                     string `protobuf:"bytes,6,opt,name=nid,proto3" json:"nid,omitempty" firestore:"nid"`
	Sid                     string `protobuf:"bytes,7,opt,name=sid,proto3" json:"sid,omitempty" firestore:"sid"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 6}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetActivationState() string {
	if m != nil {
		return m.ActivationState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetCdma1XRegistrationState() string {
	if m != nil {
		return m.Cdma1XRegistrationState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetEsn() string {
	if m != nil {
		return m.Esn
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetEvdoRegistrationState() string {
	if m != nil {
		return m.EvdoRegistrationState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetMeid() string {
	if m != nil {
		return m.Meid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetActivationState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActivationState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.ActivationState = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetCdma1XRegistrationState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cdma1XRegistrationState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.Cdma1XRegistrationState = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetEsn(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Esn", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.Esn = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetEvdoRegistrationState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EvdoRegistrationState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.EvdoRegistrationState = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetMeid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Meid", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.Meid = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetNid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nid", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.Nid = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) SetSid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Sid", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma"))
	}
	m.Sid = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Recent        string `protobuf:"bytes,1,opt,name=recent,proto3" json:"recent,omitempty" firestore:"recent"`
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" firestore:"value"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 7}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) GetRecent() string {
	if m != nil {
		return m.Recent
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) SetRecent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Recent", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality"))
	}
	m.Recent = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) SetValue(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality"))
	}
	m.Value = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic struct {
	state                        protoimpl.MessageState
	sizeCache                    protoimpl.SizeCache
	unknownFields                protoimpl.UnknownFields
	AccessTechnologies           []string                                                                `protobuf:"bytes,1,rep,name=access_technologies,json=accessTechnologies,proto3" json:"access_technologies,omitempty" firestore:"accessTechnologies"`
	Bearers                      []string                                                                `protobuf:"bytes,2,rep,name=bearers,proto3" json:"bearers,omitempty" firestore:"bearers"`
	CarrierConfiguration         string                                                                  `protobuf:"bytes,3,opt,name=carrier_configuration,json=carrierConfiguration,proto3" json:"carrier_configuration,omitempty" firestore:"carrierConfiguration"`
	CarrierConfigurationRevision string                                                                  `protobuf:"bytes,4,opt,name=carrier_configuration_revision,json=carrierConfigurationRevision,proto3" json:"carrier_configuration_revision,omitempty" firestore:"carrierConfigurationRevision"`
	CurrentBands                 []string                                                                `protobuf:"bytes,5,rep,name=current_bands,json=currentBands,proto3" json:"current_bands,omitempty" firestore:"currentBands"`
	CurrentCapabilities          []string                                                                `protobuf:"bytes,6,rep,name=current_capabilities,json=currentCapabilities,proto3" json:"current_capabilities,omitempty" firestore:"currentCapabilities"`
	CurrentModes                 string                                                                  `protobuf:"bytes,7,opt,name=current_modes,json=currentModes,proto3" json:"current_modes,omitempty" firestore:"currentModes"`
	Device                       string                                                                  `protobuf:"bytes,8,opt,name=device,proto3" json:"device,omitempty" firestore:"device"`
	DeviceIdentifier             string                                                                  `protobuf:"bytes,9,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty" firestore:"deviceIdentifier"`
	Drivers                      []string                                                                `protobuf:"bytes,10,rep,name=drivers,proto3" json:"drivers,omitempty" firestore:"drivers"`
	EquipmentIdentifier          string                                                                  `protobuf:"bytes,11,opt,name=equipment_identifier,json=equipmentIdentifier,proto3" json:"equipment_identifier,omitempty" firestore:"equipmentIdentifier"`
	HardwareRevision             string                                                                  `protobuf:"bytes,12,opt,name=hardware_revision,json=hardwareRevision,proto3" json:"hardware_revision,omitempty" firestore:"hardwareRevision"`
	Manufacturer                 string                                                                  `protobuf:"bytes,13,opt,name=manufacturer,proto3" json:"manufacturer,omitempty" firestore:"manufacturer"`
	Model                        string                                                                  `protobuf:"bytes,14,opt,name=model,proto3" json:"model,omitempty" firestore:"model"`
	OwnNumbers                   []string                                                                `protobuf:"bytes,15,rep,name=own_numbers,json=ownNumbers,proto3" json:"own_numbers,omitempty" firestore:"ownNumbers"`
	Plugin                       string                                                                  `protobuf:"bytes,16,opt,name=plugin,proto3" json:"plugin,omitempty" firestore:"plugin"`
	Ports                        []string                                                                `protobuf:"bytes,17,rep,name=ports,proto3" json:"ports,omitempty" firestore:"ports"`
	PowerState                   string                                                                  `protobuf:"bytes,18,opt,name=power_state,json=powerState,proto3" json:"power_state,omitempty" firestore:"powerState"`
	PrimaryPort                  string                                                                  `protobuf:"bytes,19,opt,name=primary_port,json=primaryPort,proto3" json:"primary_port,omitempty" firestore:"primaryPort"`
	PrimarySimSlot               string                                                                  `protobuf:"bytes,20,opt,name=primary_sim_slot,json=primarySimSlot,proto3" json:"primary_sim_slot,omitempty" firestore:"primarySimSlot"`
	Revision                     string                                                                  `protobuf:"bytes,21,opt,name=revision,proto3" json:"revision,omitempty" firestore:"revision"`
	SignalQuality                *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality `protobuf:"bytes,22,opt,name=signal_quality,json=signalQuality,proto3" json:"signal_quality,omitempty" firestore:"signalQuality"`
	Sim                          string                                                                  `protobuf:"bytes,23,opt,name=sim,proto3" json:"sim,omitempty" firestore:"sim"`
	SimSlots                     []string                                                                `protobuf:"bytes,24,rep,name=sim_slots,json=simSlots,proto3" json:"sim_slots,omitempty" firestore:"simSlots"`
	State                        string                                                                  `protobuf:"bytes,25,opt,name=state,proto3" json:"state,omitempty" firestore:"state"`
	StateFailedReason            string                                                                  `protobuf:"bytes,26,opt,name=state_failed_reason,json=stateFailedReason,proto3" json:"state_failed_reason,omitempty" firestore:"stateFailedReason"`
	SupportedBands               []string                                                                `protobuf:"bytes,27,rep,name=supported_bands,json=supportedBands,proto3" json:"supported_bands,omitempty" firestore:"supportedBands"`
	SupportedCapabilities        []string                                                                `protobuf:"bytes,28,rep,name=supported_capabilities,json=supportedCapabilities,proto3" json:"supported_capabilities,omitempty" firestore:"supportedCapabilities"`
	SupportedIpFamilies          []string                                                                `protobuf:"bytes,29,rep,name=supported_ip_families,json=supportedIpFamilies,proto3" json:"supported_ip_families,omitempty" firestore:"supportedIpFamilies"`
	SupportedModes               []string                                                                `protobuf:"bytes,30,rep,name=supported_modes,json=supportedModes,proto3" json:"supported_modes,omitempty" firestore:"supportedModes"`
	UnlockRequired               string                                                                  `protobuf:"bytes,31,opt,name=unlock_required,json=unlockRequired,proto3" json:"unlock_required,omitempty" firestore:"unlockRequired"`
	UnlockRetries                []string                                                                `protobuf:"bytes,32,rep,name=unlock_retries,json=unlockRetries,proto3" json:"unlock_retries,omitempty" firestore:"unlockRetries"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 8}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetAccessTechnologies() []string {
	if m != nil {
		return m.AccessTechnologies
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetBearers() []string {
	if m != nil {
		return m.Bearers
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetCarrierConfiguration() string {
	if m != nil {
		return m.CarrierConfiguration
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetCarrierConfigurationRevision() string {
	if m != nil {
		return m.CarrierConfigurationRevision
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetCurrentBands() []string {
	if m != nil {
		return m.CurrentBands
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetCurrentCapabilities() []string {
	if m != nil {
		return m.CurrentCapabilities
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetCurrentModes() string {
	if m != nil {
		return m.CurrentModes
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetDeviceIdentifier() string {
	if m != nil {
		return m.DeviceIdentifier
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetDrivers() []string {
	if m != nil {
		return m.Drivers
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetEquipmentIdentifier() string {
	if m != nil {
		return m.EquipmentIdentifier
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetHardwareRevision() string {
	if m != nil {
		return m.HardwareRevision
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetOwnNumbers() []string {
	if m != nil {
		return m.OwnNumbers
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetPorts() []string {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetPowerState() string {
	if m != nil {
		return m.PowerState
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetPrimaryPort() string {
	if m != nil {
		return m.PrimaryPort
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetPrimarySimSlot() string {
	if m != nil {
		return m.PrimarySimSlot
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSignalQuality() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality {
	if m != nil {
		return m.SignalQuality
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSim() string {
	if m != nil {
		return m.Sim
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSimSlots() []string {
	if m != nil {
		return m.SimSlots
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetStateFailedReason() string {
	if m != nil {
		return m.StateFailedReason
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSupportedBands() []string {
	if m != nil {
		return m.SupportedBands
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSupportedCapabilities() []string {
	if m != nil {
		return m.SupportedCapabilities
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSupportedIpFamilies() []string {
	if m != nil {
		return m.SupportedIpFamilies
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetSupportedModes() []string {
	if m != nil {
		return m.SupportedModes
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetUnlockRequired() string {
	if m != nil {
		return m.UnlockRequired
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) GetUnlockRetries() []string {
	if m != nil {
		return m.UnlockRetries
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetAccessTechnologies(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AccessTechnologies", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.AccessTechnologies = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetBearers(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bearers", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Bearers = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetCarrierConfiguration(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CarrierConfiguration", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.CarrierConfiguration = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetCarrierConfigurationRevision(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CarrierConfigurationRevision", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.CarrierConfigurationRevision = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetCurrentBands(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentBands", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.CurrentBands = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetCurrentCapabilities(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentCapabilities", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.CurrentCapabilities = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetCurrentModes(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentModes", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.CurrentModes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetDevice(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Device", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Device = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetDeviceIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceIdentifier", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.DeviceIdentifier = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetDrivers(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Drivers", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Drivers = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetEquipmentIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EquipmentIdentifier", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.EquipmentIdentifier = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetHardwareRevision(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareRevision", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.HardwareRevision = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetManufacturer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Manufacturer", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Manufacturer = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Model = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetOwnNumbers(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OwnNumbers", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.OwnNumbers = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetPlugin(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Plugin", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Plugin = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetPorts(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ports", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Ports = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetPowerState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PowerState", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.PowerState = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetPrimaryPort(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrimaryPort", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.PrimaryPort = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetPrimarySimSlot(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrimarySimSlot", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.PrimarySimSlot = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetRevision(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Revision", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Revision = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSignalQuality(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SignalQuality", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SignalQuality = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSim(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Sim", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.Sim = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSimSlots(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimSlots", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SimSlots = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetState(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.State = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetStateFailedReason(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StateFailedReason", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.StateFailedReason = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSupportedBands(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportedBands", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SupportedBands = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSupportedCapabilities(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportedCapabilities", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SupportedCapabilities = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSupportedIpFamilies(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportedIpFamilies", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SupportedIpFamilies = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetSupportedModes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportedModes", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.SupportedModes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetUnlockRequired(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UnlockRequired", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.UnlockRequired = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) SetUnlockRetries(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UnlockRetries", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic"))
	}
	m.UnlockRetries = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ErrorRate     string `protobuf:"bytes,1,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty" firestore:"errorRate"`
	Rsrp          string `protobuf:"bytes,2,opt,name=rsrp,proto3" json:"rsrp,omitempty" firestore:"rsrp"`
	Rsrq          string `protobuf:"bytes,3,opt,name=rsrq,proto3" json:"rsrq,omitempty" firestore:"rsrq"`
	Snr           string `protobuf:"bytes,4,opt,name=snr,proto3" json:"snr,omitempty" firestore:"snr"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 9}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) GetErrorRate() string {
	if m != nil {
		return m.ErrorRate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) GetRsrp() string {
	if m != nil {
		return m.Rsrp
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) GetRsrq() string {
	if m != nil {
		return m.Rsrq
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) GetSnr() string {
	if m != nil {
		return m.Snr
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) SetErrorRate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ErrorRate", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G"))
	}
	m.ErrorRate = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) SetRsrp(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrp", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G"))
	}
	m.Rsrp = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) SetRsrq(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrq", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G"))
	}
	m.Rsrq = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) SetSnr(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Snr", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G"))
	}
	m.Snr = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Ecio          string `protobuf:"bytes,1,opt,name=ecio,proto3" json:"ecio,omitempty" firestore:"ecio"`
	ErrorRate     string `protobuf:"bytes,2,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty" firestore:"errorRate"`
	Rssi          string `protobuf:"bytes,3,opt,name=rssi,proto3" json:"rssi,omitempty" firestore:"rssi"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 10}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) GetEcio() string {
	if m != nil {
		return m.Ecio
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) GetErrorRate() string {
	if m != nil {
		return m.ErrorRate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) GetRssi() string {
	if m != nil {
		return m.Rssi
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) SetEcio(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ecio", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X"))
	}
	m.Ecio = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) SetErrorRate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ErrorRate", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X"))
	}
	m.ErrorRate = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) SetRssi(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rssi", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X"))
	}
	m.Rssi = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Ecio          string `protobuf:"bytes,1,opt,name=ecio,proto3" json:"ecio,omitempty" firestore:"ecio"`
	ErrorRate     string `protobuf:"bytes,2,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty" firestore:"errorRate"`
	Io            string `protobuf:"bytes,3,opt,name=io,proto3" json:"io,omitempty" firestore:"io"`
	Rssi          string `protobuf:"bytes,4,opt,name=rssi,proto3" json:"rssi,omitempty" firestore:"rssi"`
	Sinr          string `protobuf:"bytes,5,opt,name=sinr,proto3" json:"sinr,omitempty" firestore:"sinr"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 11}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) GetEcio() string {
	if m != nil {
		return m.Ecio
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) GetErrorRate() string {
	if m != nil {
		return m.ErrorRate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) GetIo() string {
	if m != nil {
		return m.Io
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) GetRssi() string {
	if m != nil {
		return m.Rssi
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) GetSinr() string {
	if m != nil {
		return m.Sinr
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) SetEcio(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ecio", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo"))
	}
	m.Ecio = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) SetErrorRate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ErrorRate", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo"))
	}
	m.ErrorRate = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) SetIo(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Io", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo"))
	}
	m.Io = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) SetRssi(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rssi", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo"))
	}
	m.Rssi = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) SetSinr(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Sinr", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo"))
	}
	m.Sinr = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ErrorRate     string `protobuf:"bytes,1,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty" firestore:"errorRate"`
	Rssi          string `protobuf:"bytes,2,opt,name=rssi,proto3" json:"rssi,omitempty" firestore:"rssi"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 12}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) GetErrorRate() string {
	if m != nil {
		return m.ErrorRate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) GetRssi() string {
	if m != nil {
		return m.Rssi
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) SetErrorRate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ErrorRate", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm"))
	}
	m.ErrorRate = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) SetRssi(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rssi", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm"))
	}
	m.Rssi = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ErrorRate     string `protobuf:"bytes,1,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty" firestore:"errorRate"`
	Rsrp          string `protobuf:"bytes,2,opt,name=rsrp,proto3" json:"rsrp,omitempty" firestore:"rsrp"`
	Rsrq          string `protobuf:"bytes,3,opt,name=rsrq,proto3" json:"rsrq,omitempty" firestore:"rsrq"`
	Rssi          string `protobuf:"bytes,4,opt,name=rssi,proto3" json:"rssi,omitempty" firestore:"rssi"`
	Snr           string `protobuf:"bytes,5,opt,name=snr,proto3" json:"snr,omitempty" firestore:"snr"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 13}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) GetErrorRate() string {
	if m != nil {
		return m.ErrorRate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) GetRsrp() string {
	if m != nil {
		return m.Rsrp
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) GetRsrq() string {
	if m != nil {
		return m.Rsrq
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) GetRssi() string {
	if m != nil {
		return m.Rssi
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) GetSnr() string {
	if m != nil {
		return m.Snr
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) SetErrorRate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ErrorRate", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte"))
	}
	m.ErrorRate = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) SetRsrp(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrp", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte"))
	}
	m.Rsrp = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) SetRsrq(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrq", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte"))
	}
	m.Rsrq = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) SetRssi(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rssi", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte"))
	}
	m.Rssi = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) SetSnr(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Snr", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte"))
	}
	m.Snr = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Rate          string `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty" firestore:"rate"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 14}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) SetRate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rate", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh"))
	}
	m.Rate = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ErrorRate     string `protobuf:"bytes,1,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty" firestore:"errorRate"`
	Rssi          string `protobuf:"bytes,2,opt,name=rssi,proto3" json:"rssi,omitempty" firestore:"rssi"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 15}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) GetErrorRate() string {
	if m != nil {
		return m.ErrorRate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) GetRssi() string {
	if m != nil {
		return m.Rssi
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) SetErrorRate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ErrorRate", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold"))
	}
	m.ErrorRate = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) SetRssi(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rssi", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold"))
	}
	m.Rssi = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Ecio          string `protobuf:"bytes,1,opt,name=ecio,proto3" json:"ecio,omitempty" firestore:"ecio"`
	ErrorRate     string `protobuf:"bytes,2,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty" firestore:"errorRate"`
	Rscp          string `protobuf:"bytes,3,opt,name=rscp,proto3" json:"rscp,omitempty" firestore:"rscp"`
	Rssi          string `protobuf:"bytes,4,opt,name=rssi,proto3" json:"rssi,omitempty" firestore:"rssi"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 16}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) GetEcio() string {
	if m != nil {
		return m.Ecio
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) GetErrorRate() string {
	if m != nil {
		return m.ErrorRate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) GetRscp() string {
	if m != nil {
		return m.Rscp
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) GetRssi() string {
	if m != nil {
		return m.Rssi
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) SetEcio(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ecio", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts"))
	}
	m.Ecio = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) SetErrorRate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ErrorRate", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts"))
	}
	m.ErrorRate = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) SetRscp(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rscp", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts"))
	}
	m.Rscp = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) SetRssi(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rssi", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts"))
	}
	m.Rssi = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	FiveG         *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G        `protobuf:"bytes,1,opt,name=five_g,json=fiveG,proto3" json:"five_g,omitempty" firestore:"fiveG"`
	Cdma1X        *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X    `protobuf:"bytes,2,opt,name=cdma1x,proto3" json:"cdma1x,omitempty" firestore:"cdma1x"`
	Evdo          *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo      `protobuf:"bytes,3,opt,name=evdo,proto3" json:"evdo,omitempty" firestore:"evdo"`
	Gsm           *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm       `protobuf:"bytes,4,opt,name=gsm,proto3" json:"gsm,omitempty" firestore:"gsm"`
	LteSignal     *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte       `protobuf:"bytes,5,opt,name=lte_signal,json=lteSignal,proto3" json:"lte_signal,omitempty" firestore:"lteSignal"`
	Refresh       *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh   `protobuf:"bytes,6,opt,name=refresh,proto3" json:"refresh,omitempty" firestore:"refresh"`
	Threshold     *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold `protobuf:"bytes,7,opt,name=threshold,proto3" json:"threshold,omitempty" firestore:"threshold"`
	Umts          *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts      `protobuf:"bytes,8,opt,name=umts,proto3" json:"umts,omitempty" firestore:"umts"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 17}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) GetFiveG() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G {
	if m != nil {
		return m.FiveG
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) GetCdma1X() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X {
	if m != nil {
		return m.Cdma1X
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) GetEvdo() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo {
	if m != nil {
		return m.Evdo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) GetGsm() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm {
	if m != nil {
		return m.Gsm
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) GetLteSignal() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte {
	if m != nil {
		return m.LteSignal
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) GetRefresh() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh {
	if m != nil {
		return m.Refresh
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) GetThreshold() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold {
	if m != nil {
		return m.Threshold
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) GetUmts() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts {
	if m != nil {
		return m.Umts
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) SetFiveG(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FiveG", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal"))
	}
	m.FiveG = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) SetCdma1X(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cdma1X", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal"))
	}
	m.Cdma1X = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) SetEvdo(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Evdo", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal"))
	}
	m.Evdo = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) SetGsm(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gsm", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal"))
	}
	m.Gsm = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) SetLteSignal(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LteSignal", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal"))
	}
	m.LteSignal = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) SetRefresh(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Refresh", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal"))
	}
	m.Refresh = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) SetThreshold(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Threshold", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal"))
	}
	m.Threshold = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) SetUmts(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Umts", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal"))
	}
	m.Umts = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus struct {
	state            protoimpl.MessageState
	sizeCache        protoimpl.SizeCache
	unknownFields    protoimpl.UnknownFields
	DbusPath         string   `protobuf:"bytes,1,opt,name=dbus_path,json=dbusPath,proto3" json:"dbus_path,omitempty" firestore:"dbusPath"`
	Active           string   `protobuf:"bytes,2,opt,name=active,proto3" json:"active,omitempty" firestore:"active"`
	Eid              string   `protobuf:"bytes,3,opt,name=eid,proto3" json:"eid,omitempty" firestore:"eid"`
	EmergencyNumbers []string `protobuf:"bytes,4,rep,name=emergency_numbers,json=emergencyNumbers,proto3" json:"emergency_numbers,omitempty" firestore:"emergencyNumbers"`
	EsimStatus       string   `protobuf:"bytes,5,opt,name=esim_status,json=esimStatus,proto3" json:"esim_status,omitempty" firestore:"esimStatus"`
	Gid1             string   `protobuf:"bytes,6,opt,name=gid1,proto3" json:"gid1,omitempty" firestore:"gid1"`
	Gid2             string   `protobuf:"bytes,7,opt,name=gid2,proto3" json:"gid2,omitempty" firestore:"gid2"`
	Iccid            string   `protobuf:"bytes,8,opt,name=iccid,proto3" json:"iccid,omitempty" firestore:"iccid"`
	Imsi             string   `protobuf:"bytes,9,opt,name=imsi,proto3" json:"imsi,omitempty" firestore:"imsi"`
	OperatorCode     string   `protobuf:"bytes,10,opt,name=operator_code,json=operatorCode,proto3" json:"operator_code,omitempty" firestore:"operatorCode"`
	OperatorName     string   `protobuf:"bytes,11,opt,name=operator_name,json=operatorName,proto3" json:"operator_name,omitempty" firestore:"operatorName"`
	Removability     string   `protobuf:"bytes,12,opt,name=removability,proto3" json:"removability,omitempty" firestore:"removability"`
	SimType          string   `protobuf:"bytes,13,opt,name=sim_type,json=simType,proto3" json:"sim_type,omitempty" firestore:"simType"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 18}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetDbusPath() string {
	if m != nil {
		return m.DbusPath
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetActive() string {
	if m != nil {
		return m.Active
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetEid() string {
	if m != nil {
		return m.Eid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetEmergencyNumbers() []string {
	if m != nil {
		return m.EmergencyNumbers
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetEsimStatus() string {
	if m != nil {
		return m.EsimStatus
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetGid1() string {
	if m != nil {
		return m.Gid1
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetGid2() string {
	if m != nil {
		return m.Gid2
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetIccid() string {
	if m != nil {
		return m.Iccid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetOperatorCode() string {
	if m != nil {
		return m.OperatorCode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetOperatorName() string {
	if m != nil {
		return m.OperatorName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetRemovability() string {
	if m != nil {
		return m.Removability
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) GetSimType() string {
	if m != nil {
		return m.SimType
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetDbusPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbusPath", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.DbusPath = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetActive(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Active", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Active = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetEid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Eid", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Eid = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetEmergencyNumbers(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EmergencyNumbers", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.EmergencyNumbers = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetEsimStatus(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EsimStatus", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.EsimStatus = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetGid1(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gid1", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Gid1 = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetGid2(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gid2", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Gid2 = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetIccid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Iccid", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Iccid = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetImsi(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Imsi", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Imsi = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetOperatorCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorCode", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.OperatorCode = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetOperatorName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatorName", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.OperatorName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetRemovability(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Removability", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.Removability = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) SetSimType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimType", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus"))
	}
	m.SimType = fv
}

type Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ThreeGPp      *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp             `protobuf:"bytes,1,opt,name=three_g_pp,json=threeGPp,proto3" json:"three_g_pp,omitempty" firestore:"threeGPp"`
	Cdma          *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma                 `protobuf:"bytes,2,opt,name=cdma,proto3" json:"cdma,omitempty" firestore:"cdma"`
	DbusPath      string                                                                         `protobuf:"bytes,3,opt,name=dbus_path,json=dbusPath,proto3" json:"dbus_path,omitempty" firestore:"dbusPath"`
	Generic       *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic              `protobuf:"bytes,4,opt,name=generic,proto3" json:"generic,omitempty" firestore:"generic"`
	Signal        *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal               `protobuf:"bytes,5,opt,name=signal,proto3" json:"signal,omitempty" firestore:"signal"`
	SimStatus     map[string]*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus `protobuf:"bytes,7,rep,name=sim_status,json=simStatus,proto3" json:"sim_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"simStatus"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 0, 12, 19}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GetThreeGPp() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp {
	if m != nil {
		return m.ThreeGPp
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GetCdma() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma {
	if m != nil {
		return m.Cdma
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GetDbusPath() string {
	if m != nil {
		return m.DbusPath
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GetGeneric() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic {
	if m != nil {
		return m.Generic
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GetSignal() *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal {
	if m != nil {
		return m.Signal
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) GetSimStatus() map[string]*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus {
	if m != nil {
		return m.SimStatus
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) SetThreeGPp(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ThreeGPp", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem"))
	}
	m.ThreeGPp = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) SetCdma(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cdma", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem"))
	}
	m.Cdma = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) SetDbusPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbusPath", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem"))
	}
	m.DbusPath = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) SetGeneric(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Generic", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem"))
	}
	m.Generic = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) SetSignal(fv *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Signal", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem"))
	}
	m.Signal = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem) SetSimStatus(fv map[string]*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimStatus", "Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem"))
	}
	m.SimStatus = fv
}

type Device_Status_DeviceInfo_NetworkInterface_ASInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// AS Number string example AS7018
	Asn string `protobuf:"bytes,1,opt,name=asn,proto3" json:"asn,omitempty" firestore:"asn"`
	// AS Owner name example AT&T Services, Inc.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Domain name example att.com
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty" firestore:"domain"`
	// Routes exported from this ASN example 12.128.0.0/9
	Routes []string `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes,omitempty" firestore:"routes"`
	// ASN Owner type example isp(AT&T) / hosting(google)/ business
	// (Amazon)
	AsnType string `protobuf:"bytes,5,opt,name=asn_type,json=asnType,proto3" json:"asn_type,omitempty" firestore:"asnType"`
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) Reset() {
	*m = Device_Status_DeviceInfo_NetworkInterface_ASInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface_ASInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface_ASInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_NetworkInterface_ASInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_NetworkInterface_ASInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 1, 0}
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) GetAsn() string {
	if m != nil {
		return m.Asn
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) GetRoutes() []string {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) GetAsnType() string {
	if m != nil {
		return m.AsnType
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) SetAsn(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Asn", "Device_Status_DeviceInfo_NetworkInterface_ASInfo"))
	}
	m.Asn = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_NetworkInterface_ASInfo"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) SetDomain(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Domain", "Device_Status_DeviceInfo_NetworkInterface_ASInfo"))
	}
	m.Domain = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) SetRoutes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Routes", "Device_Status_DeviceInfo_NetworkInterface_ASInfo"))
	}
	m.Routes = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_ASInfo) SetAsnType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AsnType", "Device_Status_DeviceInfo_NetworkInterface_ASInfo"))
	}
	m.AsnType = fv
}

type Device_Status_DeviceInfo_NetworkInterface_Carrier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Mobile network carrier name example AT&T
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Mobile country code example 214
	MobileCountryCode string `protobuf:"bytes,2,opt,name=mobile_country_code,json=mobileCountryCode,proto3" json:"mobile_country_code,omitempty" firestore:"mobileCountryCode"`
	// Mobile network code example 7
	MobileNetworkCode string `protobuf:"bytes,3,opt,name=mobile_network_code,json=mobileNetworkCode,proto3" json:"mobile_network_code,omitempty" firestore:"mobileNetworkCode"`
	// Mobile location area code example 2862
	LocationAreaCode string `protobuf:"bytes,4,opt,name=location_area_code,json=locationAreaCode,proto3" json:"location_area_code,omitempty" firestore:"locationAreaCode"`
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) Reset() {
	*m = Device_Status_DeviceInfo_NetworkInterface_Carrier{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface_Carrier) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_NetworkInterface_Carrier) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_NetworkInterface_Carrier.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_NetworkInterface_Carrier) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 4, 1, 1}
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) GetMobileCountryCode() string {
	if m != nil {
		return m.MobileCountryCode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) GetMobileNetworkCode() string {
	if m != nil {
		return m.MobileNetworkCode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) GetLocationAreaCode() string {
	if m != nil {
		return m.LocationAreaCode
	}
	return ""
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_NetworkInterface_Carrier"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) SetMobileCountryCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MobileCountryCode", "Device_Status_DeviceInfo_NetworkInterface_Carrier"))
	}
	m.MobileCountryCode = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) SetMobileNetworkCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MobileNetworkCode", "Device_Status_DeviceInfo_NetworkInterface_Carrier"))
	}
	m.MobileNetworkCode = fv
}

func (m *Device_Status_DeviceInfo_NetworkInterface_Carrier) SetLocationAreaCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LocationAreaCode", "Device_Status_DeviceInfo_NetworkInterface_Carrier"))
	}
	m.LocationAreaCode = fv
}

var edgelq_devices_proto_v1alpha2_device_proto preflect.FileDescriptor

var edgelq_devices_proto_v1alpha2_device_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6c, 0x61,
	0x74, 0x6c, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf2, 0x81, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21,
	0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x5e, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xc8, 0x7a, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x50,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xb2, 0xda, 0x21, 0x23, 0x12, 0x21, 0x0a,
	0x1f, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x56, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x6e,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x73, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x53, 0x48,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x62, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x56, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xe8, 0x67, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x09,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x53, 0x0a,
	0x05, 0x77, 0x69, 0x66, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x77, 0x69, 0x66,
	0x69, 0x73, 0x12, 0x59, 0x0a, 0x07, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x12, 0x53, 0x0a,
	0x05, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x62, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x59, 0x0a, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x53, 0x0a,
	0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x6c, 0x61,
	0x6e, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x73, 0x1a, 0xb7, 0x08, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x8d, 0x02, 0x0a, 0x0d, 0x44, 0x48,
	0x43, 0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x2d, 0x64, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x74, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x2d, 0x6e, 0x74, 0x70, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x2d, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x5f, 0x6d, 0x74, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x2d,
	0x6d, 0x74, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x1a, 0x43, 0x0a, 0x0b, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0xb0,
	0x01, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x1a, 0xa3, 0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x6f, 0x66, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0xfa, 0x02, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x2d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x2d,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x61, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x6b, 0x65, 0x79, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x2d,
	0x61, 0x75, 0x74, 0x68, 0x1a, 0xc5, 0x0a, 0x0a, 0x07, 0x45, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x73,
	0x12, 0x56, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x45, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x74, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x6b, 0x65, 0x6f, 0x6e, 0x6c, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x6b, 0x65, 0x6f, 0x6e, 0x6c,
	0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64,
	0x68, 0x63, 0x70, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x34, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x44, 0x48, 0x43,
	0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70,
	0x34, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x0f, 0x64,
	0x68, 0x63, 0x70, 0x36, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x36, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x6b, 0x0a,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x56, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x34, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x34, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x36, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x36, 0x1a, 0x53, 0x0a, 0x05, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x1a, 0x8f, 0x0f, 0x0a,
	0x08, 0x57, 0x69, 0x66, 0x69, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x69, 0x66,
	0x69, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x61, 0x6b, 0x65, 0x6f, 0x6e, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x77, 0x61, 0x6b, 0x65, 0x6f, 0x6e, 0x6c, 0x61, 0x6e, 0x12, 0x73, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4f, 0x70, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x6b, 0x65, 0x6f, 0x6e, 0x77, 0x6c, 0x61, 0x6e, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6b, 0x65, 0x6f, 0x6e, 0x77, 0x6c, 0x61,
	0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x68, 0x63, 0x70, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70,
	0x34, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x75, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x34, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2d, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70,
	0x36, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73,
	0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0f,
	0x64, 0x68, 0x63, 0x70, 0x36, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x61, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x56, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x34, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x34, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x36, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x36, 0x1a, 0x53, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x1a, 0xf7, 0x01,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0x88, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x5d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x1a, 0xf0,
	0x0b, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x69,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x4f, 0x70,
	0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x68, 0x63, 0x70, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70,
	0x36, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x2d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70,
	0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x0f, 0x64,
	0x68, 0x63, 0x70, 0x34, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x12, 0x75, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x36, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x36, 0x2d,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x72, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6d, 0x74, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x5c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x73, 0x0a,
	0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x56, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x36, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x36, 0x1a, 0x80, 0x02, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x67, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x2d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x63,
	0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x73, 0x74, 0x70, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x1a, 0xc4, 0x0f, 0x0a, 0x09, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x67, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x74,
	0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x68,
	0x63, 0x70, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x2d,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x0f, 0x64, 0x68,
	0x63, 0x70, 0x34, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x12, 0x75, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x36, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x36, 0x2d, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x72, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d,
	0x74, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x0e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x56, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x36, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x36, 0x1a, 0xd8, 0x05, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x61, 0x63, 0x70, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x69, 0x69, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x6d, 0x69, 0x69, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x2d, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x68, 0x61, 0x73,
	0x68, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x2d,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6c,
	0x61, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x2d, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72, 0x70, 0x5f, 0x69, 0x70, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x72,
	0x70, 0x2d, 0x69, 0x70, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x72, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x72, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x70, 0x2d, 0x61,
	0x6c, 0x6c, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70,
	0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x61, 0x69, 0x6c, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x2d,
	0x6d, 0x61, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72,
	0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x72, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x2d, 0x61,
	0x72, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x6c, 0x61, 0x76, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x67, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x67, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x15,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x1a, 0xeb, 0x09, 0x0a, 0x0b, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x68, 0x63, 0x70,
	0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64,
	0x68, 0x63, 0x70, 0x36, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69,
	0x6e, 0x6b, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x68, 0x63, 0x70, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x75,
	0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x34, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2d, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x36, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x44, 0x48,
	0x43, 0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x64, 0x68, 0x63,
	0x70, 0x36, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x73, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x56, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x36, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x36, 0x1a, 0x33, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x1a, 0x84, 0x09, 0x0a, 0x09, 0x56, 0x6c, 0x61, 0x6e, 0x73,
	0x4f, 0x70, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x68,
	0x63, 0x70, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x2d,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x0f, 0x64, 0x68,
	0x63, 0x70, 0x34, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x12, 0x75, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x36, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x36, 0x2d, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x72, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d,
	0x74, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x0e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x56, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x36, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x36, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x1a, 0xf0, 0x0a,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x69, 0x6d, 0x2d, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x69, 0x6d, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x69, 0x6d, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68,
	0x63, 0x70, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x68, 0x63,
	0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x34, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x34,
	0x2d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x0f, 0x64, 0x68,
	0x63, 0x70, 0x36, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x52, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x36, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x61, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x56, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x34, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x34, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x36, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x36, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b,
	0x1a, 0x78, 0x0a, 0x0e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x75, 0x0a, 0x0a, 0x57, 0x69,
	0x66, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x7a, 0x0a, 0x0c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x4f, 0x70,
	0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76, 0x0a,
	0x0a, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7a, 0x0a, 0x0c, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x76, 0x0a, 0x0a, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x77, 0x0a, 0x0b, 0x4d, 0x6f, 0x64,
	0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x1a, 0x5d, 0x0a, 0x0d,
	0x4e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0xce, 0x06, 0x0a, 0x09,
	0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x73,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x73,
	0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x73, 0x73, 0x68,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x70, 0x5f,
	0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x70, 0x44, 0x65, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79, 0x1a, 0xce, 0x03, 0x0a, 0x07,
	0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x73, 0x68, 0x61, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x73, 0x68, 0x61, 0x4b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x70, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6e, 0x6f, 0x50, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x63, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x6f, 0x5f, 0x78, 0x31, 0x31, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x58, 0x31, 0x31, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x74, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x1a, 0xe7, 0x01, 0x0a,
	0x11, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0xb2, 0xda, 0x21, 0x26, 0x12, 0x24, 0x0a, 0x22, 0x6e, 0x74, 0x74, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x11, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x44, 0x0a, 0x1f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x74, 0x70, 0x6d, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x69, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x55, 0x73, 0x65, 0x54, 0x70, 0x6d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x65, 0x64, 0x1a, 0x75, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x93, 0x01,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x1a, 0x42, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x1a, 0xc0, 0x7c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x65, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x43, 0x52, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x64, 0x0a,
	0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x37, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x84, 0x02, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0xaa, 0x06, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x19, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x1d, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x1a, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x0e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x54, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xae, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x50,
	0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x44, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x4f, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x05,
	0x1a, 0xf9, 0x04, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x79, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x7b, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x13, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x52, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x61, 0x70, 0x69, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x46, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x50, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x1a, 0x87, 0x65, 0x0a,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x19,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x75, 0x0a, 0x14, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x67, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a,
	0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xf6, 0x57, 0x0a, 0x13, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x55, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x53, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x5b, 0x0a, 0x04, 0x62, 0x69, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x49, 0x4f, 0x53, 0x52, 0x04,
	0x62, 0x69, 0x6f, 0x73, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x58, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x52, 0x03, 0x63, 0x70,
	0x75, 0x12, 0x5e, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x64, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x58, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x50, 0x55, 0x52, 0x03, 0x67, 0x70,
	0x75, 0x12, 0x6e, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x6b, 0x0a, 0x0a, 0x68, 0x61, 0x69, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x69, 0x6c, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x68, 0x61, 0x69, 0x6c, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6e,
	0x0a, 0x0b, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x71,
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x42, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xad, 0x01, 0x0a, 0x02, 0x4f, 0x53, 0x12, 0x29, 0x0a, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x64, 0x0a, 0x04, 0x42, 0x49, 0x4f, 0x53, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x83, 0x03, 0x0a, 0x06,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x74, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b,
	0x75, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6b, 0x75, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x1a, 0x88, 0x06, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x12, 0x70, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x50, 0x55, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x1a, 0x8e, 0x05, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x71, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x68,
	0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x4d, 0x68, 0x7a, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x68,
	0x7a, 0x12, 0x75, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x1a, 0x3a, 0x0a, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x9a, 0x04, 0x0a,
	0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x63, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x1a, 0xab, 0x03, 0x0a, 0x04,
	0x44, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x77, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x77, 0x6e, 0x12, 0x77, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x57, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x73, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xf2, 0x03, 0x0a, 0x07, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x62, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x4e, 0x49, 0x43, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x1a, 0x82, 0x03, 0x0a, 0x03, 0x4e, 0x49,
	0x43, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x07, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x49, 0x43, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8a,
	0x02, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x12, 0x77, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x50, 0x55, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x73, 0x1a,
	0x89, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x64, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x43, 0x49, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x09,
	0x50, 0x43, 0x49, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x1a, 0xbb, 0x04, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x1a, 0xbe, 0x03, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x82, 0x01, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x73, 0x1a, 0xed, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x68, 0x7a, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x62, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x42, 0x69, 0x74, 0x73, 0x1a, 0xb9, 0x04, 0x0a, 0x09, 0x48, 0x61, 0x69, 0x6c, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x07,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x48, 0x61, 0x69, 0x6c, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x69, 0x6c,
	0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x1a, 0xfa, 0x02, 0x0a, 0x0f, 0x48, 0x61, 0x69, 0x6c, 0x6f, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x1e, 0x6e, 0x65, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6e, 0x65, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74,
	0x65, 0x1a, 0x97, 0x02, 0x0a, 0x0a, 0x4e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x75, 0x64, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x64, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x55, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x67, 0x70, 0x75, 0x73, 0x1a, 0x3c, 0x0a,
	0x07, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xe3, 0x2c, 0x0a, 0x0b,
	0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6a, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x1a, 0x50, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x72, 0x78, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x78, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x63, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x69, 0x63, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x07, 0x46, 0x69,
	0x76, 0x65, 0x47, 0x4e, 0x72, 0x12, 0x98, 0x01, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0x65, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0xa1, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x62, 0x75,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62,
	0x75, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x73, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xb7, 0x01, 0x0a, 0x03,
	0x45, 0x70, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd9, 0x03, 0x0a, 0x08, 0x54, 0x68, 0x72, 0x65, 0x65, 0x47,
	0x70, 0x70, 0x12, 0x71, 0x0a, 0x08, 0x66, 0x69, 0x76, 0x65, 0x67, 0x5f, 0x6e, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x46, 0x69, 0x76, 0x65, 0x47, 0x4e, 0x72, 0x52, 0x07, 0x66, 0x69,
	0x76, 0x65, 0x67, 0x4e, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x64, 0x0a, 0x03, 0x65, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x70, 0x73, 0x52, 0x03, 0x65, 0x70, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6d, 0x65, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x63, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xef, 0x01, 0x0a, 0x04, 0x43, 0x64, 0x6d, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x64, 0x6d, 0x61, 0x31, 0x78, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x64, 0x6d, 0x61, 0x31, 0x78,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x73, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x76, 0x64, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x76, 0x64, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x69, 0x64, 0x1a, 0x3d, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xa6, 0x0a, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x2f,
	0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x1e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x77, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x6d, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x53, 0x69, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x6d,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x69, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x69, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x63, 0x0a, 0x08, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x35, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x73, 0x72, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73,
	0x72, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x73, 0x72, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6e, 0x72,
	0x1a, 0x55, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x64, 0x6d, 0x61, 0x31, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x63, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x1a, 0x77, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x45, 0x76, 0x64, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x69, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x63, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x6e, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x6e, 0x72,
	0x1a, 0x3e, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x73, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69,
	0x1a, 0x78, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4c, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x73, 0x72, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x73, 0x72, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x73, 0x72, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x1a, 0x23, 0x0a, 0x0d, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x1a,
	0x44, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x73, 0x73, 0x69, 0x1a, 0x67, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55,
	0x6d, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x63, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x63, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x73, 0x63, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73,
	0x73, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x1a, 0xa6,
	0x07, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x6e, 0x0a, 0x06, 0x66, 0x69, 0x76,
	0x65, 0x5f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x35, 0x67, 0x52, 0x05, 0x66, 0x69, 0x76, 0x65, 0x47, 0x12, 0x73, 0x0a, 0x06, 0x63, 0x64, 0x6d,
	0x61, 0x31, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x43, 0x64, 0x6d, 0x61, 0x31, 0x78, 0x52, 0x06, 0x63, 0x64, 0x6d, 0x61, 0x31, 0x78, 0x12, 0x6d,
	0x0a, 0x04, 0x65, 0x76, 0x64, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x64, 0x6f, 0x52, 0x04, 0x65, 0x76, 0x64, 0x6f, 0x12, 0x6a, 0x0a,
	0x03, 0x67, 0x73, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x47, 0x73, 0x6d, 0x52, 0x03, 0x67, 0x73, 0x6d, 0x12, 0x77, 0x0a, 0x0a, 0x6c, 0x74, 0x65,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x4c, 0x74, 0x65, 0x52, 0x09, 0x6c, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x12, 0x76, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x7c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x6d, 0x0a, 0x04, 0x75, 0x6d, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x6d, 0x74,
	0x73, 0x52, 0x04, 0x75, 0x6d, 0x74, 0x73, 0x1a, 0xfb, 0x02, 0x0a, 0x09, 0x53, 0x69, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62, 0x75, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x73, 0x69,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x73, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x69,
	0x64, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x69, 0x64, 0x31, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x69, 0x64, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x69,
	0x64, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x89, 0x06, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x12,
	0x75, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x5f, 0x70, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x47, 0x70, 0x70, 0x52, 0x08, 0x74, 0x68,
	0x72, 0x65, 0x65, 0x47, 0x50, 0x70, 0x12, 0x67, 0x0a, 0x04, 0x63, 0x64, 0x6d, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x64, 0x6d, 0x61, 0x52, 0x04, 0x63, 0x64, 0x6d, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x62, 0x75, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x70, 0x0a, 0x07,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x6d,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x82, 0x01,
	0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x2e, 0x53, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x96, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x6e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x06, 0x10,
	0x07, 0x1a, 0xd8, 0x05, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x34, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56,
	0x34, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x34, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x56, 0x34, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x36, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x36, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x76, 0x36, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x36, 0x12,
	0x5f, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x41, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x61, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x1a, 0x79, 0x0a, 0x06, 0x41, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xab,
	0x01, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x85, 0x01, 0x0a,
	0x16, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x9f, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0xda, 0x04, 0x0a, 0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x31, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x31, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x32,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x32, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x32, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x32, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x33, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x33, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x33, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x34, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x34,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x34, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x34, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x1a, 0x78, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x97, 0x07,
	0xea, 0x41, 0x51, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x7d, 0x92, 0xd9, 0x21, 0xa2, 0x02, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0xde, 0x01, 0x08, 0x02, 0x12,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x3b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x3c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x0f, 0x0a, 0x0d, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x50, 0x05, 0x6a, 0x1c, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xb2, 0xdf, 0x21, 0x83, 0x03,
	0x0a, 0xb9, 0x02, 0x0a, 0x4b, 0x0a, 0x0c, 0x62, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2d,
	0x0a, 0x7b, 0x0a, 0x0d, 0x62, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2d, 0x1a, 0x26,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x2d, 0x2a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x3e, 0x0a,
	0x3c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x1b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x0c,
	0x62, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x3c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x05, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2,
	0x85, 0x2c, 0x41, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x13, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xd2, 0xa3, 0x22, 0x3f, 0x0a, 0x22, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0xe0, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff,
	0xd0, 0x02, 0x48, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x1b, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xd2, 0x84, 0xd1, 0x02,
	0x4a, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xa2, 0x80, 0xd1, 0x02, 0x4a,
	0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1alpha2_device_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1alpha2_device_proto_rawDescData = edgelq_devices_proto_v1alpha2_device_proto_rawDesc
)

func edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1alpha2_device_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1alpha2_device_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1alpha2_device_proto_rawDescData)
	})
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescData
}

var edgelq_devices_proto_v1alpha2_device_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var edgelq_devices_proto_v1alpha2_device_proto_msgTypes = make([]protoimpl.MessageInfo, 97)
var edgelq_devices_proto_v1alpha2_device_proto_goTypes = []interface{}{
	(Device_Spec_NetworkConfigMode)(0),                        // 0: ntt.devices.v1alpha2.Device_Spec_NetworkConfigMode
	(Device_Status_NetworkConfigState_NetworkConfigSource)(0), // 1: ntt.devices.v1alpha2.Device_Status_NetworkConfigState_NetworkConfigSource
	(Device_Status_ProxyConfigStatus_ProxyConfigSource)(0),    // 2: ntt.devices.v1alpha2.Device_Status_ProxyConfigStatus_ProxyConfigSource
	(*Device)(nil),                                   // 3: ntt.devices.v1alpha2.Device
	(*Device_Spec)(nil),                              // 4: ntt.devices.v1alpha2.Device.Spec
	(*Device_Status)(nil),                            // 5: ntt.devices.v1alpha2.Device.Status
	(*Device_PublicListingSpec)(nil),                 // 6: ntt.devices.v1alpha2.Device.PublicListingSpec
	(*Device_Spec_NetworkingConfig)(nil),             // 7: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig
	(*Device_Spec_NetplanConfig)(nil),                // 8: ntt.devices.v1alpha2.Device.Spec.NetplanConfig
	(*Device_Spec_SSHConfig)(nil),                    // 9: ntt.devices.v1alpha2.Device.Spec.SSHConfig
	(*Device_Spec_AttestationConfig)(nil),            // 10: ntt.devices.v1alpha2.Device.Spec.AttestationConfig
	(*Device_Spec_LoggingConfig)(nil),                // 11: ntt.devices.v1alpha2.Device.Spec.LoggingConfig
	(*Device_Spec_ProxyConfig)(nil),                  // 12: ntt.devices.v1alpha2.Device.Spec.ProxyConfig
	(*Device_Spec_Location)(nil),                     // 13: ntt.devices.v1alpha2.Device.Spec.Location
	(*Device_Spec_NetworkingConfig_CommonOpts)(nil),  // 14: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts
	(*Device_Spec_NetworkingConfig_EthOpts)(nil),     // 15: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthOpts
	(*Device_Spec_NetworkingConfig_WifiOpts)(nil),    // 16: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts
	(*Device_Spec_NetworkingConfig_BridgesOpts)(nil), // 17: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesOpts
	(*Device_Spec_NetworkingConfig_BondsOpts)(nil),   // 18: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsOpts
	(*Device_Spec_NetworkingConfig_TunnelsOpts)(nil), // 19: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsOpts
	(*Device_Spec_NetworkingConfig_VlansOpts)(nil),   // 20: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.VlansOpts
	(*Device_Spec_NetworkingConfig_ModemOpts)(nil),   // 21: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ModemOpts
	nil, // 22: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthernetsEntry
	nil, // 23: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifisEntry
	nil, // 24: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesEntry
	nil, // 25: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsEntry
	nil, // 26: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsEntry
	nil, // 27: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.VlansEntry
	nil, // 28: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ModemsEntry
	(*Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides)(nil), // 29: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	(*Device_Spec_NetworkingConfig_CommonOpts_Nameservers)(nil),   // 30: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Nameservers
	(*Device_Spec_NetworkingConfig_CommonOpts_Routes)(nil),        // 31: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Routes
	(*Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy)(nil), // 32: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.RoutingPolicy
	(*Device_Spec_NetworkingConfig_CommonOpts_Auth)(nil),          // 33: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Auth
	(*Device_Spec_NetworkingConfig_EthOpts_Match)(nil),            // 34: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthOpts.Match
	(*Device_Spec_NetworkingConfig_WifiOpts_Match)(nil),           // 35: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.Match
	(*Device_Spec_NetworkingConfig_WifiOpts_AccessPoint)(nil),     // 36: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.AccessPoint
	nil, // 37: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.AccessPointsEntry
	(*Device_Spec_NetworkingConfig_BridgesOpts_Parameters)(nil), // 38: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesOpts.Parameters
	(*Device_Spec_NetworkingConfig_BondsOpts_Parameters)(nil),   // 39: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsOpts.Parameters
	(*Device_Spec_NetworkingConfig_TunnelsOpts_Key)(nil),        // 40: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsOpts.Key
	(*Device_Spec_SSHConfig_AuthKey)(nil),                       // 41: ntt.devices.v1alpha2.Device.Spec.SSHConfig.AuthKey
	(*Device_Status_Address)(nil),                               // 42: ntt.devices.v1alpha2.Device.Status.Address
	(*Device_Status_Condition)(nil),                             // 43: ntt.devices.v1alpha2.Device.Status.Condition
	(*Device_Status_NetworkConfigState)(nil),                    // 44: ntt.devices.v1alpha2.Device.Status.NetworkConfigState
	(*Device_Status_ProxyConfigStatus)(nil),                     // 45: ntt.devices.v1alpha2.Device.Status.ProxyConfigStatus
	(*Device_Status_DeviceInfo)(nil),                            // 46: ntt.devices.v1alpha2.Device.Status.DeviceInfo
	(*Device_Status_NormalizedAddress)(nil),                     // 47: ntt.devices.v1alpha2.Device.Status.NormalizedAddress
	(*Device_Status_DeviceInfo_HardwareInformation)(nil),        // 48: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation
	(*Device_Status_DeviceInfo_NetworkInterface)(nil),           // 49: ntt.devices.v1alpha2.Device.Status.DeviceInfo.NetworkInterface
	nil, // 50: ntt.devices.v1alpha2.Device.Status.DeviceInfo.NetworkInterfacesEntry
	(*Device_Status_DeviceInfo_ControlPlaneInterfaceInfo)(nil),                // 51: ntt.devices.v1alpha2.Device.Status.DeviceInfo.ControlPlaneInterfaceInfo
	(*Device_Status_DeviceInfo_HardwareInformation_Capability)(nil),           // 52: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Capability
	(*Device_Status_DeviceInfo_HardwareInformation_OS)(nil),                   // 53: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.OS
	(*Device_Status_DeviceInfo_HardwareInformation_BIOS)(nil),                 // 54: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.BIOS
	(*Device_Status_DeviceInfo_HardwareInformation_System)(nil),               // 55: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.System
	(*Device_Status_DeviceInfo_HardwareInformation_CPU)(nil),                  // 56: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU
	(*Device_Status_DeviceInfo_HardwareInformation_Block)(nil),                // 57: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block
	(*Device_Status_DeviceInfo_HardwareInformation_Network)(nil),              // 58: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network
	(*Device_Status_DeviceInfo_HardwareInformation_GPU)(nil),                  // 59: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU
	(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice)(nil),            // 60: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.PCIDevice
	(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)(nil),           // 61: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo
	(*Device_Status_DeviceInfo_HardwareInformation_HailoInfo)(nil),            // 62: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.HailoInfo
	(*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo)(nil),           // 63: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.NvidiaInfo
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus)(nil),          // 64: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus
	(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration)(nil), // 65: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.System.Configuration
	(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)(nil),        // 66: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor
	(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)(nil),  // 67: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.Cache
	(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)(nil),           // 68: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.Disk
	(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)(nil), // 69: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.Disk.Partition
	(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)(nil),          // 70: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.NIC
	nil, // 71: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.NIC.SettingEntry
	(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)(nil),                  // 72: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU.GraphicCard
	(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)(nil),                // 73: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory
	(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)(nil),     // 74: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory.MemoryBank
	(*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo)(nil),        // 75: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.HailoInfo.HailoModuleInfo
	(*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo)(nil),               // 76: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.NvidiaInfo.GpuInfo
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings)(nil), // 77: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.RegistrationSettings
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr)(nil),              // 78: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.FiveGNr
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings)(nil),             // 79: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Settings
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer)(nil),        // 80: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.InitialBearer
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps)(nil),                  // 81: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Eps
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp)(nil),             // 82: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.ThreeGpp
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma)(nil),                 // 83: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Cdma
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality)(nil),        // 84: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalQuality
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic)(nil),              // 85: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Generic
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G)(nil),             // 86: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal5g
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X)(nil),         // 87: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalCdma1x
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo)(nil),           // 88: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalEvdo
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm)(nil),            // 89: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalGsm
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte)(nil),            // 90: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalLte
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh)(nil),        // 91: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalRefresh
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold)(nil),      // 92: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalThreshold
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts)(nil),           // 93: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalUmts
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal)(nil),               // 94: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus)(nil),            // 95: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SimStatus
	(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem)(nil),                // 96: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem
	nil, // 97: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.SimStatusEntry
	(*Device_Status_DeviceInfo_NetworkInterface_ASInfo)(nil),  // 98: ntt.devices.v1alpha2.Device.Status.DeviceInfo.NetworkInterface.ASInfo
	(*Device_Status_DeviceInfo_NetworkInterface_Carrier)(nil), // 99: ntt.devices.v1alpha2.Device.Status.DeviceInfo.NetworkInterface.Carrier
	(*ntt_meta.Meta)(nil),       // 100: ntt.types.Meta
	(*duration.Duration)(nil),   // 101: google.protobuf.Duration
	(*iam_iam_common.PCR)(nil),  // 102: ntt.iam.v1alpha2.PCR
	(*timestamp.Timestamp)(nil), // 103: google.protobuf.Timestamp
	(*latlng.LatLng)(nil),       // 104: google.type.LatLng
	(*Device_FieldMask)(nil),    // 105: ntt.devices.v1alpha2.Device_FieldMask
}
var edgelq_devices_proto_v1alpha2_device_proto_depIdxs = []int32{
	100, // 0: ntt.devices.v1alpha2.Device.metadata:type_name -> ntt.types.Meta
	4,   // 1: ntt.devices.v1alpha2.Device.spec:type_name -> ntt.devices.v1alpha2.Device.Spec
	5,   // 2: ntt.devices.v1alpha2.Device.status:type_name -> ntt.devices.v1alpha2.Device.Status
	6,   // 3: ntt.devices.v1alpha2.Device.public_listing_spec:type_name -> ntt.devices.v1alpha2.Device.PublicListingSpec
	8,   // 4: ntt.devices.v1alpha2.Device.Spec.netplan_config:type_name -> ntt.devices.v1alpha2.Device.Spec.NetplanConfig
	0,   // 5: ntt.devices.v1alpha2.Device.Spec.netplan_api_config_mode:type_name -> ntt.devices.v1alpha2.Device_Spec_NetworkConfigMode
	9,   // 6: ntt.devices.v1alpha2.Device.Spec.ssh_config:type_name -> ntt.devices.v1alpha2.Device.Spec.SSHConfig
	10,  // 7: ntt.devices.v1alpha2.Device.Spec.attestation_config:type_name -> ntt.devices.v1alpha2.Device.Spec.AttestationConfig
	11,  // 8: ntt.devices.v1alpha2.Device.Spec.logging_config:type_name -> ntt.devices.v1alpha2.Device.Spec.LoggingConfig
	12,  // 9: ntt.devices.v1alpha2.Device.Spec.proxy_config:type_name -> ntt.devices.v1alpha2.Device.Spec.ProxyConfig
	13,  // 10: ntt.devices.v1alpha2.Device.Spec.location:type_name -> ntt.devices.v1alpha2.Device.Spec.Location
	42,  // 11: ntt.devices.v1alpha2.Device.Status.addresses:type_name -> ntt.devices.v1alpha2.Device.Status.Address
	43,  // 12: ntt.devices.v1alpha2.Device.Status.conditions:type_name -> ntt.devices.v1alpha2.Device.Status.Condition
	44,  // 13: ntt.devices.v1alpha2.Device.Status.network_config_state:type_name -> ntt.devices.v1alpha2.Device.Status.NetworkConfigState
	45,  // 14: ntt.devices.v1alpha2.Device.Status.proxy_config_status:type_name -> ntt.devices.v1alpha2.Device.Status.ProxyConfigStatus
	46,  // 15: ntt.devices.v1alpha2.Device.Status.device_info:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo
	102, // 16: ntt.devices.v1alpha2.Device.Status.attestation_status:type_name -> ntt.iam.v1alpha2.PCR
	47,  // 17: ntt.devices.v1alpha2.Device.Status.normalized_address:type_name -> ntt.devices.v1alpha2.Device.Status.NormalizedAddress
	105, // 18: ntt.devices.v1alpha2.Device.PublicListingSpec.field_mask:type_name -> ntt.devices.v1alpha2.Device_FieldMask
	22,  // 19: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ethernets:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthernetsEntry
	23,  // 20: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.wifis:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifisEntry
	24,  // 21: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.bridges:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesEntry
	25,  // 22: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.bonds:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsEntry
	26,  // 23: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.tunnels:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsEntry
	27,  // 24: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.vlans:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.VlansEntry
	28,  // 25: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.modems:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ModemsEntry
	7,   // 26: ntt.devices.v1alpha2.Device.Spec.NetplanConfig.network:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig
	41,  // 27: ntt.devices.v1alpha2.Device.Spec.SSHConfig.ssh_authorized:type_name -> ntt.devices.v1alpha2.Device.Spec.SSHConfig.AuthKey
	101, // 28: ntt.devices.v1alpha2.Device.Spec.SSHConfig.reject_period:type_name -> google.protobuf.Duration
	34,  // 29: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthOpts.match:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthOpts.Match
	29,  // 30: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthOpts.dhcp4_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	29,  // 31: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthOpts.dhcp6_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	30,  // 32: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthOpts.nameservers:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Nameservers
	31,  // 33: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthOpts.routes:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Routes
	32,  // 34: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthOpts.routing_policy:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.RoutingPolicy
	33,  // 35: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthOpts.auth:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Auth
	35,  // 36: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.match:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.Match
	37,  // 37: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.access_points:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.AccessPointsEntry
	29,  // 38: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.dhcp4_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	29,  // 39: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.dhcp6_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	30,  // 40: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.nameservers:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Nameservers
	31,  // 41: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.routes:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Routes
	32,  // 42: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.routing_policy:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.RoutingPolicy
	33,  // 43: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.auth:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Auth
	38,  // 44: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesOpts.parameters:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesOpts.Parameters
	29,  // 45: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesOpts.dhcp4_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	29,  // 46: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesOpts.dhcp6_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	30,  // 47: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesOpts.nameservers:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Nameservers
	31,  // 48: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesOpts.routes:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Routes
	32,  // 49: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesOpts.routing_policy:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.RoutingPolicy
	33,  // 50: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesOpts.auth:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Auth
	39,  // 51: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsOpts.parameters:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsOpts.Parameters
	29,  // 52: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsOpts.dhcp4_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	29,  // 53: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsOpts.dhcp6_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	30,  // 54: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsOpts.nameservers:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Nameservers
	31,  // 55: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsOpts.routes:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Routes
	32,  // 56: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsOpts.routing_policy:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.RoutingPolicy
	33,  // 57: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsOpts.auth:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Auth
	29,  // 58: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsOpts.dhcp4_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	29,  // 59: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsOpts.dhcp6_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	30,  // 60: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsOpts.nameservers:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Nameservers
	31,  // 61: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsOpts.routes:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Routes
	32,  // 62: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsOpts.routing_policy:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.RoutingPolicy
	33,  // 63: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsOpts.auth:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Auth
	29,  // 64: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.VlansOpts.dhcp4_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	29,  // 65: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.VlansOpts.dhcp6_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	30,  // 66: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.VlansOpts.nameservers:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Nameservers
	31,  // 67: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.VlansOpts.routes:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Routes
	32,  // 68: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.VlansOpts.routing_policy:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.RoutingPolicy
	33,  // 69: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.VlansOpts.auth:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Auth
	29,  // 70: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ModemOpts.dhcp4_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	29,  // 71: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ModemOpts.dhcp6_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.DHCPOverrides
	30,  // 72: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ModemOpts.nameservers:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Nameservers
	31,  // 73: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ModemOpts.routes:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Routes
	32,  // 74: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ModemOpts.routing_policy:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.RoutingPolicy
	33,  // 75: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ModemOpts.auth:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Auth
	15,  // 76: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthernetsEntry.value:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.EthOpts
	16,  // 77: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifisEntry.value:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts
	17,  // 78: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesEntry.value:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BridgesOpts
	18,  // 79: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsEntry.value:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.BondsOpts
	19,  // 80: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsEntry.value:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.TunnelsOpts
	20,  // 81: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.VlansEntry.value:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.VlansOpts
	21,  // 82: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ModemsEntry.value:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.ModemOpts
	33,  // 83: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.AccessPoint.auth:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.CommonOpts.Auth
	36,  // 84: ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.AccessPointsEntry.value:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkingConfig.WifiOpts.AccessPoint
	103, // 85: ntt.devices.v1alpha2.Device.Status.Condition.last_heart_beat_time:type_name -> google.protobuf.Timestamp
	103, // 86: ntt.devices.v1alpha2.Device.Status.Condition.last_transition_time:type_name -> google.protobuf.Timestamp
	1,   // 87: ntt.devices.v1alpha2.Device.Status.NetworkConfigState.active_network_config_source:type_name -> ntt.devices.v1alpha2.Device_Status_NetworkConfigState_NetworkConfigSource
	1,   // 88: ntt.devices.v1alpha2.Device.Status.NetworkConfigState.desired_network_config_source:type_name -> ntt.devices.v1alpha2.Device_Status_NetworkConfigState_NetworkConfigSource
	8,   // 89: ntt.devices.v1alpha2.Device.Status.NetworkConfigState.default_config:type_name -> ntt.devices.v1alpha2.Device.Spec.NetplanConfig
	8,   // 90: ntt.devices.v1alpha2.Device.Status.NetworkConfigState.active_config:type_name -> ntt.devices.v1alpha2.Device.Spec.NetplanConfig
	8,   // 91: ntt.devices.v1alpha2.Device.Status.NetworkConfigState.desired_config:type_name -> ntt.devices.v1alpha2.Device.Spec.NetplanConfig
	2,   // 92: ntt.devices.v1alpha2.Device.Status.ProxyConfigStatus.active_config_source:type_name -> ntt.devices.v1alpha2.Device_Status_ProxyConfigStatus_ProxyConfigSource
	2,   // 93: ntt.devices.v1alpha2.Device.Status.ProxyConfigStatus.desired_config_source:type_name -> ntt.devices.v1alpha2.Device_Status_ProxyConfigStatus_ProxyConfigSource
	12,  // 94: ntt.devices.v1alpha2.Device.Status.ProxyConfigStatus.default_config:type_name -> ntt.devices.v1alpha2.Device.Spec.ProxyConfig
	12,  // 95: ntt.devices.v1alpha2.Device.Status.ProxyConfigStatus.active_config:type_name -> ntt.devices.v1alpha2.Device.Spec.ProxyConfig
	12,  // 96: ntt.devices.v1alpha2.Device.Status.ProxyConfigStatus.api_config:type_name -> ntt.devices.v1alpha2.Device.Spec.ProxyConfig
	48,  // 97: ntt.devices.v1alpha2.Device.Status.DeviceInfo.hardware_information:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation
	50,  // 98: ntt.devices.v1alpha2.Device.Status.DeviceInfo.network_interfaces:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.NetworkInterfacesEntry
	51,  // 99: ntt.devices.v1alpha2.Device.Status.DeviceInfo.control_plane_interface_info:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.ControlPlaneInterfaceInfo
	104, // 100: ntt.devices.v1alpha2.Device.Status.NormalizedAddress.coordinates:type_name -> google.type.LatLng
	53,  // 101: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.os:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.OS
	54,  // 102: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.bios:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.BIOS
	55,  // 103: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.system:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.System
	56,  // 104: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.cpu:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU
	57,  // 105: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.block:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block
	58,  // 106: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.network:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network
	59,  // 107: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.gpu:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU
	61,  // 108: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.memory_info:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo
	62,  // 109: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.hailo_info:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.HailoInfo
	63,  // 110: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.nvidia_info:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.NvidiaInfo
	64,  // 111: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.modem_status:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus
	98,  // 112: ntt.devices.v1alpha2.Device.Status.DeviceInfo.NetworkInterface.as_info:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.NetworkInterface.ASInfo
	99,  // 113: ntt.devices.v1alpha2.Device.Status.DeviceInfo.NetworkInterface.carrier:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.NetworkInterface.Carrier
	49,  // 114: ntt.devices.v1alpha2.Device.Status.DeviceInfo.NetworkInterfacesEntry.value:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.NetworkInterface
	65,  // 115: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.System.configuration:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.System.Configuration
	66,  // 116: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.processors:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor
	68,  // 117: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.disks:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.Disk
	70,  // 118: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.nics:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.NIC
	72,  // 119: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU.graphic_cards:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU.GraphicCard
	73,  // 120: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.memory:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory
	75,  // 121: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.HailoInfo.modules:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.HailoInfo.HailoModuleInfo
	76,  // 122: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.NvidiaInfo.gpus:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.NvidiaInfo.GpuInfo
	96,  // 123: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.modem:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem
	52,  // 124: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.capabilities:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Capability
	67,  // 125: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.cache_info:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.Cache
	69,  // 126: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.Disk.partitions:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.Disk.Partition
	71,  // 127: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.NIC.setting:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.NIC.SettingEntry
	60,  // 128: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU.GraphicCard.device:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.PCIDevice
	74,  // 129: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory.memory_banks:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory.MemoryBank
	77,  // 130: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.FiveGNr.registration_settings:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.RegistrationSettings
	79,  // 131: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.InitialBearer.settings:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Settings
	80,  // 132: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Eps.initial_bearer:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.InitialBearer
	78,  // 133: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.ThreeGpp.fiveg_nr:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.FiveGNr
	81,  // 134: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.ThreeGpp.eps:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Eps
	84,  // 135: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Generic.signal_quality:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalQuality
	86,  // 136: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal.five_g:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal5g
	87,  // 137: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal.cdma1x:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalCdma1x
	88,  // 138: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal.evdo:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalEvdo
	89,  // 139: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal.gsm:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalGsm
	90,  // 140: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal.lte_signal:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalLte
	91,  // 141: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal.refresh:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalRefresh
	92,  // 142: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal.threshold:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalThreshold
	93,  // 143: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal.umts:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SignalUmts
	82,  // 144: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.three_g_pp:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.ThreeGpp
	83,  // 145: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.cdma:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Cdma
	85,  // 146: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.generic:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Generic
	94,  // 147: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.signal:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Signal
	97,  // 148: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.sim_status:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.SimStatusEntry
	95,  // 149: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.Modem.SimStatusEntry.value:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.ModemStatus.SimStatus
	150, // [150:150] is the sub-list for method output_type
	150, // [150:150] is the sub-list for method input_type
	150, // [150:150] is the sub-list for extension type_name
	150, // [150:150] is the sub-list for extension extendee
	0,   // [0:150] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1alpha2_device_proto_init() }
func edgelq_devices_proto_v1alpha2_device_proto_init() {
	if edgelq_devices_proto_v1alpha2_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_PublicListingSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetplanConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_SSHConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_AttestationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_LoggingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_ProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_CommonOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_EthOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_WifiOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_BridgesOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_BondsOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_TunnelsOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_VlansOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_ModemOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_CommonOpts_DHCPOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_CommonOpts_Nameservers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_CommonOpts_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_CommonOpts_RoutingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_CommonOpts_Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_EthOpts_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_WifiOpts_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_WifiOpts_AccessPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_BridgesOpts_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_BondsOpts_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkingConfig_TunnelsOpts_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_SSHConfig_AuthKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_NetworkConfigState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_ProxyConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_NormalizedAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_ControlPlaneInterfaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Capability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_OS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_BIOS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_CPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_GPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_HailoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_HailoInfo_HailoModuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_NvidiaInfo_GpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_RegistrationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_FiveGNr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_InitialBearer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Eps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_ThreeGpp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Cdma); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Generic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal5G); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalCdma1X); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalEvdo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalGsm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalLte); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SignalUmts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_SimStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_ModemStatus_Modem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_NetworkInterface_ASInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_NetworkInterface_Carrier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1alpha2_device_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   97,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_devices_proto_v1alpha2_device_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1alpha2_device_proto_depIdxs,
		EnumInfos:         edgelq_devices_proto_v1alpha2_device_proto_enumTypes,
		MessageInfos:      edgelq_devices_proto_v1alpha2_device_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1alpha2_device_proto = out.File
	edgelq_devices_proto_v1alpha2_device_proto_rawDesc = nil
	edgelq_devices_proto_v1alpha2_device_proto_goTypes = nil
	edgelq_devices_proto_v1alpha2_device_proto_depIdxs = nil
}
