// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1alpha2/device.proto
// DO NOT EDIT!!!

package device

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.Actor{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Device Resource
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Device
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Metadata of Device
	Metadata *ntt_meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// Spec holds the expected state of the Device, meaning configurations.
	Spec *Device_Spec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	// Status of the Device reported from the actual device.
	Status            *Device_Status            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	PublicListingSpec *Device_PublicListingSpec `protobuf:"bytes,5,opt,name=public_listing_spec,json=publicListingSpec,proto3" json:"public_listing_spec,omitempty" firestore:"publicListingSpec"`
	// Display name for the device
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
}

func (m *Device) Reset() {
	*m = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device) ProtoMessage() {}

func (m *Device) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device) GotenMessage() {}

// Deprecated, Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0}
}

func (m *Device) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Device) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Device) GetSpec() *Device_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Device) GetStatus() *Device_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Device) GetPublicListingSpec() *Device_PublicListingSpec {
	if m != nil {
		return m.PublicListingSpec
	}
	return nil
}

func (m *Device) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Device) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device"))
	}
	m.Name = fv
}

func (m *Device) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Device"))
	}
	m.Metadata = fv
}

func (m *Device) SetSpec(fv *Device_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "Device"))
	}
	m.Spec = fv
}

func (m *Device) SetStatus(fv *Device_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Device"))
	}
	m.Status = fv
}

func (m *Device) SetPublicListingSpec(fv *Device_PublicListingSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PublicListingSpec", "Device"))
	}
	m.PublicListingSpec = fv
}

func (m *Device) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Device"))
	}
	m.DisplayName = fv
}

type Device_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The associated service account to the Device.
	// The agents in the device uses a key from this service account
	// when they issue any requests to our endpoints for authoroization and
	// authentication. `ProvisionServiceAccountToDevice` creates a new service
	// account and a key for the Device and asign the account to this fileld. If
	// you change the value of this field, the existing device would lose the
	// access to the resources in our services, that means you can revoke the
	// permissions from the device. You can manually set an empty value to do
	// so, or call `RemoveServiceAccountFromDevice`.
	ServiceAccount *iam_service_account.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty" firestore:"serviceAccount"`
	// The expected OS version in string (e.g. 1.0.2).
	// The device will automatically download the OS image and upgrade itself
	// with it. You can stack the OS upgrade progress in the Condition named
	// `OSReady` in Status.Conditions.
	OsVersion     string                     `protobuf:"bytes,2,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty" firestore:"osVersion"`
	NetConfig     *Device_Spec_NetworkConfig `protobuf:"bytes,3,opt,name=net_config,json=netConfig,proto3" json:"net_config,omitempty" firestore:"netConfig"`
	NetConfigMode string                     `protobuf:"bytes,4,opt,name=net_config_mode,json=netConfigMode,proto3" json:"net_config_mode,omitempty" firestore:"netConfigMode"`
	// The URL is dynamically constructed once the device is created or updated.
	// The URL will be based on the device hardware information
	// URL format: base_url/dedicated_path/iso_version/architecture/os_type
	OsImageUrl        string                         `protobuf:"bytes,5,opt,name=os_image_url,json=osImageUrl,proto3" json:"os_image_url,omitempty" firestore:"osImageUrl"`
	SshConfig         *Device_Spec_SSHConfig         `protobuf:"bytes,6,opt,name=ssh_config,json=sshConfig,proto3" json:"ssh_config,omitempty" firestore:"sshConfig"`
	AttestationConfig *Device_Spec_AttestationConfig `protobuf:"bytes,7,opt,name=attestation_config,json=attestationConfig,proto3" json:"attestation_config,omitempty" firestore:"attestationConfig"`
	// Disables the daemon on the device for device auto discovery on the
	// network. When it's enabled, avahi-daemon is launched on the device which
	// listens at UDP 5353. This daemon is useful to locate the device that
	// acquires an IP address with DHCP.
	DisableDeviceDiscovery bool                       `protobuf:"varint,8,opt,name=disable_device_discovery,json=disableDeviceDiscovery,proto3" json:"disable_device_discovery,omitempty" firestore:"disableDeviceDiscovery"`
	LoggingConfig          *Device_Spec_LoggingConfig `protobuf:"bytes,9,opt,name=logging_config,json=loggingConfig,proto3" json:"logging_config,omitempty" firestore:"loggingConfig"`
}

func (m *Device_Spec) Reset() {
	*m = Device_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec) ProtoMessage() {}

func (m *Device_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec) GotenMessage() {}

// Deprecated, Use Device_Spec.ProtoReflect.Descriptor instead.
func (*Device_Spec) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Device_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec) GetServiceAccount() *iam_service_account.Reference {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func (m *Device_Spec) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *Device_Spec) GetNetConfig() *Device_Spec_NetworkConfig {
	if m != nil {
		return m.NetConfig
	}
	return nil
}

func (m *Device_Spec) GetNetConfigMode() string {
	if m != nil {
		return m.NetConfigMode
	}
	return ""
}

func (m *Device_Spec) GetOsImageUrl() string {
	if m != nil {
		return m.OsImageUrl
	}
	return ""
}

func (m *Device_Spec) GetSshConfig() *Device_Spec_SSHConfig {
	if m != nil {
		return m.SshConfig
	}
	return nil
}

func (m *Device_Spec) GetAttestationConfig() *Device_Spec_AttestationConfig {
	if m != nil {
		return m.AttestationConfig
	}
	return nil
}

func (m *Device_Spec) GetDisableDeviceDiscovery() bool {
	if m != nil {
		return m.DisableDeviceDiscovery
	}
	return false
}

func (m *Device_Spec) GetLoggingConfig() *Device_Spec_LoggingConfig {
	if m != nil {
		return m.LoggingConfig
	}
	return nil
}

func (m *Device_Spec) SetServiceAccount(fv *iam_service_account.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceAccount", "Device_Spec"))
	}
	m.ServiceAccount = fv
}

func (m *Device_Spec) SetOsVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsVersion", "Device_Spec"))
	}
	m.OsVersion = fv
}

func (m *Device_Spec) SetNetConfig(fv *Device_Spec_NetworkConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetConfig", "Device_Spec"))
	}
	m.NetConfig = fv
}

func (m *Device_Spec) SetNetConfigMode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetConfigMode", "Device_Spec"))
	}
	m.NetConfigMode = fv
}

func (m *Device_Spec) SetOsImageUrl(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsImageUrl", "Device_Spec"))
	}
	m.OsImageUrl = fv
}

func (m *Device_Spec) SetSshConfig(fv *Device_Spec_SSHConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SshConfig", "Device_Spec"))
	}
	m.SshConfig = fv
}

func (m *Device_Spec) SetAttestationConfig(fv *Device_Spec_AttestationConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationConfig", "Device_Spec"))
	}
	m.AttestationConfig = fv
}

func (m *Device_Spec) SetDisableDeviceDiscovery(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableDeviceDiscovery", "Device_Spec"))
	}
	m.DisableDeviceDiscovery = fv
}

func (m *Device_Spec) SetLoggingConfig(fv *Device_Spec_LoggingConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LoggingConfig", "Device_Spec"))
	}
	m.LoggingConfig = fv
}

type Device_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of network addresses.
	Addresses []*Device_Status_Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	// List of conditions of the Device.
	Conditions []*Device_Status_Condition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty" firestore:"conditions"`
	// Device detailed information
	DeviceInfo        *Device_Status_DeviceInfo `protobuf:"bytes,3,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty" firestore:"deviceInfo"`
	AttestationStatus []*iam_iam_common.PCR     `protobuf:"bytes,4,rep,name=attestation_status,json=attestationStatus,proto3" json:"attestation_status,omitempty" firestore:"attestationStatus"`
}

func (m *Device_Status) Reset() {
	*m = Device_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status) ProtoMessage() {}

func (m *Device_Status) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status) GotenMessage() {}

// Deprecated, Use Device_Status.ProtoReflect.Descriptor instead.
func (*Device_Status) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Device_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status) GetAddresses() []*Device_Status_Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Status) GetConditions() []*Device_Status_Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Device_Status) GetDeviceInfo() *Device_Status_DeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (m *Device_Status) GetAttestationStatus() []*iam_iam_common.PCR {
	if m != nil {
		return m.AttestationStatus
	}
	return nil
}

func (m *Device_Status) SetAddresses(fv []*Device_Status_Address) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Status"))
	}
	m.Addresses = fv
}

func (m *Device_Status) SetConditions(fv []*Device_Status_Condition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Conditions", "Device_Status"))
	}
	m.Conditions = fv
}

func (m *Device_Status) SetDeviceInfo(fv *Device_Status_DeviceInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceInfo", "Device_Status"))
	}
	m.DeviceInfo = fv
}

func (m *Device_Status) SetAttestationStatus(fv []*iam_iam_common.PCR) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationStatus", "Device_Status"))
	}
	m.AttestationStatus = fv
}

type Device_PublicListingSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Enabled       bool              `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" firestore:"enabled"`
	FieldMask     *Device_FieldMask `protobuf:"bytes,2,opt,customtype=Device_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *Device_PublicListingSpec) Reset() {
	*m = Device_PublicListingSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_PublicListingSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_PublicListingSpec) ProtoMessage() {}

func (m *Device_PublicListingSpec) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_PublicListingSpec) GotenMessage() {}

// Deprecated, Use Device_PublicListingSpec.ProtoReflect.Descriptor instead.
func (*Device_PublicListingSpec) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Device_PublicListingSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_PublicListingSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_PublicListingSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_PublicListingSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_PublicListingSpec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Device_PublicListingSpec) GetFieldMask() *Device_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *Device_PublicListingSpec) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "Device_PublicListingSpec"))
	}
	m.Enabled = fv
}

func (m *Device_PublicListingSpec) SetFieldMask(fv *Device_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "Device_PublicListingSpec"))
	}
	m.FieldMask = fv
}

// NetworkConfig defines the network configuration of the Device.
// These fields are subset of the netplan configuration.
type Device_Spec_NetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Version       int32                                    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty" firestore:"version"`
	Ethernets     []*Device_Spec_NetworkConfig_EthOpts     `protobuf:"bytes,2,rep,name=ethernets,proto3" json:"ethernets,omitempty" firestore:"ethernets"`
	Wifis         []*Device_Spec_NetworkConfig_WifiOpts    `protobuf:"bytes,3,rep,name=wifis,proto3" json:"wifis,omitempty" firestore:"wifis"`
	Bridges       []*Device_Spec_NetworkConfig_BridgesOpts `protobuf:"bytes,4,rep,name=bridges,proto3" json:"bridges,omitempty" firestore:"bridges"`
	Bonds         []*Device_Spec_NetworkConfig_BondsOpts   `protobuf:"bytes,5,rep,name=bonds,proto3" json:"bonds,omitempty" firestore:"bonds"`
	Tunnels       []*Device_Spec_NetworkConfig_TunnelsOpts `protobuf:"bytes,6,rep,name=tunnels,proto3" json:"tunnels,omitempty" firestore:"tunnels"`
	Vlans         []*Device_Spec_NetworkConfig_VlansOpts   `protobuf:"bytes,7,rep,name=vlans,proto3" json:"vlans,omitempty" firestore:"vlans"`
}

func (m *Device_Spec_NetworkConfig) Reset() {
	*m = Device_Spec_NetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Device_Spec_NetworkConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig) GetEthernets() []*Device_Spec_NetworkConfig_EthOpts {
	if m != nil {
		return m.Ethernets
	}
	return nil
}

func (m *Device_Spec_NetworkConfig) GetWifis() []*Device_Spec_NetworkConfig_WifiOpts {
	if m != nil {
		return m.Wifis
	}
	return nil
}

func (m *Device_Spec_NetworkConfig) GetBridges() []*Device_Spec_NetworkConfig_BridgesOpts {
	if m != nil {
		return m.Bridges
	}
	return nil
}

func (m *Device_Spec_NetworkConfig) GetBonds() []*Device_Spec_NetworkConfig_BondsOpts {
	if m != nil {
		return m.Bonds
	}
	return nil
}

func (m *Device_Spec_NetworkConfig) GetTunnels() []*Device_Spec_NetworkConfig_TunnelsOpts {
	if m != nil {
		return m.Tunnels
	}
	return nil
}

func (m *Device_Spec_NetworkConfig) GetVlans() []*Device_Spec_NetworkConfig_VlansOpts {
	if m != nil {
		return m.Vlans
	}
	return nil
}

func (m *Device_Spec_NetworkConfig) SetVersion(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Version", "Device_Spec_NetworkConfig"))
	}
	m.Version = fv
}

func (m *Device_Spec_NetworkConfig) SetEthernets(fv []*Device_Spec_NetworkConfig_EthOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ethernets", "Device_Spec_NetworkConfig"))
	}
	m.Ethernets = fv
}

func (m *Device_Spec_NetworkConfig) SetWifis(fv []*Device_Spec_NetworkConfig_WifiOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Wifis", "Device_Spec_NetworkConfig"))
	}
	m.Wifis = fv
}

func (m *Device_Spec_NetworkConfig) SetBridges(fv []*Device_Spec_NetworkConfig_BridgesOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bridges", "Device_Spec_NetworkConfig"))
	}
	m.Bridges = fv
}

func (m *Device_Spec_NetworkConfig) SetBonds(fv []*Device_Spec_NetworkConfig_BondsOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bonds", "Device_Spec_NetworkConfig"))
	}
	m.Bonds = fv
}

func (m *Device_Spec_NetworkConfig) SetTunnels(fv []*Device_Spec_NetworkConfig_TunnelsOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tunnels", "Device_Spec_NetworkConfig"))
	}
	m.Tunnels = fv
}

func (m *Device_Spec_NetworkConfig) SetVlans(fv []*Device_Spec_NetworkConfig_VlansOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vlans", "Device_Spec_NetworkConfig"))
	}
	m.Vlans = fv
}

// SSHConfig defines the ssh configuration for the Device.
type Device_Spec_SSHConfig struct {
	state              protoimpl.MessageState
	sizeCache          protoimpl.SizeCache
	unknownFields      protoimpl.UnknownFields
	DisableSshServer   bool                             `protobuf:"varint,1,opt,name=disable_ssh_server,json=disableSshServer,proto3" json:"disable_ssh_server,omitempty" firestore:"disableSshServer"`
	DisableSshPassword bool                             `protobuf:"varint,2,opt,name=disable_ssh_password,json=disableSshPassword,proto3" json:"disable_ssh_password,omitempty" firestore:"disableSshPassword"`
	SshAuthorized      []*Device_Spec_SSHConfig_AuthKey `protobuf:"bytes,3,rep,name=ssh_authorized,json=sshAuthorized,proto3" json:"ssh_authorized,omitempty" firestore:"sshAuthorized"`
	IpAllowList        []string                         `protobuf:"bytes,4,rep,name=ip_allow_list,json=ipAllowList,proto3" json:"ip_allow_list,omitempty" firestore:"ipAllowList"`
	IpDenyList         []string                         `protobuf:"bytes,5,rep,name=ip_deny_list,json=ipDenyList,proto3" json:"ip_deny_list,omitempty" firestore:"ipDenyList"`
	RejectPeriod       *duration.Duration               `protobuf:"bytes,6,opt,name=reject_period,json=rejectPeriod,proto3" json:"reject_period,omitempty" firestore:"rejectPeriod"`
	DisableSshAuthkey  bool                             `protobuf:"varint,7,opt,name=disable_ssh_authkey,json=disableSshAuthkey,proto3" json:"disable_ssh_authkey,omitempty" firestore:"disableSshAuthkey"`
}

func (m *Device_Spec_SSHConfig) Reset() {
	*m = Device_Spec_SSHConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_SSHConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_SSHConfig) ProtoMessage() {}

func (m *Device_Spec_SSHConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_SSHConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_SSHConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_SSHConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *Device_Spec_SSHConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_SSHConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_SSHConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_SSHConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_SSHConfig) GetDisableSshServer() bool {
	if m != nil {
		return m.DisableSshServer
	}
	return false
}

func (m *Device_Spec_SSHConfig) GetDisableSshPassword() bool {
	if m != nil {
		return m.DisableSshPassword
	}
	return false
}

func (m *Device_Spec_SSHConfig) GetSshAuthorized() []*Device_Spec_SSHConfig_AuthKey {
	if m != nil {
		return m.SshAuthorized
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetIpAllowList() []string {
	if m != nil {
		return m.IpAllowList
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetIpDenyList() []string {
	if m != nil {
		return m.IpDenyList
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetRejectPeriod() *duration.Duration {
	if m != nil {
		return m.RejectPeriod
	}
	return nil
}

func (m *Device_Spec_SSHConfig) GetDisableSshAuthkey() bool {
	if m != nil {
		return m.DisableSshAuthkey
	}
	return false
}

func (m *Device_Spec_SSHConfig) SetDisableSshServer(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableSshServer", "Device_Spec_SSHConfig"))
	}
	m.DisableSshServer = fv
}

func (m *Device_Spec_SSHConfig) SetDisableSshPassword(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableSshPassword", "Device_Spec_SSHConfig"))
	}
	m.DisableSshPassword = fv
}

func (m *Device_Spec_SSHConfig) SetSshAuthorized(fv []*Device_Spec_SSHConfig_AuthKey) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SshAuthorized", "Device_Spec_SSHConfig"))
	}
	m.SshAuthorized = fv
}

func (m *Device_Spec_SSHConfig) SetIpAllowList(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAllowList", "Device_Spec_SSHConfig"))
	}
	m.IpAllowList = fv
}

func (m *Device_Spec_SSHConfig) SetIpDenyList(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpDenyList", "Device_Spec_SSHConfig"))
	}
	m.IpDenyList = fv
}

func (m *Device_Spec_SSHConfig) SetRejectPeriod(fv *duration.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RejectPeriod", "Device_Spec_SSHConfig"))
	}
	m.RejectPeriod = fv
}

func (m *Device_Spec_SSHConfig) SetDisableSshAuthkey(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableSshAuthkey", "Device_Spec_SSHConfig"))
	}
	m.DisableSshAuthkey = fv
}

type Device_Spec_AttestationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// If true, the droplet will try to attest itself.
	AttestationExpected bool `protobuf:"varint,1,opt,name=attestation_expected,json=attestationExpected,proto3" json:"attestation_expected,omitempty" firestore:"attestationExpected"`
	// Attestation domain for device attestation.
	AttestationDomain *iam_attestation_domain.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=attestation_domain,json=attestationDomain,proto3" json:"attestation_domain,omitempty" firestore:"attestationDomain"`
	// Insecure, use for dev only.
	// If non-zero, droplet will use an in-memory TPM simulator instead of an
	// actual, physical one, using the provided seed as initialization seed.
	// OK, this is not *actually* insecure, since server-side should verify
	// trustworthiness of the key anyways (the entire point of verification
	// protocol after all), but it's better to mark it this way for people who
	// don't read the documentation.
	//
	// This field is designed to be used for development purposes, as it
	// allows for running the attestation protocol on devices which don't have
	// a TMP chip. To make it work, ensure that attestation domain policies
	// are configured for development as well (depends on which aspect we're
	// testing; at the very least
	// insecure_skip_manufacturer_ekcert_verification should be probably set
	// to true).
	InsecureUseTpmSimulatorSeed int32 `protobuf:"varint,3,opt,name=insecure_use_tpm_simulator_seed,json=insecureUseTpmSimulatorSeed,proto3" json:"insecure_use_tpm_simulator_seed,omitempty" firestore:"insecureUseTpmSimulatorSeed"`
}

func (m *Device_Spec_AttestationConfig) Reset() {
	*m = Device_Spec_AttestationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_AttestationConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_AttestationConfig) ProtoMessage() {}

func (m *Device_Spec_AttestationConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_AttestationConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_AttestationConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_AttestationConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (m *Device_Spec_AttestationConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_AttestationConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_AttestationConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_AttestationConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_AttestationConfig) GetAttestationExpected() bool {
	if m != nil {
		return m.AttestationExpected
	}
	return false
}

func (m *Device_Spec_AttestationConfig) GetAttestationDomain() *iam_attestation_domain.Reference {
	if m != nil {
		return m.AttestationDomain
	}
	return nil
}

func (m *Device_Spec_AttestationConfig) GetInsecureUseTpmSimulatorSeed() int32 {
	if m != nil {
		return m.InsecureUseTpmSimulatorSeed
	}
	return int32(0)
}

func (m *Device_Spec_AttestationConfig) SetAttestationExpected(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationExpected", "Device_Spec_AttestationConfig"))
	}
	m.AttestationExpected = fv
}

func (m *Device_Spec_AttestationConfig) SetAttestationDomain(fv *iam_attestation_domain.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AttestationDomain", "Device_Spec_AttestationConfig"))
	}
	m.AttestationDomain = fv
}

func (m *Device_Spec_AttestationConfig) SetInsecureUseTpmSimulatorSeed(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "InsecureUseTpmSimulatorSeed", "Device_Spec_AttestationConfig"))
	}
	m.InsecureUseTpmSimulatorSeed = fv
}

type Device_Spec_LoggingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Log priority as understood by systemd (0 - emergency, 1 - alert, 2 -
	// critical, 3 - error, 4 - warning, 5 - notice, 6 - informational, 7 -
	// debug). Journal logs with this priority and higher will be uploaded to
	// the server.
	Priority int32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty" firestore:"priority"`
	// List of systemd unit names to monitor for logs, e.g.
	// NetworkManager.service, docker.service.
	// Leave empty to export all journald logs.
	Units []string `protobuf:"bytes,2,rep,name=units,proto3" json:"units,omitempty" firestore:"units"`
	// Whether the journald log exporter is enabled.
	EnableJournalExport bool `protobuf:"varint,3,opt,name=enable_journal_export,json=enableJournalExport,proto3" json:"enable_journal_export,omitempty" firestore:"enableJournalExport"`
}

func (m *Device_Spec_LoggingConfig) Reset() {
	*m = Device_Spec_LoggingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_LoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_LoggingConfig) ProtoMessage() {}

func (m *Device_Spec_LoggingConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_LoggingConfig) GotenMessage() {}

// Deprecated, Use Device_Spec_LoggingConfig.ProtoReflect.Descriptor instead.
func (*Device_Spec_LoggingConfig) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (m *Device_Spec_LoggingConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_LoggingConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_LoggingConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_LoggingConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_LoggingConfig) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return int32(0)
}

func (m *Device_Spec_LoggingConfig) GetUnits() []string {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *Device_Spec_LoggingConfig) GetEnableJournalExport() bool {
	if m != nil {
		return m.EnableJournalExport
	}
	return false
}

func (m *Device_Spec_LoggingConfig) SetPriority(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Priority", "Device_Spec_LoggingConfig"))
	}
	m.Priority = fv
}

func (m *Device_Spec_LoggingConfig) SetUnits(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Units", "Device_Spec_LoggingConfig"))
	}
	m.Units = fv
}

func (m *Device_Spec_LoggingConfig) SetEnableJournalExport(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnableJournalExport", "Device_Spec_LoggingConfig"))
	}
	m.EnableJournalExport = fv
}

type Device_Spec_NetworkConfig_CommonOpts struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	Renderer          string                                              `protobuf:"bytes,1,opt,name=renderer,proto3" json:"renderer,omitempty" firestore:"renderer"`
	Dhcp4             bool                                                `protobuf:"varint,2,opt,name=dhcp4,proto3" json:"dhcp4,omitempty" firestore:"dhcp4"`
	Dhcp6             bool                                                `protobuf:"varint,3,opt,name=dhcp6,proto3" json:"dhcp6,omitempty" firestore:"dhcp6"`
	Ipv6Privacy       bool                                                `protobuf:"varint,4,opt,name=ipv6_privacy,json=ipv6Privacy,proto3" json:"ipv6_privacy,omitempty" firestore:"ipv6Privacy"`
	LinkLocal         []string                                            `protobuf:"bytes,5,rep,name=link_local,json=linkLocal,proto3" json:"link_local,omitempty" firestore:"linkLocal"`
	Critical          bool                                                `protobuf:"varint,6,opt,name=critical,proto3" json:"critical,omitempty" firestore:"critical"`
	DhcpIdentifier    string                                              `protobuf:"bytes,7,opt,name=dhcp_identifier,json=dhcpIdentifier,proto3" json:"dhcp_identifier,omitempty" firestore:"dhcpIdentifier"`
	Dhcp4Overrides    *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,8,opt,name=dhcp4_overrides,json=dhcp4Overrides,proto3" json:"dhcp4_overrides,omitempty" firestore:"dhcp4Overrides"`
	Dhcp6Overrides    *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides `protobuf:"bytes,9,opt,name=dhcp6_overrides,json=dhcp6Overrides,proto3" json:"dhcp6_overrides,omitempty" firestore:"dhcp6Overrides"`
	AcceptRa          bool                                                `protobuf:"varint,10,opt,name=accept_ra,json=acceptRa,proto3" json:"accept_ra,omitempty" firestore:"acceptRa"`
	Addresses         []string                                            `protobuf:"bytes,11,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	Gateway4          string                                              `protobuf:"bytes,12,opt,name=gateway4,proto3" json:"gateway4,omitempty" firestore:"gateway4"`
	Gateway6          string                                              `protobuf:"bytes,13,opt,name=gateway6,proto3" json:"gateway6,omitempty" firestore:"gateway6"`
	Nameservers       *Device_Spec_NetworkConfig_CommonOpts_Nameservers   `protobuf:"bytes,14,opt,name=nameservers,proto3" json:"nameservers,omitempty" firestore:"nameservers"`
	Macaddress        string                                              `protobuf:"bytes,15,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Mtu               int32                                               `protobuf:"varint,16,opt,name=mtu,proto3" json:"mtu,omitempty" firestore:"mtu"`
	Optional          bool                                                `protobuf:"varint,17,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
	OptionalAddresses []string                                            `protobuf:"bytes,18,rep,name=optional_addresses,json=optionalAddresses,proto3" json:"optional_addresses,omitempty" firestore:"optionalAddresses"`
	Routes            []*Device_Spec_NetworkConfig_CommonOpts_Routes      `protobuf:"bytes,19,rep,name=routes,proto3" json:"routes,omitempty" firestore:"routes"`
	RoutingPolicy     *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy `protobuf:"bytes,20,opt,name=routing_policy,json=routingPolicy,proto3" json:"routing_policy,omitempty" firestore:"routingPolicy"`
	Auth              *Device_Spec_NetworkConfig_CommonOpts_Auth          `protobuf:"bytes,21,opt,name=auth,proto3" json:"auth,omitempty" firestore:"auth"`
}

func (m *Device_Spec_NetworkConfig_CommonOpts) Reset() {
	*m = Device_Spec_NetworkConfig_CommonOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_CommonOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_CommonOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_CommonOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_CommonOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (m *Device_Spec_NetworkConfig_CommonOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetRenderer() string {
	if m != nil {
		return m.Renderer
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetDhcp4() bool {
	if m != nil {
		return m.Dhcp4
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetDhcp6() bool {
	if m != nil {
		return m.Dhcp6
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetIpv6Privacy() bool {
	if m != nil {
		return m.Ipv6Privacy
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetLinkLocal() []string {
	if m != nil {
		return m.LinkLocal
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetCritical() bool {
	if m != nil {
		return m.Critical
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetDhcpIdentifier() string {
	if m != nil {
		return m.DhcpIdentifier
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetDhcp4Overrides() *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp4Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetDhcp6Overrides() *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides {
	if m != nil {
		return m.Dhcp6Overrides
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetAcceptRa() bool {
	if m != nil {
		return m.AcceptRa
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetGateway4() string {
	if m != nil {
		return m.Gateway4
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetGateway6() string {
	if m != nil {
		return m.Gateway6
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetNameservers() *Device_Spec_NetworkConfig_CommonOpts_Nameservers {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetOptionalAddresses() []string {
	if m != nil {
		return m.OptionalAddresses
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetRoutes() []*Device_Spec_NetworkConfig_CommonOpts_Routes {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetRoutingPolicy() *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy {
	if m != nil {
		return m.RoutingPolicy
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_CommonOpts) GetAuth() *Device_Spec_NetworkConfig_CommonOpts_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetRenderer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Renderer", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Renderer = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetDhcp4(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Dhcp4 = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetDhcp6(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Dhcp6 = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetIpv6Privacy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ipv6Privacy", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Ipv6Privacy = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetLinkLocal(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LinkLocal", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.LinkLocal = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetCritical(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Critical", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Critical = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetDhcpIdentifier(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DhcpIdentifier", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.DhcpIdentifier = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetDhcp4Overrides(fv *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp4Overrides", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Dhcp4Overrides = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetDhcp6Overrides(fv *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dhcp6Overrides", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Dhcp6Overrides = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetAcceptRa(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AcceptRa", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.AcceptRa = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Addresses = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetGateway4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway4", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Gateway4 = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetGateway6(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gateway6", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Gateway6 = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetNameservers(fv *Device_Spec_NetworkConfig_CommonOpts_Nameservers) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nameservers", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Nameservers = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetMtu(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mtu", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Mtu = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Optional = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetOptionalAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OptionalAddresses", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.OptionalAddresses = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetRoutes(fv []*Device_Spec_NetworkConfig_CommonOpts_Routes) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Routes", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Routes = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetRoutingPolicy(fv *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RoutingPolicy", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.RoutingPolicy = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts) SetAuth(fv *Device_Spec_NetworkConfig_CommonOpts_Auth) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Auth", "Device_Spec_NetworkConfig_CommonOpts"))
	}
	m.Auth = fv
}

type Device_Spec_NetworkConfig_EthOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Match         *Device_Spec_NetworkConfig_EthOpts_Match `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty" firestore:"match"`
	SetName       string                                   `protobuf:"bytes,2,opt,name=set_name,json=setName,proto3" json:"set_name,omitempty" firestore:"setName"`
	Wakeonlan     bool                                     `protobuf:"varint,3,opt,name=wakeonlan,proto3" json:"wakeonlan,omitempty" firestore:"wakeonlan"`
	Opts          *Device_Spec_NetworkConfig_CommonOpts    `protobuf:"bytes,4,opt,name=opts,proto3" json:"opts,omitempty" firestore:"opts"`
	Name          string                                   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *Device_Spec_NetworkConfig_EthOpts) Reset() {
	*m = Device_Spec_NetworkConfig_EthOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_EthOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_EthOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_EthOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_EthOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_EthOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_EthOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (m *Device_Spec_NetworkConfig_EthOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_EthOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_EthOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_EthOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_EthOpts) GetMatch() *Device_Spec_NetworkConfig_EthOpts_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_EthOpts) GetSetName() string {
	if m != nil {
		return m.SetName
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_EthOpts) GetWakeonlan() bool {
	if m != nil {
		return m.Wakeonlan
	}
	return false
}

func (m *Device_Spec_NetworkConfig_EthOpts) GetOpts() *Device_Spec_NetworkConfig_CommonOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_EthOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_EthOpts) SetMatch(fv *Device_Spec_NetworkConfig_EthOpts_Match) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Match", "Device_Spec_NetworkConfig_EthOpts"))
	}
	m.Match = fv
}

func (m *Device_Spec_NetworkConfig_EthOpts) SetSetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SetName", "Device_Spec_NetworkConfig_EthOpts"))
	}
	m.SetName = fv
}

func (m *Device_Spec_NetworkConfig_EthOpts) SetWakeonlan(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Wakeonlan", "Device_Spec_NetworkConfig_EthOpts"))
	}
	m.Wakeonlan = fv
}

func (m *Device_Spec_NetworkConfig_EthOpts) SetOpts(fv *Device_Spec_NetworkConfig_CommonOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Opts", "Device_Spec_NetworkConfig_EthOpts"))
	}
	m.Opts = fv
}

type Device_Spec_NetworkConfig_WifiOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Match         *Device_Spec_NetworkConfig_WifiOpts_Match         `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty" firestore:"match"`
	SetName       string                                            `protobuf:"bytes,2,opt,name=set_name,json=setName,proto3" json:"set_name,omitempty" firestore:"setName"`
	Wakeonlan     bool                                              `protobuf:"varint,3,opt,name=wakeonlan,proto3" json:"wakeonlan,omitempty" firestore:"wakeonlan"`
	Opts          *Device_Spec_NetworkConfig_CommonOpts             `protobuf:"bytes,4,opt,name=opts,proto3" json:"opts,omitempty" firestore:"opts"`
	AccessPoints  []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint `protobuf:"bytes,5,rep,name=access_points,json=accessPoints,proto3" json:"access_points,omitempty" firestore:"accessPoints"`
	Name          string                                            `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *Device_Spec_NetworkConfig_WifiOpts) Reset() {
	*m = Device_Spec_NetworkConfig_WifiOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_WifiOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_WifiOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_WifiOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_WifiOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_WifiOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_WifiOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (m *Device_Spec_NetworkConfig_WifiOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts) GetMatch() *Device_Spec_NetworkConfig_WifiOpts_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_WifiOpts) GetSetName() string {
	if m != nil {
		return m.SetName
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_WifiOpts) GetWakeonlan() bool {
	if m != nil {
		return m.Wakeonlan
	}
	return false
}

func (m *Device_Spec_NetworkConfig_WifiOpts) GetOpts() *Device_Spec_NetworkConfig_CommonOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_WifiOpts) GetAccessPoints() []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint {
	if m != nil {
		return m.AccessPoints
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_WifiOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_WifiOpts) SetMatch(fv *Device_Spec_NetworkConfig_WifiOpts_Match) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Match", "Device_Spec_NetworkConfig_WifiOpts"))
	}
	m.Match = fv
}

func (m *Device_Spec_NetworkConfig_WifiOpts) SetSetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SetName", "Device_Spec_NetworkConfig_WifiOpts"))
	}
	m.SetName = fv
}

func (m *Device_Spec_NetworkConfig_WifiOpts) SetWakeonlan(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Wakeonlan", "Device_Spec_NetworkConfig_WifiOpts"))
	}
	m.Wakeonlan = fv
}

func (m *Device_Spec_NetworkConfig_WifiOpts) SetOpts(fv *Device_Spec_NetworkConfig_CommonOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Opts", "Device_Spec_NetworkConfig_WifiOpts"))
	}
	m.Opts = fv
}

func (m *Device_Spec_NetworkConfig_WifiOpts) SetAccessPoints(fv []*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AccessPoints", "Device_Spec_NetworkConfig_WifiOpts"))
	}
	m.AccessPoints = fv
}

type Device_Spec_NetworkConfig_BridgesOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Opts          *Device_Spec_NetworkConfig_CommonOpts             `protobuf:"bytes,1,opt,name=opts,proto3" json:"opts,omitempty" firestore:"opts"`
	Interfaces    []string                                          `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty" firestore:"interfaces"`
	Parameters    *Device_Spec_NetworkConfig_BridgesOpts_Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" firestore:"parameters"`
	Name          string                                            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) Reset() {
	*m = Device_Spec_NetworkConfig_BridgesOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_BridgesOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_BridgesOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_BridgesOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_BridgesOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_BridgesOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) GetOpts() *Device_Spec_NetworkConfig_CommonOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) GetParameters() *Device_Spec_NetworkConfig_BridgesOpts_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) SetOpts(fv *Device_Spec_NetworkConfig_CommonOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Opts", "Device_Spec_NetworkConfig_BridgesOpts"))
	}
	m.Opts = fv
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) SetInterfaces(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interfaces", "Device_Spec_NetworkConfig_BridgesOpts"))
	}
	m.Interfaces = fv
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) SetParameters(fv *Device_Spec_NetworkConfig_BridgesOpts_Parameters) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parameters", "Device_Spec_NetworkConfig_BridgesOpts"))
	}
	m.Parameters = fv
}

func (m *Device_Spec_NetworkConfig_BridgesOpts) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Spec_NetworkConfig_BridgesOpts"))
	}
	m.Name = fv
}

type Device_Spec_NetworkConfig_BondsOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Opts          *Device_Spec_NetworkConfig_CommonOpts           `protobuf:"bytes,1,opt,name=opts,proto3" json:"opts,omitempty" firestore:"opts"`
	Interfaces    []string                                        `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty" firestore:"interfaces"`
	Parameters    *Device_Spec_NetworkConfig_BondsOpts_Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" firestore:"parameters"`
	Name          string                                          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *Device_Spec_NetworkConfig_BondsOpts) Reset() {
	*m = Device_Spec_NetworkConfig_BondsOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_BondsOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_BondsOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_BondsOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_BondsOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_BondsOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_BondsOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

func (m *Device_Spec_NetworkConfig_BondsOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_BondsOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_BondsOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_BondsOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_BondsOpts) GetOpts() *Device_Spec_NetworkConfig_CommonOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_BondsOpts) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_BondsOpts) GetParameters() *Device_Spec_NetworkConfig_BondsOpts_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_BondsOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BondsOpts) SetOpts(fv *Device_Spec_NetworkConfig_CommonOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Opts", "Device_Spec_NetworkConfig_BondsOpts"))
	}
	m.Opts = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts) SetInterfaces(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interfaces", "Device_Spec_NetworkConfig_BondsOpts"))
	}
	m.Interfaces = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts) SetParameters(fv *Device_Spec_NetworkConfig_BondsOpts_Parameters) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parameters", "Device_Spec_NetworkConfig_BondsOpts"))
	}
	m.Parameters = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Spec_NetworkConfig_BondsOpts"))
	}
	m.Name = fv
}

type Device_Spec_NetworkConfig_TunnelsOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Opts          *Device_Spec_NetworkConfig_CommonOpts `protobuf:"bytes,1,opt,name=opts,proto3" json:"opts,omitempty" firestore:"opts"`
	Mode          string                                `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty" firestore:"mode"`
	Local         string                                `protobuf:"bytes,3,opt,name=local,proto3" json:"local,omitempty" firestore:"local"`
	Remote        string                                `protobuf:"bytes,4,opt,name=remote,proto3" json:"remote,omitempty" firestore:"remote"`
	Key           int32                                 `protobuf:"varint,5,opt,name=key,proto3" json:"key,omitempty" firestore:"key"`
	Name          string                                `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) Reset() {
	*m = Device_Spec_NetworkConfig_TunnelsOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_TunnelsOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_TunnelsOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_TunnelsOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_TunnelsOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 5}
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) GetOpts() *Device_Spec_NetworkConfig_CommonOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) GetLocal() string {
	if m != nil {
		return m.Local
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) GetRemote() string {
	if m != nil {
		return m.Remote
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) SetOpts(fv *Device_Spec_NetworkConfig_CommonOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Opts", "Device_Spec_NetworkConfig_TunnelsOpts"))
	}
	m.Opts = fv
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) SetMode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "Device_Spec_NetworkConfig_TunnelsOpts"))
	}
	m.Mode = fv
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) SetLocal(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Local", "Device_Spec_NetworkConfig_TunnelsOpts"))
	}
	m.Local = fv
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) SetRemote(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Remote", "Device_Spec_NetworkConfig_TunnelsOpts"))
	}
	m.Remote = fv
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) SetKey(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "Device_Spec_NetworkConfig_TunnelsOpts"))
	}
	m.Key = fv
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Spec_NetworkConfig_TunnelsOpts"))
	}
	m.Name = fv
}

type Device_Spec_NetworkConfig_VlansOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Opts          *Device_Spec_NetworkConfig_CommonOpts `protobuf:"bytes,1,opt,name=opts,proto3" json:"opts,omitempty" firestore:"opts"`
	Id            int32                                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" firestore:"id"`
	Link          string                                `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty" firestore:"link"`
	Name          string                                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *Device_Spec_NetworkConfig_VlansOpts) Reset() {
	*m = Device_Spec_NetworkConfig_VlansOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_VlansOpts) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_VlansOpts) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_VlansOpts) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_VlansOpts) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_VlansOpts.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_VlansOpts) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 6}
}

func (m *Device_Spec_NetworkConfig_VlansOpts) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_VlansOpts) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_VlansOpts) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_VlansOpts) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_VlansOpts) GetOpts() *Device_Spec_NetworkConfig_CommonOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_VlansOpts) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_VlansOpts) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_VlansOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_VlansOpts) SetOpts(fv *Device_Spec_NetworkConfig_CommonOpts) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Opts", "Device_Spec_NetworkConfig_VlansOpts"))
	}
	m.Opts = fv
}

func (m *Device_Spec_NetworkConfig_VlansOpts) SetId(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Id", "Device_Spec_NetworkConfig_VlansOpts"))
	}
	m.Id = fv
}

func (m *Device_Spec_NetworkConfig_VlansOpts) SetLink(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Link", "Device_Spec_NetworkConfig_VlansOpts"))
	}
	m.Link = fv
}

func (m *Device_Spec_NetworkConfig_VlansOpts) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Spec_NetworkConfig_VlansOpts"))
	}
	m.Name = fv
}

type Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	UseDns        bool   `protobuf:"varint,1,opt,name=use_dns,json=useDns,proto3" json:"use_dns,omitempty" firestore:"useDns"`
	UseNtp        bool   `protobuf:"varint,2,opt,name=use_ntp,json=useNtp,proto3" json:"use_ntp,omitempty" firestore:"useNtp"`
	SendHostname  bool   `protobuf:"varint,3,opt,name=send_hostname,json=sendHostname,proto3" json:"send_hostname,omitempty" firestore:"sendHostname"`
	UseHostname   bool   `protobuf:"varint,4,opt,name=use_hostname,json=useHostname,proto3" json:"use_hostname,omitempty" firestore:"useHostname"`
	UseMtu        bool   `protobuf:"varint,5,opt,name=use_mtu,json=useMtu,proto3" json:"use_mtu,omitempty" firestore:"useMtu"`
	Hostname      string `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty" firestore:"hostname"`
	UseRoutes     bool   `protobuf:"varint,7,opt,name=use_routes,json=useRoutes,proto3" json:"use_routes,omitempty" firestore:"useRoutes"`
	RouteMetric   string `protobuf:"bytes,8,opt,name=route_metric,json=routeMetric,proto3" json:"route_metric,omitempty" firestore:"routeMetric"`
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) Reset() {
	*m = Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) GetUseDns() bool {
	if m != nil {
		return m.UseDns
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) GetUseNtp() bool {
	if m != nil {
		return m.UseNtp
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) GetSendHostname() bool {
	if m != nil {
		return m.SendHostname
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) GetUseHostname() bool {
	if m != nil {
		return m.UseHostname
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) GetUseMtu() bool {
	if m != nil {
		return m.UseMtu
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) GetUseRoutes() bool {
	if m != nil {
		return m.UseRoutes
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) GetRouteMetric() string {
	if m != nil {
		return m.RouteMetric
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) SetUseDns(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseDns", "Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides"))
	}
	m.UseDns = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) SetUseNtp(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseNtp", "Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides"))
	}
	m.UseNtp = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) SetSendHostname(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SendHostname", "Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides"))
	}
	m.SendHostname = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) SetUseHostname(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseHostname", "Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides"))
	}
	m.UseHostname = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) SetUseMtu(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseMtu", "Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides"))
	}
	m.UseMtu = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) SetHostname(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Hostname", "Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides"))
	}
	m.Hostname = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) SetUseRoutes(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseRoutes", "Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides"))
	}
	m.UseRoutes = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides) SetRouteMetric(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RouteMetric", "Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides"))
	}
	m.RouteMetric = fv
}

type Device_Spec_NetworkConfig_CommonOpts_Nameservers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Search        []string `protobuf:"bytes,1,rep,name=search,proto3" json:"search,omitempty" firestore:"search"`
	Addresses     []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Nameservers) Reset() {
	*m = Device_Spec_NetworkConfig_CommonOpts_Nameservers{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Nameservers) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts_Nameservers) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_CommonOpts_Nameservers) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts_Nameservers) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_CommonOpts_Nameservers.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_CommonOpts_Nameservers) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Nameservers) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Nameservers) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Nameservers) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Nameservers) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Nameservers) GetSearch() []string {
	if m != nil {
		return m.Search
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Nameservers) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Nameservers) SetSearch(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Search", "Device_Spec_NetworkConfig_CommonOpts_Nameservers"))
	}
	m.Search = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Nameservers) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "Device_Spec_NetworkConfig_CommonOpts_Nameservers"))
	}
	m.Addresses = fv
}

type Device_Spec_NetworkConfig_CommonOpts_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	From          string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" firestore:"from"`
	To            string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty" firestore:"to"`
	Via           string `protobuf:"bytes,3,opt,name=via,proto3" json:"via,omitempty" firestore:"via"`
	OnLink        bool   `protobuf:"varint,4,opt,name=on_link,json=onLink,proto3" json:"on_link,omitempty" firestore:"onLink"`
	Metric        int32  `protobuf:"varint,5,opt,name=metric,proto3" json:"metric,omitempty" firestore:"metric"`
	Type          string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	Scope         string `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty" firestore:"scope"`
	Table         int32  `protobuf:"varint,8,opt,name=table,proto3" json:"table,omitempty" firestore:"table"`
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) Reset() {
	*m = Device_Spec_NetworkConfig_CommonOpts_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts_Routes) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts_Routes) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_CommonOpts_Routes.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_CommonOpts_Routes) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2}
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) GetVia() string {
	if m != nil {
		return m.Via
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) GetOnLink() bool {
	if m != nil {
		return m.OnLink
	}
	return false
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) GetMetric() int32 {
	if m != nil {
		return m.Metric
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) GetTable() int32 {
	if m != nil {
		return m.Table
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) SetFrom(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "From", "Device_Spec_NetworkConfig_CommonOpts_Routes"))
	}
	m.From = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) SetTo(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "To", "Device_Spec_NetworkConfig_CommonOpts_Routes"))
	}
	m.To = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) SetVia(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Via", "Device_Spec_NetworkConfig_CommonOpts_Routes"))
	}
	m.Via = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) SetOnLink(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OnLink", "Device_Spec_NetworkConfig_CommonOpts_Routes"))
	}
	m.OnLink = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) SetMetric(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metric", "Device_Spec_NetworkConfig_CommonOpts_Routes"))
	}
	m.Metric = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Spec_NetworkConfig_CommonOpts_Routes"))
	}
	m.Type = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) SetScope(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Scope", "Device_Spec_NetworkConfig_CommonOpts_Routes"))
	}
	m.Scope = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Routes) SetTable(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Table", "Device_Spec_NetworkConfig_CommonOpts_Routes"))
	}
	m.Table = fv
}

type Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	From          string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" firestore:"from"`
	To            string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty" firestore:"to"`
	Table         int32  `protobuf:"varint,3,opt,name=table,proto3" json:"table,omitempty" firestore:"table"`
	Priority      int32  `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty" firestore:"priority"`
	Mark          int32  `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty" firestore:"mark"`
	TypeOfService int32  `protobuf:"varint,6,opt,name=type_of_service,json=typeOfService,proto3" json:"type_of_service,omitempty" firestore:"typeOfService"`
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) Reset() {
	*m = Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0, 3}
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) GetTable() int32 {
	if m != nil {
		return m.Table
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) GetMark() int32 {
	if m != nil {
		return m.Mark
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) GetTypeOfService() int32 {
	if m != nil {
		return m.TypeOfService
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) SetFrom(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "From", "Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy"))
	}
	m.From = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) SetTo(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "To", "Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy"))
	}
	m.To = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) SetTable(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Table", "Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy"))
	}
	m.Table = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) SetPriority(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Priority", "Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy"))
	}
	m.Priority = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) SetMark(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mark", "Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy"))
	}
	m.Mark = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy) SetTypeOfService(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TypeOfService", "Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy"))
	}
	m.TypeOfService = fv
}

type Device_Spec_NetworkConfig_CommonOpts_Auth struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	Key               string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" firestore:"key"`
	Password          string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" firestore:"password"`
	Method            string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty" firestore:"method"`
	Identity          string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty" firestore:"identity"`
	AnonymousIdentity string `protobuf:"bytes,5,opt,name=anonymous_identity,json=anonymousIdentity,proto3" json:"anonymous_identity,omitempty" firestore:"anonymousIdentity"`
	CaCertificate     string `protobuf:"bytes,6,opt,name=ca_certificate,json=caCertificate,proto3" json:"ca_certificate,omitempty" firestore:"caCertificate"`
	ClientCertificate string `protobuf:"bytes,7,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty" firestore:"clientCertificate"`
	ClientKey         string `protobuf:"bytes,8,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty" firestore:"clientKey"`
	ClientKeyPassword string `protobuf:"bytes,9,opt,name=client_key_password,json=clientKeyPassword,proto3" json:"client_key_password,omitempty" firestore:"clientKeyPassword"`
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) Reset() {
	*m = Device_Spec_NetworkConfig_CommonOpts_Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts_Auth) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_CommonOpts_Auth) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_CommonOpts_Auth.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_CommonOpts_Auth) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 0, 4}
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) GetAnonymousIdentity() string {
	if m != nil {
		return m.AnonymousIdentity
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) GetCaCertificate() string {
	if m != nil {
		return m.CaCertificate
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) GetClientCertificate() string {
	if m != nil {
		return m.ClientCertificate
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) GetClientKeyPassword() string {
	if m != nil {
		return m.ClientKeyPassword
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "Device_Spec_NetworkConfig_CommonOpts_Auth"))
	}
	m.Key = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) SetPassword(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Password", "Device_Spec_NetworkConfig_CommonOpts_Auth"))
	}
	m.Password = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) SetMethod(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Method", "Device_Spec_NetworkConfig_CommonOpts_Auth"))
	}
	m.Method = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) SetIdentity(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Identity", "Device_Spec_NetworkConfig_CommonOpts_Auth"))
	}
	m.Identity = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) SetAnonymousIdentity(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AnonymousIdentity", "Device_Spec_NetworkConfig_CommonOpts_Auth"))
	}
	m.AnonymousIdentity = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) SetCaCertificate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CaCertificate", "Device_Spec_NetworkConfig_CommonOpts_Auth"))
	}
	m.CaCertificate = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) SetClientCertificate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientCertificate", "Device_Spec_NetworkConfig_CommonOpts_Auth"))
	}
	m.ClientCertificate = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) SetClientKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientKey", "Device_Spec_NetworkConfig_CommonOpts_Auth"))
	}
	m.ClientKey = fv
}

func (m *Device_Spec_NetworkConfig_CommonOpts_Auth) SetClientKeyPassword(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientKeyPassword", "Device_Spec_NetworkConfig_CommonOpts_Auth"))
	}
	m.ClientKeyPassword = fv
}

type Device_Spec_NetworkConfig_EthOpts_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Macaddress    string `protobuf:"bytes,2,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Driver        string `protobuf:"bytes,3,opt,name=driver,proto3" json:"driver,omitempty" firestore:"driver"`
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) Reset() {
	*m = Device_Spec_NetworkConfig_EthOpts_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_EthOpts_Match) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_EthOpts_Match) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_EthOpts_Match.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_EthOpts_Match) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Spec_NetworkConfig_EthOpts_Match"))
	}
	m.Name = fv
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkConfig_EthOpts_Match"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkConfig_EthOpts_Match) SetDriver(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Driver", "Device_Spec_NetworkConfig_EthOpts_Match"))
	}
	m.Driver = fv
}

type Device_Spec_NetworkConfig_WifiOpts_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Macaddress    string `protobuf:"bytes,2,opt,name=macaddress,proto3" json:"macaddress,omitempty" firestore:"macaddress"`
	Driver        string `protobuf:"bytes,3,opt,name=driver,proto3" json:"driver,omitempty" firestore:"driver"`
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) Reset() {
	*m = Device_Spec_NetworkConfig_WifiOpts_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_WifiOpts_Match) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_WifiOpts_Match) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_WifiOpts_Match.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_WifiOpts_Match) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Spec_NetworkConfig_WifiOpts_Match"))
	}
	m.Name = fv
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) SetMacaddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Macaddress", "Device_Spec_NetworkConfig_WifiOpts_Match"))
	}
	m.Macaddress = fv
}

func (m *Device_Spec_NetworkConfig_WifiOpts_Match) SetDriver(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Driver", "Device_Spec_NetworkConfig_WifiOpts_Match"))
	}
	m.Driver = fv
}

type Device_Spec_NetworkConfig_WifiOpts_AccessPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" firestore:"password"`
	Mode          string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty" firestore:"mode"`
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) Reset() {
	*m = Device_Spec_NetworkConfig_WifiOpts_AccessPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_WifiOpts_AccessPoint.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_WifiOpts_AccessPoint) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Spec_NetworkConfig_WifiOpts_AccessPoint"))
	}
	m.Name = fv
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) SetPassword(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Password", "Device_Spec_NetworkConfig_WifiOpts_AccessPoint"))
	}
	m.Password = fv
}

func (m *Device_Spec_NetworkConfig_WifiOpts_AccessPoint) SetMode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "Device_Spec_NetworkConfig_WifiOpts_AccessPoint"))
	}
	m.Mode = fv
}

type Device_Spec_NetworkConfig_BridgesOpts_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	AgeingTime    int32 `protobuf:"varint,1,opt,name=ageing_time,json=ageingTime,proto3" json:"ageing_time,omitempty" firestore:"ageingTime"`
	Priority      int32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty" firestore:"priority"`
	PortPriority  int32 `protobuf:"varint,3,opt,name=port_priority,json=portPriority,proto3" json:"port_priority,omitempty" firestore:"portPriority"`
	ForwardDelay  int32 `protobuf:"varint,4,opt,name=forward_delay,json=forwardDelay,proto3" json:"forward_delay,omitempty" firestore:"forwardDelay"`
	HelloTime     int32 `protobuf:"varint,5,opt,name=hello_time,json=helloTime,proto3" json:"hello_time,omitempty" firestore:"helloTime"`
	MaxAge        int32 `protobuf:"varint,6,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty" firestore:"maxAge"`
	PathCost      int32 `protobuf:"varint,7,opt,name=path_cost,json=pathCost,proto3" json:"path_cost,omitempty" firestore:"pathCost"`
	Stp           bool  `protobuf:"varint,8,opt,name=stp,proto3" json:"stp,omitempty" firestore:"stp"`
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) Reset() {
	*m = Device_Spec_NetworkConfig_BridgesOpts_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_BridgesOpts_Parameters) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_BridgesOpts_Parameters) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_BridgesOpts_Parameters.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_BridgesOpts_Parameters) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0}
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) GetAgeingTime() int32 {
	if m != nil {
		return m.AgeingTime
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) GetPortPriority() int32 {
	if m != nil {
		return m.PortPriority
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) GetForwardDelay() int32 {
	if m != nil {
		return m.ForwardDelay
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) GetHelloTime() int32 {
	if m != nil {
		return m.HelloTime
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) GetMaxAge() int32 {
	if m != nil {
		return m.MaxAge
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) GetPathCost() int32 {
	if m != nil {
		return m.PathCost
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) GetStp() bool {
	if m != nil {
		return m.Stp
	}
	return false
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) SetAgeingTime(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AgeingTime", "Device_Spec_NetworkConfig_BridgesOpts_Parameters"))
	}
	m.AgeingTime = fv
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) SetPriority(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Priority", "Device_Spec_NetworkConfig_BridgesOpts_Parameters"))
	}
	m.Priority = fv
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) SetPortPriority(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PortPriority", "Device_Spec_NetworkConfig_BridgesOpts_Parameters"))
	}
	m.PortPriority = fv
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) SetForwardDelay(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ForwardDelay", "Device_Spec_NetworkConfig_BridgesOpts_Parameters"))
	}
	m.ForwardDelay = fv
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) SetHelloTime(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HelloTime", "Device_Spec_NetworkConfig_BridgesOpts_Parameters"))
	}
	m.HelloTime = fv
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) SetMaxAge(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxAge", "Device_Spec_NetworkConfig_BridgesOpts_Parameters"))
	}
	m.MaxAge = fv
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) SetPathCost(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PathCost", "Device_Spec_NetworkConfig_BridgesOpts_Parameters"))
	}
	m.PathCost = fv
}

func (m *Device_Spec_NetworkConfig_BridgesOpts_Parameters) SetStp(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Stp", "Device_Spec_NetworkConfig_BridgesOpts_Parameters"))
	}
	m.Stp = fv
}

type Device_Spec_NetworkConfig_BondsOpts_Parameters struct {
	state                 protoimpl.MessageState
	sizeCache             protoimpl.SizeCache
	unknownFields         protoimpl.UnknownFields
	Mode                  string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty" firestore:"mode"`
	LacpRate              int32  `protobuf:"varint,2,opt,name=lacp_rate,json=lacpRate,proto3" json:"lacp_rate,omitempty" firestore:"lacpRate"`
	MiiMonitorInterval    int32  `protobuf:"varint,3,opt,name=mii_monitor_interval,json=miiMonitorInterval,proto3" json:"mii_monitor_interval,omitempty" firestore:"miiMonitorInterval"`
	MinLinks              int32  `protobuf:"varint,4,opt,name=min_links,json=minLinks,proto3" json:"min_links,omitempty" firestore:"minLinks"`
	TransmitHashPolicy    int32  `protobuf:"varint,5,opt,name=transmit_hash_policy,json=transmitHashPolicy,proto3" json:"transmit_hash_policy,omitempty" firestore:"transmitHashPolicy"`
	AdSelect              int32  `protobuf:"varint,6,opt,name=ad_select,json=adSelect,proto3" json:"ad_select,omitempty" firestore:"adSelect"`
	AllSlavesActive       int32  `protobuf:"varint,7,opt,name=all_slaves_active,json=allSlavesActive,proto3" json:"all_slaves_active,omitempty" firestore:"allSlavesActive"`
	ArpIpTargets          bool   `protobuf:"varint,8,opt,name=arp_ip_targets,json=arpIpTargets,proto3" json:"arp_ip_targets,omitempty" firestore:"arpIpTargets"`
	ArpValidate           string `protobuf:"bytes,9,opt,name=arp_validate,json=arpValidate,proto3" json:"arp_validate,omitempty" firestore:"arpValidate"`
	ArpAllTargets         string `protobuf:"bytes,10,opt,name=arp_all_targets,json=arpAllTargets,proto3" json:"arp_all_targets,omitempty" firestore:"arpAllTargets"`
	UpDelay               string `protobuf:"bytes,11,opt,name=up_delay,json=upDelay,proto3" json:"up_delay,omitempty" firestore:"upDelay"`
	FailOverMacPolicy     string `protobuf:"bytes,12,opt,name=fail_over_mac_policy,json=failOverMacPolicy,proto3" json:"fail_over_mac_policy,omitempty" firestore:"failOverMacPolicy"`
	GratuitousArp         int32  `protobuf:"varint,13,opt,name=gratuitous_arp,json=gratuitousArp,proto3" json:"gratuitous_arp,omitempty" firestore:"gratuitousArp"`
	PacketsPerSlave       string `protobuf:"bytes,14,opt,name=packets_per_slave,json=packetsPerSlave,proto3" json:"packets_per_slave,omitempty" firestore:"packetsPerSlave"`
	PrimaryReselectPolicy string `protobuf:"bytes,15,opt,name=primary_reselect_policy,json=primaryReselectPolicy,proto3" json:"primary_reselect_policy,omitempty" firestore:"primaryReselectPolicy"`
	ResendIgmp            string `protobuf:"bytes,16,opt,name=resend_igmp,json=resendIgmp,proto3" json:"resend_igmp,omitempty" firestore:"resendIgmp"`
	LearnPacketInterval   string `protobuf:"bytes,17,opt,name=learn_packet_interval,json=learnPacketInterval,proto3" json:"learn_packet_interval,omitempty" firestore:"learnPacketInterval"`
	Primary               string `protobuf:"bytes,18,opt,name=primary,proto3" json:"primary,omitempty" firestore:"primary"`
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) Reset() {
	*m = Device_Spec_NetworkConfig_BondsOpts_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_BondsOpts_Parameters) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_BondsOpts_Parameters) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_BondsOpts_Parameters.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_BondsOpts_Parameters) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0}
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetLacpRate() int32 {
	if m != nil {
		return m.LacpRate
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetMiiMonitorInterval() int32 {
	if m != nil {
		return m.MiiMonitorInterval
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetMinLinks() int32 {
	if m != nil {
		return m.MinLinks
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetTransmitHashPolicy() int32 {
	if m != nil {
		return m.TransmitHashPolicy
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetAdSelect() int32 {
	if m != nil {
		return m.AdSelect
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetAllSlavesActive() int32 {
	if m != nil {
		return m.AllSlavesActive
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetArpIpTargets() bool {
	if m != nil {
		return m.ArpIpTargets
	}
	return false
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetArpValidate() string {
	if m != nil {
		return m.ArpValidate
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetArpAllTargets() string {
	if m != nil {
		return m.ArpAllTargets
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetUpDelay() string {
	if m != nil {
		return m.UpDelay
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetFailOverMacPolicy() string {
	if m != nil {
		return m.FailOverMacPolicy
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetGratuitousArp() int32 {
	if m != nil {
		return m.GratuitousArp
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetPacketsPerSlave() string {
	if m != nil {
		return m.PacketsPerSlave
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetPrimaryReselectPolicy() string {
	if m != nil {
		return m.PrimaryReselectPolicy
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetResendIgmp() string {
	if m != nil {
		return m.ResendIgmp
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetLearnPacketInterval() string {
	if m != nil {
		return m.LearnPacketInterval
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) GetPrimary() string {
	if m != nil {
		return m.Primary
	}
	return ""
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetMode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.Mode = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetLacpRate(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LacpRate", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.LacpRate = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetMiiMonitorInterval(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MiiMonitorInterval", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.MiiMonitorInterval = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetMinLinks(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MinLinks", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.MinLinks = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetTransmitHashPolicy(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TransmitHashPolicy", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.TransmitHashPolicy = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetAdSelect(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdSelect", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.AdSelect = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetAllSlavesActive(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllSlavesActive", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.AllSlavesActive = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetArpIpTargets(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ArpIpTargets", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.ArpIpTargets = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetArpValidate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ArpValidate", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.ArpValidate = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetArpAllTargets(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ArpAllTargets", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.ArpAllTargets = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetUpDelay(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpDelay", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.UpDelay = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetFailOverMacPolicy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FailOverMacPolicy", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.FailOverMacPolicy = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetGratuitousArp(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GratuitousArp", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.GratuitousArp = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetPacketsPerSlave(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PacketsPerSlave", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.PacketsPerSlave = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetPrimaryReselectPolicy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrimaryReselectPolicy", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.PrimaryReselectPolicy = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetResendIgmp(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResendIgmp", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.ResendIgmp = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetLearnPacketInterval(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LearnPacketInterval", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.LearnPacketInterval = fv
}

func (m *Device_Spec_NetworkConfig_BondsOpts_Parameters) SetPrimary(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Primary", "Device_Spec_NetworkConfig_BondsOpts_Parameters"))
	}
	m.Primary = fv
}

type Device_Spec_NetworkConfig_TunnelsOpts_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Input         int32 `protobuf:"varint,1,opt,name=input,proto3" json:"input,omitempty" firestore:"input"`
	Output        int32 `protobuf:"varint,2,opt,name=output,proto3" json:"output,omitempty" firestore:"output"`
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts_Key) Reset() {
	*m = Device_Spec_NetworkConfig_TunnelsOpts_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts_Key) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_NetworkConfig_TunnelsOpts_Key) ProtoMessage() {}

func (m *Device_Spec_NetworkConfig_TunnelsOpts_Key) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_NetworkConfig_TunnelsOpts_Key) GotenMessage() {}

// Deprecated, Use Device_Spec_NetworkConfig_TunnelsOpts_Key.ProtoReflect.Descriptor instead.
func (*Device_Spec_NetworkConfig_TunnelsOpts_Key) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 0, 5, 0}
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts_Key) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts_Key) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts_Key) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts_Key) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts_Key) GetInput() int32 {
	if m != nil {
		return m.Input
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts_Key) GetOutput() int32 {
	if m != nil {
		return m.Output
	}
	return int32(0)
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts_Key) SetInput(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Input", "Device_Spec_NetworkConfig_TunnelsOpts_Key"))
	}
	m.Input = fv
}

func (m *Device_Spec_NetworkConfig_TunnelsOpts_Key) SetOutput(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Output", "Device_Spec_NetworkConfig_TunnelsOpts_Key"))
	}
	m.Output = fv
}

type Device_Spec_SSHConfig_AuthKey struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	SshaKey           string `protobuf:"bytes,1,opt,name=ssha_key,json=sshaKey,proto3" json:"ssha_key,omitempty" firestore:"sshaKey"`
	CertAuthority     bool   `protobuf:"varint,2,opt,name=cert_authority,json=certAuthority,proto3" json:"cert_authority,omitempty" firestore:"certAuthority"`
	Command           string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty" firestore:"command"`
	Environment       string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty" firestore:"environment"`
	From              string `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty" firestore:"from"`
	NoAgentForwarding bool   `protobuf:"varint,6,opt,name=no_agent_forwarding,json=noAgentForwarding,proto3" json:"no_agent_forwarding,omitempty" firestore:"noAgentForwarding"`
	NoPortForwarding  bool   `protobuf:"varint,7,opt,name=no_port_forwarding,json=noPortForwarding,proto3" json:"no_port_forwarding,omitempty" firestore:"noPortForwarding"`
	NoPty             bool   `protobuf:"varint,8,opt,name=no_pty,json=noPty,proto3" json:"no_pty,omitempty" firestore:"noPty"`
	NoUserRc          bool   `protobuf:"varint,9,opt,name=no_user_rc,json=noUserRc,proto3" json:"no_user_rc,omitempty" firestore:"noUserRc"`
	NoX11Forwarding   bool   `protobuf:"varint,10,opt,name=no_x11_forwarding,json=noX11Forwarding,proto3" json:"no_x11_forwarding,omitempty" firestore:"noX11Forwarding"`
	Permitopen        string `protobuf:"bytes,11,opt,name=permitopen,proto3" json:"permitopen,omitempty" firestore:"permitopen"`
	Principals        string `protobuf:"bytes,12,opt,name=principals,proto3" json:"principals,omitempty" firestore:"principals"`
	Tunnel            string `protobuf:"bytes,13,opt,name=tunnel,proto3" json:"tunnel,omitempty" firestore:"tunnel"`
	Restrict          bool   `protobuf:"varint,14,opt,name=restrict,proto3" json:"restrict,omitempty" firestore:"restrict"`
}

func (m *Device_Spec_SSHConfig_AuthKey) Reset() {
	*m = Device_Spec_SSHConfig_AuthKey{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Spec_SSHConfig_AuthKey) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Spec_SSHConfig_AuthKey) ProtoMessage() {}

func (m *Device_Spec_SSHConfig_AuthKey) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Spec_SSHConfig_AuthKey) GotenMessage() {}

// Deprecated, Use Device_Spec_SSHConfig_AuthKey.ProtoReflect.Descriptor instead.
func (*Device_Spec_SSHConfig_AuthKey) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (m *Device_Spec_SSHConfig_AuthKey) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Spec_SSHConfig_AuthKey) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Spec_SSHConfig_AuthKey) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Spec_SSHConfig_AuthKey) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Spec_SSHConfig_AuthKey) GetSshaKey() string {
	if m != nil {
		return m.SshaKey
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetCertAuthority() bool {
	if m != nil {
		return m.CertAuthority
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoAgentForwarding() bool {
	if m != nil {
		return m.NoAgentForwarding
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoPortForwarding() bool {
	if m != nil {
		return m.NoPortForwarding
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoPty() bool {
	if m != nil {
		return m.NoPty
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoUserRc() bool {
	if m != nil {
		return m.NoUserRc
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetNoX11Forwarding() bool {
	if m != nil {
		return m.NoX11Forwarding
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) GetPermitopen() string {
	if m != nil {
		return m.Permitopen
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetPrincipals() string {
	if m != nil {
		return m.Principals
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetTunnel() string {
	if m != nil {
		return m.Tunnel
	}
	return ""
}

func (m *Device_Spec_SSHConfig_AuthKey) GetRestrict() bool {
	if m != nil {
		return m.Restrict
	}
	return false
}

func (m *Device_Spec_SSHConfig_AuthKey) SetSshaKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SshaKey", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.SshaKey = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetCertAuthority(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CertAuthority", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.CertAuthority = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetCommand(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Command", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Command = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetEnvironment(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Environment", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Environment = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetFrom(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "From", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.From = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoAgentForwarding(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoAgentForwarding", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoAgentForwarding = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoPortForwarding(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoPortForwarding", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoPortForwarding = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoPty(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoPty", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoPty = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoUserRc(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoUserRc", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoUserRc = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetNoX11Forwarding(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoX11Forwarding", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.NoX11Forwarding = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetPermitopen(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Permitopen", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Permitopen = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetPrincipals(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Principals", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Principals = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetTunnel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tunnel", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Tunnel = fv
}

func (m *Device_Spec_SSHConfig_AuthKey) SetRestrict(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Restrict", "Device_Spec_SSHConfig_AuthKey"))
	}
	m.Restrict = fv
}

// Interface addresses of the Device.
type Device_Status_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// IPv4 or IPv6 address such as `203.0.113.5` (no suffix for subnet)
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	// Always `InternalIP`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
}

func (m *Device_Status_Address) Reset() {
	*m = Device_Status_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_Address) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_Address) ProtoMessage() {}

func (m *Device_Status_Address) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_Address) GotenMessage() {}

// Deprecated, Use Device_Status_Address.ProtoReflect.Descriptor instead.
func (*Device_Status_Address) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Device_Status_Address) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_Address) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_Address) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_Address) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Device_Status_Address) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_Address) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "Device_Status_Address"))
	}
	m.Address = fv
}

func (m *Device_Status_Address) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_Address"))
	}
	m.Type = fv
}

// Condition holds status of each sub component or module of the device.
type Device_Status_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The message describes the status.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty" firestore:"message"`
	// The reason for the status.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty" firestore:"reason"`
	// The status name.
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	// Type name of the status.
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	// When the status has been updated last time.
	LastHeartBeatTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_heart_beat_time,json=lastHeartBeatTime,proto3" json:"last_heart_beat_time,omitempty" firestore:"lastHeartBeatTime"`
	// When the status has tuned into the current value.
	LastTransitionTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty" firestore:"lastTransitionTime"`
}

func (m *Device_Status_Condition) Reset() {
	*m = Device_Status_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_Condition) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_Condition) ProtoMessage() {}

func (m *Device_Status_Condition) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_Condition) GotenMessage() {}

// Deprecated, Use Device_Status_Condition.ProtoReflect.Descriptor instead.
func (*Device_Status_Condition) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *Device_Status_Condition) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_Condition) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_Condition) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_Condition) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_Condition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Device_Status_Condition) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Device_Status_Condition) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Device_Status_Condition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_Condition) GetLastHeartBeatTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastHeartBeatTime
	}
	return nil
}

func (m *Device_Status_Condition) GetLastTransitionTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *Device_Status_Condition) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "Device_Status_Condition"))
	}
	m.Message = fv
}

func (m *Device_Status_Condition) SetReason(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reason", "Device_Status_Condition"))
	}
	m.Reason = fv
}

func (m *Device_Status_Condition) SetStatus(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Device_Status_Condition"))
	}
	m.Status = fv
}

func (m *Device_Status_Condition) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_Condition"))
	}
	m.Type = fv
}

func (m *Device_Status_Condition) SetLastHeartBeatTime(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastHeartBeatTime", "Device_Status_Condition"))
	}
	m.LastHeartBeatTime = fv
}

func (m *Device_Status_Condition) SetLastTransitionTime(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastTransitionTime", "Device_Status_Condition"))
	}
	m.LastTransitionTime = fv
}

// Device Information
type Device_Status_DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The architecture of the CPU (and the software compilied for) (e.g.
	// `arm64`)
	Architecture string `protobuf:"bytes,1,opt,name=architecture,proto3" json:"architecture,omitempty" firestore:"architecture"`
	// Base OS name (e.g. `Linux`)
	OperatingSystem string `protobuf:"bytes,2,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty" firestore:"operatingSystem"`
	// OS kernel version
	KernelVersion string `protobuf:"bytes,3,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty" firestore:"kernelVersion"`
	// OS base Image name
	OsImage string `protobuf:"bytes,4,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty" firestore:"osImage"`
	// Not used
	ContainerRuntimeVersion string `protobuf:"bytes,5,opt,name=container_runtime_version,json=containerRuntimeVersion,proto3" json:"container_runtime_version,omitempty" firestore:"containerRuntimeVersion"`
	// Liquid OS version currently used.
	OsVersion string `protobuf:"bytes,6,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty" firestore:"osVersion"`
	// Container driver name (e.g. `/var/lib/droplet/compose`)
	Driver              string                                        `protobuf:"bytes,101,opt,name=driver,proto3" json:"driver,omitempty" firestore:"driver"`
	HardwareInformation *Device_Status_DeviceInfo_HardwareInformation `protobuf:"bytes,102,opt,name=hardware_information,json=hardwareInformation,proto3" json:"hardware_information,omitempty" firestore:"hardwareInformation"`
}

func (m *Device_Status_DeviceInfo) Reset() {
	*m = Device_Status_DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (m *Device_Status_DeviceInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetContainerRuntimeVersion() string {
	if m != nil {
		return m.ContainerRuntimeVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Device_Status_DeviceInfo) GetHardwareInformation() *Device_Status_DeviceInfo_HardwareInformation {
	if m != nil {
		return m.HardwareInformation
	}
	return nil
}

func (m *Device_Status_DeviceInfo) SetArchitecture(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Architecture", "Device_Status_DeviceInfo"))
	}
	m.Architecture = fv
}

func (m *Device_Status_DeviceInfo) SetOperatingSystem(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatingSystem", "Device_Status_DeviceInfo"))
	}
	m.OperatingSystem = fv
}

func (m *Device_Status_DeviceInfo) SetKernelVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "KernelVersion", "Device_Status_DeviceInfo"))
	}
	m.KernelVersion = fv
}

func (m *Device_Status_DeviceInfo) SetOsImage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsImage", "Device_Status_DeviceInfo"))
	}
	m.OsImage = fv
}

func (m *Device_Status_DeviceInfo) SetContainerRuntimeVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerRuntimeVersion", "Device_Status_DeviceInfo"))
	}
	m.ContainerRuntimeVersion = fv
}

func (m *Device_Status_DeviceInfo) SetOsVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsVersion", "Device_Status_DeviceInfo"))
	}
	m.OsVersion = fv
}

func (m *Device_Status_DeviceInfo) SetDriver(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Driver", "Device_Status_DeviceInfo"))
	}
	m.Driver = fv
}

func (m *Device_Status_DeviceInfo) SetHardwareInformation(fv *Device_Status_DeviceInfo_HardwareInformation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareInformation", "Device_Status_DeviceInfo"))
	}
	m.HardwareInformation = fv
}

type Device_Status_DeviceInfo_HardwareInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Os            *Device_Status_DeviceInfo_HardwareInformation_OS         `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty" firestore:"os"`
	Bios          *Device_Status_DeviceInfo_HardwareInformation_BIOS       `protobuf:"bytes,2,opt,name=bios,proto3" json:"bios,omitempty" firestore:"bios"`
	System        *Device_Status_DeviceInfo_HardwareInformation_System     `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty" firestore:"system"`
	Cpu           *Device_Status_DeviceInfo_HardwareInformation_CPU        `protobuf:"bytes,4,opt,name=cpu,proto3" json:"cpu,omitempty" firestore:"cpu"`
	Block         *Device_Status_DeviceInfo_HardwareInformation_Block      `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty" firestore:"block"`
	Network       *Device_Status_DeviceInfo_HardwareInformation_Network    `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty" firestore:"network"`
	Gpu           *Device_Status_DeviceInfo_HardwareInformation_GPU        `protobuf:"bytes,7,opt,name=gpu,proto3" json:"gpu,omitempty" firestore:"gpu"`
	MemoryInfo    *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo `protobuf:"bytes,8,opt,name=memory_info,json=memoryInfo,proto3" json:"memory_info,omitempty" firestore:"memoryInfo"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetOs() *Device_Status_DeviceInfo_HardwareInformation_OS {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetBios() *Device_Status_DeviceInfo_HardwareInformation_BIOS {
	if m != nil {
		return m.Bios
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetSystem() *Device_Status_DeviceInfo_HardwareInformation_System {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetCpu() *Device_Status_DeviceInfo_HardwareInformation_CPU {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetBlock() *Device_Status_DeviceInfo_HardwareInformation_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetNetwork() *Device_Status_DeviceInfo_HardwareInformation_Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetGpu() *Device_Status_DeviceInfo_HardwareInformation_GPU {
	if m != nil {
		return m.Gpu
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) GetMemoryInfo() *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo {
	if m != nil {
		return m.MemoryInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetOs(fv *Device_Status_DeviceInfo_HardwareInformation_OS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Os", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Os = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetBios(fv *Device_Status_DeviceInfo_HardwareInformation_BIOS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bios", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Bios = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetSystem(fv *Device_Status_DeviceInfo_HardwareInformation_System) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "System", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.System = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetCpu(fv *Device_Status_DeviceInfo_HardwareInformation_CPU) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cpu", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Cpu = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetBlock(fv *Device_Status_DeviceInfo_HardwareInformation_Block) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Block", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Block = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetNetwork(fv *Device_Status_DeviceInfo_HardwareInformation_Network) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Network", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Network = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetGpu(fv *Device_Status_DeviceInfo_HardwareInformation_GPU) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Gpu", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.Gpu = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation) SetMemoryInfo(fv *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryInfo", "Device_Status_DeviceInfo_HardwareInformation"))
	}
	m.MemoryInfo = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Capability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Capability{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Capability) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Capability) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Capability.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Capability) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Capability"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Capability) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_Capability"))
	}
	m.Description = fv
}

type Device_Status_DeviceInfo_HardwareInformation_OS struct {
	state                   protoimpl.MessageState
	sizeCache               protoimpl.SizeCache
	unknownFields           protoimpl.UnknownFields
	OperatingSystem         string `protobuf:"bytes,1,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty" firestore:"operatingSystem"`
	KernelVersion           string `protobuf:"bytes,2,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty" firestore:"kernelVersion"`
	OsImage                 string `protobuf:"bytes,3,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty" firestore:"osImage"`
	ContainerRuntimeVersion string `protobuf:"bytes,4,opt,name=container_runtime_version,json=containerRuntimeVersion,proto3" json:"container_runtime_version,omitempty" firestore:"containerRuntimeVersion"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_OS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_OS) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_OS) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_OS.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_OS) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 1}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) GetContainerRuntimeVersion() string {
	if m != nil {
		return m.ContainerRuntimeVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetOperatingSystem(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OperatingSystem", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.OperatingSystem = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetKernelVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "KernelVersion", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.KernelVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetOsImage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OsImage", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.OsImage = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_OS) SetContainerRuntimeVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerRuntimeVersion", "Device_Status_DeviceInfo_HardwareInformation_OS"))
	}
	m.ContainerRuntimeVersion = fv
}

// TODO: Add capabilities and size
type Device_Status_DeviceInfo_HardwareInformation_BIOS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Vendor        string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	BiosVersion   string `protobuf:"bytes,2,opt,name=bios_version,json=biosVersion,proto3" json:"bios_version,omitempty" firestore:"biosVersion"`
	ReleaseDate   string `protobuf:"bytes,3,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty" firestore:"releaseDate"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_BIOS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_BIOS) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_BIOS) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_BIOS.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_BIOS) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 2}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) GetBiosVersion() string {
	if m != nil {
		return m.BiosVersion
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) GetReleaseDate() string {
	if m != nil {
		return m.ReleaseDate
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_BIOS"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) SetBiosVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BiosVersion", "Device_Status_DeviceInfo_HardwareInformation_BIOS"))
	}
	m.BiosVersion = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_BIOS) SetReleaseDate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReleaseDate", "Device_Status_DeviceInfo_HardwareInformation_BIOS"))
	}
	m.ReleaseDate = fv
}

type Device_Status_DeviceInfo_HardwareInformation_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Manufacturer  string                                                             `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty" firestore:"manufacturer"`
	ProductName   string                                                             `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty" firestore:"productName"`
	Version       string                                                             `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" firestore:"version"`
	SerialNumber  string                                                             `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" firestore:"serialNumber"`
	Configuration *Device_Status_DeviceInfo_HardwareInformation_System_Configuration `protobuf:"bytes,5,opt,name=configuration,proto3" json:"configuration,omitempty" firestore:"configuration"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_System{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_System.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_System) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 3}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) GetConfiguration() *Device_Status_DeviceInfo_HardwareInformation_System_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetManufacturer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Manufacturer", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.Manufacturer = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetProductName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProductName", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.ProductName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Version", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.Version = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetSerialNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SerialNumber", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.SerialNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System) SetConfiguration(fv *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Configuration", "Device_Status_DeviceInfo_HardwareInformation_System"))
	}
	m.Configuration = fv
}

type Device_Status_DeviceInfo_HardwareInformation_CPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Processors    []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor `protobuf:"bytes,1,rep,name=processors,proto3" json:"processors,omitempty" firestore:"processors"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_CPU{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_CPU.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_CPU) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 4}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) GetProcessors() []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor {
	if m != nil {
		return m.Processors
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU) SetProcessors(fv []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Processors", "Device_Status_DeviceInfo_HardwareInformation_CPU"))
	}
	m.Processors = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Disks         []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty" firestore:"disks"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Block{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Block.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Block) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 5}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) GetDisks() []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk {
	if m != nil {
		return m.Disks
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block) SetDisks(fv []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Disks", "Device_Status_DeviceInfo_HardwareInformation_Block"))
	}
	m.Disks = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Nics          []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC `protobuf:"bytes,1,rep,name=nics,proto3" json:"nics,omitempty" firestore:"nics"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Network.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Network) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 6}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) GetNics() []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC {
	if m != nil {
		return m.Nics
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network) SetNics(fv []*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nics", "Device_Status_DeviceInfo_HardwareInformation_Network"))
	}
	m.Nics = fv
}

type Device_Status_DeviceInfo_HardwareInformation_GPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	GraphicCards  []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard `protobuf:"bytes,1,rep,name=graphic_cards,json=graphicCards,proto3" json:"graphic_cards,omitempty" firestore:"graphicCards"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_GPU{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_GPU.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_GPU) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 7}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) GetGraphicCards() []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard {
	if m != nil {
		return m.GraphicCards
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU) SetGraphicCards(fv []*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GraphicCards", "Device_Status_DeviceInfo_HardwareInformation_GPU"))
	}
	m.GraphicCards = fv
}

// Revisit: May be just device ??
type Device_Status_DeviceInfo_HardwareInformation_PCIDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	Vendor        string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Product       string `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty" firestore:"product"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Subvendor     string `protobuf:"bytes,5,opt,name=subvendor,proto3" json:"subvendor,omitempty" firestore:"subvendor"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_PCIDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_PCIDevice.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 8}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) GetSubvendor() string {
	if m != nil {
		return m.Subvendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Address = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetProduct(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Product", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Product = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) SetSubvendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Subvendor", "Device_Status_DeviceInfo_HardwareInformation_PCIDevice"))
	}
	m.Subvendor = fv
}

type Device_Status_DeviceInfo_HardwareInformation_MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Memory        []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory `protobuf:"bytes,1,rep,name=memory,proto3" json:"memory,omitempty" firestore:"memory"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_MemoryInfo.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 9}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) GetMemory() []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo) SetMemory(fv []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Memory", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo"))
	}
	m.Memory = fv
}

type Device_Status_DeviceInfo_HardwareInformation_System_Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Chassis       string `protobuf:"bytes,1,opt,name=chassis,proto3" json:"chassis,omitempty" firestore:"chassis"`
	Uuid          string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty" firestore:"uuid"`
	SkuNumber     string `protobuf:"bytes,3,opt,name=sku_number,json=skuNumber,proto3" json:"sku_number,omitempty" firestore:"skuNumber"`
	Family        string `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty" firestore:"family"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_System_Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_System_Configuration.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 3, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetChassis() string {
	if m != nil {
		return m.Chassis
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetSkuNumber() string {
	if m != nil {
		return m.SkuNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetChassis(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Chassis", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.Chassis = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetUuid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Uuid", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.Uuid = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetSkuNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SkuNumber", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.SkuNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_System_Configuration) SetFamily(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Family", "Device_Status_DeviceInfo_HardwareInformation_System_Configuration"))
	}
	m.Family = fv
}

type Device_Status_DeviceInfo_HardwareInformation_CPU_Processor struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	Vendor          string                                                              `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Model           string                                                              `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty" firestore:"model"`
	Capabilities    []*Device_Status_DeviceInfo_HardwareInformation_Capability          `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty" firestore:"capabilities"`
	NumThreads      uint32                                                              `protobuf:"varint,4,opt,name=num_threads,json=numThreads,proto3" json:"num_threads,omitempty" firestore:"numThreads"`
	NumCores        uint32                                                              `protobuf:"varint,5,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty" firestore:"numCores"`
	NumEnabledCores uint32                                                              `protobuf:"varint,6,opt,name=num_enabled_cores,json=numEnabledCores,proto3" json:"num_enabled_cores,omitempty" firestore:"numEnabledCores"`
	Name            string                                                              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Serial          string                                                              `protobuf:"bytes,8,opt,name=serial,proto3" json:"serial,omitempty" firestore:"serial"`
	FrequencyMhz    int64                                                               `protobuf:"varint,9,opt,name=frequency_mhz,json=frequencyMhz,proto3" json:"frequency_mhz,omitempty" firestore:"frequencyMhz"`
	MaxFrequencyMhz int64                                                               `protobuf:"varint,10,opt,name=max_frequency_mhz,json=maxFrequencyMhz,proto3" json:"max_frequency_mhz,omitempty" firestore:"maxFrequencyMhz"`
	CacheInfo       []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache `protobuf:"bytes,11,rep,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty" firestore:"cacheInfo"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_CPU_Processor{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_CPU_Processor.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 4, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetCapabilities() []*Device_Status_DeviceInfo_HardwareInformation_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetNumThreads() uint32 {
	if m != nil {
		return m.NumThreads
	}
	return uint32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetNumCores() uint32 {
	if m != nil {
		return m.NumCores
	}
	return uint32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetNumEnabledCores() uint32 {
	if m != nil {
		return m.NumEnabledCores
	}
	return uint32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetFrequencyMhz() int64 {
	if m != nil {
		return m.FrequencyMhz
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetMaxFrequencyMhz() int64 {
	if m != nil {
		return m.MaxFrequencyMhz
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) GetCacheInfo() []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache {
	if m != nil {
		return m.CacheInfo
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Model = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetCapabilities(fv []*Device_Status_DeviceInfo_HardwareInformation_Capability) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Capabilities", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Capabilities = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetNumThreads(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NumThreads", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.NumThreads = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetNumCores(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NumCores", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.NumCores = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetNumEnabledCores(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NumEnabledCores", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.NumEnabledCores = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetSerial(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Serial", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.Serial = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetFrequencyMhz(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FrequencyMhz", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.FrequencyMhz = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetMaxFrequencyMhz(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxFrequencyMhz", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.MaxFrequencyMhz = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor) SetCacheInfo(fv []*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CacheInfo", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor"))
	}
	m.CacheInfo = fv
}

type Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Type          string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	SizeBytes     int64  `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 4, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache"))
	}
	m.Type = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache"))
	}
	m.SizeBytes = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Block_Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string                                                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	SizeBytes     int64                                                                `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	DriveType     string                                                               `protobuf:"bytes,3,opt,name=drive_type,json=driveType,proto3" json:"drive_type,omitempty" firestore:"driveType"`
	Vendor        string                                                               `protobuf:"bytes,4,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Model         string                                                               `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty" firestore:"model"`
	SerialNumber  string                                                               `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" firestore:"serialNumber"`
	Wwn           string                                                               `protobuf:"bytes,7,opt,name=wwn,proto3" json:"wwn,omitempty" firestore:"wwn"`
	Partitions    []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition `protobuf:"bytes,8,rep,name=partitions,proto3" json:"partitions,omitempty" firestore:"partitions"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Block_Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Block_Disk.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 5, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetDriveType() string {
	if m != nil {
		return m.DriveType
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetWwn() string {
	if m != nil {
		return m.Wwn
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) GetPartitions() []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetDriveType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DriveType", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.DriveType = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Model = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetSerialNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SerialNumber", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.SerialNumber = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetWwn(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Wwn", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Wwn = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk) SetPartitions(fv []*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Partitions", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk"))
	}
	m.Partitions = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	SizeBytes     int64  `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	MountPoint    string `protobuf:"bytes,3,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty" firestore:"mountPoint"`
	Type          string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 5, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetMountPoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MountPoint", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.MountPoint = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition"))
	}
	m.Type = fv
}

type Device_Status_DeviceInfo_HardwareInformation_Network_NIC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	MacAddress    string            `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty" firestore:"macAddress"`
	Virtual       bool              `protobuf:"varint,3,opt,name=virtual,proto3" json:"virtual,omitempty" firestore:"virtual"`
	Description   string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	ProductName   string            `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty" firestore:"productName"`
	Vendor        string            `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Subvendor     string            `protobuf:"bytes,7,opt,name=subvendor,proto3" json:"subvendor,omitempty" firestore:"subvendor"`
	Setting       map[string]string `protobuf:"bytes,8,rep,name=setting,proto3" json:"setting,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"setting"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_Network_NIC{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_Network_NIC.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 6, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetVirtual() bool {
	if m != nil {
		return m.Virtual
	}
	return false
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetSubvendor() string {
	if m != nil {
		return m.Subvendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) GetSetting() map[string]string {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Name = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetMacAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MacAddress", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.MacAddress = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetVirtual(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Virtual", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Virtual = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Description = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetProductName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProductName", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.ProductName = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetSubvendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Subvendor", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Subvendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_Network_NIC) SetSetting(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Setting", "Device_Status_DeviceInfo_HardwareInformation_Network_NIC"))
	}
	m.Setting = fv
}

type Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Index         int64                                                   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" firestore:"index"`
	Device        *Device_Status_DeviceInfo_HardwareInformation_PCIDevice `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty" firestore:"device"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 7, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) GetDevice() *Device_Status_DeviceInfo_HardwareInformation_PCIDevice {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) SetIndex(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Index", "Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard"))
	}
	m.Index = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard) SetDevice(fv *Device_Status_DeviceInfo_HardwareInformation_PCIDevice) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Device", "Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard"))
	}
	m.Device = fv
}

type Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Description   string                                                                       `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	SizeBytes     int64                                                                        `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	MemoryBanks   []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank `protobuf:"bytes,3,rep,name=memory_banks,json=memoryBanks,proto3" json:"memory_banks,omitempty" firestore:"memoryBanks"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 9, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) GetMemoryBanks() []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank {
	if m != nil {
		return m.MemoryBanks
	}
	return nil
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory"))
	}
	m.Description = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory) SetMemoryBanks(fv []*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryBanks", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory"))
	}
	m.MemoryBanks = fv
}

type Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Description   string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	Product       string `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty" firestore:"product"`
	Vendor        string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty" firestore:"vendor"`
	Serial        string `protobuf:"bytes,4,opt,name=serial,proto3" json:"serial,omitempty" firestore:"serial"`
	Slot          string `protobuf:"bytes,5,opt,name=slot,proto3" json:"slot,omitempty" firestore:"slot"`
	SizeBytes     int64  `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty" firestore:"sizeBytes"`
	FrequencyHz   int64  `protobuf:"varint,7,opt,name=frequency_hz,json=frequencyHz,proto3" json:"frequency_hz,omitempty" firestore:"frequencyHz"`
	WidthBits     int32  `protobuf:"varint,8,opt,name=width_bits,json=widthBits,proto3" json:"width_bits,omitempty" firestore:"widthBits"`
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Reset() {
	*m = Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) ProtoMessage() {}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GotenMessage() {}

// Deprecated, Use Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank.ProtoReflect.Descriptor instead.
func (*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP(), []int{0, 1, 2, 0, 9, 0, 0}
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetSlot() string {
	if m != nil {
		return m.Slot
	}
	return ""
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetFrequencyHz() int64 {
	if m != nil {
		return m.FrequencyHz
	}
	return int64(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) GetWidthBits() int32 {
	if m != nil {
		return m.WidthBits
	}
	return int32(0)
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Description = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetProduct(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Product", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Product = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetVendor(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Vendor", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Vendor = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetSerial(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Serial", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Serial = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetSlot(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Slot", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.Slot = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetSizeBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SizeBytes", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.SizeBytes = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetFrequencyHz(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FrequencyHz", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.FrequencyHz = fv
}

func (m *Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank) SetWidthBits(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WidthBits", "Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank"))
	}
	m.WidthBits = fv
}

var edgelq_devices_proto_v1alpha2_device_proto preflect.FileDescriptor

var edgelq_devices_proto_v1alpha2_device_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x26, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x69, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0xe2, 0xde, 0x21, 0x0a, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xde, 0x21,
	0x02, 0x08, 0x04, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0xff, 0x37, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0xb2, 0xda, 0x21, 0x23, 0x12, 0x21, 0x0a, 0x1f, 0x6e, 0x74, 0x74, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x09, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x53, 0x48, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x62, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x56,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xf7, 0x29, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x09,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x05, 0x77, 0x69, 0x66,
	0x69, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4f, 0x70,
	0x74, 0x73, 0x52, 0x05, 0x77, 0x69, 0x66, 0x69, 0x73, 0x12, 0x55, 0x0a, 0x07, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x07, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73,
	0x12, 0x4f, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x55, 0x0a, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x52,
	0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x4f, 0x70,
	0x74, 0x73, 0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x1a, 0x99, 0x10, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x68,
	0x63, 0x70, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x68, 0x63, 0x70, 0x36,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x68, 0x63, 0x70, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x34,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x44, 0x48, 0x43,
	0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0e, 0x64, 0x68, 0x63, 0x70,
	0x34, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x0f, 0x64, 0x68,
	0x63, 0x70, 0x36, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e,
	0x44, 0x48, 0x43, 0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0e, 0x64,
	0x68, 0x63, 0x70, 0x36, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x36,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x36,
	0x12, 0x68, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x6f, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x53, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x80, 0x02, 0x0a, 0x0d, 0x44, 0x48, 0x43,
	0x50, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x44, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x74, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x4e, 0x74, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x74, 0x75, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x4d, 0x74, 0x75, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x43, 0x0a, 0x0b, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x1a, 0xaf, 0x01, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69,
	0x61, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x1a, 0xa1, 0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0xbc, 0x02, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0xd8, 0x02, 0x0a, 0x07, 0x45, 0x74, 0x68, 0x4f, 0x70, 0x74,
	0x73, 0x12, 0x53, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x45, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x6b, 0x65, 0x6f, 0x6e, 0x6c, 0x61, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x6b, 0x65, 0x6f, 0x6e, 0x6c, 0x61, 0x6e, 0x12,
	0x4e, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x92,
	0x88, 0x27, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x53, 0x0a, 0x05, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x1a, 0x98, 0x04, 0x0a, 0x08, 0x57, 0x69, 0x66, 0x69, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x54, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x61, 0x6b, 0x65, 0x6f, 0x6e, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x77, 0x61, 0x6b, 0x65, 0x6f, 0x6e, 0x6c, 0x61, 0x6e, 0x12, 0x4e, 0x0a, 0x04,
	0x6f, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x92, 0x88, 0x27, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x53, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x1a, 0x51, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0xf6, 0x03, 0x0a, 0x0b,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x04, 0x6f,
	0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xfa, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x67, 0x65,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x73, 0x74, 0x70, 0x1a, 0xb6, 0x07, 0x0a, 0x09, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70,
	0x74, 0x73, 0x12, 0x4e, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x04, 0x6f, 0x70,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x64, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x70, 0x74,
	0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xbe, 0x05, 0x0a,
	0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x63, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x6d, 0x69, 0x69, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x69, 0x69, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x72, 0x70, 0x5f, 0x69, 0x70,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x72, 0x70, 0x49, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x72, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x72, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x72, 0x70, 0x41, 0x6c, 0x6c,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x70, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75,
	0x73, 0x5f, 0x61, 0x72, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x72, 0x61,
	0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x41, 0x72, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x67, 0x6d, 0x70, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x67, 0x6d, 0x70, 0x12,
	0x32, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0xfa, 0x01,
	0x0a, 0x0b, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x33, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0x93, 0x01, 0x0a, 0x09, 0x56,
	0x6c, 0x61, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x73, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0xce, 0x06, 0x0a, 0x09, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x73, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x5a,
	0x0a, 0x0e, 0x73, 0x73, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x73, 0x73, 0x68,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x44, 0x65, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79,
	0x1a, 0xce, 0x03, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x73, 0x68, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x73, 0x68, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x63, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e,
	0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x6e, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x6f, 0x50, 0x6f,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06,
	0x6e, 0x6f, 0x5f, 0x70, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6e, 0x6f,
	0x50, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x63, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x78, 0x31, 0x31, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f,
	0x58, 0x31, 0x31, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x1a, 0xe7, 0x01, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x12, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xb2, 0xda, 0x21, 0x26, 0x12, 0x24, 0x0a, 0x22,
	0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x70, 0x6d, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b,
	0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x55, 0x73, 0x65, 0x54, 0x70, 0x6d, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x65, 0x64, 0x1a, 0x75, 0x0a, 0x0d, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x1a, 0xc0, 0x29, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x43, 0x52, 0x52, 0x11, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x37,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x84, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xc4,
	0x24, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x0e,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0a, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xde, 0x21, 0x02, 0x08, 0x04, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x14, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xb2, 0x21, 0x0a, 0x13, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x53, 0x52, 0x02, 0x6f, 0x73, 0x12,
	0x5b, 0x0a, 0x04, 0x62, 0x69, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x49, 0x4f, 0x53, 0x52, 0x04, 0x62, 0x69, 0x6f, 0x73, 0x12, 0x61, 0x0a, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x58, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x50, 0x55, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x5e, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x64, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x58, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x50, 0x55, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x6e, 0x0a, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x42, 0x0a, 0x0a, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xad, 0x01,
	0x0a, 0x02, 0x4f, 0x53, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x64, 0x0a,
	0x04, 0x42, 0x49, 0x4f, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x1a, 0x93, 0x03, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x04,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xde, 0x21, 0x02, 0x08, 0x04, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x74, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x75, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6b, 0x75, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x1a, 0xc0, 0x05, 0x0a, 0x03, 0x43, 0x50,
	0x55, 0x12, 0x70, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x73, 0x1a, 0xc6, 0x04, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x71, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x68, 0x7a, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d,
	0x68, 0x7a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x68, 0x7a, 0x12, 0x75, 0x0a, 0x0a, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x50, 0x55, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x3a, 0x0a, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x9a, 0x04, 0x0a,
	0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x63, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x1a, 0xab, 0x03, 0x0a, 0x04,
	0x44, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x77, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x77, 0x6e, 0x12, 0x77, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x57, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x73, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xf2, 0x03, 0x0a, 0x07, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x62, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x4e, 0x49, 0x43, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x1a, 0x82, 0x03, 0x0a, 0x03, 0x4e, 0x49,
	0x43, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x07, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x49, 0x43, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8a,
	0x02, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x12, 0x77, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x50, 0x55, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x73, 0x1a,
	0x89, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x64, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x43, 0x49, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x09,
	0x50, 0x43, 0x49, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x1a, 0xbb, 0x04, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x1a, 0xbe, 0x03, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x82, 0x01, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x73, 0x1a, 0xed, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x68, 0x7a, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x62, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x42, 0x69, 0x74, 0x73, 0x1a, 0x78, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x32, 0x08, 0x0a, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x3a,
	0x9d, 0x04, 0xea, 0x41, 0x51, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x34, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x7d, 0x92, 0xd9, 0x21, 0xa2, 0x02, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x07, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0xde, 0x01, 0x08,
	0x02, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x1d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x3b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x3c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x0f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x0f, 0x0a, 0x0d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x50, 0x05, 0x6a,
	0x1c, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xb2, 0xdf, 0x21,
	0x0a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0xda, 0x94, 0x23, 0x08, 0x12,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x41, 0x22, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xd2, 0xa3, 0x22, 0x3f,
	0x0a, 0x22, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0xb5, 0x03, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x48, 0x0a, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x42, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0xd2, 0x84, 0xd1, 0x02, 0x4a, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0xf2, 0x85, 0xd1, 0x02, 0x50, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x3c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x64,
	0x62, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x80, 0xd1, 0x02, 0x4a, 0x0a, 0x0d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1alpha2_device_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1alpha2_device_proto_rawDescData = edgelq_devices_proto_v1alpha2_device_proto_rawDesc
)

func edgelq_devices_proto_v1alpha2_device_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1alpha2_device_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1alpha2_device_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1alpha2_device_proto_rawDescData)
	})
	return edgelq_devices_proto_v1alpha2_device_proto_rawDescData
}

var edgelq_devices_proto_v1alpha2_device_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var edgelq_devices_proto_v1alpha2_device_proto_goTypes = []interface{}{
	(*Device)(nil),                                                            // 0: ntt.devices.v1alpha2.Device
	(*Device_Spec)(nil),                                                       // 1: ntt.devices.v1alpha2.Device.Spec
	(*Device_Status)(nil),                                                     // 2: ntt.devices.v1alpha2.Device.Status
	(*Device_PublicListingSpec)(nil),                                          // 3: ntt.devices.v1alpha2.Device.PublicListingSpec
	(*Device_Spec_NetworkConfig)(nil),                                         // 4: ntt.devices.v1alpha2.Device.Spec.NetworkConfig
	(*Device_Spec_SSHConfig)(nil),                                             // 5: ntt.devices.v1alpha2.Device.Spec.SSHConfig
	(*Device_Spec_AttestationConfig)(nil),                                     // 6: ntt.devices.v1alpha2.Device.Spec.AttestationConfig
	(*Device_Spec_LoggingConfig)(nil),                                         // 7: ntt.devices.v1alpha2.Device.Spec.LoggingConfig
	(*Device_Spec_NetworkConfig_CommonOpts)(nil),                              // 8: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts
	(*Device_Spec_NetworkConfig_EthOpts)(nil),                                 // 9: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.EthOpts
	(*Device_Spec_NetworkConfig_WifiOpts)(nil),                                // 10: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.WifiOpts
	(*Device_Spec_NetworkConfig_BridgesOpts)(nil),                             // 11: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BridgesOpts
	(*Device_Spec_NetworkConfig_BondsOpts)(nil),                               // 12: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BondsOpts
	(*Device_Spec_NetworkConfig_TunnelsOpts)(nil),                             // 13: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.TunnelsOpts
	(*Device_Spec_NetworkConfig_VlansOpts)(nil),                               // 14: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.VlansOpts
	(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides)(nil),                // 15: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.DHCPOverrides
	(*Device_Spec_NetworkConfig_CommonOpts_Nameservers)(nil),                  // 16: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.Nameservers
	(*Device_Spec_NetworkConfig_CommonOpts_Routes)(nil),                       // 17: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.Routes
	(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy)(nil),                // 18: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.RoutingPolicy
	(*Device_Spec_NetworkConfig_CommonOpts_Auth)(nil),                         // 19: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.Auth
	(*Device_Spec_NetworkConfig_EthOpts_Match)(nil),                           // 20: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.EthOpts.Match
	(*Device_Spec_NetworkConfig_WifiOpts_Match)(nil),                          // 21: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.WifiOpts.Match
	(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint)(nil),                    // 22: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.WifiOpts.AccessPoint
	(*Device_Spec_NetworkConfig_BridgesOpts_Parameters)(nil),                  // 23: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BridgesOpts.Parameters
	(*Device_Spec_NetworkConfig_BondsOpts_Parameters)(nil),                    // 24: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BondsOpts.Parameters
	(*Device_Spec_NetworkConfig_TunnelsOpts_Key)(nil),                         // 25: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.TunnelsOpts.Key
	(*Device_Spec_SSHConfig_AuthKey)(nil),                                     // 26: ntt.devices.v1alpha2.Device.Spec.SSHConfig.AuthKey
	(*Device_Status_Address)(nil),                                             // 27: ntt.devices.v1alpha2.Device.Status.Address
	(*Device_Status_Condition)(nil),                                           // 28: ntt.devices.v1alpha2.Device.Status.Condition
	(*Device_Status_DeviceInfo)(nil),                                          // 29: ntt.devices.v1alpha2.Device.Status.DeviceInfo
	(*Device_Status_DeviceInfo_HardwareInformation)(nil),                      // 30: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation
	(*Device_Status_DeviceInfo_HardwareInformation_Capability)(nil),           // 31: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Capability
	(*Device_Status_DeviceInfo_HardwareInformation_OS)(nil),                   // 32: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.OS
	(*Device_Status_DeviceInfo_HardwareInformation_BIOS)(nil),                 // 33: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.BIOS
	(*Device_Status_DeviceInfo_HardwareInformation_System)(nil),               // 34: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.System
	(*Device_Status_DeviceInfo_HardwareInformation_CPU)(nil),                  // 35: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU
	(*Device_Status_DeviceInfo_HardwareInformation_Block)(nil),                // 36: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block
	(*Device_Status_DeviceInfo_HardwareInformation_Network)(nil),              // 37: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network
	(*Device_Status_DeviceInfo_HardwareInformation_GPU)(nil),                  // 38: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU
	(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice)(nil),            // 39: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.PCIDevice
	(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo)(nil),           // 40: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo
	(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration)(nil), // 41: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.System.Configuration
	(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor)(nil),        // 42: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor
	(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache)(nil),  // 43: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.Cache
	(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk)(nil),           // 44: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.Disk
	(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition)(nil), // 45: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.Disk.Partition
	(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC)(nil),          // 46: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.NIC
	nil, // 47: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.NIC.SettingEntry
	(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard)(nil),              // 48: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU.GraphicCard
	(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory)(nil),            // 49: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory
	(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank)(nil), // 50: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory.MemoryBank
	(*ntt_meta.Meta)(nil),       // 51: ntt.types.Meta
	(*duration.Duration)(nil),   // 52: google.protobuf.Duration
	(*iam_iam_common.PCR)(nil),  // 53: ntt.iam.v1alpha2.PCR
	(*timestamp.Timestamp)(nil), // 54: google.protobuf.Timestamp
	(*Device_FieldMask)(nil),    // 55: ntt.devices.v1alpha2.Device_FieldMask
}
var edgelq_devices_proto_v1alpha2_device_proto_depIdxs = []int32{
	51, // 0: ntt.devices.v1alpha2.Device.metadata:type_name -> ntt.types.Meta
	1,  // 1: ntt.devices.v1alpha2.Device.spec:type_name -> ntt.devices.v1alpha2.Device.Spec
	2,  // 2: ntt.devices.v1alpha2.Device.status:type_name -> ntt.devices.v1alpha2.Device.Status
	3,  // 3: ntt.devices.v1alpha2.Device.public_listing_spec:type_name -> ntt.devices.v1alpha2.Device.PublicListingSpec
	4,  // 4: ntt.devices.v1alpha2.Device.Spec.net_config:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig
	5,  // 5: ntt.devices.v1alpha2.Device.Spec.ssh_config:type_name -> ntt.devices.v1alpha2.Device.Spec.SSHConfig
	6,  // 6: ntt.devices.v1alpha2.Device.Spec.attestation_config:type_name -> ntt.devices.v1alpha2.Device.Spec.AttestationConfig
	7,  // 7: ntt.devices.v1alpha2.Device.Spec.logging_config:type_name -> ntt.devices.v1alpha2.Device.Spec.LoggingConfig
	27, // 8: ntt.devices.v1alpha2.Device.Status.addresses:type_name -> ntt.devices.v1alpha2.Device.Status.Address
	28, // 9: ntt.devices.v1alpha2.Device.Status.conditions:type_name -> ntt.devices.v1alpha2.Device.Status.Condition
	29, // 10: ntt.devices.v1alpha2.Device.Status.device_info:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo
	53, // 11: ntt.devices.v1alpha2.Device.Status.attestation_status:type_name -> ntt.iam.v1alpha2.PCR
	55, // 12: ntt.devices.v1alpha2.Device.PublicListingSpec.field_mask:type_name -> ntt.devices.v1alpha2.Device_FieldMask
	9,  // 13: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.ethernets:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.EthOpts
	10, // 14: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.wifis:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.WifiOpts
	11, // 15: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.bridges:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BridgesOpts
	12, // 16: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.bonds:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BondsOpts
	13, // 17: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.tunnels:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.TunnelsOpts
	14, // 18: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.vlans:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.VlansOpts
	26, // 19: ntt.devices.v1alpha2.Device.Spec.SSHConfig.ssh_authorized:type_name -> ntt.devices.v1alpha2.Device.Spec.SSHConfig.AuthKey
	52, // 20: ntt.devices.v1alpha2.Device.Spec.SSHConfig.reject_period:type_name -> google.protobuf.Duration
	15, // 21: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.dhcp4_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.DHCPOverrides
	15, // 22: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.dhcp6_overrides:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.DHCPOverrides
	16, // 23: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.nameservers:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.Nameservers
	17, // 24: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.routes:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.Routes
	18, // 25: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.routing_policy:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.RoutingPolicy
	19, // 26: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.auth:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts.Auth
	20, // 27: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.EthOpts.match:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.EthOpts.Match
	8,  // 28: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.EthOpts.opts:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts
	21, // 29: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.WifiOpts.match:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.WifiOpts.Match
	8,  // 30: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.WifiOpts.opts:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts
	22, // 31: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.WifiOpts.access_points:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.WifiOpts.AccessPoint
	8,  // 32: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BridgesOpts.opts:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts
	23, // 33: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BridgesOpts.parameters:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BridgesOpts.Parameters
	8,  // 34: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BondsOpts.opts:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts
	24, // 35: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BondsOpts.parameters:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.BondsOpts.Parameters
	8,  // 36: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.TunnelsOpts.opts:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts
	8,  // 37: ntt.devices.v1alpha2.Device.Spec.NetworkConfig.VlansOpts.opts:type_name -> ntt.devices.v1alpha2.Device.Spec.NetworkConfig.CommonOpts
	54, // 38: ntt.devices.v1alpha2.Device.Status.Condition.last_heart_beat_time:type_name -> google.protobuf.Timestamp
	54, // 39: ntt.devices.v1alpha2.Device.Status.Condition.last_transition_time:type_name -> google.protobuf.Timestamp
	30, // 40: ntt.devices.v1alpha2.Device.Status.DeviceInfo.hardware_information:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation
	32, // 41: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.os:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.OS
	33, // 42: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.bios:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.BIOS
	34, // 43: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.system:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.System
	35, // 44: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.cpu:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU
	36, // 45: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.block:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block
	37, // 46: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.network:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network
	38, // 47: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.gpu:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU
	40, // 48: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.memory_info:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo
	41, // 49: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.System.configuration:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.System.Configuration
	42, // 50: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.processors:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor
	44, // 51: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.disks:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.Disk
	46, // 52: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.nics:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.NIC
	48, // 53: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU.graphic_cards:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU.GraphicCard
	49, // 54: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.memory:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory
	31, // 55: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.capabilities:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Capability
	43, // 56: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.cache_info:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.CPU.Processor.Cache
	45, // 57: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.Disk.partitions:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Block.Disk.Partition
	47, // 58: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.NIC.setting:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.Network.NIC.SettingEntry
	39, // 59: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.GPU.GraphicCard.device:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.PCIDevice
	50, // 60: ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory.memory_banks:type_name -> ntt.devices.v1alpha2.Device.Status.DeviceInfo.HardwareInformation.MemoryInfo.Memory.MemoryBank
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1alpha2_device_proto_init() }
func edgelq_devices_proto_v1alpha2_device_proto_init() {
	if edgelq_devices_proto_v1alpha2_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_PublicListingSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_SSHConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_AttestationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_LoggingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_CommonOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_EthOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_WifiOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_BridgesOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_BondsOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_TunnelsOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_VlansOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_CommonOpts_DHCPOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_CommonOpts_Nameservers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_CommonOpts_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_CommonOpts_RoutingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_CommonOpts_Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_EthOpts_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_WifiOpts_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_WifiOpts_AccessPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_BridgesOpts_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_BondsOpts_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_NetworkConfig_TunnelsOpts_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Spec_SSHConfig_AuthKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Capability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_OS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_BIOS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_CPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_GPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_PCIDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_System_Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_CPU_Processor_Cache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Block_Disk_Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_Network_NIC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_GPU_GraphicCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Status_DeviceInfo_HardwareInformation_MemoryInfo_Memory_MemoryBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1alpha2_device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_devices_proto_v1alpha2_device_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1alpha2_device_proto_depIdxs,
		MessageInfos:      edgelq_devices_proto_v1alpha2_device_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1alpha2_device_proto = out.File
	edgelq_devices_proto_v1alpha2_device_proto_rawDesc = nil
	edgelq_devices_proto_v1alpha2_device_proto_goTypes = nil
	edgelq_devices_proto_v1alpha2_device_proto_depIdxs = nil
}
