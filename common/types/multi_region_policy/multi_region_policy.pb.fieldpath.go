// Code generated by protoc-gen-goten-object
// File: edgelq/common/types/multi_region_policy.proto
// DO NOT EDIT!!!

package multi_region_policy

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import ()

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var ()

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type MultiRegionPolicy_FieldPath interface {
	gotenobject.FieldPath
	Selector() MultiRegionPolicy_FieldPathSelector
	Get(source *MultiRegionPolicy) []interface{}
	GetSingle(source *MultiRegionPolicy) (interface{}, bool)
	ClearValue(item *MultiRegionPolicy)

	// Those methods build corresponding MultiRegionPolicy_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) MultiRegionPolicy_FieldPathValue
	WithIArrayOfValues(values interface{}) MultiRegionPolicy_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) MultiRegionPolicy_FieldPathArrayItemValue
}

type MultiRegionPolicy_FieldPathSelector int32

const (
	MultiRegionPolicy_FieldPathSelectorEnabledRegions          MultiRegionPolicy_FieldPathSelector = 0
	MultiRegionPolicy_FieldPathSelectorDefaultControlRegion    MultiRegionPolicy_FieldPathSelector = 1
	MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync MultiRegionPolicy_FieldPathSelector = 2
)

func (s MultiRegionPolicy_FieldPathSelector) String() string {
	switch s {
	case MultiRegionPolicy_FieldPathSelectorEnabledRegions:
		return "enabled_regions"
	case MultiRegionPolicy_FieldPathSelectorDefaultControlRegion:
		return "default_control_region"
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		return "criteria_for_disabled_sync"
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", s))
	}
}

func BuildMultiRegionPolicy_FieldPath(fp gotenobject.RawFieldPath) (MultiRegionPolicy_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object MultiRegionPolicy")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "enabled_regions", "enabledRegions", "enabled-regions":
			return &MultiRegionPolicy_FieldTerminalPath{selector: MultiRegionPolicy_FieldPathSelectorEnabledRegions}, nil
		case "default_control_region", "defaultControlRegion", "default-control-region":
			return &MultiRegionPolicy_FieldTerminalPath{selector: MultiRegionPolicy_FieldPathSelectorDefaultControlRegion}, nil
		case "criteria_for_disabled_sync", "criteriaForDisabledSync", "criteria-for-disabled-sync":
			return &MultiRegionPolicy_FieldTerminalPath{selector: MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync}, nil
		}
	} else {
		switch fp[0] {
		case "criteria_for_disabled_sync", "criteriaForDisabledSync", "criteria-for-disabled-sync":
			if subpath, err := BuildMultiRegionPolicyCriteriaForDisabledSync_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &MultiRegionPolicy_FieldSubPath{selector: MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object MultiRegionPolicy", fp)
}

func ParseMultiRegionPolicy_FieldPath(rawField string) (MultiRegionPolicy_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildMultiRegionPolicy_FieldPath(fp)
}

func MustParseMultiRegionPolicy_FieldPath(rawField string) MultiRegionPolicy_FieldPath {
	fp, err := ParseMultiRegionPolicy_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type MultiRegionPolicy_FieldTerminalPath struct {
	selector MultiRegionPolicy_FieldPathSelector
}

var _ MultiRegionPolicy_FieldPath = (*MultiRegionPolicy_FieldTerminalPath)(nil)

func (fp *MultiRegionPolicy_FieldTerminalPath) Selector() MultiRegionPolicy_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *MultiRegionPolicy_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *MultiRegionPolicy_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source MultiRegionPolicy
func (fp *MultiRegionPolicy_FieldTerminalPath) Get(source *MultiRegionPolicy) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case MultiRegionPolicy_FieldPathSelectorEnabledRegions:
			for _, value := range source.GetEnabledRegions() {
				values = append(values, value)
			}
		case MultiRegionPolicy_FieldPathSelectorDefaultControlRegion:
			values = append(values, source.DefaultControlRegion)
		case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
			for _, value := range source.GetCriteriaForDisabledSync() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fp.selector))
		}
	}
	return
}

func (fp *MultiRegionPolicy_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*MultiRegionPolicy))
}

// GetSingle returns value pointed by specific field of from source MultiRegionPolicy
func (fp *MultiRegionPolicy_FieldTerminalPath) GetSingle(source *MultiRegionPolicy) (interface{}, bool) {
	switch fp.selector {
	case MultiRegionPolicy_FieldPathSelectorEnabledRegions:
		res := source.GetEnabledRegions()
		return res, res != nil
	case MultiRegionPolicy_FieldPathSelectorDefaultControlRegion:
		return source.GetDefaultControlRegion(), source != nil
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		res := source.GetCriteriaForDisabledSync()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fp.selector))
	}
}

func (fp *MultiRegionPolicy_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*MultiRegionPolicy))
}

// GetDefault returns a default value of the field type
func (fp *MultiRegionPolicy_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case MultiRegionPolicy_FieldPathSelectorEnabledRegions:
		return ([]string)(nil)
	case MultiRegionPolicy_FieldPathSelectorDefaultControlRegion:
		return ""
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		return ([]*MultiRegionPolicy_CriteriaForDisabledSync)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fp.selector))
	}
}

func (fp *MultiRegionPolicy_FieldTerminalPath) ClearValue(item *MultiRegionPolicy) {
	if item != nil {
		switch fp.selector {
		case MultiRegionPolicy_FieldPathSelectorEnabledRegions:
			item.EnabledRegions = nil
		case MultiRegionPolicy_FieldPathSelectorDefaultControlRegion:
			item.DefaultControlRegion = ""
		case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
			item.CriteriaForDisabledSync = nil
		default:
			panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fp.selector))
		}
	}
}

func (fp *MultiRegionPolicy_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*MultiRegionPolicy))
}

// IsLeaf - whether field path is holds simple value
func (fp *MultiRegionPolicy_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == MultiRegionPolicy_FieldPathSelectorEnabledRegions ||
		fp.selector == MultiRegionPolicy_FieldPathSelectorDefaultControlRegion
}

func (fp *MultiRegionPolicy_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *MultiRegionPolicy_FieldTerminalPath) WithIValue(value interface{}) MultiRegionPolicy_FieldPathValue {
	switch fp.selector {
	case MultiRegionPolicy_FieldPathSelectorEnabledRegions:
		return &MultiRegionPolicy_FieldTerminalPathValue{MultiRegionPolicy_FieldTerminalPath: *fp, value: value.([]string)}
	case MultiRegionPolicy_FieldPathSelectorDefaultControlRegion:
		return &MultiRegionPolicy_FieldTerminalPathValue{MultiRegionPolicy_FieldTerminalPath: *fp, value: value.(string)}
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		return &MultiRegionPolicy_FieldTerminalPathValue{MultiRegionPolicy_FieldTerminalPath: *fp, value: value.([]*MultiRegionPolicy_CriteriaForDisabledSync)}
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fp.selector))
	}
}

func (fp *MultiRegionPolicy_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *MultiRegionPolicy_FieldTerminalPath) WithIArrayOfValues(values interface{}) MultiRegionPolicy_FieldPathArrayOfValues {
	fpaov := &MultiRegionPolicy_FieldTerminalPathArrayOfValues{MultiRegionPolicy_FieldTerminalPath: *fp}
	switch fp.selector {
	case MultiRegionPolicy_FieldPathSelectorEnabledRegions:
		return &MultiRegionPolicy_FieldTerminalPathArrayOfValues{MultiRegionPolicy_FieldTerminalPath: *fp, values: values.([][]string)}
	case MultiRegionPolicy_FieldPathSelectorDefaultControlRegion:
		return &MultiRegionPolicy_FieldTerminalPathArrayOfValues{MultiRegionPolicy_FieldTerminalPath: *fp, values: values.([]string)}
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		return &MultiRegionPolicy_FieldTerminalPathArrayOfValues{MultiRegionPolicy_FieldTerminalPath: *fp, values: values.([][]*MultiRegionPolicy_CriteriaForDisabledSync)}
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fp.selector))
	}
	return fpaov
}

func (fp *MultiRegionPolicy_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *MultiRegionPolicy_FieldTerminalPath) WithIArrayItemValue(value interface{}) MultiRegionPolicy_FieldPathArrayItemValue {
	switch fp.selector {
	case MultiRegionPolicy_FieldPathSelectorEnabledRegions:
		return &MultiRegionPolicy_FieldTerminalPathArrayItemValue{MultiRegionPolicy_FieldTerminalPath: *fp, value: value.(string)}
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		return &MultiRegionPolicy_FieldTerminalPathArrayItemValue{MultiRegionPolicy_FieldTerminalPath: *fp, value: value.(*MultiRegionPolicy_CriteriaForDisabledSync)}
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fp.selector))
	}
}

func (fp *MultiRegionPolicy_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type MultiRegionPolicy_FieldSubPath struct {
	selector MultiRegionPolicy_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ MultiRegionPolicy_FieldPath = (*MultiRegionPolicy_FieldSubPath)(nil)

func (fps *MultiRegionPolicy_FieldSubPath) Selector() MultiRegionPolicy_FieldPathSelector {
	return fps.selector
}
func (fps *MultiRegionPolicy_FieldSubPath) AsCriteriaForDisabledSyncSubPath() (MultiRegionPolicyCriteriaForDisabledSync_FieldPath, bool) {
	res, ok := fps.subPath.(MultiRegionPolicyCriteriaForDisabledSync_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *MultiRegionPolicy_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *MultiRegionPolicy_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source MultiRegionPolicy
func (fps *MultiRegionPolicy_FieldSubPath) Get(source *MultiRegionPolicy) (values []interface{}) {
	if asCriteriaForDisabledSyncFieldPath, ok := fps.AsCriteriaForDisabledSyncSubPath(); ok {
		for _, item := range source.GetCriteriaForDisabledSync() {
			values = append(values, asCriteriaForDisabledSyncFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fps.selector))
	}
	return
}

func (fps *MultiRegionPolicy_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*MultiRegionPolicy))
}

// GetSingle returns value of selected field from source MultiRegionPolicy
func (fps *MultiRegionPolicy_FieldSubPath) GetSingle(source *MultiRegionPolicy) (interface{}, bool) {
	switch fps.selector {
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		if len(source.GetCriteriaForDisabledSync()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCriteriaForDisabledSync()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fps.selector))
	}
}

func (fps *MultiRegionPolicy_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*MultiRegionPolicy))
}

// GetDefault returns a default value of the field type
func (fps *MultiRegionPolicy_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *MultiRegionPolicy_FieldSubPath) ClearValue(item *MultiRegionPolicy) {
	if item != nil {
		switch fps.selector {
		case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
			for _, subItem := range item.CriteriaForDisabledSync {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fps.selector))
		}
	}
}

func (fps *MultiRegionPolicy_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*MultiRegionPolicy))
}

// IsLeaf - whether field path is holds simple value
func (fps *MultiRegionPolicy_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *MultiRegionPolicy_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&MultiRegionPolicy_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *MultiRegionPolicy_FieldSubPath) WithIValue(value interface{}) MultiRegionPolicy_FieldPathValue {
	return &MultiRegionPolicy_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *MultiRegionPolicy_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *MultiRegionPolicy_FieldSubPath) WithIArrayOfValues(values interface{}) MultiRegionPolicy_FieldPathArrayOfValues {
	return &MultiRegionPolicy_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *MultiRegionPolicy_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *MultiRegionPolicy_FieldSubPath) WithIArrayItemValue(value interface{}) MultiRegionPolicy_FieldPathArrayItemValue {
	return &MultiRegionPolicy_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *MultiRegionPolicy_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// MultiRegionPolicy_FieldPathValue allows storing values for MultiRegionPolicy fields according to their type
type MultiRegionPolicy_FieldPathValue interface {
	MultiRegionPolicy_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **MultiRegionPolicy)
	CompareWith(*MultiRegionPolicy) (cmp int, comparable bool)
}

func ParseMultiRegionPolicy_FieldPathValue(pathStr, valueStr string) (MultiRegionPolicy_FieldPathValue, error) {
	fp, err := ParseMultiRegionPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MultiRegionPolicy field path value from %s: %v", valueStr, err)
	}
	return fpv.(MultiRegionPolicy_FieldPathValue), nil
}

func MustParseMultiRegionPolicy_FieldPathValue(pathStr, valueStr string) MultiRegionPolicy_FieldPathValue {
	fpv, err := ParseMultiRegionPolicy_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type MultiRegionPolicy_FieldTerminalPathValue struct {
	MultiRegionPolicy_FieldTerminalPath
	value interface{}
}

var _ MultiRegionPolicy_FieldPathValue = (*MultiRegionPolicy_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'MultiRegionPolicy' as interface{}
func (fpv *MultiRegionPolicy_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *MultiRegionPolicy_FieldTerminalPathValue) AsEnabledRegionsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *MultiRegionPolicy_FieldTerminalPathValue) AsDefaultControlRegionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *MultiRegionPolicy_FieldTerminalPathValue) AsCriteriaForDisabledSyncValue() ([]*MultiRegionPolicy_CriteriaForDisabledSync, bool) {
	res, ok := fpv.value.([]*MultiRegionPolicy_CriteriaForDisabledSync)
	return res, ok
}

// SetTo stores value for selected field for object MultiRegionPolicy
func (fpv *MultiRegionPolicy_FieldTerminalPathValue) SetTo(target **MultiRegionPolicy) {
	if *target == nil {
		*target = new(MultiRegionPolicy)
	}
	switch fpv.selector {
	case MultiRegionPolicy_FieldPathSelectorEnabledRegions:
		(*target).EnabledRegions = fpv.value.([]string)
	case MultiRegionPolicy_FieldPathSelectorDefaultControlRegion:
		(*target).DefaultControlRegion = fpv.value.(string)
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		(*target).CriteriaForDisabledSync = fpv.value.([]*MultiRegionPolicy_CriteriaForDisabledSync)
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fpv.selector))
	}
}

func (fpv *MultiRegionPolicy_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MultiRegionPolicy)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'MultiRegionPolicy_FieldTerminalPathValue' with the value under path in 'MultiRegionPolicy'.
func (fpv *MultiRegionPolicy_FieldTerminalPathValue) CompareWith(source *MultiRegionPolicy) (int, bool) {
	switch fpv.selector {
	case MultiRegionPolicy_FieldPathSelectorEnabledRegions:
		return 0, false
	case MultiRegionPolicy_FieldPathSelectorDefaultControlRegion:
		leftValue := fpv.value.(string)
		rightValue := source.GetDefaultControlRegion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fpv.selector))
	}
}

func (fpv *MultiRegionPolicy_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*MultiRegionPolicy))
}

type MultiRegionPolicy_FieldSubPathValue struct {
	MultiRegionPolicy_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ MultiRegionPolicy_FieldPathValue = (*MultiRegionPolicy_FieldSubPathValue)(nil)

func (fpvs *MultiRegionPolicy_FieldSubPathValue) AsCriteriaForDisabledSyncPathValue() (MultiRegionPolicyCriteriaForDisabledSync_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(MultiRegionPolicyCriteriaForDisabledSync_FieldPathValue)
	return res, ok
}

func (fpvs *MultiRegionPolicy_FieldSubPathValue) SetTo(target **MultiRegionPolicy) {
	if *target == nil {
		*target = new(MultiRegionPolicy)
	}
	switch fpvs.Selector() {
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fpvs.Selector()))
	}
}

func (fpvs *MultiRegionPolicy_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MultiRegionPolicy)
	fpvs.SetTo(&typedObject)
}

func (fpvs *MultiRegionPolicy_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *MultiRegionPolicy_FieldSubPathValue) CompareWith(source *MultiRegionPolicy) (int, bool) {
	switch fpvs.Selector() {
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fpvs.Selector()))
	}
}

func (fpvs *MultiRegionPolicy_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*MultiRegionPolicy))
}

// MultiRegionPolicy_FieldPathArrayItemValue allows storing single item in Path-specific values for MultiRegionPolicy according to their type
// Present only for array (repeated) types.
type MultiRegionPolicy_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	MultiRegionPolicy_FieldPath
	ContainsValue(*MultiRegionPolicy) bool
}

// ParseMultiRegionPolicy_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseMultiRegionPolicy_FieldPathArrayItemValue(pathStr, valueStr string) (MultiRegionPolicy_FieldPathArrayItemValue, error) {
	fp, err := ParseMultiRegionPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MultiRegionPolicy field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(MultiRegionPolicy_FieldPathArrayItemValue), nil
}

func MustParseMultiRegionPolicy_FieldPathArrayItemValue(pathStr, valueStr string) MultiRegionPolicy_FieldPathArrayItemValue {
	fpaiv, err := ParseMultiRegionPolicy_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type MultiRegionPolicy_FieldTerminalPathArrayItemValue struct {
	MultiRegionPolicy_FieldTerminalPath
	value interface{}
}

var _ MultiRegionPolicy_FieldPathArrayItemValue = (*MultiRegionPolicy_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object MultiRegionPolicy as interface{}
func (fpaiv *MultiRegionPolicy_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *MultiRegionPolicy_FieldTerminalPathArrayItemValue) AsEnabledRegionsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *MultiRegionPolicy_FieldTerminalPathArrayItemValue) AsCriteriaForDisabledSyncItemValue() (*MultiRegionPolicy_CriteriaForDisabledSync, bool) {
	res, ok := fpaiv.value.(*MultiRegionPolicy_CriteriaForDisabledSync)
	return res, ok
}

func (fpaiv *MultiRegionPolicy_FieldTerminalPathArrayItemValue) GetSingle(source *MultiRegionPolicy) (interface{}, bool) {
	return nil, false
}

func (fpaiv *MultiRegionPolicy_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*MultiRegionPolicy))
}

// Contains returns a boolean indicating if value that is being held is present in given 'MultiRegionPolicy'
func (fpaiv *MultiRegionPolicy_FieldTerminalPathArrayItemValue) ContainsValue(source *MultiRegionPolicy) bool {
	slice := fpaiv.MultiRegionPolicy_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type MultiRegionPolicy_FieldSubPathArrayItemValue struct {
	MultiRegionPolicy_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *MultiRegionPolicy_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *MultiRegionPolicy_FieldSubPathArrayItemValue) AsCriteriaForDisabledSyncPathItemValue() (MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'MultiRegionPolicy'
func (fpaivs *MultiRegionPolicy_FieldSubPathArrayItemValue) ContainsValue(source *MultiRegionPolicy) bool {
	switch fpaivs.Selector() {
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy: %d", fpaivs.Selector()))
	}
}

// MultiRegionPolicy_FieldPathArrayOfValues allows storing slice of values for MultiRegionPolicy fields according to their type
type MultiRegionPolicy_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	MultiRegionPolicy_FieldPath
}

func ParseMultiRegionPolicy_FieldPathArrayOfValues(pathStr, valuesStr string) (MultiRegionPolicy_FieldPathArrayOfValues, error) {
	fp, err := ParseMultiRegionPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MultiRegionPolicy field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(MultiRegionPolicy_FieldPathArrayOfValues), nil
}

func MustParseMultiRegionPolicy_FieldPathArrayOfValues(pathStr, valuesStr string) MultiRegionPolicy_FieldPathArrayOfValues {
	fpaov, err := ParseMultiRegionPolicy_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type MultiRegionPolicy_FieldTerminalPathArrayOfValues struct {
	MultiRegionPolicy_FieldTerminalPath
	values interface{}
}

var _ MultiRegionPolicy_FieldPathArrayOfValues = (*MultiRegionPolicy_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *MultiRegionPolicy_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case MultiRegionPolicy_FieldPathSelectorEnabledRegions:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case MultiRegionPolicy_FieldPathSelectorDefaultControlRegion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case MultiRegionPolicy_FieldPathSelectorCriteriaForDisabledSync:
		for _, v := range fpaov.values.([][]*MultiRegionPolicy_CriteriaForDisabledSync) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *MultiRegionPolicy_FieldTerminalPathArrayOfValues) AsEnabledRegionsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *MultiRegionPolicy_FieldTerminalPathArrayOfValues) AsDefaultControlRegionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *MultiRegionPolicy_FieldTerminalPathArrayOfValues) AsCriteriaForDisabledSyncArrayOfValues() ([][]*MultiRegionPolicy_CriteriaForDisabledSync, bool) {
	res, ok := fpaov.values.([][]*MultiRegionPolicy_CriteriaForDisabledSync)
	return res, ok
}

type MultiRegionPolicy_FieldSubPathArrayOfValues struct {
	MultiRegionPolicy_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ MultiRegionPolicy_FieldPathArrayOfValues = (*MultiRegionPolicy_FieldSubPathArrayOfValues)(nil)

func (fpsaov *MultiRegionPolicy_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *MultiRegionPolicy_FieldSubPathArrayOfValues) AsCriteriaForDisabledSyncPathArrayOfValues() (MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type MultiRegionPolicyCriteriaForDisabledSync_FieldPath interface {
	gotenobject.FieldPath
	Selector() MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelector
	Get(source *MultiRegionPolicy_CriteriaForDisabledSync) []interface{}
	GetSingle(source *MultiRegionPolicy_CriteriaForDisabledSync) (interface{}, bool)
	ClearValue(item *MultiRegionPolicy_CriteriaForDisabledSync)

	// Those methods build corresponding MultiRegionPolicyCriteriaForDisabledSync_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) MultiRegionPolicyCriteriaForDisabledSync_FieldPathValue
	WithIArrayOfValues(values interface{}) MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue
}

type MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelector int32

const (
	MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelector = 0
	MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion     MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelector = 1
	MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion       MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelector = 2
)

func (s MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelector) String() string {
	switch s {
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		return "resource_type_name"
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		return "source_region"
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		return "dest_region"
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy_CriteriaForDisabledSync: %d", s))
	}
}

func BuildMultiRegionPolicyCriteriaForDisabledSync_FieldPath(fp gotenobject.RawFieldPath) (MultiRegionPolicyCriteriaForDisabledSync_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object MultiRegionPolicy_CriteriaForDisabledSync")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "resource_type_name", "resourceTypeName", "resource-type-name":
			return &MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath{selector: MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName}, nil
		case "source_region", "sourceRegion", "source-region":
			return &MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath{selector: MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion}, nil
		case "dest_region", "destRegion", "dest-region":
			return &MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath{selector: MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object MultiRegionPolicy_CriteriaForDisabledSync", fp)
}

func ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPath(rawField string) (MultiRegionPolicyCriteriaForDisabledSync_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildMultiRegionPolicyCriteriaForDisabledSync_FieldPath(fp)
}

func MustParseMultiRegionPolicyCriteriaForDisabledSync_FieldPath(rawField string) MultiRegionPolicyCriteriaForDisabledSync_FieldPath {
	fp, err := ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath struct {
	selector MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelector
}

var _ MultiRegionPolicyCriteriaForDisabledSync_FieldPath = (*MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath)(nil)

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) Selector() MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source MultiRegionPolicy_CriteriaForDisabledSync
func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) Get(source *MultiRegionPolicy_CriteriaForDisabledSync) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
			values = append(values, source.ResourceTypeName)
		case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
			values = append(values, source.SourceRegion)
		case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
			values = append(values, source.DestRegion)
		default:
			panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy_CriteriaForDisabledSync: %d", fp.selector))
		}
	}
	return
}

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*MultiRegionPolicy_CriteriaForDisabledSync))
}

// GetSingle returns value pointed by specific field of from source MultiRegionPolicy_CriteriaForDisabledSync
func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) GetSingle(source *MultiRegionPolicy_CriteriaForDisabledSync) (interface{}, bool) {
	switch fp.selector {
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		return source.GetResourceTypeName(), source != nil
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		return source.GetSourceRegion(), source != nil
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		return source.GetDestRegion(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy_CriteriaForDisabledSync: %d", fp.selector))
	}
}

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*MultiRegionPolicy_CriteriaForDisabledSync))
}

// GetDefault returns a default value of the field type
func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		return ""
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		return ""
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy_CriteriaForDisabledSync: %d", fp.selector))
	}
}

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) ClearValue(item *MultiRegionPolicy_CriteriaForDisabledSync) {
	if item != nil {
		switch fp.selector {
		case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
			item.ResourceTypeName = ""
		case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
			item.SourceRegion = ""
		case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
			item.DestRegion = ""
		default:
			panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy_CriteriaForDisabledSync: %d", fp.selector))
		}
	}
}

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*MultiRegionPolicy_CriteriaForDisabledSync))
}

// IsLeaf - whether field path is holds simple value
func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName ||
		fp.selector == MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion ||
		fp.selector == MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion
}

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) WithIValue(value interface{}) MultiRegionPolicyCriteriaForDisabledSync_FieldPathValue {
	switch fp.selector {
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		return &MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue{MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, value: value.(string)}
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		return &MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue{MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, value: value.(string)}
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		return &MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue{MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy_CriteriaForDisabledSync: %d", fp.selector))
	}
}

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) WithIArrayOfValues(values interface{}) MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues {
	fpaov := &MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues{MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath: *fp}
	switch fp.selector {
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		return &MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues{MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, values: values.([]string)}
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		return &MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues{MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, values: values.([]string)}
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		return &MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues{MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy_CriteriaForDisabledSync: %d", fp.selector))
	}
	return fpaov
}

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) WithIArrayItemValue(value interface{}) MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy_CriteriaForDisabledSync: %d", fp.selector))
	}
}

func (fp *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// MultiRegionPolicyCriteriaForDisabledSync_FieldPathValue allows storing values for CriteriaForDisabledSync fields according to their type
type MultiRegionPolicyCriteriaForDisabledSync_FieldPathValue interface {
	MultiRegionPolicyCriteriaForDisabledSync_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **MultiRegionPolicy_CriteriaForDisabledSync)
	CompareWith(*MultiRegionPolicy_CriteriaForDisabledSync) (cmp int, comparable bool)
}

func ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPathValue(pathStr, valueStr string) (MultiRegionPolicyCriteriaForDisabledSync_FieldPathValue, error) {
	fp, err := ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CriteriaForDisabledSync field path value from %s: %v", valueStr, err)
	}
	return fpv.(MultiRegionPolicyCriteriaForDisabledSync_FieldPathValue), nil
}

func MustParseMultiRegionPolicyCriteriaForDisabledSync_FieldPathValue(pathStr, valueStr string) MultiRegionPolicyCriteriaForDisabledSync_FieldPathValue {
	fpv, err := ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue struct {
	MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath
	value interface{}
}

var _ MultiRegionPolicyCriteriaForDisabledSync_FieldPathValue = (*MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CriteriaForDisabledSync' as interface{}
func (fpv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue) AsResourceTypeNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue) AsSourceRegionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue) AsDestRegionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object CriteriaForDisabledSync
func (fpv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue) SetTo(target **MultiRegionPolicy_CriteriaForDisabledSync) {
	if *target == nil {
		*target = new(MultiRegionPolicy_CriteriaForDisabledSync)
	}
	switch fpv.selector {
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		(*target).ResourceTypeName = fpv.value.(string)
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		(*target).SourceRegion = fpv.value.(string)
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		(*target).DestRegion = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy_CriteriaForDisabledSync: %d", fpv.selector))
	}
}

func (fpv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MultiRegionPolicy_CriteriaForDisabledSync)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue' with the value under path in 'MultiRegionPolicy_CriteriaForDisabledSync'.
func (fpv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue) CompareWith(source *MultiRegionPolicy_CriteriaForDisabledSync) (int, bool) {
	switch fpv.selector {
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		leftValue := fpv.value.(string)
		rightValue := source.GetResourceTypeName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		leftValue := fpv.value.(string)
		rightValue := source.GetSourceRegion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		leftValue := fpv.value.(string)
		rightValue := source.GetDestRegion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for MultiRegionPolicy_CriteriaForDisabledSync: %d", fpv.selector))
	}
}

func (fpv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*MultiRegionPolicy_CriteriaForDisabledSync))
}

// MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue allows storing single item in Path-specific values for CriteriaForDisabledSync according to their type
// Present only for array (repeated) types.
type MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	MultiRegionPolicyCriteriaForDisabledSync_FieldPath
	ContainsValue(*MultiRegionPolicy_CriteriaForDisabledSync) bool
}

// ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue(pathStr, valueStr string) (MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue, error) {
	fp, err := ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CriteriaForDisabledSync field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue), nil
}

func MustParseMultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue(pathStr, valueStr string) MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue {
	fpaiv, err := ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue struct {
	MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath
	value interface{}
}

var _ MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayItemValue = (*MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object MultiRegionPolicy_CriteriaForDisabledSync as interface{}
func (fpaiv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue) GetSingle(source *MultiRegionPolicy_CriteriaForDisabledSync) (interface{}, bool) {
	return nil, false
}

func (fpaiv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*MultiRegionPolicy_CriteriaForDisabledSync))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CriteriaForDisabledSync'
func (fpaiv *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayItemValue) ContainsValue(source *MultiRegionPolicy_CriteriaForDisabledSync) bool {
	slice := fpaiv.MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues allows storing slice of values for CriteriaForDisabledSync fields according to their type
type MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	MultiRegionPolicyCriteriaForDisabledSync_FieldPath
}

func ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues(pathStr, valuesStr string) (MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues, error) {
	fp, err := ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CriteriaForDisabledSync field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues), nil
}

func MustParseMultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues(pathStr, valuesStr string) MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues {
	fpaov, err := ParseMultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues struct {
	MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPath
	values interface{}
}

var _ MultiRegionPolicyCriteriaForDisabledSync_FieldPathArrayOfValues = (*MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorResourceTypeName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorSourceRegion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case MultiRegionPolicyCriteriaForDisabledSync_FieldPathSelectorDestRegion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues) AsResourceTypeNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues) AsSourceRegionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *MultiRegionPolicyCriteriaForDisabledSync_FieldTerminalPathArrayOfValues) AsDestRegionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
