syntax = "proto3";

package ntt.types;

import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/common/types/meta;ntt_meta";
option java_multiple_files = true;
option java_package = "com.ntt.types.pb";

// Metadata
message Meta {
  google.protobuf.Timestamp create_time = 1
      [ (google.api.field_behavior) = OUTPUT_ONLY ];

  google.protobuf.Timestamp update_time = 2
      [ (google.api.field_behavior) = OUTPUT_ONLY ];

  google.protobuf.Timestamp delete_time = 16
      [ (google.api.field_behavior) = OUTPUT_ONLY ];

  string uuid = 3 [ (google.api.field_behavior) = OUTPUT_ONLY ];

  repeated string tags = 4;

  map<string, string> labels = 5;

  map<string, string> annotations = 6;

  // generation is the version number of the spec of the resource.
  // This number increments when the resource is updated with any changes of its
  // spec.
  int64 generation = 7;

  // An opaque value that represents the internal version of this object that
  // can be used by clients to determine when objects have changed. May be used
  // for optimistic concurrency, change detection, and the watch operation on a
  // resource or set of resources. Clients must treat these values as opaque and
  // passed unmodified back to the server. They may only be valid for a
  // particular resource or set of resources.
  string resource_version = 8 [ (google.api.field_behavior) = OUTPUT_ONLY ];

  // List of objects depended by this object. If ALL objects in the list have
  // been deleted, this object will be garbage collected. If this object is
  // managed by a controller, then an entry in this list will point to this
  // controller, with the controller field set to true.
  repeated OwnerReference owner_references = 13;

  // List of all shard indices by their keys
  map<string, int64> shards = 14;

  // Information about resource region and synchronization
  SyncingMeta syncing = 15;

  // Current lifecycle information about resource.
  Lifecycle lifecycle = 17;
}

// A label selector is a label query over a set of resources. The result of
// matchLabels and matchExpressions are ANDed. An empty label selector matches
// all objects. A null label selector matches no objects.
message LabelSelector {
  // matchLabels is a map of {key,value} pairs. A single {key,value} in the
  // matchLabels map is equivalent to an element of matchExpressions, whose key
  // field is "key", the operator is "In", and the values array contains only
  // "value". The requirements are ANDed.
  map<string, string> match_labels = 1;

  // matchExpressions is a list of label selector requirements. The requirements
  // are ANDed.
  repeated LabelSelectorRequirement match_expressions = 2;
}

// A label selector requirement is a selector that contains values, a key, and
// an operator that relates the key and values.
message LabelSelectorRequirement {
  // key is the label key that the selector applies to.
  // +patchMergeKey=key
  // +patchStrategy=merge
  string key = 1;

  // operator represents a key's relationship to a set of values.
  // Valid operators are In, NotIn, Exists and DoesNotExist.
  string operator = 2;

  // values is an array of string values. If the operator is In or NotIn,
  // the values array must be non-empty. If the operator is Exists or
  // DoesNotExist, the values array must be empty. This array is replaced during
  // a strategic merge patch. +optional
  repeated string values = 3;
}

// OwnerReference contains enough information to let you identify an owning
// object. An owning object must be in the same namespace as the dependent, or
// be cluster-scoped, so there is no namespace field.
message OwnerReference {
  // Resource kind, for example "devices.edgelq.com/Device"
  string kind = 2;

  // For example v1alpha2
  string version = 8;

  // Name of the resource, for example projects/p1/devices/d1
  string name = 3;

  // Region ID owning resource
  string region = 9;

  // If true, this reference points to the managing controller.
  bool controller = 6;

  // Whether reference should be blocking.
  // TODO: This flag is currently non-functional because IAM auth middleware
  // does not use attach conditions yet. Requires some changes in that
  // middleware.
  bool block_owner_deletion = 7;

  // This flag indicates that owner must have schema-based reference for this
  // owner reference to be valid. Otherwise it will be removed. If there are
  // no other owners, resource will be deleted. It also works if owner
  // resource unsets its reference.
  // This extends default behavior of meta references, where ownees are deleted
  // only when owner is deleted. Here, we also want to delete ownee if owner
  // just stops pointing to ownee via own reference (or never pointed at all).
  // This flag is useful if higher-level service creates some resource in
  // lower level service and assigns via schema reference.
  bool requires_owner_reference = 10;

  reserved 1, 4, 5;
}

// SyncingMeta is a helper object associated with each resource that is either
// regional or is governed by Policy object. This object is used for internal
// purposes like Sync controller which ensures data synchronization of all
// resources across multiple regions.
message SyncingMeta {
  // For regional resources (or their descendants) it is equal to the region ID
  // (present in resource name). Otherwise it is equal to the region as defined
  // in Policy object under default_control_region field.
  string owning_region = 1;

  // List of regions where owning resource can be present. If can be present in
  // all regions, will contain "*".
  repeated string regions = 2;
}

message Lifecycle {
  // Current resource state
  State state = 1 [ (google.api.field_behavior) = OUTPUT_ONLY ];

  // Optional flag indicating that resource must not be deleted - at least yet.
  // This flag is not accessible via API, it is expected developer will populate
  // it if needed from custom server code. It should be used when some condition
  // (other than blocking back reference) applies that server is not aware of.
  // If flag is true, then constraint store will block resource deletion. GC
  // will also defer from cleaning up, however developer should ensure that
  // eventually deletion will be done.
  bool block_deletion = 2 [ (google.api.field_behavior) = OUTPUT_ONLY ];

  // current resource state
  enum State {
    // Must never be used
    UNDEFINED = 0;

    // Resource is up and running
    ACTIVE = 1;

    // Resource is in slow-deletion process.
    DELETING = 2;
  }
}
