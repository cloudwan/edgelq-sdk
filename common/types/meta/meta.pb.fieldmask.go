// Code generated by protoc-gen-goten-object
// File: edgelq/common/types/meta.proto
// DO NOT EDIT!!!

package ntt_meta

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	syncing_meta "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/syncing_meta"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &syncing_meta.SyncingMeta{}
	_ = &timestamp.Timestamp{}
)

type Meta_FieldMask struct {
	Paths []Meta_FieldPath
}

func FullMeta_FieldMask() *Meta_FieldMask {
	res := &Meta_FieldMask{}
	res.Paths = append(res.Paths, &Meta_FieldTerminalPath{selector: Meta_FieldPathSelectorCreateTime})
	res.Paths = append(res.Paths, &Meta_FieldTerminalPath{selector: Meta_FieldPathSelectorUpdateTime})
	res.Paths = append(res.Paths, &Meta_FieldTerminalPath{selector: Meta_FieldPathSelectorUuid})
	res.Paths = append(res.Paths, &Meta_FieldTerminalPath{selector: Meta_FieldPathSelectorTags})
	res.Paths = append(res.Paths, &Meta_FieldTerminalPath{selector: Meta_FieldPathSelectorLabels})
	res.Paths = append(res.Paths, &Meta_FieldTerminalPath{selector: Meta_FieldPathSelectorAnnotations})
	res.Paths = append(res.Paths, &Meta_FieldTerminalPath{selector: Meta_FieldPathSelectorGeneration})
	res.Paths = append(res.Paths, &Meta_FieldTerminalPath{selector: Meta_FieldPathSelectorResourceVersion})
	res.Paths = append(res.Paths, &Meta_FieldTerminalPath{selector: Meta_FieldPathSelectorOwnerReferences})
	res.Paths = append(res.Paths, &Meta_FieldTerminalPath{selector: Meta_FieldPathSelectorShards})
	res.Paths = append(res.Paths, &Meta_FieldTerminalPath{selector: Meta_FieldPathSelectorSyncing})
	return res
}

func (fieldMask *Meta_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Meta_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Meta_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseMeta_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Meta_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Meta_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Meta_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseMeta_FieldPath(raw)
	})
}

func (fieldMask *Meta_FieldMask) ProtoMessage() {}

func (fieldMask *Meta_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Meta_FieldMask) Subtract(other *Meta_FieldMask) *Meta_FieldMask {
	result := &Meta_FieldMask{}
	removedSelectors := make([]bool, 11)
	otherSubMasks := map[Meta_FieldPathSelector]gotenobject.FieldMask{
		Meta_FieldPathSelectorOwnerReferences: &OwnerReference_FieldMask{},
		Meta_FieldPathSelectorSyncing:         &syncing_meta.SyncingMeta_FieldMask{},
	}
	mySubMasks := map[Meta_FieldPathSelector]gotenobject.FieldMask{
		Meta_FieldPathSelectorOwnerReferences: &OwnerReference_FieldMask{},
		Meta_FieldPathSelectorSyncing:         &syncing_meta.SyncingMeta_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Meta_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Meta_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Meta_FieldTerminalPath); ok {
					switch tp.selector {
					case Meta_FieldPathSelectorOwnerReferences:
						mySubMasks[Meta_FieldPathSelectorOwnerReferences] = FullOwnerReference_FieldMask()
					case Meta_FieldPathSelectorSyncing:
						mySubMasks[Meta_FieldPathSelectorSyncing] = syncing_meta.FullSyncingMeta_FieldMask()
					}
				} else if tp, ok := path.(*Meta_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Meta_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Meta_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Meta_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Meta_FieldMask) FilterInputFields() *Meta_FieldMask {
	result := &Meta_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Meta_FieldPathSelectorCreateTime:
		case Meta_FieldPathSelectorUpdateTime:
		case Meta_FieldPathSelectorUuid:
		case Meta_FieldPathSelectorSyncing:
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Meta_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Meta_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Meta_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseMeta_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Meta_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Meta_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Meta_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Meta_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Meta_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Meta_FieldMask) AppendPath(path Meta_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Meta_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Meta_FieldPath))
}

func (fieldMask *Meta_FieldMask) GetPaths() []Meta_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Meta_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Meta_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseMeta_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Meta_FieldMask) Set(target, source *Meta) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Meta_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Meta), source.(*Meta))
}

func (fieldMask *Meta_FieldMask) Project(source *Meta) *Meta {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Meta{}
	ownerReferencesMask := &OwnerReference_FieldMask{}
	wholeOwnerReferencesAccepted := false
	syncingMask := &syncing_meta.SyncingMeta_FieldMask{}
	wholeSyncingAccepted := false
	var labelsMapKeys []string
	wholeLabelsAccepted := false
	var annotationsMapKeys []string
	wholeAnnotationsAccepted := false
	var shardsMapKeys []string
	wholeShardsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Meta_FieldTerminalPath:
			switch tp.selector {
			case Meta_FieldPathSelectorCreateTime:
				result.CreateTime = source.CreateTime
			case Meta_FieldPathSelectorUpdateTime:
				result.UpdateTime = source.UpdateTime
			case Meta_FieldPathSelectorUuid:
				result.Uuid = source.Uuid
			case Meta_FieldPathSelectorTags:
				result.Tags = source.Tags
			case Meta_FieldPathSelectorLabels:
				result.Labels = source.Labels
				wholeLabelsAccepted = true
			case Meta_FieldPathSelectorAnnotations:
				result.Annotations = source.Annotations
				wholeAnnotationsAccepted = true
			case Meta_FieldPathSelectorGeneration:
				result.Generation = source.Generation
			case Meta_FieldPathSelectorResourceVersion:
				result.ResourceVersion = source.ResourceVersion
			case Meta_FieldPathSelectorOwnerReferences:
				result.OwnerReferences = source.OwnerReferences
				wholeOwnerReferencesAccepted = true
			case Meta_FieldPathSelectorShards:
				result.Shards = source.Shards
				wholeShardsAccepted = true
			case Meta_FieldPathSelectorSyncing:
				result.Syncing = source.Syncing
				wholeSyncingAccepted = true
			}
		case *Meta_FieldSubPath:
			switch tp.selector {
			case Meta_FieldPathSelectorOwnerReferences:
				ownerReferencesMask.AppendPath(tp.subPath.(OwnerReference_FieldPath))
			case Meta_FieldPathSelectorSyncing:
				syncingMask.AppendPath(tp.subPath.(syncing_meta.SyncingMeta_FieldPath))
			}
		case *Meta_FieldPathMap:
			switch tp.selector {
			case Meta_FieldPathSelectorLabels:
				labelsMapKeys = append(labelsMapKeys, tp.key)
			case Meta_FieldPathSelectorAnnotations:
				annotationsMapKeys = append(annotationsMapKeys, tp.key)
			case Meta_FieldPathSelectorShards:
				shardsMapKeys = append(shardsMapKeys, tp.key)
			}
		}
	}
	if wholeLabelsAccepted == false && len(labelsMapKeys) > 0 && source.GetLabels() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetLabels()
		for _, key := range labelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.Labels = copiedMap
	}
	if wholeAnnotationsAccepted == false && len(annotationsMapKeys) > 0 && source.GetAnnotations() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetAnnotations()
		for _, key := range annotationsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.Annotations = copiedMap
	}
	if wholeOwnerReferencesAccepted == false && len(ownerReferencesMask.Paths) > 0 {
		for _, sourceItem := range source.GetOwnerReferences() {
			result.OwnerReferences = append(result.OwnerReferences, ownerReferencesMask.Project(sourceItem))
		}
	}
	if wholeShardsAccepted == false && len(shardsMapKeys) > 0 && source.GetShards() != nil {
		copiedMap := map[string]int64{}
		sourceMap := source.GetShards()
		for _, key := range shardsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.Shards = copiedMap
	}
	if wholeSyncingAccepted == false && len(syncingMask.Paths) > 0 {
		result.Syncing = syncingMask.Project(source.GetSyncing())
	}
	return result
}

func (fieldMask *Meta_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Meta))
}

func (fieldMask *Meta_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type LabelSelector_FieldMask struct {
	Paths []LabelSelector_FieldPath
}

func FullLabelSelector_FieldMask() *LabelSelector_FieldMask {
	res := &LabelSelector_FieldMask{}
	res.Paths = append(res.Paths, &LabelSelector_FieldTerminalPath{selector: LabelSelector_FieldPathSelectorMatchLabels})
	res.Paths = append(res.Paths, &LabelSelector_FieldTerminalPath{selector: LabelSelector_FieldPathSelectorMatchExpressions})
	return res
}

func (fieldMask *LabelSelector_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *LabelSelector_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *LabelSelector_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseLabelSelector_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *LabelSelector_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*LabelSelector_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *LabelSelector_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseLabelSelector_FieldPath(raw)
	})
}

func (fieldMask *LabelSelector_FieldMask) ProtoMessage() {}

func (fieldMask *LabelSelector_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *LabelSelector_FieldMask) Subtract(other *LabelSelector_FieldMask) *LabelSelector_FieldMask {
	result := &LabelSelector_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[LabelSelector_FieldPathSelector]gotenobject.FieldMask{
		LabelSelector_FieldPathSelectorMatchExpressions: &LabelSelectorRequirement_FieldMask{},
	}
	mySubMasks := map[LabelSelector_FieldPathSelector]gotenobject.FieldMask{
		LabelSelector_FieldPathSelectorMatchExpressions: &LabelSelectorRequirement_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *LabelSelector_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *LabelSelector_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*LabelSelector_FieldTerminalPath); ok {
					switch tp.selector {
					case LabelSelector_FieldPathSelectorMatchExpressions:
						mySubMasks[LabelSelector_FieldPathSelectorMatchExpressions] = FullLabelSelectorRequirement_FieldMask()
					}
				} else if tp, ok := path.(*LabelSelector_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &LabelSelector_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *LabelSelector_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*LabelSelector_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *LabelSelector_FieldMask) FilterInputFields() *LabelSelector_FieldMask {
	result := &LabelSelector_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *LabelSelector_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *LabelSelector_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]LabelSelector_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseLabelSelector_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask LabelSelector_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *LabelSelector_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LabelSelector_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask LabelSelector_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *LabelSelector_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LabelSelector_FieldMask) AppendPath(path LabelSelector_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *LabelSelector_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(LabelSelector_FieldPath))
}

func (fieldMask *LabelSelector_FieldMask) GetPaths() []LabelSelector_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *LabelSelector_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *LabelSelector_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseLabelSelector_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *LabelSelector_FieldMask) Set(target, source *LabelSelector) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *LabelSelector_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*LabelSelector), source.(*LabelSelector))
}

func (fieldMask *LabelSelector_FieldMask) Project(source *LabelSelector) *LabelSelector {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &LabelSelector{}
	matchExpressionsMask := &LabelSelectorRequirement_FieldMask{}
	wholeMatchExpressionsAccepted := false
	var matchLabelsMapKeys []string
	wholeMatchLabelsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *LabelSelector_FieldTerminalPath:
			switch tp.selector {
			case LabelSelector_FieldPathSelectorMatchLabels:
				result.MatchLabels = source.MatchLabels
				wholeMatchLabelsAccepted = true
			case LabelSelector_FieldPathSelectorMatchExpressions:
				result.MatchExpressions = source.MatchExpressions
				wholeMatchExpressionsAccepted = true
			}
		case *LabelSelector_FieldSubPath:
			switch tp.selector {
			case LabelSelector_FieldPathSelectorMatchExpressions:
				matchExpressionsMask.AppendPath(tp.subPath.(LabelSelectorRequirement_FieldPath))
			}
		case *LabelSelector_FieldPathMap:
			switch tp.selector {
			case LabelSelector_FieldPathSelectorMatchLabels:
				matchLabelsMapKeys = append(matchLabelsMapKeys, tp.key)
			}
		}
	}
	if wholeMatchLabelsAccepted == false && len(matchLabelsMapKeys) > 0 && source.GetMatchLabels() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetMatchLabels()
		for _, key := range matchLabelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.MatchLabels = copiedMap
	}
	if wholeMatchExpressionsAccepted == false && len(matchExpressionsMask.Paths) > 0 {
		for _, sourceItem := range source.GetMatchExpressions() {
			result.MatchExpressions = append(result.MatchExpressions, matchExpressionsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *LabelSelector_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*LabelSelector))
}

func (fieldMask *LabelSelector_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type LabelSelectorRequirement_FieldMask struct {
	Paths []LabelSelectorRequirement_FieldPath
}

func FullLabelSelectorRequirement_FieldMask() *LabelSelectorRequirement_FieldMask {
	res := &LabelSelectorRequirement_FieldMask{}
	res.Paths = append(res.Paths, &LabelSelectorRequirement_FieldTerminalPath{selector: LabelSelectorRequirement_FieldPathSelectorKey})
	res.Paths = append(res.Paths, &LabelSelectorRequirement_FieldTerminalPath{selector: LabelSelectorRequirement_FieldPathSelectorOperator})
	res.Paths = append(res.Paths, &LabelSelectorRequirement_FieldTerminalPath{selector: LabelSelectorRequirement_FieldPathSelectorValues})
	return res
}

func (fieldMask *LabelSelectorRequirement_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *LabelSelectorRequirement_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *LabelSelectorRequirement_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseLabelSelectorRequirement_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *LabelSelectorRequirement_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*LabelSelectorRequirement_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *LabelSelectorRequirement_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseLabelSelectorRequirement_FieldPath(raw)
	})
}

func (fieldMask *LabelSelectorRequirement_FieldMask) ProtoMessage() {}

func (fieldMask *LabelSelectorRequirement_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *LabelSelectorRequirement_FieldMask) Subtract(other *LabelSelectorRequirement_FieldMask) *LabelSelectorRequirement_FieldMask {
	result := &LabelSelectorRequirement_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *LabelSelectorRequirement_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *LabelSelectorRequirement_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*LabelSelectorRequirement_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *LabelSelectorRequirement_FieldMask) FilterInputFields() *LabelSelectorRequirement_FieldMask {
	result := &LabelSelectorRequirement_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *LabelSelectorRequirement_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *LabelSelectorRequirement_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]LabelSelectorRequirement_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseLabelSelectorRequirement_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask LabelSelectorRequirement_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *LabelSelectorRequirement_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LabelSelectorRequirement_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask LabelSelectorRequirement_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *LabelSelectorRequirement_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LabelSelectorRequirement_FieldMask) AppendPath(path LabelSelectorRequirement_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *LabelSelectorRequirement_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(LabelSelectorRequirement_FieldPath))
}

func (fieldMask *LabelSelectorRequirement_FieldMask) GetPaths() []LabelSelectorRequirement_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *LabelSelectorRequirement_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *LabelSelectorRequirement_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseLabelSelectorRequirement_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *LabelSelectorRequirement_FieldMask) Set(target, source *LabelSelectorRequirement) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *LabelSelectorRequirement_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*LabelSelectorRequirement), source.(*LabelSelectorRequirement))
}

func (fieldMask *LabelSelectorRequirement_FieldMask) Project(source *LabelSelectorRequirement) *LabelSelectorRequirement {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &LabelSelectorRequirement{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *LabelSelectorRequirement_FieldTerminalPath:
			switch tp.selector {
			case LabelSelectorRequirement_FieldPathSelectorKey:
				result.Key = source.Key
			case LabelSelectorRequirement_FieldPathSelectorOperator:
				result.Operator = source.Operator
			case LabelSelectorRequirement_FieldPathSelectorValues:
				result.Values = source.Values
			}
		}
	}
	return result
}

func (fieldMask *LabelSelectorRequirement_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*LabelSelectorRequirement))
}

func (fieldMask *LabelSelectorRequirement_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type OwnerReference_FieldMask struct {
	Paths []OwnerReference_FieldPath
}

func FullOwnerReference_FieldMask() *OwnerReference_FieldMask {
	res := &OwnerReference_FieldMask{}
	res.Paths = append(res.Paths, &OwnerReference_FieldTerminalPath{selector: OwnerReference_FieldPathSelectorApiVersion})
	res.Paths = append(res.Paths, &OwnerReference_FieldTerminalPath{selector: OwnerReference_FieldPathSelectorKind})
	res.Paths = append(res.Paths, &OwnerReference_FieldTerminalPath{selector: OwnerReference_FieldPathSelectorName})
	res.Paths = append(res.Paths, &OwnerReference_FieldTerminalPath{selector: OwnerReference_FieldPathSelectorUid})
	res.Paths = append(res.Paths, &OwnerReference_FieldTerminalPath{selector: OwnerReference_FieldPathSelectorController})
	res.Paths = append(res.Paths, &OwnerReference_FieldTerminalPath{selector: OwnerReference_FieldPathSelectorBlockOwnerDeletion})
	return res
}

func (fieldMask *OwnerReference_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *OwnerReference_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *OwnerReference_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseOwnerReference_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *OwnerReference_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*OwnerReference_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *OwnerReference_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseOwnerReference_FieldPath(raw)
	})
}

func (fieldMask *OwnerReference_FieldMask) ProtoMessage() {}

func (fieldMask *OwnerReference_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *OwnerReference_FieldMask) Subtract(other *OwnerReference_FieldMask) *OwnerReference_FieldMask {
	result := &OwnerReference_FieldMask{}
	removedSelectors := make([]bool, 6)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *OwnerReference_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *OwnerReference_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*OwnerReference_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *OwnerReference_FieldMask) FilterInputFields() *OwnerReference_FieldMask {
	result := &OwnerReference_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *OwnerReference_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *OwnerReference_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]OwnerReference_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseOwnerReference_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask OwnerReference_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *OwnerReference_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *OwnerReference_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask OwnerReference_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *OwnerReference_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *OwnerReference_FieldMask) AppendPath(path OwnerReference_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *OwnerReference_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(OwnerReference_FieldPath))
}

func (fieldMask *OwnerReference_FieldMask) GetPaths() []OwnerReference_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *OwnerReference_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *OwnerReference_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseOwnerReference_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *OwnerReference_FieldMask) Set(target, source *OwnerReference) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *OwnerReference_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*OwnerReference), source.(*OwnerReference))
}

func (fieldMask *OwnerReference_FieldMask) Project(source *OwnerReference) *OwnerReference {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &OwnerReference{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *OwnerReference_FieldTerminalPath:
			switch tp.selector {
			case OwnerReference_FieldPathSelectorApiVersion:
				result.ApiVersion = source.ApiVersion
			case OwnerReference_FieldPathSelectorKind:
				result.Kind = source.Kind
			case OwnerReference_FieldPathSelectorName:
				result.Name = source.Name
			case OwnerReference_FieldPathSelectorUid:
				result.Uid = source.Uid
			case OwnerReference_FieldPathSelectorController:
				result.Controller = source.Controller
			case OwnerReference_FieldPathSelectorBlockOwnerDeletion:
				result.BlockOwnerDeletion = source.BlockOwnerDeletion
			}
		}
	}
	return result
}

func (fieldMask *OwnerReference_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*OwnerReference))
}

func (fieldMask *OwnerReference_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
