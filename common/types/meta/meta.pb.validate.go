// Code generated by protoc-gen-goten-validate
// File: edgelq/common/types/meta.proto
// DO NOT EDIT!!!

package ntt_meta

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/durationpb"
	"google.golang.org/protobuf/types/known/timestamppb"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	syncing_meta "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/syncing_meta"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = durationpb.Duration{}
	_ = timestamppb.Timestamp{}
	_ = gotenvalidate.NewValidationError

	validation_regex_Meta_tags_01bb86434a9ec2ae8947141a40b748cb = regexp.MustCompile("^[A-Za-z0-9][A-Za-z0-9_-]*$")
)

// make sure we're using proto imports
var (
	_ = &syncing_meta.SyncingMeta{}
	_ = &timestamp.Timestamp{}
)

func (obj *Meta) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Tags) > 32 {
		return gotenvalidate.NewValidationError("Meta", "tags", obj.Tags, "field must have at most 32 items", nil)
	}
	if len(obj.Tags) > 1 {
		values := make(map[string]struct{})
		for _, v := range obj.Tags {
			if _, ok := values[v]; ok {
				return gotenvalidate.NewValidationError("Meta", "tags", obj.Tags, "field must contain unique items", nil)
			}
			values[v] = struct{}{}
		}
	}
	for _, el := range obj.Tags {

		{
			rlen := utf8.RuneCountInString(el)
			if rlen < 1 {
				return gotenvalidate.NewValidationError("Meta", "tags", el, "field must contain at least 1 characters", nil)
			}
		}
		if !validation_regex_Meta_tags_01bb86434a9ec2ae8947141a40b748cb.Match([]byte(el)) {
			return gotenvalidate.NewValidationError("Meta", "tags", el, "field must match the regex ^[A-Za-z0-9][A-Za-z0-9_-]*$", nil)
		}
	}
	if subobj, ok := interface{}(obj.Syncing).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Meta", "syncing", obj.Syncing, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *LabelSelector) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *LabelSelectorRequirement) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *OwnerReference) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
