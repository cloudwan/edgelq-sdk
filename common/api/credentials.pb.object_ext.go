// Code generated by protoc-gen-goten-object
// File: edgelq/common/api/credentials.proto
// DO NOT EDIT!!!

package api

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
)

func (o *ServiceAccount) GotenObjectExt() {}

func (o *ServiceAccount) MakeFullFieldMask() *ServiceAccount_FieldMask {
	return FullServiceAccount_FieldMask()
}

func (o *ServiceAccount) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullServiceAccount_FieldMask()
}

func (o *ServiceAccount) MakeDiffFieldMask(other *ServiceAccount) *ServiceAccount_FieldMask {
	if o == nil && other == nil {
		return &ServiceAccount_FieldMask{}
	}
	if o == nil || other == nil {
		return FullServiceAccount_FieldMask()
	}

	res := &ServiceAccount_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &ServiceAccount_FieldTerminalPath{selector: ServiceAccount_FieldPathSelectorType})
	}
	if o.GetClientEmail() != other.GetClientEmail() {
		res.Paths = append(res.Paths, &ServiceAccount_FieldTerminalPath{selector: ServiceAccount_FieldPathSelectorClientEmail})
	}
	if o.GetPrivateKeyId() != other.GetPrivateKeyId() {
		res.Paths = append(res.Paths, &ServiceAccount_FieldTerminalPath{selector: ServiceAccount_FieldPathSelectorPrivateKeyId})
	}
	if o.GetPrivateKey() != other.GetPrivateKey() {
		res.Paths = append(res.Paths, &ServiceAccount_FieldTerminalPath{selector: ServiceAccount_FieldPathSelectorPrivateKey})
	}
	return res
}

func (o *ServiceAccount) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ServiceAccount))
}

func (o *ServiceAccount) Clone() *ServiceAccount {
	if o == nil {
		return nil
	}
	result := &ServiceAccount{}
	result.Type = o.Type
	result.ClientEmail = o.ClientEmail
	result.PrivateKeyId = o.PrivateKeyId
	result.PrivateKey = o.PrivateKey
	return result
}

func (o *ServiceAccount) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ServiceAccount) Merge(source *ServiceAccount) {
	o.Type = source.GetType()
	o.ClientEmail = source.GetClientEmail()
	o.PrivateKeyId = source.GetPrivateKeyId()
	o.PrivateKey = source.GetPrivateKey()
}

func (o *ServiceAccount) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ServiceAccount))
}
