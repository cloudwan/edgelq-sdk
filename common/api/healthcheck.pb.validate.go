// Code generated by protoc-gen-goten-validate
// File: edgelq/common/api/healthcheck.proto
// DO NOT EDIT!!!

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &durationpb.Duration{}
)

func (obj *HealthCheckSpec) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.HttpGetCheck).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HealthCheckSpec", "httpGetCheck", obj.HttpGetCheck, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.TcpCheck).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HealthCheckSpec", "tcpCheck", obj.TcpCheck, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.IcmpCheck).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HealthCheckSpec", "icmpCheck", obj.IcmpCheck, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.GrpcCheck).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HealthCheckSpec", "grpcCheck", obj.GrpcCheck, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Exec).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HealthCheckSpec", "exec", obj.Exec, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.DeviceFileCheck).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HealthCheckSpec", "deviceFileCheck", obj.DeviceFileCheck, "nested object validation failed", err)
		}
	}
	if obj.Timeout != nil && obj.Timeout.CheckValid() != nil {
		err := obj.Timeout.CheckValid()
		return gotenvalidate.NewValidationError("HealthCheckSpec", "timeout", obj.Timeout, "could not validate duration", err)
	} else {
		d := obj.Timeout.AsDuration()

		if obj.Timeout != nil {
			if !(d <= time.Duration(5000000000)) {
				return gotenvalidate.NewValidationError("HealthCheckSpec", "timeout", d, "field must be less or equal to 5s", nil)
			}
		}
	}
	if obj.Interval != nil && obj.Interval.CheckValid() != nil {
		err := obj.Interval.CheckValid()
		return gotenvalidate.NewValidationError("HealthCheckSpec", "interval", obj.Interval, "could not validate duration", err)
	} else {
		d := obj.Interval.AsDuration()

		if obj.Interval != nil {
			if !(d >= time.Duration(60000000000)) {
				return gotenvalidate.NewValidationError("HealthCheckSpec", "interval", d, "field must be greater or equal to 1m0s", nil)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *HTTPGetCheck) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.HttpUrl).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HTTPGetCheck", "httpUrl", obj.HttpUrl, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.HttpHeaders {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("HTTPGetCheck", "httpHeaders", obj.HttpHeaders[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *HTTPGetCheck_HTTPUrl) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *HTTPGetCheck_HTTPHeader) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ICMPCheck) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *TCPCheck) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *GRPCCheck) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ExecCheck) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *DeviceFileCheck) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.FileType).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("DeviceFileCheck", "fileType", obj.FileType, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *DeviceFileCheck_FileTypeOneOf) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
