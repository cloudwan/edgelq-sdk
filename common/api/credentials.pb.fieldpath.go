// Code generated by protoc-gen-goten-object
// File: edgelq/common/api/credentials.proto
// DO NOT EDIT!!!

package api

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ServiceAccount_FieldPath interface {
	gotenobject.FieldPath
	Selector() ServiceAccount_FieldPathSelector
	Get(source *ServiceAccount) []interface{}
	GetSingle(source *ServiceAccount) (interface{}, bool)
	ClearValue(item *ServiceAccount)

	// Those methods build corresponding ServiceAccount_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ServiceAccount_FieldPathValue
	WithIArrayOfValues(values interface{}) ServiceAccount_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ServiceAccount_FieldPathArrayItemValue
}

type ServiceAccount_FieldPathSelector int32

const (
	ServiceAccount_FieldPathSelectorType         ServiceAccount_FieldPathSelector = 0
	ServiceAccount_FieldPathSelectorClientEmail  ServiceAccount_FieldPathSelector = 1
	ServiceAccount_FieldPathSelectorPrivateKeyId ServiceAccount_FieldPathSelector = 2
	ServiceAccount_FieldPathSelectorPrivateKey   ServiceAccount_FieldPathSelector = 3
)

func (s ServiceAccount_FieldPathSelector) String() string {
	switch s {
	case ServiceAccount_FieldPathSelectorType:
		return "type"
	case ServiceAccount_FieldPathSelectorClientEmail:
		return "client_email"
	case ServiceAccount_FieldPathSelectorPrivateKeyId:
		return "private_key_id"
	case ServiceAccount_FieldPathSelectorPrivateKey:
		return "private_key"
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccount: %d", s))
	}
}

func BuildServiceAccount_FieldPath(fp gotenobject.RawFieldPath) (ServiceAccount_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ServiceAccount")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &ServiceAccount_FieldTerminalPath{selector: ServiceAccount_FieldPathSelectorType}, nil
		case "client_email", "clientEmail", "client-email":
			return &ServiceAccount_FieldTerminalPath{selector: ServiceAccount_FieldPathSelectorClientEmail}, nil
		case "private_key_id", "privateKeyId", "private-key-id":
			return &ServiceAccount_FieldTerminalPath{selector: ServiceAccount_FieldPathSelectorPrivateKeyId}, nil
		case "private_key", "privateKey", "private-key":
			return &ServiceAccount_FieldTerminalPath{selector: ServiceAccount_FieldPathSelectorPrivateKey}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ServiceAccount", fp)
}

func ParseServiceAccount_FieldPath(rawField string) (ServiceAccount_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildServiceAccount_FieldPath(fp)
}

func MustParseServiceAccount_FieldPath(rawField string) ServiceAccount_FieldPath {
	fp, err := ParseServiceAccount_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ServiceAccount_FieldTerminalPath struct {
	selector ServiceAccount_FieldPathSelector
}

var _ ServiceAccount_FieldPath = (*ServiceAccount_FieldTerminalPath)(nil)

func (fp *ServiceAccount_FieldTerminalPath) Selector() ServiceAccount_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ServiceAccount_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ServiceAccount_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ServiceAccount
func (fp *ServiceAccount_FieldTerminalPath) Get(source *ServiceAccount) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ServiceAccount_FieldPathSelectorType:
			values = append(values, source.Type)
		case ServiceAccount_FieldPathSelectorClientEmail:
			values = append(values, source.ClientEmail)
		case ServiceAccount_FieldPathSelectorPrivateKeyId:
			values = append(values, source.PrivateKeyId)
		case ServiceAccount_FieldPathSelectorPrivateKey:
			values = append(values, source.PrivateKey)
		default:
			panic(fmt.Sprintf("Invalid selector for ServiceAccount: %d", fp.selector))
		}
	}
	return
}

func (fp *ServiceAccount_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ServiceAccount))
}

// GetSingle returns value pointed by specific field of from source ServiceAccount
func (fp *ServiceAccount_FieldTerminalPath) GetSingle(source *ServiceAccount) (interface{}, bool) {
	switch fp.selector {
	case ServiceAccount_FieldPathSelectorType:
		return source.GetType(), source != nil
	case ServiceAccount_FieldPathSelectorClientEmail:
		return source.GetClientEmail(), source != nil
	case ServiceAccount_FieldPathSelectorPrivateKeyId:
		return source.GetPrivateKeyId(), source != nil
	case ServiceAccount_FieldPathSelectorPrivateKey:
		return source.GetPrivateKey(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccount: %d", fp.selector))
	}
}

func (fp *ServiceAccount_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ServiceAccount))
}

// GetDefault returns a default value of the field type
func (fp *ServiceAccount_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ServiceAccount_FieldPathSelectorType:
		return ""
	case ServiceAccount_FieldPathSelectorClientEmail:
		return ""
	case ServiceAccount_FieldPathSelectorPrivateKeyId:
		return ""
	case ServiceAccount_FieldPathSelectorPrivateKey:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccount: %d", fp.selector))
	}
}

func (fp *ServiceAccount_FieldTerminalPath) ClearValue(item *ServiceAccount) {
	if item != nil {
		switch fp.selector {
		case ServiceAccount_FieldPathSelectorType:
			item.Type = ""
		case ServiceAccount_FieldPathSelectorClientEmail:
			item.ClientEmail = ""
		case ServiceAccount_FieldPathSelectorPrivateKeyId:
			item.PrivateKeyId = ""
		case ServiceAccount_FieldPathSelectorPrivateKey:
			item.PrivateKey = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ServiceAccount: %d", fp.selector))
		}
	}
}

func (fp *ServiceAccount_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ServiceAccount))
}

// IsLeaf - whether field path is holds simple value
func (fp *ServiceAccount_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ServiceAccount_FieldPathSelectorType ||
		fp.selector == ServiceAccount_FieldPathSelectorClientEmail ||
		fp.selector == ServiceAccount_FieldPathSelectorPrivateKeyId ||
		fp.selector == ServiceAccount_FieldPathSelectorPrivateKey
}

func (fp *ServiceAccount_FieldTerminalPath) WithIValue(value interface{}) ServiceAccount_FieldPathValue {
	switch fp.selector {
	case ServiceAccount_FieldPathSelectorType:
		return &ServiceAccount_FieldTerminalPathValue{ServiceAccount_FieldTerminalPath: *fp, value: value.(string)}
	case ServiceAccount_FieldPathSelectorClientEmail:
		return &ServiceAccount_FieldTerminalPathValue{ServiceAccount_FieldTerminalPath: *fp, value: value.(string)}
	case ServiceAccount_FieldPathSelectorPrivateKeyId:
		return &ServiceAccount_FieldTerminalPathValue{ServiceAccount_FieldTerminalPath: *fp, value: value.(string)}
	case ServiceAccount_FieldPathSelectorPrivateKey:
		return &ServiceAccount_FieldTerminalPathValue{ServiceAccount_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccount: %d", fp.selector))
	}
}

func (fp *ServiceAccount_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ServiceAccount_FieldTerminalPath) WithIArrayOfValues(values interface{}) ServiceAccount_FieldPathArrayOfValues {
	fpaov := &ServiceAccount_FieldTerminalPathArrayOfValues{ServiceAccount_FieldTerminalPath: *fp}
	switch fp.selector {
	case ServiceAccount_FieldPathSelectorType:
		return &ServiceAccount_FieldTerminalPathArrayOfValues{ServiceAccount_FieldTerminalPath: *fp, values: values.([]string)}
	case ServiceAccount_FieldPathSelectorClientEmail:
		return &ServiceAccount_FieldTerminalPathArrayOfValues{ServiceAccount_FieldTerminalPath: *fp, values: values.([]string)}
	case ServiceAccount_FieldPathSelectorPrivateKeyId:
		return &ServiceAccount_FieldTerminalPathArrayOfValues{ServiceAccount_FieldTerminalPath: *fp, values: values.([]string)}
	case ServiceAccount_FieldPathSelectorPrivateKey:
		return &ServiceAccount_FieldTerminalPathArrayOfValues{ServiceAccount_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccount: %d", fp.selector))
	}
	return fpaov
}

func (fp *ServiceAccount_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ServiceAccount_FieldTerminalPath) WithIArrayItemValue(value interface{}) ServiceAccount_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccount: %d", fp.selector))
	}
}

func (fp *ServiceAccount_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ServiceAccount_FieldPathValue allows storing values for ServiceAccount fields according to their type
type ServiceAccount_FieldPathValue interface {
	ServiceAccount_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ServiceAccount)
	CompareWith(*ServiceAccount) (cmp int, comparable bool)
}

func ParseServiceAccount_FieldPathValue(pathStr, valueStr string) (ServiceAccount_FieldPathValue, error) {
	fp, err := ParseServiceAccount_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ServiceAccount field path value from %s: %v", valueStr, err)
	}
	return fpv.(ServiceAccount_FieldPathValue), nil
}

func MustParseServiceAccount_FieldPathValue(pathStr, valueStr string) ServiceAccount_FieldPathValue {
	fpv, err := ParseServiceAccount_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ServiceAccount_FieldTerminalPathValue struct {
	ServiceAccount_FieldTerminalPath
	value interface{}
}

var _ ServiceAccount_FieldPathValue = (*ServiceAccount_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ServiceAccount' as interface{}
func (fpv *ServiceAccount_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ServiceAccount_FieldTerminalPathValue) AsTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ServiceAccount_FieldTerminalPathValue) AsClientEmailValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ServiceAccount_FieldTerminalPathValue) AsPrivateKeyIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ServiceAccount_FieldTerminalPathValue) AsPrivateKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ServiceAccount
func (fpv *ServiceAccount_FieldTerminalPathValue) SetTo(target **ServiceAccount) {
	if *target == nil {
		*target = new(ServiceAccount)
	}
	switch fpv.selector {
	case ServiceAccount_FieldPathSelectorType:
		(*target).Type = fpv.value.(string)
	case ServiceAccount_FieldPathSelectorClientEmail:
		(*target).ClientEmail = fpv.value.(string)
	case ServiceAccount_FieldPathSelectorPrivateKeyId:
		(*target).PrivateKeyId = fpv.value.(string)
	case ServiceAccount_FieldPathSelectorPrivateKey:
		(*target).PrivateKey = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccount: %d", fpv.selector))
	}
}

func (fpv *ServiceAccount_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ServiceAccount)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ServiceAccount_FieldTerminalPathValue' with the value under path in 'ServiceAccount'.
func (fpv *ServiceAccount_FieldTerminalPathValue) CompareWith(source *ServiceAccount) (int, bool) {
	switch fpv.selector {
	case ServiceAccount_FieldPathSelectorType:
		leftValue := fpv.value.(string)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAccount_FieldPathSelectorClientEmail:
		leftValue := fpv.value.(string)
		rightValue := source.GetClientEmail()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAccount_FieldPathSelectorPrivateKeyId:
		leftValue := fpv.value.(string)
		rightValue := source.GetPrivateKeyId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAccount_FieldPathSelectorPrivateKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetPrivateKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ServiceAccount: %d", fpv.selector))
	}
}

func (fpv *ServiceAccount_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ServiceAccount))
}

// ServiceAccount_FieldPathArrayItemValue allows storing single item in Path-specific values for ServiceAccount according to their type
// Present only for array (repeated) types.
type ServiceAccount_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ServiceAccount_FieldPath
	ContainsValue(*ServiceAccount) bool
}

// ParseServiceAccount_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseServiceAccount_FieldPathArrayItemValue(pathStr, valueStr string) (ServiceAccount_FieldPathArrayItemValue, error) {
	fp, err := ParseServiceAccount_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ServiceAccount field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ServiceAccount_FieldPathArrayItemValue), nil
}

func MustParseServiceAccount_FieldPathArrayItemValue(pathStr, valueStr string) ServiceAccount_FieldPathArrayItemValue {
	fpaiv, err := ParseServiceAccount_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ServiceAccount_FieldTerminalPathArrayItemValue struct {
	ServiceAccount_FieldTerminalPath
	value interface{}
}

var _ ServiceAccount_FieldPathArrayItemValue = (*ServiceAccount_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ServiceAccount as interface{}
func (fpaiv *ServiceAccount_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ServiceAccount_FieldTerminalPathArrayItemValue) GetSingle(source *ServiceAccount) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ServiceAccount_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ServiceAccount))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ServiceAccount'
func (fpaiv *ServiceAccount_FieldTerminalPathArrayItemValue) ContainsValue(source *ServiceAccount) bool {
	slice := fpaiv.ServiceAccount_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ServiceAccount_FieldPathArrayOfValues allows storing slice of values for ServiceAccount fields according to their type
type ServiceAccount_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ServiceAccount_FieldPath
}

func ParseServiceAccount_FieldPathArrayOfValues(pathStr, valuesStr string) (ServiceAccount_FieldPathArrayOfValues, error) {
	fp, err := ParseServiceAccount_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ServiceAccount field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ServiceAccount_FieldPathArrayOfValues), nil
}

func MustParseServiceAccount_FieldPathArrayOfValues(pathStr, valuesStr string) ServiceAccount_FieldPathArrayOfValues {
	fpaov, err := ParseServiceAccount_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ServiceAccount_FieldTerminalPathArrayOfValues struct {
	ServiceAccount_FieldTerminalPath
	values interface{}
}

var _ ServiceAccount_FieldPathArrayOfValues = (*ServiceAccount_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ServiceAccount_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ServiceAccount_FieldPathSelectorType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ServiceAccount_FieldPathSelectorClientEmail:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ServiceAccount_FieldPathSelectorPrivateKeyId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ServiceAccount_FieldPathSelectorPrivateKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ServiceAccount_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ServiceAccount_FieldTerminalPathArrayOfValues) AsClientEmailArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ServiceAccount_FieldTerminalPathArrayOfValues) AsPrivateKeyIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ServiceAccount_FieldTerminalPathArrayOfValues) AsPrivateKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
