// Code generated by protoc-gen-goten-go
// File: edgelq/common/api/credentials.proto
// DO NOT EDIT!!!

package api

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &timestamppb.Timestamp{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Account:
	//	*Account_User
	//	*Account_ServiceAccount
	Account isAccount_Account `protobuf_oneof:"account"`
}

func (m *Account) Reset() {
	*m = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_common_api_credentials_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Account) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Account) ProtoMessage() {}

func (m *Account) ProtoReflect() preflect.Message {
	mi := &edgelq_common_api_credentials_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Account) GotenMessage() {}

// Deprecated, Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return edgelq_common_api_credentials_proto_rawDescGZIP(), []int{0}
}

func (m *Account) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Account) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Account) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Account) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isAccount_Account interface {
	isAccount_Account()
}

type Account_User struct {
	User *User `protobuf:"bytes,2,opt,name=user,proto3,oneof" firestore:"user"`
}
type Account_ServiceAccount struct {
	ServiceAccount *ServiceAccount `protobuf:"bytes,3,opt,name=service_account,json=serviceAccount,proto3,oneof" firestore:"serviceAccount"`
}

func (*Account_User) isAccount_Account()           {}
func (*Account_ServiceAccount) isAccount_Account() {}
func (m *Account) GetAccount() isAccount_Account {
	if m != nil {
		return m.Account
	}
	return nil
}
func (m *Account) GetUser() *User {
	if x, ok := m.GetAccount().(*Account_User); ok {
		return x.User
	}
	return nil
}
func (m *Account) GetServiceAccount() *ServiceAccount {
	if x, ok := m.GetAccount().(*Account_ServiceAccount); ok {
		return x.ServiceAccount
	}
	return nil
}
func (m *Account) SetAccount(ofv isAccount_Account) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isAccount_Account", "Account"))
	}
	m.Account = ofv
}
func (m *Account) SetUser(fv *User) {
	m.SetAccount(&Account_User{User: fv})
}
func (m *Account) SetServiceAccount(fv *ServiceAccount) {
	m.SetAccount(&Account_ServiceAccount{ServiceAccount: fv})
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty" firestore:"email"`
	AccessToken   string                 `protobuf:"bytes,2,opt,name=access_token,proto3" json:"access_token,omitempty" firestore:"access_token"`
	TokenType     string                 `protobuf:"bytes,3,opt,name=token_type,proto3" json:"token_type,omitempty" firestore:"token_type"`
	RefreshToken  string                 `protobuf:"bytes,4,opt,name=refresh_token,proto3" json:"refresh_token,omitempty" firestore:"refresh_token"`
	Expiry        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiry,proto3" json:"expiry,omitempty" firestore:"expiry"`
}

func (m *User) Reset() {
	*m = User{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_common_api_credentials_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *User) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*User) ProtoMessage() {}

func (m *User) ProtoReflect() preflect.Message {
	mi := &edgelq_common_api_credentials_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*User) GotenMessage() {}

// Deprecated, Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return edgelq_common_api_credentials_proto_rawDescGZIP(), []int{1}
}

func (m *User) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *User) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *User) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *User) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *User) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *User) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *User) GetExpiry() *timestamppb.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *User) SetEmail(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Email", "User"))
	}
	m.Email = fv
}

func (m *User) SetAccessToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AccessToken", "User"))
	}
	m.AccessToken = fv
}

func (m *User) SetTokenType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TokenType", "User"))
	}
	m.TokenType = fv
}

func (m *User) SetRefreshToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RefreshToken", "User"))
	}
	m.RefreshToken = fv
}

func (m *User) SetExpiry(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Expiry", "User"))
	}
	m.Expiry = fv
}

type ServiceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Type          string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	ClientEmail   string `protobuf:"bytes,2,opt,name=client_email,proto3" json:"client_email,omitempty" firestore:"client_email"`
	PrivateKeyId  string `protobuf:"bytes,3,opt,name=private_key_id,proto3" json:"private_key_id,omitempty" firestore:"private_key_id"`
	PrivateKey    string `protobuf:"bytes,4,opt,name=private_key,proto3" json:"private_key,omitempty" firestore:"private_key"`
}

func (m *ServiceAccount) Reset() {
	*m = ServiceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_common_api_credentials_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ServiceAccount) ProtoMessage() {}

func (m *ServiceAccount) ProtoReflect() preflect.Message {
	mi := &edgelq_common_api_credentials_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ServiceAccount) GotenMessage() {}

// Deprecated, Use ServiceAccount.ProtoReflect.Descriptor instead.
func (*ServiceAccount) Descriptor() ([]byte, []int) {
	return edgelq_common_api_credentials_proto_rawDescGZIP(), []int{2}
}

func (m *ServiceAccount) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ServiceAccount) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ServiceAccount) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ServiceAccount) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ServiceAccount) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServiceAccount) GetClientEmail() string {
	if m != nil {
		return m.ClientEmail
	}
	return ""
}

func (m *ServiceAccount) GetPrivateKeyId() string {
	if m != nil {
		return m.PrivateKeyId
	}
	return ""
}

func (m *ServiceAccount) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *ServiceAccount) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "ServiceAccount"))
	}
	m.Type = fv
}

func (m *ServiceAccount) SetClientEmail(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientEmail", "ServiceAccount"))
	}
	m.ClientEmail = fv
}

func (m *ServiceAccount) SetPrivateKeyId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrivateKeyId", "ServiceAccount"))
	}
	m.PrivateKeyId = fv
}

func (m *ServiceAccount) SetPrivateKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrivateKey", "ServiceAccount"))
	}
	m.PrivateKey = fv
}

var edgelq_common_api_credentials_proto preflect.FileDescriptor

var edgelq_common_api_credentials_proto_rawDesc = []byte{
	0x0a, 0x23, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x3a, 0x21, 0xc2, 0x85, 0x2c, 0x1d, 0x1a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x3a, 0x11, 0xc2, 0x85, 0x2c, 0x0d, 0x1a, 0x0b,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x3d, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x50, 0x01, 0x5a,
	0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	edgelq_common_api_credentials_proto_rawDescOnce sync.Once
	edgelq_common_api_credentials_proto_rawDescData = edgelq_common_api_credentials_proto_rawDesc
)

func edgelq_common_api_credentials_proto_rawDescGZIP() []byte {
	edgelq_common_api_credentials_proto_rawDescOnce.Do(func() {
		edgelq_common_api_credentials_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_common_api_credentials_proto_rawDescData)
	})
	return edgelq_common_api_credentials_proto_rawDescData
}

var edgelq_common_api_credentials_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var edgelq_common_api_credentials_proto_goTypes = []interface{}{
	(*Account)(nil),               // 0: ntt.api.Account
	(*User)(nil),                  // 1: ntt.api.User
	(*ServiceAccount)(nil),        // 2: ntt.api.ServiceAccount
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var edgelq_common_api_credentials_proto_depIdxs = []int32{
	1, // 0: ntt.api.Account.user:type_name -> ntt.api.User
	2, // 1: ntt.api.Account.service_account:type_name -> ntt.api.ServiceAccount
	3, // 2: ntt.api.User.expiry:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { edgelq_common_api_credentials_proto_init() }
func edgelq_common_api_credentials_proto_init() {
	if edgelq_common_api_credentials_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_common_api_credentials_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_common_api_credentials_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_common_api_credentials_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_common_api_credentials_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Account_User)(nil),
		(*Account_ServiceAccount)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_common_api_credentials_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_common_api_credentials_proto_goTypes,
		DependencyIndexes: edgelq_common_api_credentials_proto_depIdxs,
		MessageInfos:      edgelq_common_api_credentials_proto_msgTypes,
	}.Build()
	edgelq_common_api_credentials_proto = out.File
	edgelq_common_api_credentials_proto_rawDesc = nil
	edgelq_common_api_credentials_proto_goTypes = nil
	edgelq_common_api_credentials_proto_depIdxs = nil
}
