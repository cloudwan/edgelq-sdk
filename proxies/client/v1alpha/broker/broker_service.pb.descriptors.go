// Code generated by protoc-gen-goten-client
// API: BrokerService
// DO NOT EDIT!!!

package broker_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/proxies/resources/v1alpha/project"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
)

var (
	descriptorsInitialized  bool
	brokerServiceDescriptor *BrokerServiceDescriptor
	connectDescriptor       *ConnectDescriptor
	listenDescriptor        *ListenDescriptor
	acceptDescriptor        *AcceptDescriptor
)

type ConnectDescriptor struct{}

type ConnectDescriptorClientMsgHandle struct{}

type ConnectDescriptorServerMsgHandle struct{}

func (d *ConnectDescriptor) NewEmptyClientMsg() proto.Message {
	return &ConnectRequest{}
}

func (d *ConnectDescriptor) NewEmptyServerMsg() proto.Message {
	return &ConnectResponse{}
}

func (d *ConnectDescriptor) IsUnary() bool {
	return false
}

func (d *ConnectDescriptor) IsClientStream() bool {
	return true
}

func (d *ConnectDescriptor) IsServerStream() bool {
	return true
}

func (d *ConnectDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *ConnectDescriptor) IsPluralSubject() bool {
	return false
}

func (d *ConnectDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ConnectDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ConnectDescriptor) GetVerb() string {
	return "connect"
}

func (d *ConnectDescriptor) GetMethodName() string {
	return "Connect"
}

func (d *ConnectDescriptor) GetFullMethodName() string {
	return "/ntt.proxies.v1alpha.BrokerService/Connect"
}

func (d *ConnectDescriptor) GetProtoPkgName() string {
	return "ntt.proxies.v1alpha"
}

func (d *ConnectDescriptor) GetApiName() string {
	return "BrokerService"
}

func (d *ConnectDescriptor) GetServiceDomain() string {
	return "proxies.edgelq.com"
}

func (d *ConnectDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ConnectDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return brokerServiceDescriptor
}

func (d *ConnectDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project.GetDescriptor()
}

func (d *ConnectDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ConnectDescriptorClientMsgHandle{}
}

func (d *ConnectDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ConnectDescriptorServerMsgHandle{}
}

func (h *ConnectDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ConnectRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ConnectRequest) *project.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ConnectDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ConnectRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ConnectRequest) []*project.Name
	})
	if ok {
		return project.ProjectNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ConnectDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ConnectDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ConnectResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ConnectResponse) *project.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ConnectDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ConnectResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ConnectResponse) []*project.Name
	})
	if ok {
		return project.ProjectNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ConnectDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetConnectDescriptor() *ConnectDescriptor {
	return connectDescriptor
}

type ListenDescriptor struct{}

type ListenDescriptorClientMsgHandle struct{}

type ListenDescriptorServerMsgHandle struct{}

func (d *ListenDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListenRequest{}
}

func (d *ListenDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListenResponse{}
}

func (d *ListenDescriptor) IsUnary() bool {
	return false
}

func (d *ListenDescriptor) IsClientStream() bool {
	return true
}

func (d *ListenDescriptor) IsServerStream() bool {
	return true
}

func (d *ListenDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *ListenDescriptor) IsPluralSubject() bool {
	return false
}

func (d *ListenDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListenDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListenDescriptor) GetVerb() string {
	return "listen"
}

func (d *ListenDescriptor) GetMethodName() string {
	return "Listen"
}

func (d *ListenDescriptor) GetFullMethodName() string {
	return "/ntt.proxies.v1alpha.BrokerService/Listen"
}

func (d *ListenDescriptor) GetProtoPkgName() string {
	return "ntt.proxies.v1alpha"
}

func (d *ListenDescriptor) GetApiName() string {
	return "BrokerService"
}

func (d *ListenDescriptor) GetServiceDomain() string {
	return "proxies.edgelq.com"
}

func (d *ListenDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ListenDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return brokerServiceDescriptor
}

func (d *ListenDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project.GetDescriptor()
}

func (d *ListenDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListenDescriptorClientMsgHandle{}
}

func (d *ListenDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListenDescriptorServerMsgHandle{}
}

func (h *ListenDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListenRequest) *project.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListenDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListenRequest) []*project.Name
	})
	if ok {
		return project.ProjectNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListenDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListenDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListenResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListenResponse) *project.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListenDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListenResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListenResponse) []*project.Name
	})
	if ok {
		return project.ProjectNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListenDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetListenDescriptor() *ListenDescriptor {
	return listenDescriptor
}

type AcceptDescriptor struct{}

type AcceptDescriptorClientMsgHandle struct{}

type AcceptDescriptorServerMsgHandle struct{}

func (d *AcceptDescriptor) NewEmptyClientMsg() proto.Message {
	return &AcceptRequest{}
}

func (d *AcceptDescriptor) NewEmptyServerMsg() proto.Message {
	return &AcceptResponse{}
}

func (d *AcceptDescriptor) IsUnary() bool {
	return false
}

func (d *AcceptDescriptor) IsClientStream() bool {
	return true
}

func (d *AcceptDescriptor) IsServerStream() bool {
	return true
}

func (d *AcceptDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *AcceptDescriptor) IsPluralSubject() bool {
	return false
}

func (d *AcceptDescriptor) HasSubjectResource() bool {
	return true
}

func (d *AcceptDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *AcceptDescriptor) GetVerb() string {
	return "accept"
}

func (d *AcceptDescriptor) GetMethodName() string {
	return "Accept"
}

func (d *AcceptDescriptor) GetFullMethodName() string {
	return "/ntt.proxies.v1alpha.BrokerService/Accept"
}

func (d *AcceptDescriptor) GetProtoPkgName() string {
	return "ntt.proxies.v1alpha"
}

func (d *AcceptDescriptor) GetApiName() string {
	return "BrokerService"
}

func (d *AcceptDescriptor) GetServiceDomain() string {
	return "proxies.edgelq.com"
}

func (d *AcceptDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *AcceptDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return brokerServiceDescriptor
}

func (d *AcceptDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return project.GetDescriptor()
}

func (d *AcceptDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &AcceptDescriptorClientMsgHandle{}
}

func (d *AcceptDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &AcceptDescriptorServerMsgHandle{}
}

func (h *AcceptDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*AcceptRequest) *project.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *AcceptDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*AcceptRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*AcceptRequest) []*project.Name
	})
	if ok {
		return project.ProjectNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *AcceptDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *AcceptDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*AcceptResponse) *project.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *AcceptDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*AcceptResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*AcceptResponse) []*project.Name
	})
	if ok {
		return project.ProjectNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *AcceptDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetAcceptDescriptor() *AcceptDescriptor {
	return acceptDescriptor
}

type BrokerServiceDescriptor struct{}

func (d *BrokerServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		connectDescriptor,
		listenDescriptor,
		acceptDescriptor,
	}
}

func (d *BrokerServiceDescriptor) GetFullAPIName() string {
	return "/ntt.proxies.v1alpha.BrokerService"
}

func (d *BrokerServiceDescriptor) GetProtoPkgName() string {
	return "ntt.proxies.v1alpha"
}

func (d *BrokerServiceDescriptor) GetApiName() string {
	return "BrokerService"
}

func (d *BrokerServiceDescriptor) GetServiceDomain() string {
	return "proxies.edgelq.com"
}

func (d *BrokerServiceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func GetBrokerServiceDescriptor() *BrokerServiceDescriptor {
	return brokerServiceDescriptor
}

func initDescriptors() {
	brokerServiceDescriptor = &BrokerServiceDescriptor{}
	connectDescriptor = &ConnectDescriptor{}
	listenDescriptor = &ListenDescriptor{}
	acceptDescriptor = &AcceptDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(brokerServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(connectDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listenDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(acceptDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
