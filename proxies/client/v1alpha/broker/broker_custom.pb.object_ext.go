// Code generated by protoc-gen-goten-object
// File: edgelq/proxies/proto/v1alpha/broker_custom.proto
// DO NOT EDIT!!!

package broker_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/proxies/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
)

func (o *ListenRequest) GotenObjectExt() {}

func (o *ListenRequest) MakeFullFieldMask() *ListenRequest_FieldMask {
	return FullListenRequest_FieldMask()
}

func (o *ListenRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenRequest_FieldMask()
}

func (o *ListenRequest) MakeDiffFieldMask(other *ListenRequest) *ListenRequest_FieldMask {
	if o == nil && other == nil {
		return &ListenRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenRequest_FieldMask()
	}

	res := &ListenRequest_FieldMask{}
	{
		subMask := o.GetOpenRequest().MakeDiffFieldMask(other.GetOpenRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListenRequest_FieldTerminalPath{selector: ListenRequest_FieldPathSelectorOpenRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListenRequest_FieldSubPath{selector: ListenRequest_FieldPathSelectorOpenRequest, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetResumeRequest().MakeDiffFieldMask(other.GetResumeRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListenRequest_FieldTerminalPath{selector: ListenRequest_FieldPathSelectorResumeRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListenRequest_FieldSubPath{selector: ListenRequest_FieldPathSelectorResumeRequest, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetChannelOpenError().MakeDiffFieldMask(other.GetChannelOpenError())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListenRequest_FieldTerminalPath{selector: ListenRequest_FieldPathSelectorChannelOpenError})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListenRequest_FieldSubPath{selector: ListenRequest_FieldPathSelectorChannelOpenError, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetPing().MakeDiffFieldMask(other.GetPing())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListenRequest_FieldTerminalPath{selector: ListenRequest_FieldPathSelectorPing})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListenRequest_FieldSubPath{selector: ListenRequest_FieldPathSelectorPing, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ListenRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenRequest))
}

func (o *ListenRequest) Clone() *ListenRequest {
	if o == nil {
		return nil
	}
	result := &ListenRequest{}
	if o, ok := o.Message.(*ListenRequest_OpenRequest_); ok {
		result.Message = (*ListenRequest_OpenRequest_)(nil)
		if o != nil {
			result.Message = &ListenRequest_OpenRequest_{}
			result := result.Message.(*ListenRequest_OpenRequest_)
			result.OpenRequest = o.OpenRequest.Clone()
		}
	}
	if o, ok := o.Message.(*ListenRequest_ResumeRequest_); ok {
		result.Message = (*ListenRequest_ResumeRequest_)(nil)
		if o != nil {
			result.Message = &ListenRequest_ResumeRequest_{}
			result := result.Message.(*ListenRequest_ResumeRequest_)
			result.ResumeRequest = o.ResumeRequest.Clone()
		}
	}
	if o, ok := o.Message.(*ListenRequest_ChannelOpenError_); ok {
		result.Message = (*ListenRequest_ChannelOpenError_)(nil)
		if o != nil {
			result.Message = &ListenRequest_ChannelOpenError_{}
			result := result.Message.(*ListenRequest_ChannelOpenError_)
			result.ChannelOpenError = o.ChannelOpenError.Clone()
		}
	}
	if o, ok := o.Message.(*ListenRequest_Ping); ok {
		result.Message = (*ListenRequest_Ping)(nil)
		if o != nil {
			result.Message = &ListenRequest_Ping{}
			result := result.Message.(*ListenRequest_Ping)
			result.Ping = o.Ping.Clone()
		}
	}
	return result
}

func (o *ListenRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenRequest) Merge(source *ListenRequest) {
	if source, ok := source.GetMessage().(*ListenRequest_OpenRequest_); ok {
		if dstOneOf, ok := o.Message.(*ListenRequest_OpenRequest_); !ok || dstOneOf == nil {
			o.Message = &ListenRequest_OpenRequest_{}
		}
		if source != nil {
			o := o.Message.(*ListenRequest_OpenRequest_)
			if source.OpenRequest != nil {
				if o.OpenRequest == nil {
					o.OpenRequest = new(ListenRequest_OpenRequest)
				}
				o.OpenRequest.Merge(source.OpenRequest)
			}
		}
	}
	if source, ok := source.GetMessage().(*ListenRequest_ResumeRequest_); ok {
		if dstOneOf, ok := o.Message.(*ListenRequest_ResumeRequest_); !ok || dstOneOf == nil {
			o.Message = &ListenRequest_ResumeRequest_{}
		}
		if source != nil {
			o := o.Message.(*ListenRequest_ResumeRequest_)
			if source.ResumeRequest != nil {
				if o.ResumeRequest == nil {
					o.ResumeRequest = new(ListenRequest_ResumeRequest)
				}
				o.ResumeRequest.Merge(source.ResumeRequest)
			}
		}
	}
	if source, ok := source.GetMessage().(*ListenRequest_ChannelOpenError_); ok {
		if dstOneOf, ok := o.Message.(*ListenRequest_ChannelOpenError_); !ok || dstOneOf == nil {
			o.Message = &ListenRequest_ChannelOpenError_{}
		}
		if source != nil {
			o := o.Message.(*ListenRequest_ChannelOpenError_)
			if source.ChannelOpenError != nil {
				if o.ChannelOpenError == nil {
					o.ChannelOpenError = new(ListenRequest_ChannelOpenError)
				}
				o.ChannelOpenError.Merge(source.ChannelOpenError)
			}
		}
	}
	if source, ok := source.GetMessage().(*ListenRequest_Ping); ok {
		if dstOneOf, ok := o.Message.(*ListenRequest_Ping); !ok || dstOneOf == nil {
			o.Message = &ListenRequest_Ping{}
		}
		if source != nil {
			o := o.Message.(*ListenRequest_Ping)
			if source.Ping != nil {
				if o.Ping == nil {
					o.Ping = new(Ping)
				}
				o.Ping.Merge(source.Ping)
			}
		}
	}
}

func (o *ListenRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenRequest))
}

func (o *ListenRequest_OpenRequest) GotenObjectExt() {}

func (o *ListenRequest_OpenRequest) MakeFullFieldMask() *ListenRequest_OpenRequest_FieldMask {
	return FullListenRequest_OpenRequest_FieldMask()
}

func (o *ListenRequest_OpenRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenRequest_OpenRequest_FieldMask()
}

func (o *ListenRequest_OpenRequest) MakeDiffFieldMask(other *ListenRequest_OpenRequest) *ListenRequest_OpenRequest_FieldMask {
	if o == nil && other == nil {
		return &ListenRequest_OpenRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenRequest_OpenRequest_FieldMask()
	}

	res := &ListenRequest_OpenRequest_FieldMask{}
	if o.GetProject().String() != other.GetProject().String() {
		res.Paths = append(res.Paths, &ListenRequestOpenRequest_FieldTerminalPath{selector: ListenRequestOpenRequest_FieldPathSelectorProject})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &ListenRequestOpenRequest_FieldTerminalPath{selector: ListenRequestOpenRequest_FieldPathSelectorName})
	}
	return res
}

func (o *ListenRequest_OpenRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenRequest_OpenRequest))
}

func (o *ListenRequest_OpenRequest) Clone() *ListenRequest_OpenRequest {
	if o == nil {
		return nil
	}
	result := &ListenRequest_OpenRequest{}
	if o.Project == nil {
		result.Project = nil
	} else if data, err := o.Project.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Project = &project.Reference{}
		if err := result.Project.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Name = o.Name
	return result
}

func (o *ListenRequest_OpenRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenRequest_OpenRequest) Merge(source *ListenRequest_OpenRequest) {
	if source.GetProject() != nil {
		if data, err := source.GetProject().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Project = &project.Reference{}
			if err := o.Project.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Project = nil
	}
	o.Name = source.GetName()
}

func (o *ListenRequest_OpenRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenRequest_OpenRequest))
}

func (o *ListenRequest_ResumeRequest) GotenObjectExt() {}

func (o *ListenRequest_ResumeRequest) MakeFullFieldMask() *ListenRequest_ResumeRequest_FieldMask {
	return FullListenRequest_ResumeRequest_FieldMask()
}

func (o *ListenRequest_ResumeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenRequest_ResumeRequest_FieldMask()
}

func (o *ListenRequest_ResumeRequest) MakeDiffFieldMask(other *ListenRequest_ResumeRequest) *ListenRequest_ResumeRequest_FieldMask {
	if o == nil && other == nil {
		return &ListenRequest_ResumeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenRequest_ResumeRequest_FieldMask()
	}

	res := &ListenRequest_ResumeRequest_FieldMask{}
	if o.GetProject().String() != other.GetProject().String() {
		res.Paths = append(res.Paths, &ListenRequestResumeRequest_FieldTerminalPath{selector: ListenRequestResumeRequest_FieldPathSelectorProject})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &ListenRequestResumeRequest_FieldTerminalPath{selector: ListenRequestResumeRequest_FieldPathSelectorName})
	}
	if o.GetSessionId() != other.GetSessionId() {
		res.Paths = append(res.Paths, &ListenRequestResumeRequest_FieldTerminalPath{selector: ListenRequestResumeRequest_FieldPathSelectorSessionId})
	}
	return res
}

func (o *ListenRequest_ResumeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenRequest_ResumeRequest))
}

func (o *ListenRequest_ResumeRequest) Clone() *ListenRequest_ResumeRequest {
	if o == nil {
		return nil
	}
	result := &ListenRequest_ResumeRequest{}
	if o.Project == nil {
		result.Project = nil
	} else if data, err := o.Project.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Project = &project.Reference{}
		if err := result.Project.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Name = o.Name
	result.SessionId = o.SessionId
	return result
}

func (o *ListenRequest_ResumeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenRequest_ResumeRequest) Merge(source *ListenRequest_ResumeRequest) {
	if source.GetProject() != nil {
		if data, err := source.GetProject().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Project = &project.Reference{}
			if err := o.Project.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Project = nil
	}
	o.Name = source.GetName()
	o.SessionId = source.GetSessionId()
}

func (o *ListenRequest_ResumeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenRequest_ResumeRequest))
}

func (o *ListenRequest_ChannelOpenError) GotenObjectExt() {}

func (o *ListenRequest_ChannelOpenError) MakeFullFieldMask() *ListenRequest_ChannelOpenError_FieldMask {
	return FullListenRequest_ChannelOpenError_FieldMask()
}

func (o *ListenRequest_ChannelOpenError) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenRequest_ChannelOpenError_FieldMask()
}

func (o *ListenRequest_ChannelOpenError) MakeDiffFieldMask(other *ListenRequest_ChannelOpenError) *ListenRequest_ChannelOpenError_FieldMask {
	if o == nil && other == nil {
		return &ListenRequest_ChannelOpenError_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenRequest_ChannelOpenError_FieldMask()
	}

	res := &ListenRequest_ChannelOpenError_FieldMask{}
	if o.GetChannelId() != other.GetChannelId() {
		res.Paths = append(res.Paths, &ListenRequestChannelOpenError_FieldTerminalPath{selector: ListenRequestChannelOpenError_FieldPathSelectorChannelId})
	}
	if o.GetMessage() != other.GetMessage() {
		res.Paths = append(res.Paths, &ListenRequestChannelOpenError_FieldTerminalPath{selector: ListenRequestChannelOpenError_FieldPathSelectorMessage})
	}
	return res
}

func (o *ListenRequest_ChannelOpenError) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenRequest_ChannelOpenError))
}

func (o *ListenRequest_ChannelOpenError) Clone() *ListenRequest_ChannelOpenError {
	if o == nil {
		return nil
	}
	result := &ListenRequest_ChannelOpenError{}
	result.ChannelId = o.ChannelId
	result.Message = o.Message
	return result
}

func (o *ListenRequest_ChannelOpenError) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenRequest_ChannelOpenError) Merge(source *ListenRequest_ChannelOpenError) {
	o.ChannelId = source.GetChannelId()
	o.Message = source.GetMessage()
}

func (o *ListenRequest_ChannelOpenError) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenRequest_ChannelOpenError))
}

func (o *ListenResponse) GotenObjectExt() {}

func (o *ListenResponse) MakeFullFieldMask() *ListenResponse_FieldMask {
	return FullListenResponse_FieldMask()
}

func (o *ListenResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenResponse_FieldMask()
}

func (o *ListenResponse) MakeDiffFieldMask(other *ListenResponse) *ListenResponse_FieldMask {
	if o == nil && other == nil {
		return &ListenResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenResponse_FieldMask()
	}

	res := &ListenResponse_FieldMask{}
	{
		subMask := o.GetListening().MakeDiffFieldMask(other.GetListening())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListenResponse_FieldTerminalPath{selector: ListenResponse_FieldPathSelectorListening})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListenResponse_FieldSubPath{selector: ListenResponse_FieldPathSelectorListening, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetOpenChannelResponse().MakeDiffFieldMask(other.GetOpenChannelResponse())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListenResponse_FieldTerminalPath{selector: ListenResponse_FieldPathSelectorOpenChannelResponse})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListenResponse_FieldSubPath{selector: ListenResponse_FieldPathSelectorOpenChannelResponse, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetResumeChannelResponse().MakeDiffFieldMask(other.GetResumeChannelResponse())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListenResponse_FieldTerminalPath{selector: ListenResponse_FieldPathSelectorResumeChannelResponse})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListenResponse_FieldSubPath{selector: ListenResponse_FieldPathSelectorResumeChannelResponse, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ListenResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenResponse))
}

func (o *ListenResponse) Clone() *ListenResponse {
	if o == nil {
		return nil
	}
	result := &ListenResponse{}
	if o, ok := o.Message.(*ListenResponse_Listening_); ok {
		result.Message = (*ListenResponse_Listening_)(nil)
		if o != nil {
			result.Message = &ListenResponse_Listening_{}
			result := result.Message.(*ListenResponse_Listening_)
			result.Listening = o.Listening.Clone()
		}
	}
	if o, ok := o.Message.(*ListenResponse_OpenChannelResponse_); ok {
		result.Message = (*ListenResponse_OpenChannelResponse_)(nil)
		if o != nil {
			result.Message = &ListenResponse_OpenChannelResponse_{}
			result := result.Message.(*ListenResponse_OpenChannelResponse_)
			result.OpenChannelResponse = o.OpenChannelResponse.Clone()
		}
	}
	if o, ok := o.Message.(*ListenResponse_ResumeChannelResponse_); ok {
		result.Message = (*ListenResponse_ResumeChannelResponse_)(nil)
		if o != nil {
			result.Message = &ListenResponse_ResumeChannelResponse_{}
			result := result.Message.(*ListenResponse_ResumeChannelResponse_)
			result.ResumeChannelResponse = o.ResumeChannelResponse.Clone()
		}
	}
	return result
}

func (o *ListenResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenResponse) Merge(source *ListenResponse) {
	if source, ok := source.GetMessage().(*ListenResponse_Listening_); ok {
		if dstOneOf, ok := o.Message.(*ListenResponse_Listening_); !ok || dstOneOf == nil {
			o.Message = &ListenResponse_Listening_{}
		}
		if source != nil {
			o := o.Message.(*ListenResponse_Listening_)
			if source.Listening != nil {
				if o.Listening == nil {
					o.Listening = new(ListenResponse_Listening)
				}
				o.Listening.Merge(source.Listening)
			}
		}
	}
	if source, ok := source.GetMessage().(*ListenResponse_OpenChannelResponse_); ok {
		if dstOneOf, ok := o.Message.(*ListenResponse_OpenChannelResponse_); !ok || dstOneOf == nil {
			o.Message = &ListenResponse_OpenChannelResponse_{}
		}
		if source != nil {
			o := o.Message.(*ListenResponse_OpenChannelResponse_)
			if source.OpenChannelResponse != nil {
				if o.OpenChannelResponse == nil {
					o.OpenChannelResponse = new(ListenResponse_OpenChannelResponse)
				}
				o.OpenChannelResponse.Merge(source.OpenChannelResponse)
			}
		}
	}
	if source, ok := source.GetMessage().(*ListenResponse_ResumeChannelResponse_); ok {
		if dstOneOf, ok := o.Message.(*ListenResponse_ResumeChannelResponse_); !ok || dstOneOf == nil {
			o.Message = &ListenResponse_ResumeChannelResponse_{}
		}
		if source != nil {
			o := o.Message.(*ListenResponse_ResumeChannelResponse_)
			if source.ResumeChannelResponse != nil {
				if o.ResumeChannelResponse == nil {
					o.ResumeChannelResponse = new(ListenResponse_ResumeChannelResponse)
				}
				o.ResumeChannelResponse.Merge(source.ResumeChannelResponse)
			}
		}
	}
}

func (o *ListenResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenResponse))
}

func (o *ListenResponse_Listening) GotenObjectExt() {}

func (o *ListenResponse_Listening) MakeFullFieldMask() *ListenResponse_Listening_FieldMask {
	return FullListenResponse_Listening_FieldMask()
}

func (o *ListenResponse_Listening) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenResponse_Listening_FieldMask()
}

func (o *ListenResponse_Listening) MakeDiffFieldMask(other *ListenResponse_Listening) *ListenResponse_Listening_FieldMask {
	if o == nil && other == nil {
		return &ListenResponse_Listening_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenResponse_Listening_FieldMask()
	}

	res := &ListenResponse_Listening_FieldMask{}
	if o.GetSessionId() != other.GetSessionId() {
		res.Paths = append(res.Paths, &ListenResponseListening_FieldTerminalPath{selector: ListenResponseListening_FieldPathSelectorSessionId})
	}
	return res
}

func (o *ListenResponse_Listening) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenResponse_Listening))
}

func (o *ListenResponse_Listening) Clone() *ListenResponse_Listening {
	if o == nil {
		return nil
	}
	result := &ListenResponse_Listening{}
	result.SessionId = o.SessionId
	return result
}

func (o *ListenResponse_Listening) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenResponse_Listening) Merge(source *ListenResponse_Listening) {
	o.SessionId = source.GetSessionId()
}

func (o *ListenResponse_Listening) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenResponse_Listening))
}

func (o *ListenResponse_OpenChannelResponse) GotenObjectExt() {}

func (o *ListenResponse_OpenChannelResponse) MakeFullFieldMask() *ListenResponse_OpenChannelResponse_FieldMask {
	return FullListenResponse_OpenChannelResponse_FieldMask()
}

func (o *ListenResponse_OpenChannelResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenResponse_OpenChannelResponse_FieldMask()
}

func (o *ListenResponse_OpenChannelResponse) MakeDiffFieldMask(other *ListenResponse_OpenChannelResponse) *ListenResponse_OpenChannelResponse_FieldMask {
	if o == nil && other == nil {
		return &ListenResponse_OpenChannelResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenResponse_OpenChannelResponse_FieldMask()
	}

	res := &ListenResponse_OpenChannelResponse_FieldMask{}
	if o.GetChannelId() != other.GetChannelId() {
		res.Paths = append(res.Paths, &ListenResponseOpenChannelResponse_FieldTerminalPath{selector: ListenResponseOpenChannelResponse_FieldPathSelectorChannelId})
	}
	if o.GetService() != other.GetService() {
		res.Paths = append(res.Paths, &ListenResponseOpenChannelResponse_FieldTerminalPath{selector: ListenResponseOpenChannelResponse_FieldPathSelectorService})
	}
	if string(o.GetArg()) != string(other.GetArg()) {
		res.Paths = append(res.Paths, &ListenResponseOpenChannelResponse_FieldTerminalPath{selector: ListenResponseOpenChannelResponse_FieldPathSelectorArg})
	}
	return res
}

func (o *ListenResponse_OpenChannelResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenResponse_OpenChannelResponse))
}

func (o *ListenResponse_OpenChannelResponse) Clone() *ListenResponse_OpenChannelResponse {
	if o == nil {
		return nil
	}
	result := &ListenResponse_OpenChannelResponse{}
	result.ChannelId = o.ChannelId
	result.Service = o.Service
	result.Arg = make([]byte, len(o.Arg))
	for i, bt := range o.Arg {
		result.Arg[i] = bt
	}
	return result
}

func (o *ListenResponse_OpenChannelResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenResponse_OpenChannelResponse) Merge(source *ListenResponse_OpenChannelResponse) {
	o.ChannelId = source.GetChannelId()
	o.Service = source.GetService()
	o.Arg = make([]byte, len(source.GetArg()))
	for i, bt := range source.GetArg() {
		o.Arg[i] = bt
	}
}

func (o *ListenResponse_OpenChannelResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenResponse_OpenChannelResponse))
}

func (o *ListenResponse_ResumeChannelResponse) GotenObjectExt() {}

func (o *ListenResponse_ResumeChannelResponse) MakeFullFieldMask() *ListenResponse_ResumeChannelResponse_FieldMask {
	return FullListenResponse_ResumeChannelResponse_FieldMask()
}

func (o *ListenResponse_ResumeChannelResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenResponse_ResumeChannelResponse_FieldMask()
}

func (o *ListenResponse_ResumeChannelResponse) MakeDiffFieldMask(other *ListenResponse_ResumeChannelResponse) *ListenResponse_ResumeChannelResponse_FieldMask {
	if o == nil && other == nil {
		return &ListenResponse_ResumeChannelResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenResponse_ResumeChannelResponse_FieldMask()
	}

	res := &ListenResponse_ResumeChannelResponse_FieldMask{}
	if o.GetChannelId() != other.GetChannelId() {
		res.Paths = append(res.Paths, &ListenResponseResumeChannelResponse_FieldTerminalPath{selector: ListenResponseResumeChannelResponse_FieldPathSelectorChannelId})
	}
	if o.GetService() != other.GetService() {
		res.Paths = append(res.Paths, &ListenResponseResumeChannelResponse_FieldTerminalPath{selector: ListenResponseResumeChannelResponse_FieldPathSelectorService})
	}
	if string(o.GetArg()) != string(other.GetArg()) {
		res.Paths = append(res.Paths, &ListenResponseResumeChannelResponse_FieldTerminalPath{selector: ListenResponseResumeChannelResponse_FieldPathSelectorArg})
	}
	if o.GetLastMessageId() != other.GetLastMessageId() {
		res.Paths = append(res.Paths, &ListenResponseResumeChannelResponse_FieldTerminalPath{selector: ListenResponseResumeChannelResponse_FieldPathSelectorLastMessageId})
	}
	return res
}

func (o *ListenResponse_ResumeChannelResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenResponse_ResumeChannelResponse))
}

func (o *ListenResponse_ResumeChannelResponse) Clone() *ListenResponse_ResumeChannelResponse {
	if o == nil {
		return nil
	}
	result := &ListenResponse_ResumeChannelResponse{}
	result.ChannelId = o.ChannelId
	result.Service = o.Service
	result.Arg = make([]byte, len(o.Arg))
	for i, bt := range o.Arg {
		result.Arg[i] = bt
	}
	result.LastMessageId = o.LastMessageId
	return result
}

func (o *ListenResponse_ResumeChannelResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenResponse_ResumeChannelResponse) Merge(source *ListenResponse_ResumeChannelResponse) {
	o.ChannelId = source.GetChannelId()
	o.Service = source.GetService()
	o.Arg = make([]byte, len(source.GetArg()))
	for i, bt := range source.GetArg() {
		o.Arg[i] = bt
	}
	o.LastMessageId = source.GetLastMessageId()
}

func (o *ListenResponse_ResumeChannelResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenResponse_ResumeChannelResponse))
}

func (o *AcceptRequest) GotenObjectExt() {}

func (o *AcceptRequest) MakeFullFieldMask() *AcceptRequest_FieldMask {
	return FullAcceptRequest_FieldMask()
}

func (o *AcceptRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAcceptRequest_FieldMask()
}

func (o *AcceptRequest) MakeDiffFieldMask(other *AcceptRequest) *AcceptRequest_FieldMask {
	if o == nil && other == nil {
		return &AcceptRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAcceptRequest_FieldMask()
	}

	res := &AcceptRequest_FieldMask{}
	{
		subMask := o.GetOpenRequest().MakeDiffFieldMask(other.GetOpenRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorOpenRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorOpenRequest, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetResumeRequest().MakeDiffFieldMask(other.GetResumeRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorResumeRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorResumeRequest, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetData().MakeDiffFieldMask(other.GetData())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorData})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorData, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetAck().MakeDiffFieldMask(other.GetAck())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorAck})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorAck, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetClose().MakeDiffFieldMask(other.GetClose())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorClose})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorClose, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetError().MakeDiffFieldMask(other.GetError())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorError})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorError, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetPing().MakeDiffFieldMask(other.GetPing())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptRequest_FieldTerminalPath{selector: AcceptRequest_FieldPathSelectorPing})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptRequest_FieldSubPath{selector: AcceptRequest_FieldPathSelectorPing, subPath: subpath})
			}
		}
	}
	return res
}

func (o *AcceptRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AcceptRequest))
}

func (o *AcceptRequest) Clone() *AcceptRequest {
	if o == nil {
		return nil
	}
	result := &AcceptRequest{}
	if o, ok := o.Message.(*AcceptRequest_OpenRequest_); ok {
		result.Message = (*AcceptRequest_OpenRequest_)(nil)
		if o != nil {
			result.Message = &AcceptRequest_OpenRequest_{}
			result := result.Message.(*AcceptRequest_OpenRequest_)
			result.OpenRequest = o.OpenRequest.Clone()
		}
	}
	if o, ok := o.Message.(*AcceptRequest_ResumeRequest_); ok {
		result.Message = (*AcceptRequest_ResumeRequest_)(nil)
		if o != nil {
			result.Message = &AcceptRequest_ResumeRequest_{}
			result := result.Message.(*AcceptRequest_ResumeRequest_)
			result.ResumeRequest = o.ResumeRequest.Clone()
		}
	}
	if o, ok := o.Message.(*AcceptRequest_Data); ok {
		result.Message = (*AcceptRequest_Data)(nil)
		if o != nil {
			result.Message = &AcceptRequest_Data{}
			result := result.Message.(*AcceptRequest_Data)
			result.Data = o.Data.Clone()
		}
	}
	if o, ok := o.Message.(*AcceptRequest_Ack); ok {
		result.Message = (*AcceptRequest_Ack)(nil)
		if o != nil {
			result.Message = &AcceptRequest_Ack{}
			result := result.Message.(*AcceptRequest_Ack)
			result.Ack = o.Ack.Clone()
		}
	}
	if o, ok := o.Message.(*AcceptRequest_Close); ok {
		result.Message = (*AcceptRequest_Close)(nil)
		if o != nil {
			result.Message = &AcceptRequest_Close{}
			result := result.Message.(*AcceptRequest_Close)
			result.Close = o.Close.Clone()
		}
	}
	if o, ok := o.Message.(*AcceptRequest_Error); ok {
		result.Message = (*AcceptRequest_Error)(nil)
		if o != nil {
			result.Message = &AcceptRequest_Error{}
			result := result.Message.(*AcceptRequest_Error)
			result.Error = o.Error.Clone()
		}
	}
	if o, ok := o.Message.(*AcceptRequest_Ping); ok {
		result.Message = (*AcceptRequest_Ping)(nil)
		if o != nil {
			result.Message = &AcceptRequest_Ping{}
			result := result.Message.(*AcceptRequest_Ping)
			result.Ping = o.Ping.Clone()
		}
	}
	return result
}

func (o *AcceptRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AcceptRequest) Merge(source *AcceptRequest) {
	if source, ok := source.GetMessage().(*AcceptRequest_OpenRequest_); ok {
		if dstOneOf, ok := o.Message.(*AcceptRequest_OpenRequest_); !ok || dstOneOf == nil {
			o.Message = &AcceptRequest_OpenRequest_{}
		}
		if source != nil {
			o := o.Message.(*AcceptRequest_OpenRequest_)
			if source.OpenRequest != nil {
				if o.OpenRequest == nil {
					o.OpenRequest = new(AcceptRequest_OpenRequest)
				}
				o.OpenRequest.Merge(source.OpenRequest)
			}
		}
	}
	if source, ok := source.GetMessage().(*AcceptRequest_ResumeRequest_); ok {
		if dstOneOf, ok := o.Message.(*AcceptRequest_ResumeRequest_); !ok || dstOneOf == nil {
			o.Message = &AcceptRequest_ResumeRequest_{}
		}
		if source != nil {
			o := o.Message.(*AcceptRequest_ResumeRequest_)
			if source.ResumeRequest != nil {
				if o.ResumeRequest == nil {
					o.ResumeRequest = new(AcceptRequest_ResumeRequest)
				}
				o.ResumeRequest.Merge(source.ResumeRequest)
			}
		}
	}
	if source, ok := source.GetMessage().(*AcceptRequest_Data); ok {
		if dstOneOf, ok := o.Message.(*AcceptRequest_Data); !ok || dstOneOf == nil {
			o.Message = &AcceptRequest_Data{}
		}
		if source != nil {
			o := o.Message.(*AcceptRequest_Data)
			if source.Data != nil {
				if o.Data == nil {
					o.Data = new(Data)
				}
				o.Data.Merge(source.Data)
			}
		}
	}
	if source, ok := source.GetMessage().(*AcceptRequest_Ack); ok {
		if dstOneOf, ok := o.Message.(*AcceptRequest_Ack); !ok || dstOneOf == nil {
			o.Message = &AcceptRequest_Ack{}
		}
		if source != nil {
			o := o.Message.(*AcceptRequest_Ack)
			if source.Ack != nil {
				if o.Ack == nil {
					o.Ack = new(Ack)
				}
				o.Ack.Merge(source.Ack)
			}
		}
	}
	if source, ok := source.GetMessage().(*AcceptRequest_Close); ok {
		if dstOneOf, ok := o.Message.(*AcceptRequest_Close); !ok || dstOneOf == nil {
			o.Message = &AcceptRequest_Close{}
		}
		if source != nil {
			o := o.Message.(*AcceptRequest_Close)
			if source.Close != nil {
				if o.Close == nil {
					o.Close = new(Close)
				}
				o.Close.Merge(source.Close)
			}
		}
	}
	if source, ok := source.GetMessage().(*AcceptRequest_Error); ok {
		if dstOneOf, ok := o.Message.(*AcceptRequest_Error); !ok || dstOneOf == nil {
			o.Message = &AcceptRequest_Error{}
		}
		if source != nil {
			o := o.Message.(*AcceptRequest_Error)
			if source.Error != nil {
				if o.Error == nil {
					o.Error = new(Error)
				}
				o.Error.Merge(source.Error)
			}
		}
	}
	if source, ok := source.GetMessage().(*AcceptRequest_Ping); ok {
		if dstOneOf, ok := o.Message.(*AcceptRequest_Ping); !ok || dstOneOf == nil {
			o.Message = &AcceptRequest_Ping{}
		}
		if source != nil {
			o := o.Message.(*AcceptRequest_Ping)
			if source.Ping != nil {
				if o.Ping == nil {
					o.Ping = new(Ping)
				}
				o.Ping.Merge(source.Ping)
			}
		}
	}
}

func (o *AcceptRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AcceptRequest))
}

func (o *AcceptRequest_OpenRequest) GotenObjectExt() {}

func (o *AcceptRequest_OpenRequest) MakeFullFieldMask() *AcceptRequest_OpenRequest_FieldMask {
	return FullAcceptRequest_OpenRequest_FieldMask()
}

func (o *AcceptRequest_OpenRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAcceptRequest_OpenRequest_FieldMask()
}

func (o *AcceptRequest_OpenRequest) MakeDiffFieldMask(other *AcceptRequest_OpenRequest) *AcceptRequest_OpenRequest_FieldMask {
	if o == nil && other == nil {
		return &AcceptRequest_OpenRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAcceptRequest_OpenRequest_FieldMask()
	}

	res := &AcceptRequest_OpenRequest_FieldMask{}
	if o.GetProject().String() != other.GetProject().String() {
		res.Paths = append(res.Paths, &AcceptRequestOpenRequest_FieldTerminalPath{selector: AcceptRequestOpenRequest_FieldPathSelectorProject})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &AcceptRequestOpenRequest_FieldTerminalPath{selector: AcceptRequestOpenRequest_FieldPathSelectorName})
	}
	if o.GetSessionId() != other.GetSessionId() {
		res.Paths = append(res.Paths, &AcceptRequestOpenRequest_FieldTerminalPath{selector: AcceptRequestOpenRequest_FieldPathSelectorSessionId})
	}
	if o.GetChannelId() != other.GetChannelId() {
		res.Paths = append(res.Paths, &AcceptRequestOpenRequest_FieldTerminalPath{selector: AcceptRequestOpenRequest_FieldPathSelectorChannelId})
	}
	return res
}

func (o *AcceptRequest_OpenRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AcceptRequest_OpenRequest))
}

func (o *AcceptRequest_OpenRequest) Clone() *AcceptRequest_OpenRequest {
	if o == nil {
		return nil
	}
	result := &AcceptRequest_OpenRequest{}
	if o.Project == nil {
		result.Project = nil
	} else if data, err := o.Project.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Project = &project.Reference{}
		if err := result.Project.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Name = o.Name
	result.SessionId = o.SessionId
	result.ChannelId = o.ChannelId
	return result
}

func (o *AcceptRequest_OpenRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AcceptRequest_OpenRequest) Merge(source *AcceptRequest_OpenRequest) {
	if source.GetProject() != nil {
		if data, err := source.GetProject().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Project = &project.Reference{}
			if err := o.Project.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Project = nil
	}
	o.Name = source.GetName()
	o.SessionId = source.GetSessionId()
	o.ChannelId = source.GetChannelId()
}

func (o *AcceptRequest_OpenRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AcceptRequest_OpenRequest))
}

func (o *AcceptRequest_ResumeRequest) GotenObjectExt() {}

func (o *AcceptRequest_ResumeRequest) MakeFullFieldMask() *AcceptRequest_ResumeRequest_FieldMask {
	return FullAcceptRequest_ResumeRequest_FieldMask()
}

func (o *AcceptRequest_ResumeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAcceptRequest_ResumeRequest_FieldMask()
}

func (o *AcceptRequest_ResumeRequest) MakeDiffFieldMask(other *AcceptRequest_ResumeRequest) *AcceptRequest_ResumeRequest_FieldMask {
	if o == nil && other == nil {
		return &AcceptRequest_ResumeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAcceptRequest_ResumeRequest_FieldMask()
	}

	res := &AcceptRequest_ResumeRequest_FieldMask{}
	if o.GetProject().String() != other.GetProject().String() {
		res.Paths = append(res.Paths, &AcceptRequestResumeRequest_FieldTerminalPath{selector: AcceptRequestResumeRequest_FieldPathSelectorProject})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &AcceptRequestResumeRequest_FieldTerminalPath{selector: AcceptRequestResumeRequest_FieldPathSelectorName})
	}
	if o.GetSessionId() != other.GetSessionId() {
		res.Paths = append(res.Paths, &AcceptRequestResumeRequest_FieldTerminalPath{selector: AcceptRequestResumeRequest_FieldPathSelectorSessionId})
	}
	if o.GetChannelId() != other.GetChannelId() {
		res.Paths = append(res.Paths, &AcceptRequestResumeRequest_FieldTerminalPath{selector: AcceptRequestResumeRequest_FieldPathSelectorChannelId})
	}
	if o.GetLastMessageId() != other.GetLastMessageId() {
		res.Paths = append(res.Paths, &AcceptRequestResumeRequest_FieldTerminalPath{selector: AcceptRequestResumeRequest_FieldPathSelectorLastMessageId})
	}
	return res
}

func (o *AcceptRequest_ResumeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AcceptRequest_ResumeRequest))
}

func (o *AcceptRequest_ResumeRequest) Clone() *AcceptRequest_ResumeRequest {
	if o == nil {
		return nil
	}
	result := &AcceptRequest_ResumeRequest{}
	if o.Project == nil {
		result.Project = nil
	} else if data, err := o.Project.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Project = &project.Reference{}
		if err := result.Project.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Name = o.Name
	result.SessionId = o.SessionId
	result.ChannelId = o.ChannelId
	result.LastMessageId = o.LastMessageId
	return result
}

func (o *AcceptRequest_ResumeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AcceptRequest_ResumeRequest) Merge(source *AcceptRequest_ResumeRequest) {
	if source.GetProject() != nil {
		if data, err := source.GetProject().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Project = &project.Reference{}
			if err := o.Project.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Project = nil
	}
	o.Name = source.GetName()
	o.SessionId = source.GetSessionId()
	o.ChannelId = source.GetChannelId()
	o.LastMessageId = source.GetLastMessageId()
}

func (o *AcceptRequest_ResumeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AcceptRequest_ResumeRequest))
}

func (o *Ping) GotenObjectExt() {}

func (o *Ping) MakeFullFieldMask() *Ping_FieldMask {
	return FullPing_FieldMask()
}

func (o *Ping) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPing_FieldMask()
}

func (o *Ping) MakeDiffFieldMask(other *Ping) *Ping_FieldMask {
	if o == nil && other == nil {
		return &Ping_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPing_FieldMask()
	}

	res := &Ping_FieldMask{}
	return res
}

func (o *Ping) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Ping))
}

func (o *Ping) Clone() *Ping {
	if o == nil {
		return nil
	}
	result := &Ping{}
	return result
}

func (o *Ping) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Ping) Merge(source *Ping) {
}

func (o *Ping) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Ping))
}

func (o *AcceptResponse) GotenObjectExt() {}

func (o *AcceptResponse) MakeFullFieldMask() *AcceptResponse_FieldMask {
	return FullAcceptResponse_FieldMask()
}

func (o *AcceptResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAcceptResponse_FieldMask()
}

func (o *AcceptResponse) MakeDiffFieldMask(other *AcceptResponse) *AcceptResponse_FieldMask {
	if o == nil && other == nil {
		return &AcceptResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAcceptResponse_FieldMask()
	}

	res := &AcceptResponse_FieldMask{}
	{
		subMask := o.GetData().MakeDiffFieldMask(other.GetData())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptResponse_FieldTerminalPath{selector: AcceptResponse_FieldPathSelectorData})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptResponse_FieldSubPath{selector: AcceptResponse_FieldPathSelectorData, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetAck().MakeDiffFieldMask(other.GetAck())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptResponse_FieldTerminalPath{selector: AcceptResponse_FieldPathSelectorAck})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptResponse_FieldSubPath{selector: AcceptResponse_FieldPathSelectorAck, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetClose().MakeDiffFieldMask(other.GetClose())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptResponse_FieldTerminalPath{selector: AcceptResponse_FieldPathSelectorClose})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptResponse_FieldSubPath{selector: AcceptResponse_FieldPathSelectorClose, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetError().MakeDiffFieldMask(other.GetError())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptResponse_FieldTerminalPath{selector: AcceptResponse_FieldPathSelectorError})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptResponse_FieldSubPath{selector: AcceptResponse_FieldPathSelectorError, subPath: subpath})
			}
		}
	}
	return res
}

func (o *AcceptResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AcceptResponse))
}

func (o *AcceptResponse) Clone() *AcceptResponse {
	if o == nil {
		return nil
	}
	result := &AcceptResponse{}
	if o, ok := o.Message.(*AcceptResponse_Data); ok {
		result.Message = (*AcceptResponse_Data)(nil)
		if o != nil {
			result.Message = &AcceptResponse_Data{}
			result := result.Message.(*AcceptResponse_Data)
			result.Data = o.Data.Clone()
		}
	}
	if o, ok := o.Message.(*AcceptResponse_Ack); ok {
		result.Message = (*AcceptResponse_Ack)(nil)
		if o != nil {
			result.Message = &AcceptResponse_Ack{}
			result := result.Message.(*AcceptResponse_Ack)
			result.Ack = o.Ack.Clone()
		}
	}
	if o, ok := o.Message.(*AcceptResponse_Close); ok {
		result.Message = (*AcceptResponse_Close)(nil)
		if o != nil {
			result.Message = &AcceptResponse_Close{}
			result := result.Message.(*AcceptResponse_Close)
			result.Close = o.Close.Clone()
		}
	}
	if o, ok := o.Message.(*AcceptResponse_Error); ok {
		result.Message = (*AcceptResponse_Error)(nil)
		if o != nil {
			result.Message = &AcceptResponse_Error{}
			result := result.Message.(*AcceptResponse_Error)
			result.Error = o.Error.Clone()
		}
	}
	return result
}

func (o *AcceptResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AcceptResponse) Merge(source *AcceptResponse) {
	if source, ok := source.GetMessage().(*AcceptResponse_Data); ok {
		if dstOneOf, ok := o.Message.(*AcceptResponse_Data); !ok || dstOneOf == nil {
			o.Message = &AcceptResponse_Data{}
		}
		if source != nil {
			o := o.Message.(*AcceptResponse_Data)
			if source.Data != nil {
				if o.Data == nil {
					o.Data = new(Data)
				}
				o.Data.Merge(source.Data)
			}
		}
	}
	if source, ok := source.GetMessage().(*AcceptResponse_Ack); ok {
		if dstOneOf, ok := o.Message.(*AcceptResponse_Ack); !ok || dstOneOf == nil {
			o.Message = &AcceptResponse_Ack{}
		}
		if source != nil {
			o := o.Message.(*AcceptResponse_Ack)
			if source.Ack != nil {
				if o.Ack == nil {
					o.Ack = new(Ack)
				}
				o.Ack.Merge(source.Ack)
			}
		}
	}
	if source, ok := source.GetMessage().(*AcceptResponse_Close); ok {
		if dstOneOf, ok := o.Message.(*AcceptResponse_Close); !ok || dstOneOf == nil {
			o.Message = &AcceptResponse_Close{}
		}
		if source != nil {
			o := o.Message.(*AcceptResponse_Close)
			if source.Close != nil {
				if o.Close == nil {
					o.Close = new(Close)
				}
				o.Close.Merge(source.Close)
			}
		}
	}
	if source, ok := source.GetMessage().(*AcceptResponse_Error); ok {
		if dstOneOf, ok := o.Message.(*AcceptResponse_Error); !ok || dstOneOf == nil {
			o.Message = &AcceptResponse_Error{}
		}
		if source != nil {
			o := o.Message.(*AcceptResponse_Error)
			if source.Error != nil {
				if o.Error == nil {
					o.Error = new(Error)
				}
				o.Error.Merge(source.Error)
			}
		}
	}
}

func (o *AcceptResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AcceptResponse))
}

func (o *Data) GotenObjectExt() {}

func (o *Data) MakeFullFieldMask() *Data_FieldMask {
	return FullData_FieldMask()
}

func (o *Data) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullData_FieldMask()
}

func (o *Data) MakeDiffFieldMask(other *Data) *Data_FieldMask {
	if o == nil && other == nil {
		return &Data_FieldMask{}
	}
	if o == nil || other == nil {
		return FullData_FieldMask()
	}

	res := &Data_FieldMask{}
	if o.GetId() != other.GetId() {
		res.Paths = append(res.Paths, &Data_FieldTerminalPath{selector: Data_FieldPathSelectorId})
	}
	if string(o.GetBytes()) != string(other.GetBytes()) {
		res.Paths = append(res.Paths, &Data_FieldTerminalPath{selector: Data_FieldPathSelectorBytes})
	}
	if o.GetAckRequired() != other.GetAckRequired() {
		res.Paths = append(res.Paths, &Data_FieldTerminalPath{selector: Data_FieldPathSelectorAckRequired})
	}
	return res
}

func (o *Data) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Data))
}

func (o *Data) Clone() *Data {
	if o == nil {
		return nil
	}
	result := &Data{}
	result.Id = o.Id
	result.Bytes = make([]byte, len(o.Bytes))
	for i, bt := range o.Bytes {
		result.Bytes[i] = bt
	}
	result.AckRequired = o.AckRequired
	return result
}

func (o *Data) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Data) Merge(source *Data) {
	o.Id = source.GetId()
	o.Bytes = make([]byte, len(source.GetBytes()))
	for i, bt := range source.GetBytes() {
		o.Bytes[i] = bt
	}
	o.AckRequired = source.GetAckRequired()
}

func (o *Data) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Data))
}

func (o *Ack) GotenObjectExt() {}

func (o *Ack) MakeFullFieldMask() *Ack_FieldMask {
	return FullAck_FieldMask()
}

func (o *Ack) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAck_FieldMask()
}

func (o *Ack) MakeDiffFieldMask(other *Ack) *Ack_FieldMask {
	if o == nil && other == nil {
		return &Ack_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAck_FieldMask()
	}

	res := &Ack_FieldMask{}
	if o.GetId() != other.GetId() {
		res.Paths = append(res.Paths, &Ack_FieldTerminalPath{selector: Ack_FieldPathSelectorId})
	}
	return res
}

func (o *Ack) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Ack))
}

func (o *Ack) Clone() *Ack {
	if o == nil {
		return nil
	}
	result := &Ack{}
	result.Id = o.Id
	return result
}

func (o *Ack) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Ack) Merge(source *Ack) {
	o.Id = source.GetId()
}

func (o *Ack) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Ack))
}

func (o *Close) GotenObjectExt() {}

func (o *Close) MakeFullFieldMask() *Close_FieldMask {
	return FullClose_FieldMask()
}

func (o *Close) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullClose_FieldMask()
}

func (o *Close) MakeDiffFieldMask(other *Close) *Close_FieldMask {
	if o == nil && other == nil {
		return &Close_FieldMask{}
	}
	if o == nil || other == nil {
		return FullClose_FieldMask()
	}

	res := &Close_FieldMask{}
	if o.GetId() != other.GetId() {
		res.Paths = append(res.Paths, &Close_FieldTerminalPath{selector: Close_FieldPathSelectorId})
	}
	return res
}

func (o *Close) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Close))
}

func (o *Close) Clone() *Close {
	if o == nil {
		return nil
	}
	result := &Close{}
	result.Id = o.Id
	return result
}

func (o *Close) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Close) Merge(source *Close) {
	o.Id = source.GetId()
}

func (o *Close) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Close))
}

func (o *Error) GotenObjectExt() {}

func (o *Error) MakeFullFieldMask() *Error_FieldMask {
	return FullError_FieldMask()
}

func (o *Error) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullError_FieldMask()
}

func (o *Error) MakeDiffFieldMask(other *Error) *Error_FieldMask {
	if o == nil && other == nil {
		return &Error_FieldMask{}
	}
	if o == nil || other == nil {
		return FullError_FieldMask()
	}

	res := &Error_FieldMask{}
	if o.GetId() != other.GetId() {
		res.Paths = append(res.Paths, &Error_FieldTerminalPath{selector: Error_FieldPathSelectorId})
	}
	if o.GetMessage() != other.GetMessage() {
		res.Paths = append(res.Paths, &Error_FieldTerminalPath{selector: Error_FieldPathSelectorMessage})
	}
	return res
}

func (o *Error) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Error))
}

func (o *Error) Clone() *Error {
	if o == nil {
		return nil
	}
	result := &Error{}
	result.Id = o.Id
	result.Message = o.Message
	return result
}

func (o *Error) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Error) Merge(source *Error) {
	o.Id = source.GetId()
	o.Message = source.GetMessage()
}

func (o *Error) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Error))
}

func (o *ConnectRequest) GotenObjectExt() {}

func (o *ConnectRequest) MakeFullFieldMask() *ConnectRequest_FieldMask {
	return FullConnectRequest_FieldMask()
}

func (o *ConnectRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectRequest_FieldMask()
}

func (o *ConnectRequest) MakeDiffFieldMask(other *ConnectRequest) *ConnectRequest_FieldMask {
	if o == nil && other == nil {
		return &ConnectRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectRequest_FieldMask()
	}

	res := &ConnectRequest_FieldMask{}
	{
		subMask := o.GetOpenRequest().MakeDiffFieldMask(other.GetOpenRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorOpenRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorOpenRequest, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetResumeRequest().MakeDiffFieldMask(other.GetResumeRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorResumeRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorResumeRequest, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetAck().MakeDiffFieldMask(other.GetAck())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorAck})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorAck, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetData().MakeDiffFieldMask(other.GetData())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorData})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorData, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetClose().MakeDiffFieldMask(other.GetClose())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorClose})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorClose, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetError().MakeDiffFieldMask(other.GetError())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorError})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorError, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetPing().MakeDiffFieldMask(other.GetPing())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectRequest_FieldTerminalPath{selector: ConnectRequest_FieldPathSelectorPing})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectRequest_FieldSubPath{selector: ConnectRequest_FieldPathSelectorPing, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ConnectRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectRequest))
}

func (o *ConnectRequest) Clone() *ConnectRequest {
	if o == nil {
		return nil
	}
	result := &ConnectRequest{}
	if o, ok := o.Message.(*ConnectRequest_OpenRequest_); ok {
		result.Message = (*ConnectRequest_OpenRequest_)(nil)
		if o != nil {
			result.Message = &ConnectRequest_OpenRequest_{}
			result := result.Message.(*ConnectRequest_OpenRequest_)
			result.OpenRequest = o.OpenRequest.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectRequest_ResumeRequest_); ok {
		result.Message = (*ConnectRequest_ResumeRequest_)(nil)
		if o != nil {
			result.Message = &ConnectRequest_ResumeRequest_{}
			result := result.Message.(*ConnectRequest_ResumeRequest_)
			result.ResumeRequest = o.ResumeRequest.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectRequest_Ack); ok {
		result.Message = (*ConnectRequest_Ack)(nil)
		if o != nil {
			result.Message = &ConnectRequest_Ack{}
			result := result.Message.(*ConnectRequest_Ack)
			result.Ack = o.Ack.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectRequest_Data); ok {
		result.Message = (*ConnectRequest_Data)(nil)
		if o != nil {
			result.Message = &ConnectRequest_Data{}
			result := result.Message.(*ConnectRequest_Data)
			result.Data = o.Data.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectRequest_Close); ok {
		result.Message = (*ConnectRequest_Close)(nil)
		if o != nil {
			result.Message = &ConnectRequest_Close{}
			result := result.Message.(*ConnectRequest_Close)
			result.Close = o.Close.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectRequest_Error); ok {
		result.Message = (*ConnectRequest_Error)(nil)
		if o != nil {
			result.Message = &ConnectRequest_Error{}
			result := result.Message.(*ConnectRequest_Error)
			result.Error = o.Error.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectRequest_Ping); ok {
		result.Message = (*ConnectRequest_Ping)(nil)
		if o != nil {
			result.Message = &ConnectRequest_Ping{}
			result := result.Message.(*ConnectRequest_Ping)
			result.Ping = o.Ping.Clone()
		}
	}
	return result
}

func (o *ConnectRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectRequest) Merge(source *ConnectRequest) {
	if source, ok := source.GetMessage().(*ConnectRequest_OpenRequest_); ok {
		if dstOneOf, ok := o.Message.(*ConnectRequest_OpenRequest_); !ok || dstOneOf == nil {
			o.Message = &ConnectRequest_OpenRequest_{}
		}
		if source != nil {
			o := o.Message.(*ConnectRequest_OpenRequest_)
			if source.OpenRequest != nil {
				if o.OpenRequest == nil {
					o.OpenRequest = new(ConnectRequest_OpenRequest)
				}
				o.OpenRequest.Merge(source.OpenRequest)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectRequest_ResumeRequest_); ok {
		if dstOneOf, ok := o.Message.(*ConnectRequest_ResumeRequest_); !ok || dstOneOf == nil {
			o.Message = &ConnectRequest_ResumeRequest_{}
		}
		if source != nil {
			o := o.Message.(*ConnectRequest_ResumeRequest_)
			if source.ResumeRequest != nil {
				if o.ResumeRequest == nil {
					o.ResumeRequest = new(ConnectRequest_ResumeRequest)
				}
				o.ResumeRequest.Merge(source.ResumeRequest)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectRequest_Ack); ok {
		if dstOneOf, ok := o.Message.(*ConnectRequest_Ack); !ok || dstOneOf == nil {
			o.Message = &ConnectRequest_Ack{}
		}
		if source != nil {
			o := o.Message.(*ConnectRequest_Ack)
			if source.Ack != nil {
				if o.Ack == nil {
					o.Ack = new(Ack)
				}
				o.Ack.Merge(source.Ack)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectRequest_Data); ok {
		if dstOneOf, ok := o.Message.(*ConnectRequest_Data); !ok || dstOneOf == nil {
			o.Message = &ConnectRequest_Data{}
		}
		if source != nil {
			o := o.Message.(*ConnectRequest_Data)
			if source.Data != nil {
				if o.Data == nil {
					o.Data = new(Data)
				}
				o.Data.Merge(source.Data)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectRequest_Close); ok {
		if dstOneOf, ok := o.Message.(*ConnectRequest_Close); !ok || dstOneOf == nil {
			o.Message = &ConnectRequest_Close{}
		}
		if source != nil {
			o := o.Message.(*ConnectRequest_Close)
			if source.Close != nil {
				if o.Close == nil {
					o.Close = new(Close)
				}
				o.Close.Merge(source.Close)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectRequest_Error); ok {
		if dstOneOf, ok := o.Message.(*ConnectRequest_Error); !ok || dstOneOf == nil {
			o.Message = &ConnectRequest_Error{}
		}
		if source != nil {
			o := o.Message.(*ConnectRequest_Error)
			if source.Error != nil {
				if o.Error == nil {
					o.Error = new(Error)
				}
				o.Error.Merge(source.Error)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectRequest_Ping); ok {
		if dstOneOf, ok := o.Message.(*ConnectRequest_Ping); !ok || dstOneOf == nil {
			o.Message = &ConnectRequest_Ping{}
		}
		if source != nil {
			o := o.Message.(*ConnectRequest_Ping)
			if source.Ping != nil {
				if o.Ping == nil {
					o.Ping = new(Ping)
				}
				o.Ping.Merge(source.Ping)
			}
		}
	}
}

func (o *ConnectRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectRequest))
}

func (o *ConnectRequest_OpenRequest) GotenObjectExt() {}

func (o *ConnectRequest_OpenRequest) MakeFullFieldMask() *ConnectRequest_OpenRequest_FieldMask {
	return FullConnectRequest_OpenRequest_FieldMask()
}

func (o *ConnectRequest_OpenRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectRequest_OpenRequest_FieldMask()
}

func (o *ConnectRequest_OpenRequest) MakeDiffFieldMask(other *ConnectRequest_OpenRequest) *ConnectRequest_OpenRequest_FieldMask {
	if o == nil && other == nil {
		return &ConnectRequest_OpenRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectRequest_OpenRequest_FieldMask()
	}

	res := &ConnectRequest_OpenRequest_FieldMask{}
	if o.GetProject().String() != other.GetProject().String() {
		res.Paths = append(res.Paths, &ConnectRequestOpenRequest_FieldTerminalPath{selector: ConnectRequestOpenRequest_FieldPathSelectorProject})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &ConnectRequestOpenRequest_FieldTerminalPath{selector: ConnectRequestOpenRequest_FieldPathSelectorName})
	}
	if o.GetProviderName() != other.GetProviderName() {
		res.Paths = append(res.Paths, &ConnectRequestOpenRequest_FieldTerminalPath{selector: ConnectRequestOpenRequest_FieldPathSelectorProviderName})
	}
	if o.GetService() != other.GetService() {
		res.Paths = append(res.Paths, &ConnectRequestOpenRequest_FieldTerminalPath{selector: ConnectRequestOpenRequest_FieldPathSelectorService})
	}
	if string(o.GetArg()) != string(other.GetArg()) {
		res.Paths = append(res.Paths, &ConnectRequestOpenRequest_FieldTerminalPath{selector: ConnectRequestOpenRequest_FieldPathSelectorArg})
	}
	return res
}

func (o *ConnectRequest_OpenRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectRequest_OpenRequest))
}

func (o *ConnectRequest_OpenRequest) Clone() *ConnectRequest_OpenRequest {
	if o == nil {
		return nil
	}
	result := &ConnectRequest_OpenRequest{}
	if o.Project == nil {
		result.Project = nil
	} else if data, err := o.Project.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Project = &project.Reference{}
		if err := result.Project.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Name = o.Name
	result.ProviderName = o.ProviderName
	result.Service = o.Service
	result.Arg = make([]byte, len(o.Arg))
	for i, bt := range o.Arg {
		result.Arg[i] = bt
	}
	return result
}

func (o *ConnectRequest_OpenRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectRequest_OpenRequest) Merge(source *ConnectRequest_OpenRequest) {
	if source.GetProject() != nil {
		if data, err := source.GetProject().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Project = &project.Reference{}
			if err := o.Project.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Project = nil
	}
	o.Name = source.GetName()
	o.ProviderName = source.GetProviderName()
	o.Service = source.GetService()
	o.Arg = make([]byte, len(source.GetArg()))
	for i, bt := range source.GetArg() {
		o.Arg[i] = bt
	}
}

func (o *ConnectRequest_OpenRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectRequest_OpenRequest))
}

func (o *ConnectRequest_ResumeRequest) GotenObjectExt() {}

func (o *ConnectRequest_ResumeRequest) MakeFullFieldMask() *ConnectRequest_ResumeRequest_FieldMask {
	return FullConnectRequest_ResumeRequest_FieldMask()
}

func (o *ConnectRequest_ResumeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectRequest_ResumeRequest_FieldMask()
}

func (o *ConnectRequest_ResumeRequest) MakeDiffFieldMask(other *ConnectRequest_ResumeRequest) *ConnectRequest_ResumeRequest_FieldMask {
	if o == nil && other == nil {
		return &ConnectRequest_ResumeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectRequest_ResumeRequest_FieldMask()
	}

	res := &ConnectRequest_ResumeRequest_FieldMask{}
	if o.GetProject().String() != other.GetProject().String() {
		res.Paths = append(res.Paths, &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorProject})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorName})
	}
	if o.GetProviderName() != other.GetProviderName() {
		res.Paths = append(res.Paths, &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorProviderName})
	}
	if o.GetSessionId() != other.GetSessionId() {
		res.Paths = append(res.Paths, &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorSessionId})
	}
	if o.GetChannelId() != other.GetChannelId() {
		res.Paths = append(res.Paths, &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorChannelId})
	}
	if o.GetLastMessageId() != other.GetLastMessageId() {
		res.Paths = append(res.Paths, &ConnectRequestResumeRequest_FieldTerminalPath{selector: ConnectRequestResumeRequest_FieldPathSelectorLastMessageId})
	}
	return res
}

func (o *ConnectRequest_ResumeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectRequest_ResumeRequest))
}

func (o *ConnectRequest_ResumeRequest) Clone() *ConnectRequest_ResumeRequest {
	if o == nil {
		return nil
	}
	result := &ConnectRequest_ResumeRequest{}
	if o.Project == nil {
		result.Project = nil
	} else if data, err := o.Project.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Project = &project.Reference{}
		if err := result.Project.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Name = o.Name
	result.ProviderName = o.ProviderName
	result.SessionId = o.SessionId
	result.ChannelId = o.ChannelId
	result.LastMessageId = o.LastMessageId
	return result
}

func (o *ConnectRequest_ResumeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectRequest_ResumeRequest) Merge(source *ConnectRequest_ResumeRequest) {
	if source.GetProject() != nil {
		if data, err := source.GetProject().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Project = &project.Reference{}
			if err := o.Project.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Project = nil
	}
	o.Name = source.GetName()
	o.ProviderName = source.GetProviderName()
	o.SessionId = source.GetSessionId()
	o.ChannelId = source.GetChannelId()
	o.LastMessageId = source.GetLastMessageId()
}

func (o *ConnectRequest_ResumeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectRequest_ResumeRequest))
}

func (o *ConnectResponse) GotenObjectExt() {}

func (o *ConnectResponse) MakeFullFieldMask() *ConnectResponse_FieldMask {
	return FullConnectResponse_FieldMask()
}

func (o *ConnectResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectResponse_FieldMask()
}

func (o *ConnectResponse) MakeDiffFieldMask(other *ConnectResponse) *ConnectResponse_FieldMask {
	if o == nil && other == nil {
		return &ConnectResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectResponse_FieldMask()
	}

	res := &ConnectResponse_FieldMask{}
	{
		subMask := o.GetOpenResponse().MakeDiffFieldMask(other.GetOpenResponse())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorOpenResponse})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorOpenResponse, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetResumeResponse().MakeDiffFieldMask(other.GetResumeResponse())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorResumeResponse})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorResumeResponse, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetChannelOpenError().MakeDiffFieldMask(other.GetChannelOpenError())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorChannelOpenError})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorChannelOpenError, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetAck().MakeDiffFieldMask(other.GetAck())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorAck})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorAck, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetData().MakeDiffFieldMask(other.GetData())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorData})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorData, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetClose().MakeDiffFieldMask(other.GetClose())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorClose})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorClose, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetError().MakeDiffFieldMask(other.GetError())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectResponse_FieldTerminalPath{selector: ConnectResponse_FieldPathSelectorError})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectResponse_FieldSubPath{selector: ConnectResponse_FieldPathSelectorError, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ConnectResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectResponse))
}

func (o *ConnectResponse) Clone() *ConnectResponse {
	if o == nil {
		return nil
	}
	result := &ConnectResponse{}
	if o, ok := o.Message.(*ConnectResponse_OpenResponse_); ok {
		result.Message = (*ConnectResponse_OpenResponse_)(nil)
		if o != nil {
			result.Message = &ConnectResponse_OpenResponse_{}
			result := result.Message.(*ConnectResponse_OpenResponse_)
			result.OpenResponse = o.OpenResponse.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectResponse_ResumeResponse_); ok {
		result.Message = (*ConnectResponse_ResumeResponse_)(nil)
		if o != nil {
			result.Message = &ConnectResponse_ResumeResponse_{}
			result := result.Message.(*ConnectResponse_ResumeResponse_)
			result.ResumeResponse = o.ResumeResponse.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectResponse_ChannelOpenError_); ok {
		result.Message = (*ConnectResponse_ChannelOpenError_)(nil)
		if o != nil {
			result.Message = &ConnectResponse_ChannelOpenError_{}
			result := result.Message.(*ConnectResponse_ChannelOpenError_)
			result.ChannelOpenError = o.ChannelOpenError.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectResponse_Ack); ok {
		result.Message = (*ConnectResponse_Ack)(nil)
		if o != nil {
			result.Message = &ConnectResponse_Ack{}
			result := result.Message.(*ConnectResponse_Ack)
			result.Ack = o.Ack.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectResponse_Data); ok {
		result.Message = (*ConnectResponse_Data)(nil)
		if o != nil {
			result.Message = &ConnectResponse_Data{}
			result := result.Message.(*ConnectResponse_Data)
			result.Data = o.Data.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectResponse_Close); ok {
		result.Message = (*ConnectResponse_Close)(nil)
		if o != nil {
			result.Message = &ConnectResponse_Close{}
			result := result.Message.(*ConnectResponse_Close)
			result.Close = o.Close.Clone()
		}
	}
	if o, ok := o.Message.(*ConnectResponse_Error); ok {
		result.Message = (*ConnectResponse_Error)(nil)
		if o != nil {
			result.Message = &ConnectResponse_Error{}
			result := result.Message.(*ConnectResponse_Error)
			result.Error = o.Error.Clone()
		}
	}
	return result
}

func (o *ConnectResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectResponse) Merge(source *ConnectResponse) {
	if source, ok := source.GetMessage().(*ConnectResponse_OpenResponse_); ok {
		if dstOneOf, ok := o.Message.(*ConnectResponse_OpenResponse_); !ok || dstOneOf == nil {
			o.Message = &ConnectResponse_OpenResponse_{}
		}
		if source != nil {
			o := o.Message.(*ConnectResponse_OpenResponse_)
			if source.OpenResponse != nil {
				if o.OpenResponse == nil {
					o.OpenResponse = new(ConnectResponse_OpenResponse)
				}
				o.OpenResponse.Merge(source.OpenResponse)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectResponse_ResumeResponse_); ok {
		if dstOneOf, ok := o.Message.(*ConnectResponse_ResumeResponse_); !ok || dstOneOf == nil {
			o.Message = &ConnectResponse_ResumeResponse_{}
		}
		if source != nil {
			o := o.Message.(*ConnectResponse_ResumeResponse_)
			if source.ResumeResponse != nil {
				if o.ResumeResponse == nil {
					o.ResumeResponse = new(ConnectResponse_ResumeResponse)
				}
				o.ResumeResponse.Merge(source.ResumeResponse)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectResponse_ChannelOpenError_); ok {
		if dstOneOf, ok := o.Message.(*ConnectResponse_ChannelOpenError_); !ok || dstOneOf == nil {
			o.Message = &ConnectResponse_ChannelOpenError_{}
		}
		if source != nil {
			o := o.Message.(*ConnectResponse_ChannelOpenError_)
			if source.ChannelOpenError != nil {
				if o.ChannelOpenError == nil {
					o.ChannelOpenError = new(ConnectResponse_ChannelOpenError)
				}
				o.ChannelOpenError.Merge(source.ChannelOpenError)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectResponse_Ack); ok {
		if dstOneOf, ok := o.Message.(*ConnectResponse_Ack); !ok || dstOneOf == nil {
			o.Message = &ConnectResponse_Ack{}
		}
		if source != nil {
			o := o.Message.(*ConnectResponse_Ack)
			if source.Ack != nil {
				if o.Ack == nil {
					o.Ack = new(Ack)
				}
				o.Ack.Merge(source.Ack)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectResponse_Data); ok {
		if dstOneOf, ok := o.Message.(*ConnectResponse_Data); !ok || dstOneOf == nil {
			o.Message = &ConnectResponse_Data{}
		}
		if source != nil {
			o := o.Message.(*ConnectResponse_Data)
			if source.Data != nil {
				if o.Data == nil {
					o.Data = new(Data)
				}
				o.Data.Merge(source.Data)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectResponse_Close); ok {
		if dstOneOf, ok := o.Message.(*ConnectResponse_Close); !ok || dstOneOf == nil {
			o.Message = &ConnectResponse_Close{}
		}
		if source != nil {
			o := o.Message.(*ConnectResponse_Close)
			if source.Close != nil {
				if o.Close == nil {
					o.Close = new(Close)
				}
				o.Close.Merge(source.Close)
			}
		}
	}
	if source, ok := source.GetMessage().(*ConnectResponse_Error); ok {
		if dstOneOf, ok := o.Message.(*ConnectResponse_Error); !ok || dstOneOf == nil {
			o.Message = &ConnectResponse_Error{}
		}
		if source != nil {
			o := o.Message.(*ConnectResponse_Error)
			if source.Error != nil {
				if o.Error == nil {
					o.Error = new(Error)
				}
				o.Error.Merge(source.Error)
			}
		}
	}
}

func (o *ConnectResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectResponse))
}

func (o *ConnectResponse_OpenResponse) GotenObjectExt() {}

func (o *ConnectResponse_OpenResponse) MakeFullFieldMask() *ConnectResponse_OpenResponse_FieldMask {
	return FullConnectResponse_OpenResponse_FieldMask()
}

func (o *ConnectResponse_OpenResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectResponse_OpenResponse_FieldMask()
}

func (o *ConnectResponse_OpenResponse) MakeDiffFieldMask(other *ConnectResponse_OpenResponse) *ConnectResponse_OpenResponse_FieldMask {
	if o == nil && other == nil {
		return &ConnectResponse_OpenResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectResponse_OpenResponse_FieldMask()
	}

	res := &ConnectResponse_OpenResponse_FieldMask{}
	if o.GetSessionId() != other.GetSessionId() {
		res.Paths = append(res.Paths, &ConnectResponseOpenResponse_FieldTerminalPath{selector: ConnectResponseOpenResponse_FieldPathSelectorSessionId})
	}
	if o.GetChannelId() != other.GetChannelId() {
		res.Paths = append(res.Paths, &ConnectResponseOpenResponse_FieldTerminalPath{selector: ConnectResponseOpenResponse_FieldPathSelectorChannelId})
	}
	return res
}

func (o *ConnectResponse_OpenResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectResponse_OpenResponse))
}

func (o *ConnectResponse_OpenResponse) Clone() *ConnectResponse_OpenResponse {
	if o == nil {
		return nil
	}
	result := &ConnectResponse_OpenResponse{}
	result.SessionId = o.SessionId
	result.ChannelId = o.ChannelId
	return result
}

func (o *ConnectResponse_OpenResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectResponse_OpenResponse) Merge(source *ConnectResponse_OpenResponse) {
	o.SessionId = source.GetSessionId()
	o.ChannelId = source.GetChannelId()
}

func (o *ConnectResponse_OpenResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectResponse_OpenResponse))
}

func (o *ConnectResponse_ResumeResponse) GotenObjectExt() {}

func (o *ConnectResponse_ResumeResponse) MakeFullFieldMask() *ConnectResponse_ResumeResponse_FieldMask {
	return FullConnectResponse_ResumeResponse_FieldMask()
}

func (o *ConnectResponse_ResumeResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectResponse_ResumeResponse_FieldMask()
}

func (o *ConnectResponse_ResumeResponse) MakeDiffFieldMask(other *ConnectResponse_ResumeResponse) *ConnectResponse_ResumeResponse_FieldMask {
	if o == nil && other == nil {
		return &ConnectResponse_ResumeResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectResponse_ResumeResponse_FieldMask()
	}

	res := &ConnectResponse_ResumeResponse_FieldMask{}
	if o.GetSessionId() != other.GetSessionId() {
		res.Paths = append(res.Paths, &ConnectResponseResumeResponse_FieldTerminalPath{selector: ConnectResponseResumeResponse_FieldPathSelectorSessionId})
	}
	if o.GetChannelId() != other.GetChannelId() {
		res.Paths = append(res.Paths, &ConnectResponseResumeResponse_FieldTerminalPath{selector: ConnectResponseResumeResponse_FieldPathSelectorChannelId})
	}
	if o.GetLastMessageId() != other.GetLastMessageId() {
		res.Paths = append(res.Paths, &ConnectResponseResumeResponse_FieldTerminalPath{selector: ConnectResponseResumeResponse_FieldPathSelectorLastMessageId})
	}
	return res
}

func (o *ConnectResponse_ResumeResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectResponse_ResumeResponse))
}

func (o *ConnectResponse_ResumeResponse) Clone() *ConnectResponse_ResumeResponse {
	if o == nil {
		return nil
	}
	result := &ConnectResponse_ResumeResponse{}
	result.SessionId = o.SessionId
	result.ChannelId = o.ChannelId
	result.LastMessageId = o.LastMessageId
	return result
}

func (o *ConnectResponse_ResumeResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectResponse_ResumeResponse) Merge(source *ConnectResponse_ResumeResponse) {
	o.SessionId = source.GetSessionId()
	o.ChannelId = source.GetChannelId()
	o.LastMessageId = source.GetLastMessageId()
}

func (o *ConnectResponse_ResumeResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectResponse_ResumeResponse))
}

func (o *ConnectResponse_ChannelOpenError) GotenObjectExt() {}

func (o *ConnectResponse_ChannelOpenError) MakeFullFieldMask() *ConnectResponse_ChannelOpenError_FieldMask {
	return FullConnectResponse_ChannelOpenError_FieldMask()
}

func (o *ConnectResponse_ChannelOpenError) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectResponse_ChannelOpenError_FieldMask()
}

func (o *ConnectResponse_ChannelOpenError) MakeDiffFieldMask(other *ConnectResponse_ChannelOpenError) *ConnectResponse_ChannelOpenError_FieldMask {
	if o == nil && other == nil {
		return &ConnectResponse_ChannelOpenError_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectResponse_ChannelOpenError_FieldMask()
	}

	res := &ConnectResponse_ChannelOpenError_FieldMask{}
	if o.GetChannelId() != other.GetChannelId() {
		res.Paths = append(res.Paths, &ConnectResponseChannelOpenError_FieldTerminalPath{selector: ConnectResponseChannelOpenError_FieldPathSelectorChannelId})
	}
	if o.GetMessage() != other.GetMessage() {
		res.Paths = append(res.Paths, &ConnectResponseChannelOpenError_FieldTerminalPath{selector: ConnectResponseChannelOpenError_FieldPathSelectorMessage})
	}
	return res
}

func (o *ConnectResponse_ChannelOpenError) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectResponse_ChannelOpenError))
}

func (o *ConnectResponse_ChannelOpenError) Clone() *ConnectResponse_ChannelOpenError {
	if o == nil {
		return nil
	}
	result := &ConnectResponse_ChannelOpenError{}
	result.ChannelId = o.ChannelId
	result.Message = o.Message
	return result
}

func (o *ConnectResponse_ChannelOpenError) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectResponse_ChannelOpenError) Merge(source *ConnectResponse_ChannelOpenError) {
	o.ChannelId = source.GetChannelId()
	o.Message = source.GetMessage()
}

func (o *ConnectResponse_ChannelOpenError) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectResponse_ChannelOpenError))
}
