// Code generated by protoc-gen-goten-validate
// File: edgelq/proxies/proto/v1alpha2/broker_custom.proto
// DO NOT EDIT!!!

package broker_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/proxies/resources/v1alpha2/project"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
)

func (obj *ConnectRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Message.(type) {
	case *ConnectRequest_OpenRequest_:
		if subobj, ok := interface{}(opt.OpenRequest).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectRequest", "openRequest", opt.OpenRequest, "nested object validation failed", err)
			}
		}
	case *ConnectRequest_ResumeRequest_:
		if subobj, ok := interface{}(opt.ResumeRequest).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectRequest", "resumeRequest", opt.ResumeRequest, "nested object validation failed", err)
			}
		}
	case *ConnectRequest_Ack:
		if subobj, ok := interface{}(opt.Ack).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectRequest", "ack", opt.Ack, "nested object validation failed", err)
			}
		}
	case *ConnectRequest_Data:
		if subobj, ok := interface{}(opt.Data).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectRequest", "data", opt.Data, "nested object validation failed", err)
			}
		}
	case *ConnectRequest_Close:
		if subobj, ok := interface{}(opt.Close).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectRequest", "close", opt.Close, "nested object validation failed", err)
			}
		}
	case *ConnectRequest_Error:
		if subobj, ok := interface{}(opt.Error).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectRequest", "error", opt.Error, "nested object validation failed", err)
			}
		}
	case *ConnectRequest_Ping:
		if subobj, ok := interface{}(opt.Ping).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectRequest", "ping", opt.Ping, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ConnectRequest_OpenRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ConnectRequest_ResumeRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ConnectResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Message.(type) {
	case *ConnectResponse_OpenResponse_:
		if subobj, ok := interface{}(opt.OpenResponse).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectResponse", "openResponse", opt.OpenResponse, "nested object validation failed", err)
			}
		}
	case *ConnectResponse_ResumeResponse_:
		if subobj, ok := interface{}(opt.ResumeResponse).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectResponse", "resumeResponse", opt.ResumeResponse, "nested object validation failed", err)
			}
		}
	case *ConnectResponse_ChannelOpenError_:
		if subobj, ok := interface{}(opt.ChannelOpenError).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectResponse", "channelOpenError", opt.ChannelOpenError, "nested object validation failed", err)
			}
		}
	case *ConnectResponse_Ack:
		if subobj, ok := interface{}(opt.Ack).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectResponse", "ack", opt.Ack, "nested object validation failed", err)
			}
		}
	case *ConnectResponse_Data:
		if subobj, ok := interface{}(opt.Data).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectResponse", "data", opt.Data, "nested object validation failed", err)
			}
		}
	case *ConnectResponse_Close:
		if subobj, ok := interface{}(opt.Close).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectResponse", "close", opt.Close, "nested object validation failed", err)
			}
		}
	case *ConnectResponse_Error:
		if subobj, ok := interface{}(opt.Error).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectResponse", "error", opt.Error, "nested object validation failed", err)
			}
		}
	case *ConnectResponse_Pong:
		if subobj, ok := interface{}(opt.Pong).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ConnectResponse", "pong", opt.Pong, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ConnectResponse_OpenResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ConnectResponse_ResumeResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ConnectResponse_ChannelOpenError) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListenRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Message.(type) {
	case *ListenRequest_OpenRequest_:
		if subobj, ok := interface{}(opt.OpenRequest).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListenRequest", "openRequest", opt.OpenRequest, "nested object validation failed", err)
			}
		}
	case *ListenRequest_ResumeRequest_:
		if subobj, ok := interface{}(opt.ResumeRequest).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListenRequest", "resumeRequest", opt.ResumeRequest, "nested object validation failed", err)
			}
		}
	case *ListenRequest_ChannelOpenError_:
		if subobj, ok := interface{}(opt.ChannelOpenError).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListenRequest", "channelOpenError", opt.ChannelOpenError, "nested object validation failed", err)
			}
		}
	case *ListenRequest_Ping:
		if subobj, ok := interface{}(opt.Ping).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListenRequest", "ping", opt.Ping, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListenRequest_OpenRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListenRequest_ResumeRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListenRequest_ChannelOpenError) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListenResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Message.(type) {
	case *ListenResponse_Listening_:
		if subobj, ok := interface{}(opt.Listening).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListenResponse", "listening", opt.Listening, "nested object validation failed", err)
			}
		}
	case *ListenResponse_OpenChannelResponse_:
		if subobj, ok := interface{}(opt.OpenChannelResponse).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListenResponse", "openChannelResponse", opt.OpenChannelResponse, "nested object validation failed", err)
			}
		}
	case *ListenResponse_ResumeChannelResponse_:
		if subobj, ok := interface{}(opt.ResumeChannelResponse).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListenResponse", "resumeChannelResponse", opt.ResumeChannelResponse, "nested object validation failed", err)
			}
		}
	case *ListenResponse_Pong:
		if subobj, ok := interface{}(opt.Pong).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListenResponse", "pong", opt.Pong, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListenResponse_Listening) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListenResponse_OpenChannelResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListenResponse_ResumeChannelResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AcceptRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Message.(type) {
	case *AcceptRequest_OpenRequest_:
		if subobj, ok := interface{}(opt.OpenRequest).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptRequest", "openRequest", opt.OpenRequest, "nested object validation failed", err)
			}
		}
	case *AcceptRequest_ResumeRequest_:
		if subobj, ok := interface{}(opt.ResumeRequest).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptRequest", "resumeRequest", opt.ResumeRequest, "nested object validation failed", err)
			}
		}
	case *AcceptRequest_Data:
		if subobj, ok := interface{}(opt.Data).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptRequest", "data", opt.Data, "nested object validation failed", err)
			}
		}
	case *AcceptRequest_Ack:
		if subobj, ok := interface{}(opt.Ack).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptRequest", "ack", opt.Ack, "nested object validation failed", err)
			}
		}
	case *AcceptRequest_Close:
		if subobj, ok := interface{}(opt.Close).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptRequest", "close", opt.Close, "nested object validation failed", err)
			}
		}
	case *AcceptRequest_Error:
		if subobj, ok := interface{}(opt.Error).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptRequest", "error", opt.Error, "nested object validation failed", err)
			}
		}
	case *AcceptRequest_Ping:
		if subobj, ok := interface{}(opt.Ping).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptRequest", "ping", opt.Ping, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AcceptRequest_OpenRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AcceptRequest_ResumeRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AcceptResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Message.(type) {
	case *AcceptResponse_Data:
		if subobj, ok := interface{}(opt.Data).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptResponse", "data", opt.Data, "nested object validation failed", err)
			}
		}
	case *AcceptResponse_Ack:
		if subobj, ok := interface{}(opt.Ack).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptResponse", "ack", opt.Ack, "nested object validation failed", err)
			}
		}
	case *AcceptResponse_Close:
		if subobj, ok := interface{}(opt.Close).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptResponse", "close", opt.Close, "nested object validation failed", err)
			}
		}
	case *AcceptResponse_Error:
		if subobj, ok := interface{}(opt.Error).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptResponse", "error", opt.Error, "nested object validation failed", err)
			}
		}
	case *AcceptResponse_Pong:
		if subobj, ok := interface{}(opt.Pong).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("AcceptResponse", "pong", opt.Pong, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Ping) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Pong) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Data) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Ack) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Close) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Error) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
