// Code generated by protoc-gen-goten-go
// File: edgelq/proxies/proto/v1alpha2/broker_custom.proto
// DO NOT EDIT!!!

package broker_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/proxies/resources/v1alpha2/project"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method [Connect][ntt.proxies.v1alpha2.Connect]
type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Message:
	//	*ConnectRequest_OpenRequest_
	//	*ConnectRequest_ResumeRequest_
	//	*ConnectRequest_Ack
	//	*ConnectRequest_Data
	//	*ConnectRequest_Close
	//	*ConnectRequest_Error
	//	*ConnectRequest_Ping
	Message isConnectRequest_Message `protobuf_oneof:"message"`
}

func (m *ConnectRequest) Reset() {
	*m = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectRequest) ProtoMessage() {}

func (m *ConnectRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectRequest) GotenMessage() {}

// Deprecated, Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ConnectRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isConnectRequest_Message interface {
	isConnectRequest_Message()
}

type ConnectRequest_OpenRequest_ struct {
	// The initiation message to open a channel to a device.
	OpenRequest *ConnectRequest_OpenRequest `protobuf:"bytes,1,opt,name=open_request,json=openRequest,proto3,oneof" firestore:"openRequest"`
}
type ConnectRequest_ResumeRequest_ struct {
	// Attempt to resume stream of data
	ResumeRequest *ConnectRequest_ResumeRequest `protobuf:"bytes,2,opt,name=resume_request,json=resumeRequest,proto3,oneof" firestore:"resumeRequest"`
}
type ConnectRequest_Ack struct {
	// ACK message
	Ack *Ack `protobuf:"bytes,3,opt,name=ack,proto3,oneof" firestore:"ack"`
}
type ConnectRequest_Data struct {
	// Any data sent to the device through the endpoint.
	Data *Data `protobuf:"bytes,4,opt,name=data,proto3,oneof" firestore:"data"`
}
type ConnectRequest_Close struct {
	Close *Close `protobuf:"bytes,5,opt,name=close,proto3,oneof" firestore:"close"`
}
type ConnectRequest_Error struct {
	Error *Error `protobuf:"bytes,6,opt,name=error,proto3,oneof" firestore:"error"`
}
type ConnectRequest_Ping struct {
	Ping *Ping `protobuf:"bytes,7,opt,name=ping,proto3,oneof" firestore:"ping"`
}

func (*ConnectRequest_OpenRequest_) isConnectRequest_Message()   {}
func (*ConnectRequest_ResumeRequest_) isConnectRequest_Message() {}
func (*ConnectRequest_Ack) isConnectRequest_Message()            {}
func (*ConnectRequest_Data) isConnectRequest_Message()           {}
func (*ConnectRequest_Close) isConnectRequest_Message()          {}
func (*ConnectRequest_Error) isConnectRequest_Message()          {}
func (*ConnectRequest_Ping) isConnectRequest_Message()           {}
func (m *ConnectRequest) GetMessage() isConnectRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}
func (m *ConnectRequest) GetOpenRequest() *ConnectRequest_OpenRequest {
	if x, ok := m.GetMessage().(*ConnectRequest_OpenRequest_); ok {
		return x.OpenRequest
	}
	return nil
}
func (m *ConnectRequest) GetResumeRequest() *ConnectRequest_ResumeRequest {
	if x, ok := m.GetMessage().(*ConnectRequest_ResumeRequest_); ok {
		return x.ResumeRequest
	}
	return nil
}
func (m *ConnectRequest) GetAck() *Ack {
	if x, ok := m.GetMessage().(*ConnectRequest_Ack); ok {
		return x.Ack
	}
	return nil
}
func (m *ConnectRequest) GetData() *Data {
	if x, ok := m.GetMessage().(*ConnectRequest_Data); ok {
		return x.Data
	}
	return nil
}
func (m *ConnectRequest) GetClose() *Close {
	if x, ok := m.GetMessage().(*ConnectRequest_Close); ok {
		return x.Close
	}
	return nil
}
func (m *ConnectRequest) GetError() *Error {
	if x, ok := m.GetMessage().(*ConnectRequest_Error); ok {
		return x.Error
	}
	return nil
}
func (m *ConnectRequest) GetPing() *Ping {
	if x, ok := m.GetMessage().(*ConnectRequest_Ping); ok {
		return x.Ping
	}
	return nil
}
func (m *ConnectRequest) SetMessage(ofv isConnectRequest_Message) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isConnectRequest_Message", "ConnectRequest"))
	}
	m.Message = ofv
}
func (m *ConnectRequest) SetOpenRequest(fv *ConnectRequest_OpenRequest) {
	m.SetMessage(&ConnectRequest_OpenRequest_{OpenRequest: fv})
}
func (m *ConnectRequest) SetResumeRequest(fv *ConnectRequest_ResumeRequest) {
	m.SetMessage(&ConnectRequest_ResumeRequest_{ResumeRequest: fv})
}
func (m *ConnectRequest) SetAck(fv *Ack) {
	m.SetMessage(&ConnectRequest_Ack{Ack: fv})
}
func (m *ConnectRequest) SetData(fv *Data) {
	m.SetMessage(&ConnectRequest_Data{Data: fv})
}
func (m *ConnectRequest) SetClose(fv *Close) {
	m.SetMessage(&ConnectRequest_Close{Close: fv})
}
func (m *ConnectRequest) SetError(fv *Error) {
	m.SetMessage(&ConnectRequest_Error{Error: fv})
}
func (m *ConnectRequest) SetPing(fv *Ping) {
	m.SetMessage(&ConnectRequest_Ping{Ping: fv})
}

// Response message for method [Connect][ntt.proxies.v1alpha2.Connect]
type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Message:
	//	*ConnectResponse_OpenResponse_
	//	*ConnectResponse_ResumeResponse_
	//	*ConnectResponse_ChannelOpenError_
	//	*ConnectResponse_Ack
	//	*ConnectResponse_Data
	//	*ConnectResponse_Close
	//	*ConnectResponse_Error
	Message isConnectResponse_Message `protobuf_oneof:"message"`
}

func (m *ConnectResponse) Reset() {
	*m = ConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectResponse) ProtoMessage() {}

func (m *ConnectResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectResponse) GotenMessage() {}

// Deprecated, Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ConnectResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isConnectResponse_Message interface {
	isConnectResponse_Message()
}

type ConnectResponse_OpenResponse_ struct {
	// Notification from the agent (endpoint) to the channel has been opened.
	OpenResponse *ConnectResponse_OpenResponse `protobuf:"bytes,1,opt,name=open_response,json=openResponse,proto3,oneof" firestore:"openResponse"`
}
type ConnectResponse_ResumeResponse_ struct {
	ResumeResponse *ConnectResponse_ResumeResponse `protobuf:"bytes,2,opt,name=resume_response,json=resumeResponse,proto3,oneof" firestore:"resumeResponse"`
}
type ConnectResponse_ChannelOpenError_ struct {
	ChannelOpenError *ConnectResponse_ChannelOpenError `protobuf:"bytes,3,opt,name=channel_open_error,json=channelOpenError,proto3,oneof" firestore:"channelOpenError"`
}
type ConnectResponse_Ack struct {
	// ACK message
	Ack *Ack `protobuf:"bytes,4,opt,name=ack,proto3,oneof" firestore:"ack"`
}
type ConnectResponse_Data struct {
	// Any data from the device (endpoint) to the client.
	Data *Data `protobuf:"bytes,5,opt,name=data,proto3,oneof" firestore:"data"`
}
type ConnectResponse_Close struct {
	Close *Close `protobuf:"bytes,6,opt,name=close,proto3,oneof" firestore:"close"`
}
type ConnectResponse_Error struct {
	Error *Error `protobuf:"bytes,7,opt,name=error,proto3,oneof" firestore:"error"`
}

func (*ConnectResponse_OpenResponse_) isConnectResponse_Message()     {}
func (*ConnectResponse_ResumeResponse_) isConnectResponse_Message()   {}
func (*ConnectResponse_ChannelOpenError_) isConnectResponse_Message() {}
func (*ConnectResponse_Ack) isConnectResponse_Message()               {}
func (*ConnectResponse_Data) isConnectResponse_Message()              {}
func (*ConnectResponse_Close) isConnectResponse_Message()             {}
func (*ConnectResponse_Error) isConnectResponse_Message()             {}
func (m *ConnectResponse) GetMessage() isConnectResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}
func (m *ConnectResponse) GetOpenResponse() *ConnectResponse_OpenResponse {
	if x, ok := m.GetMessage().(*ConnectResponse_OpenResponse_); ok {
		return x.OpenResponse
	}
	return nil
}
func (m *ConnectResponse) GetResumeResponse() *ConnectResponse_ResumeResponse {
	if x, ok := m.GetMessage().(*ConnectResponse_ResumeResponse_); ok {
		return x.ResumeResponse
	}
	return nil
}
func (m *ConnectResponse) GetChannelOpenError() *ConnectResponse_ChannelOpenError {
	if x, ok := m.GetMessage().(*ConnectResponse_ChannelOpenError_); ok {
		return x.ChannelOpenError
	}
	return nil
}
func (m *ConnectResponse) GetAck() *Ack {
	if x, ok := m.GetMessage().(*ConnectResponse_Ack); ok {
		return x.Ack
	}
	return nil
}
func (m *ConnectResponse) GetData() *Data {
	if x, ok := m.GetMessage().(*ConnectResponse_Data); ok {
		return x.Data
	}
	return nil
}
func (m *ConnectResponse) GetClose() *Close {
	if x, ok := m.GetMessage().(*ConnectResponse_Close); ok {
		return x.Close
	}
	return nil
}
func (m *ConnectResponse) GetError() *Error {
	if x, ok := m.GetMessage().(*ConnectResponse_Error); ok {
		return x.Error
	}
	return nil
}
func (m *ConnectResponse) SetMessage(ofv isConnectResponse_Message) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isConnectResponse_Message", "ConnectResponse"))
	}
	m.Message = ofv
}
func (m *ConnectResponse) SetOpenResponse(fv *ConnectResponse_OpenResponse) {
	m.SetMessage(&ConnectResponse_OpenResponse_{OpenResponse: fv})
}
func (m *ConnectResponse) SetResumeResponse(fv *ConnectResponse_ResumeResponse) {
	m.SetMessage(&ConnectResponse_ResumeResponse_{ResumeResponse: fv})
}
func (m *ConnectResponse) SetChannelOpenError(fv *ConnectResponse_ChannelOpenError) {
	m.SetMessage(&ConnectResponse_ChannelOpenError_{ChannelOpenError: fv})
}
func (m *ConnectResponse) SetAck(fv *Ack) {
	m.SetMessage(&ConnectResponse_Ack{Ack: fv})
}
func (m *ConnectResponse) SetData(fv *Data) {
	m.SetMessage(&ConnectResponse_Data{Data: fv})
}
func (m *ConnectResponse) SetClose(fv *Close) {
	m.SetMessage(&ConnectResponse_Close{Close: fv})
}
func (m *ConnectResponse) SetError(fv *Error) {
	m.SetMessage(&ConnectResponse_Error{Error: fv})
}

// Request message for method [Listen][ntt.proxies.v1alpha2.Listen]
type ListenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Message:
	//	*ListenRequest_OpenRequest_
	//	*ListenRequest_ResumeRequest_
	//	*ListenRequest_ChannelOpenError_
	//	*ListenRequest_Ping
	Message isListenRequest_Message `protobuf_oneof:"message"`
}

func (m *ListenRequest) Reset() {
	*m = ListenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenRequest) ProtoMessage() {}

func (m *ListenRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenRequest) GotenMessage() {}

// Deprecated, Use ListenRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{2}
}

func (m *ListenRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isListenRequest_Message interface {
	isListenRequest_Message()
}

type ListenRequest_OpenRequest_ struct {
	// This is a hello message from the agent with its name.
	OpenRequest *ListenRequest_OpenRequest `protobuf:"bytes,1,opt,name=open_request,json=openRequest,proto3,oneof" firestore:"openRequest"`
}
type ListenRequest_ResumeRequest_ struct {
	ResumeRequest *ListenRequest_ResumeRequest `protobuf:"bytes,2,opt,name=resume_request,json=resumeRequest,proto3,oneof" firestore:"resumeRequest"`
}
type ListenRequest_ChannelOpenError_ struct {
	// When the agent failed to open a requested channel, this message will be
	// sent from the agent to the endpoint.
	ChannelOpenError *ListenRequest_ChannelOpenError `protobuf:"bytes,3,opt,name=channel_open_error,json=channelOpenError,proto3,oneof" firestore:"channelOpenError"`
}
type ListenRequest_Ping struct {
	Ping *Ping `protobuf:"bytes,4,opt,name=ping,proto3,oneof" firestore:"ping"`
}

func (*ListenRequest_OpenRequest_) isListenRequest_Message()      {}
func (*ListenRequest_ResumeRequest_) isListenRequest_Message()    {}
func (*ListenRequest_ChannelOpenError_) isListenRequest_Message() {}
func (*ListenRequest_Ping) isListenRequest_Message()              {}
func (m *ListenRequest) GetMessage() isListenRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}
func (m *ListenRequest) GetOpenRequest() *ListenRequest_OpenRequest {
	if x, ok := m.GetMessage().(*ListenRequest_OpenRequest_); ok {
		return x.OpenRequest
	}
	return nil
}
func (m *ListenRequest) GetResumeRequest() *ListenRequest_ResumeRequest {
	if x, ok := m.GetMessage().(*ListenRequest_ResumeRequest_); ok {
		return x.ResumeRequest
	}
	return nil
}
func (m *ListenRequest) GetChannelOpenError() *ListenRequest_ChannelOpenError {
	if x, ok := m.GetMessage().(*ListenRequest_ChannelOpenError_); ok {
		return x.ChannelOpenError
	}
	return nil
}
func (m *ListenRequest) GetPing() *Ping {
	if x, ok := m.GetMessage().(*ListenRequest_Ping); ok {
		return x.Ping
	}
	return nil
}
func (m *ListenRequest) SetMessage(ofv isListenRequest_Message) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isListenRequest_Message", "ListenRequest"))
	}
	m.Message = ofv
}
func (m *ListenRequest) SetOpenRequest(fv *ListenRequest_OpenRequest) {
	m.SetMessage(&ListenRequest_OpenRequest_{OpenRequest: fv})
}
func (m *ListenRequest) SetResumeRequest(fv *ListenRequest_ResumeRequest) {
	m.SetMessage(&ListenRequest_ResumeRequest_{ResumeRequest: fv})
}
func (m *ListenRequest) SetChannelOpenError(fv *ListenRequest_ChannelOpenError) {
	m.SetMessage(&ListenRequest_ChannelOpenError_{ChannelOpenError: fv})
}
func (m *ListenRequest) SetPing(fv *Ping) {
	m.SetMessage(&ListenRequest_Ping{Ping: fv})
}

// Response message for method [Listen][ntt.proxies.v1alpha2.Listen]
type ListenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Message:
	//	*ListenResponse_Listening_
	//	*ListenResponse_OpenChannelResponse_
	//	*ListenResponse_ResumeChannelResponse_
	Message isListenResponse_Message `protobuf_oneof:"message"`
}

func (m *ListenResponse) Reset() {
	*m = ListenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenResponse) ProtoMessage() {}

func (m *ListenResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenResponse) GotenMessage() {}

// Deprecated, Use ListenResponse.ProtoReflect.Descriptor instead.
func (*ListenResponse) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{3}
}

func (m *ListenResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isListenResponse_Message interface {
	isListenResponse_Message()
}

type ListenResponse_Listening_ struct {
	Listening *ListenResponse_Listening `protobuf:"bytes,1,opt,name=listening,proto3,oneof" firestore:"listening"`
}
type ListenResponse_OpenChannelResponse_ struct {
	// Notifies a new channel has been requested by a client.
	OpenChannelResponse *ListenResponse_OpenChannelResponse `protobuf:"bytes,2,opt,name=open_channel_response,json=openChannelResponse,proto3,oneof" firestore:"openChannelResponse"`
}
type ListenResponse_ResumeChannelResponse_ struct {
	// Notifies a channel was asked to be resumed by a client
	ResumeChannelResponse *ListenResponse_ResumeChannelResponse `protobuf:"bytes,3,opt,name=resume_channel_response,json=resumeChannelResponse,proto3,oneof" firestore:"resumeChannelResponse"`
}

func (*ListenResponse_Listening_) isListenResponse_Message()             {}
func (*ListenResponse_OpenChannelResponse_) isListenResponse_Message()   {}
func (*ListenResponse_ResumeChannelResponse_) isListenResponse_Message() {}
func (m *ListenResponse) GetMessage() isListenResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}
func (m *ListenResponse) GetListening() *ListenResponse_Listening {
	if x, ok := m.GetMessage().(*ListenResponse_Listening_); ok {
		return x.Listening
	}
	return nil
}
func (m *ListenResponse) GetOpenChannelResponse() *ListenResponse_OpenChannelResponse {
	if x, ok := m.GetMessage().(*ListenResponse_OpenChannelResponse_); ok {
		return x.OpenChannelResponse
	}
	return nil
}
func (m *ListenResponse) GetResumeChannelResponse() *ListenResponse_ResumeChannelResponse {
	if x, ok := m.GetMessage().(*ListenResponse_ResumeChannelResponse_); ok {
		return x.ResumeChannelResponse
	}
	return nil
}
func (m *ListenResponse) SetMessage(ofv isListenResponse_Message) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isListenResponse_Message", "ListenResponse"))
	}
	m.Message = ofv
}
func (m *ListenResponse) SetListening(fv *ListenResponse_Listening) {
	m.SetMessage(&ListenResponse_Listening_{Listening: fv})
}
func (m *ListenResponse) SetOpenChannelResponse(fv *ListenResponse_OpenChannelResponse) {
	m.SetMessage(&ListenResponse_OpenChannelResponse_{OpenChannelResponse: fv})
}
func (m *ListenResponse) SetResumeChannelResponse(fv *ListenResponse_ResumeChannelResponse) {
	m.SetMessage(&ListenResponse_ResumeChannelResponse_{ResumeChannelResponse: fv})
}

// Request message for method [Accept][ntt.proxies.v1alpha2.Accept]
type AcceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Message:
	//	*AcceptRequest_OpenRequest_
	//	*AcceptRequest_ResumeRequest_
	//	*AcceptRequest_Data
	//	*AcceptRequest_Ack
	//	*AcceptRequest_Close
	//	*AcceptRequest_Error
	//	*AcceptRequest_Ping
	Message isAcceptRequest_Message `protobuf_oneof:"message"`
}

func (m *AcceptRequest) Reset() {
	*m = AcceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AcceptRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AcceptRequest) ProtoMessage() {}

func (m *AcceptRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AcceptRequest) GotenMessage() {}

// Deprecated, Use AcceptRequest.ProtoReflect.Descriptor instead.
func (*AcceptRequest) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{4}
}

func (m *AcceptRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AcceptRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AcceptRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AcceptRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isAcceptRequest_Message interface {
	isAcceptRequest_Message()
}

type AcceptRequest_OpenRequest_ struct {
	// Registers a new socket on the endpoint.
	OpenRequest *AcceptRequest_OpenRequest `protobuf:"bytes,1,opt,name=open_request,json=openRequest,proto3,oneof" firestore:"openRequest"`
}
type AcceptRequest_ResumeRequest_ struct {
	ResumeRequest *AcceptRequest_ResumeRequest `protobuf:"bytes,2,opt,name=resume_request,json=resumeRequest,proto3,oneof" firestore:"resumeRequest"`
}
type AcceptRequest_Data struct {
	// Data from the agent to the endpoint (client).
	Data *Data `protobuf:"bytes,3,opt,name=data,proto3,oneof" firestore:"data"`
}
type AcceptRequest_Ack struct {
	// ACK message
	Ack *Ack `protobuf:"bytes,4,opt,name=ack,proto3,oneof" firestore:"ack"`
}
type AcceptRequest_Close struct {
	Close *Close `protobuf:"bytes,5,opt,name=close,proto3,oneof" firestore:"close"`
}
type AcceptRequest_Error struct {
	Error *Error `protobuf:"bytes,6,opt,name=error,proto3,oneof" firestore:"error"`
}
type AcceptRequest_Ping struct {
	Ping *Ping `protobuf:"bytes,7,opt,name=ping,proto3,oneof" firestore:"ping"`
}

func (*AcceptRequest_OpenRequest_) isAcceptRequest_Message()   {}
func (*AcceptRequest_ResumeRequest_) isAcceptRequest_Message() {}
func (*AcceptRequest_Data) isAcceptRequest_Message()           {}
func (*AcceptRequest_Ack) isAcceptRequest_Message()            {}
func (*AcceptRequest_Close) isAcceptRequest_Message()          {}
func (*AcceptRequest_Error) isAcceptRequest_Message()          {}
func (*AcceptRequest_Ping) isAcceptRequest_Message()           {}
func (m *AcceptRequest) GetMessage() isAcceptRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}
func (m *AcceptRequest) GetOpenRequest() *AcceptRequest_OpenRequest {
	if x, ok := m.GetMessage().(*AcceptRequest_OpenRequest_); ok {
		return x.OpenRequest
	}
	return nil
}
func (m *AcceptRequest) GetResumeRequest() *AcceptRequest_ResumeRequest {
	if x, ok := m.GetMessage().(*AcceptRequest_ResumeRequest_); ok {
		return x.ResumeRequest
	}
	return nil
}
func (m *AcceptRequest) GetData() *Data {
	if x, ok := m.GetMessage().(*AcceptRequest_Data); ok {
		return x.Data
	}
	return nil
}
func (m *AcceptRequest) GetAck() *Ack {
	if x, ok := m.GetMessage().(*AcceptRequest_Ack); ok {
		return x.Ack
	}
	return nil
}
func (m *AcceptRequest) GetClose() *Close {
	if x, ok := m.GetMessage().(*AcceptRequest_Close); ok {
		return x.Close
	}
	return nil
}
func (m *AcceptRequest) GetError() *Error {
	if x, ok := m.GetMessage().(*AcceptRequest_Error); ok {
		return x.Error
	}
	return nil
}
func (m *AcceptRequest) GetPing() *Ping {
	if x, ok := m.GetMessage().(*AcceptRequest_Ping); ok {
		return x.Ping
	}
	return nil
}
func (m *AcceptRequest) SetMessage(ofv isAcceptRequest_Message) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isAcceptRequest_Message", "AcceptRequest"))
	}
	m.Message = ofv
}
func (m *AcceptRequest) SetOpenRequest(fv *AcceptRequest_OpenRequest) {
	m.SetMessage(&AcceptRequest_OpenRequest_{OpenRequest: fv})
}
func (m *AcceptRequest) SetResumeRequest(fv *AcceptRequest_ResumeRequest) {
	m.SetMessage(&AcceptRequest_ResumeRequest_{ResumeRequest: fv})
}
func (m *AcceptRequest) SetData(fv *Data) {
	m.SetMessage(&AcceptRequest_Data{Data: fv})
}
func (m *AcceptRequest) SetAck(fv *Ack) {
	m.SetMessage(&AcceptRequest_Ack{Ack: fv})
}
func (m *AcceptRequest) SetClose(fv *Close) {
	m.SetMessage(&AcceptRequest_Close{Close: fv})
}
func (m *AcceptRequest) SetError(fv *Error) {
	m.SetMessage(&AcceptRequest_Error{Error: fv})
}
func (m *AcceptRequest) SetPing(fv *Ping) {
	m.SetMessage(&AcceptRequest_Ping{Ping: fv})
}

// Response message for method [Accept][ntt.proxies.v1alpha2.Accept]
type AcceptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Message:
	//	*AcceptResponse_Data
	//	*AcceptResponse_Ack
	//	*AcceptResponse_Close
	//	*AcceptResponse_Error
	Message isAcceptResponse_Message `protobuf_oneof:"message"`
}

func (m *AcceptResponse) Reset() {
	*m = AcceptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AcceptResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AcceptResponse) ProtoMessage() {}

func (m *AcceptResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AcceptResponse) GotenMessage() {}

// Deprecated, Use AcceptResponse.ProtoReflect.Descriptor instead.
func (*AcceptResponse) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{5}
}

func (m *AcceptResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AcceptResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AcceptResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AcceptResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isAcceptResponse_Message interface {
	isAcceptResponse_Message()
}

type AcceptResponse_Data struct {
	// Data from the endpoint (client) to the agent.
	Data *Data `protobuf:"bytes,1,opt,name=data,proto3,oneof" firestore:"data"`
}
type AcceptResponse_Ack struct {
	// ACK message
	Ack *Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof" firestore:"ack"`
}
type AcceptResponse_Close struct {
	Close *Close `protobuf:"bytes,3,opt,name=close,proto3,oneof" firestore:"close"`
}
type AcceptResponse_Error struct {
	Error *Error `protobuf:"bytes,4,opt,name=error,proto3,oneof" firestore:"error"`
}

func (*AcceptResponse_Data) isAcceptResponse_Message()  {}
func (*AcceptResponse_Ack) isAcceptResponse_Message()   {}
func (*AcceptResponse_Close) isAcceptResponse_Message() {}
func (*AcceptResponse_Error) isAcceptResponse_Message() {}
func (m *AcceptResponse) GetMessage() isAcceptResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}
func (m *AcceptResponse) GetData() *Data {
	if x, ok := m.GetMessage().(*AcceptResponse_Data); ok {
		return x.Data
	}
	return nil
}
func (m *AcceptResponse) GetAck() *Ack {
	if x, ok := m.GetMessage().(*AcceptResponse_Ack); ok {
		return x.Ack
	}
	return nil
}
func (m *AcceptResponse) GetClose() *Close {
	if x, ok := m.GetMessage().(*AcceptResponse_Close); ok {
		return x.Close
	}
	return nil
}
func (m *AcceptResponse) GetError() *Error {
	if x, ok := m.GetMessage().(*AcceptResponse_Error); ok {
		return x.Error
	}
	return nil
}
func (m *AcceptResponse) SetMessage(ofv isAcceptResponse_Message) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isAcceptResponse_Message", "AcceptResponse"))
	}
	m.Message = ofv
}
func (m *AcceptResponse) SetData(fv *Data) {
	m.SetMessage(&AcceptResponse_Data{Data: fv})
}
func (m *AcceptResponse) SetAck(fv *Ack) {
	m.SetMessage(&AcceptResponse_Ack{Ack: fv})
}
func (m *AcceptResponse) SetClose(fv *Close) {
	m.SetMessage(&AcceptResponse_Close{Close: fv})
}
func (m *AcceptResponse) SetError(fv *Error) {
	m.SetMessage(&AcceptResponse_Error{Error: fv})
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *Ping) Reset() {
	*m = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Ping) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Ping) ProtoMessage() {}

func (m *Ping) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Ping) GotenMessage() {}

// Deprecated, Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{6}
}

func (m *Ping) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Ping) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Ping) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Ping) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id"`
	Bytes         []byte `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty" firestore:"bytes"`
	AckRequired   bool   `protobuf:"varint,3,opt,name=ack_required,json=ackRequired,proto3" json:"ack_required,omitempty" firestore:"ackRequired"`
}

func (m *Data) Reset() {
	*m = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Data) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Data) ProtoMessage() {}

func (m *Data) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Data) GotenMessage() {}

// Deprecated, Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{7}
}

func (m *Data) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Data) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Data) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Data) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Data) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return uint64(0)
}

func (m *Data) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *Data) GetAckRequired() bool {
	if m != nil {
		return m.AckRequired
	}
	return false
}

func (m *Data) SetId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Id", "Data"))
	}
	m.Id = fv
}

func (m *Data) SetBytes(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bytes", "Data"))
	}
	m.Bytes = fv
}

func (m *Data) SetAckRequired(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AckRequired", "Data"))
	}
	m.AckRequired = fv
}

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id"`
}

func (m *Ack) Reset() {
	*m = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Ack) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Ack) ProtoMessage() {}

func (m *Ack) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Ack) GotenMessage() {}

// Deprecated, Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{8}
}

func (m *Ack) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Ack) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Ack) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Ack) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Ack) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return uint64(0)
}

func (m *Ack) SetId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Id", "Ack"))
	}
	m.Id = fv
}

type Close struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id"`
}

func (m *Close) Reset() {
	*m = Close{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Close) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Close) ProtoMessage() {}

func (m *Close) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Close) GotenMessage() {}

// Deprecated, Use Close.ProtoReflect.Descriptor instead.
func (*Close) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{9}
}

func (m *Close) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Close) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Close) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Close) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Close) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return uint64(0)
}

func (m *Close) SetId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Id", "Close"))
	}
	m.Id = fv
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" firestore:"message"`
}

func (m *Error) Reset() {
	*m = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Error) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Error) ProtoMessage() {}

func (m *Error) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Error) GotenMessage() {}

// Deprecated, Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{10}
}

func (m *Error) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Error) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Error) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Error) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Error) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return uint64(0)
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) SetId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Id", "Error"))
	}
	m.Id = fv
}

func (m *Error) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "Error"))
	}
	m.Message = fv
}

type ConnectRequest_OpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Project       *project.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=project,proto3" json:"project,omitempty" firestore:"project"`
	RegionId      string             `protobuf:"bytes,6,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
	Name          string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// name to connect.
	ProviderName string `protobuf:"bytes,3,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty" firestore:"providerName"`
	// Device service
	Service string `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty" firestore:"service"`
	// Initial argument (optional)
	Arg []byte `protobuf:"bytes,5,opt,name=arg,proto3" json:"arg,omitempty" firestore:"arg"`
}

func (m *ConnectRequest_OpenRequest) Reset() {
	*m = ConnectRequest_OpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectRequest_OpenRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectRequest_OpenRequest) ProtoMessage() {}

func (m *ConnectRequest_OpenRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectRequest_OpenRequest) GotenMessage() {}

// Deprecated, Use ConnectRequest_OpenRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest_OpenRequest) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ConnectRequest_OpenRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectRequest_OpenRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectRequest_OpenRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectRequest_OpenRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ConnectRequest_OpenRequest) GetProject() *project.Reference {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *ConnectRequest_OpenRequest) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *ConnectRequest_OpenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConnectRequest_OpenRequest) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *ConnectRequest_OpenRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ConnectRequest_OpenRequest) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *ConnectRequest_OpenRequest) SetProject(fv *project.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Project", "ConnectRequest_OpenRequest"))
	}
	m.Project = fv
}

func (m *ConnectRequest_OpenRequest) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "ConnectRequest_OpenRequest"))
	}
	m.RegionId = fv
}

func (m *ConnectRequest_OpenRequest) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ConnectRequest_OpenRequest"))
	}
	m.Name = fv
}

func (m *ConnectRequest_OpenRequest) SetProviderName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProviderName", "ConnectRequest_OpenRequest"))
	}
	m.ProviderName = fv
}

func (m *ConnectRequest_OpenRequest) SetService(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "ConnectRequest_OpenRequest"))
	}
	m.Service = fv
}

func (m *ConnectRequest_OpenRequest) SetArg(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Arg", "ConnectRequest_OpenRequest"))
	}
	m.Arg = fv
}

type ConnectRequest_ResumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Project       *project.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=project,proto3" json:"project,omitempty" firestore:"project"`
	RegionId      string             `protobuf:"bytes,7,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
	Name          string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// name to connect.
	ProviderName  string `protobuf:"bytes,3,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty" firestore:"providerName"`
	SessionId     uint64 `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" firestore:"sessionId"`
	ChannelId     uint64 `protobuf:"varint,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" firestore:"channelId"`
	LastMessageId uint64 `protobuf:"varint,6,opt,name=last_message_id,json=lastMessageId,proto3" json:"last_message_id,omitempty" firestore:"lastMessageId"`
}

func (m *ConnectRequest_ResumeRequest) Reset() {
	*m = ConnectRequest_ResumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectRequest_ResumeRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectRequest_ResumeRequest) ProtoMessage() {}

func (m *ConnectRequest_ResumeRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectRequest_ResumeRequest) GotenMessage() {}

// Deprecated, Use ConnectRequest_ResumeRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest_ResumeRequest) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ConnectRequest_ResumeRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectRequest_ResumeRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectRequest_ResumeRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectRequest_ResumeRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ConnectRequest_ResumeRequest) GetProject() *project.Reference {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *ConnectRequest_ResumeRequest) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *ConnectRequest_ResumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConnectRequest_ResumeRequest) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *ConnectRequest_ResumeRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return uint64(0)
}

func (m *ConnectRequest_ResumeRequest) GetChannelId() uint64 {
	if m != nil {
		return m.ChannelId
	}
	return uint64(0)
}

func (m *ConnectRequest_ResumeRequest) GetLastMessageId() uint64 {
	if m != nil {
		return m.LastMessageId
	}
	return uint64(0)
}

func (m *ConnectRequest_ResumeRequest) SetProject(fv *project.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Project", "ConnectRequest_ResumeRequest"))
	}
	m.Project = fv
}

func (m *ConnectRequest_ResumeRequest) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "ConnectRequest_ResumeRequest"))
	}
	m.RegionId = fv
}

func (m *ConnectRequest_ResumeRequest) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ConnectRequest_ResumeRequest"))
	}
	m.Name = fv
}

func (m *ConnectRequest_ResumeRequest) SetProviderName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProviderName", "ConnectRequest_ResumeRequest"))
	}
	m.ProviderName = fv
}

func (m *ConnectRequest_ResumeRequest) SetSessionId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SessionId", "ConnectRequest_ResumeRequest"))
	}
	m.SessionId = fv
}

func (m *ConnectRequest_ResumeRequest) SetChannelId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChannelId", "ConnectRequest_ResumeRequest"))
	}
	m.ChannelId = fv
}

func (m *ConnectRequest_ResumeRequest) SetLastMessageId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastMessageId", "ConnectRequest_ResumeRequest"))
	}
	m.LastMessageId = fv
}

type ConnectResponse_OpenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	SessionId     uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" firestore:"sessionId"`
	ChannelId     uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" firestore:"channelId"`
}

func (m *ConnectResponse_OpenResponse) Reset() {
	*m = ConnectResponse_OpenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectResponse_OpenResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectResponse_OpenResponse) ProtoMessage() {}

func (m *ConnectResponse_OpenResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectResponse_OpenResponse) GotenMessage() {}

// Deprecated, Use ConnectResponse_OpenResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse_OpenResponse) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{1, 0}
}

func (m *ConnectResponse_OpenResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectResponse_OpenResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectResponse_OpenResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectResponse_OpenResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ConnectResponse_OpenResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return uint64(0)
}

func (m *ConnectResponse_OpenResponse) GetChannelId() uint64 {
	if m != nil {
		return m.ChannelId
	}
	return uint64(0)
}

func (m *ConnectResponse_OpenResponse) SetSessionId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SessionId", "ConnectResponse_OpenResponse"))
	}
	m.SessionId = fv
}

func (m *ConnectResponse_OpenResponse) SetChannelId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChannelId", "ConnectResponse_OpenResponse"))
	}
	m.ChannelId = fv
}

type ConnectResponse_ResumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	SessionId     uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" firestore:"sessionId"`
	ChannelId     uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" firestore:"channelId"`
	LastMessageId uint64 `protobuf:"varint,4,opt,name=last_message_id,json=lastMessageId,proto3" json:"last_message_id,omitempty" firestore:"lastMessageId"`
}

func (m *ConnectResponse_ResumeResponse) Reset() {
	*m = ConnectResponse_ResumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectResponse_ResumeResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectResponse_ResumeResponse) ProtoMessage() {}

func (m *ConnectResponse_ResumeResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectResponse_ResumeResponse) GotenMessage() {}

// Deprecated, Use ConnectResponse_ResumeResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse_ResumeResponse) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{1, 1}
}

func (m *ConnectResponse_ResumeResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectResponse_ResumeResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectResponse_ResumeResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectResponse_ResumeResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ConnectResponse_ResumeResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return uint64(0)
}

func (m *ConnectResponse_ResumeResponse) GetChannelId() uint64 {
	if m != nil {
		return m.ChannelId
	}
	return uint64(0)
}

func (m *ConnectResponse_ResumeResponse) GetLastMessageId() uint64 {
	if m != nil {
		return m.LastMessageId
	}
	return uint64(0)
}

func (m *ConnectResponse_ResumeResponse) SetSessionId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SessionId", "ConnectResponse_ResumeResponse"))
	}
	m.SessionId = fv
}

func (m *ConnectResponse_ResumeResponse) SetChannelId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChannelId", "ConnectResponse_ResumeResponse"))
	}
	m.ChannelId = fv
}

func (m *ConnectResponse_ResumeResponse) SetLastMessageId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastMessageId", "ConnectResponse_ResumeResponse"))
	}
	m.LastMessageId = fv
}

type ConnectResponse_ChannelOpenError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// ID of the channel failed to open.
	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" firestore:"channelId"`
	// Error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" firestore:"message"`
}

func (m *ConnectResponse_ChannelOpenError) Reset() {
	*m = ConnectResponse_ChannelOpenError{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectResponse_ChannelOpenError) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectResponse_ChannelOpenError) ProtoMessage() {}

func (m *ConnectResponse_ChannelOpenError) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectResponse_ChannelOpenError) GotenMessage() {}

// Deprecated, Use ConnectResponse_ChannelOpenError.ProtoReflect.Descriptor instead.
func (*ConnectResponse_ChannelOpenError) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{1, 2}
}

func (m *ConnectResponse_ChannelOpenError) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectResponse_ChannelOpenError) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectResponse_ChannelOpenError) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectResponse_ChannelOpenError) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ConnectResponse_ChannelOpenError) GetChannelId() uint64 {
	if m != nil {
		return m.ChannelId
	}
	return uint64(0)
}

func (m *ConnectResponse_ChannelOpenError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ConnectResponse_ChannelOpenError) SetChannelId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChannelId", "ConnectResponse_ChannelOpenError"))
	}
	m.ChannelId = fv
}

func (m *ConnectResponse_ChannelOpenError) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "ConnectResponse_ChannelOpenError"))
	}
	m.Message = fv
}

type ListenRequest_OpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Project       *project.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=project,proto3" json:"project,omitempty" firestore:"project"`
	RegionId      string             `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
	// The self-declared device name, used for authentication/authorization.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *ListenRequest_OpenRequest) Reset() {
	*m = ListenRequest_OpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenRequest_OpenRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenRequest_OpenRequest) ProtoMessage() {}

func (m *ListenRequest_OpenRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenRequest_OpenRequest) GotenMessage() {}

// Deprecated, Use ListenRequest_OpenRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest_OpenRequest) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{2, 0}
}

func (m *ListenRequest_OpenRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenRequest_OpenRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenRequest_OpenRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenRequest_OpenRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListenRequest_OpenRequest) GetProject() *project.Reference {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *ListenRequest_OpenRequest) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *ListenRequest_OpenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListenRequest_OpenRequest) SetProject(fv *project.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Project", "ListenRequest_OpenRequest"))
	}
	m.Project = fv
}

func (m *ListenRequest_OpenRequest) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "ListenRequest_OpenRequest"))
	}
	m.RegionId = fv
}

func (m *ListenRequest_OpenRequest) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ListenRequest_OpenRequest"))
	}
	m.Name = fv
}

type ListenRequest_ResumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Project       *project.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=project,proto3" json:"project,omitempty" firestore:"project"`
	RegionId      string             `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
	// The self-declared device name, used for authentication/authorization.
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	SessionId uint64 `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" firestore:"sessionId"`
}

func (m *ListenRequest_ResumeRequest) Reset() {
	*m = ListenRequest_ResumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenRequest_ResumeRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenRequest_ResumeRequest) ProtoMessage() {}

func (m *ListenRequest_ResumeRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenRequest_ResumeRequest) GotenMessage() {}

// Deprecated, Use ListenRequest_ResumeRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest_ResumeRequest) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{2, 1}
}

func (m *ListenRequest_ResumeRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenRequest_ResumeRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenRequest_ResumeRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenRequest_ResumeRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListenRequest_ResumeRequest) GetProject() *project.Reference {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *ListenRequest_ResumeRequest) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *ListenRequest_ResumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListenRequest_ResumeRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return uint64(0)
}

func (m *ListenRequest_ResumeRequest) SetProject(fv *project.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Project", "ListenRequest_ResumeRequest"))
	}
	m.Project = fv
}

func (m *ListenRequest_ResumeRequest) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "ListenRequest_ResumeRequest"))
	}
	m.RegionId = fv
}

func (m *ListenRequest_ResumeRequest) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ListenRequest_ResumeRequest"))
	}
	m.Name = fv
}

func (m *ListenRequest_ResumeRequest) SetSessionId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SessionId", "ListenRequest_ResumeRequest"))
	}
	m.SessionId = fv
}

type ListenRequest_ChannelOpenError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// ID of the channel failed to open.
	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" firestore:"channelId"`
	// Error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" firestore:"message"`
}

func (m *ListenRequest_ChannelOpenError) Reset() {
	*m = ListenRequest_ChannelOpenError{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenRequest_ChannelOpenError) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenRequest_ChannelOpenError) ProtoMessage() {}

func (m *ListenRequest_ChannelOpenError) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenRequest_ChannelOpenError) GotenMessage() {}

// Deprecated, Use ListenRequest_ChannelOpenError.ProtoReflect.Descriptor instead.
func (*ListenRequest_ChannelOpenError) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{2, 2}
}

func (m *ListenRequest_ChannelOpenError) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenRequest_ChannelOpenError) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenRequest_ChannelOpenError) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenRequest_ChannelOpenError) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListenRequest_ChannelOpenError) GetChannelId() uint64 {
	if m != nil {
		return m.ChannelId
	}
	return uint64(0)
}

func (m *ListenRequest_ChannelOpenError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ListenRequest_ChannelOpenError) SetChannelId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChannelId", "ListenRequest_ChannelOpenError"))
	}
	m.ChannelId = fv
}

func (m *ListenRequest_ChannelOpenError) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "ListenRequest_ChannelOpenError"))
	}
	m.Message = fv
}

type ListenResponse_Listening struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	SessionId     uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" firestore:"sessionId"`
}

func (m *ListenResponse_Listening) Reset() {
	*m = ListenResponse_Listening{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenResponse_Listening) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenResponse_Listening) ProtoMessage() {}

func (m *ListenResponse_Listening) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenResponse_Listening) GotenMessage() {}

// Deprecated, Use ListenResponse_Listening.ProtoReflect.Descriptor instead.
func (*ListenResponse_Listening) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{3, 0}
}

func (m *ListenResponse_Listening) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenResponse_Listening) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenResponse_Listening) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenResponse_Listening) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListenResponse_Listening) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return uint64(0)
}

func (m *ListenResponse_Listening) SetSessionId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SessionId", "ListenResponse_Listening"))
	}
	m.SessionId = fv
}

type ListenResponse_OpenChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Channel ID
	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" firestore:"channelId"`
	// Device service;
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty" firestore:"service"`
	// Initial argument (optional)
	Arg []byte `protobuf:"bytes,3,opt,name=arg,proto3" json:"arg,omitempty" firestore:"arg"`
}

func (m *ListenResponse_OpenChannelResponse) Reset() {
	*m = ListenResponse_OpenChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenResponse_OpenChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenResponse_OpenChannelResponse) ProtoMessage() {}

func (m *ListenResponse_OpenChannelResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenResponse_OpenChannelResponse) GotenMessage() {}

// Deprecated, Use ListenResponse_OpenChannelResponse.ProtoReflect.Descriptor instead.
func (*ListenResponse_OpenChannelResponse) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{3, 1}
}

func (m *ListenResponse_OpenChannelResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenResponse_OpenChannelResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenResponse_OpenChannelResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenResponse_OpenChannelResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListenResponse_OpenChannelResponse) GetChannelId() uint64 {
	if m != nil {
		return m.ChannelId
	}
	return uint64(0)
}

func (m *ListenResponse_OpenChannelResponse) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ListenResponse_OpenChannelResponse) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *ListenResponse_OpenChannelResponse) SetChannelId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChannelId", "ListenResponse_OpenChannelResponse"))
	}
	m.ChannelId = fv
}

func (m *ListenResponse_OpenChannelResponse) SetService(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "ListenResponse_OpenChannelResponse"))
	}
	m.Service = fv
}

func (m *ListenResponse_OpenChannelResponse) SetArg(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Arg", "ListenResponse_OpenChannelResponse"))
	}
	m.Arg = fv
}

type ListenResponse_ResumeChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Channel ID
	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" firestore:"channelId"`
	// Device service;
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty" firestore:"service"`
	// Initial argument (optional)
	Arg           []byte `protobuf:"bytes,3,opt,name=arg,proto3" json:"arg,omitempty" firestore:"arg"`
	LastMessageId uint64 `protobuf:"varint,4,opt,name=last_message_id,json=lastMessageId,proto3" json:"last_message_id,omitempty" firestore:"lastMessageId"`
}

func (m *ListenResponse_ResumeChannelResponse) Reset() {
	*m = ListenResponse_ResumeChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenResponse_ResumeChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenResponse_ResumeChannelResponse) ProtoMessage() {}

func (m *ListenResponse_ResumeChannelResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenResponse_ResumeChannelResponse) GotenMessage() {}

// Deprecated, Use ListenResponse_ResumeChannelResponse.ProtoReflect.Descriptor instead.
func (*ListenResponse_ResumeChannelResponse) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{3, 2}
}

func (m *ListenResponse_ResumeChannelResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenResponse_ResumeChannelResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenResponse_ResumeChannelResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenResponse_ResumeChannelResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListenResponse_ResumeChannelResponse) GetChannelId() uint64 {
	if m != nil {
		return m.ChannelId
	}
	return uint64(0)
}

func (m *ListenResponse_ResumeChannelResponse) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ListenResponse_ResumeChannelResponse) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *ListenResponse_ResumeChannelResponse) GetLastMessageId() uint64 {
	if m != nil {
		return m.LastMessageId
	}
	return uint64(0)
}

func (m *ListenResponse_ResumeChannelResponse) SetChannelId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChannelId", "ListenResponse_ResumeChannelResponse"))
	}
	m.ChannelId = fv
}

func (m *ListenResponse_ResumeChannelResponse) SetService(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "ListenResponse_ResumeChannelResponse"))
	}
	m.Service = fv
}

func (m *ListenResponse_ResumeChannelResponse) SetArg(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Arg", "ListenResponse_ResumeChannelResponse"))
	}
	m.Arg = fv
}

func (m *ListenResponse_ResumeChannelResponse) SetLastMessageId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastMessageId", "ListenResponse_ResumeChannelResponse"))
	}
	m.LastMessageId = fv
}

type AcceptRequest_OpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Project       *project.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=project,proto3" json:"project,omitempty" firestore:"project"`
	RegionId      string             `protobuf:"bytes,5,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
	// Name, to be authenticated/authorized.
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	SessionId uint64 `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" firestore:"sessionId"`
	// Channel ID, requested by the endpoint in the ChannelRequested message.
	ChannelId uint64 `protobuf:"varint,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" firestore:"channelId"`
}

func (m *AcceptRequest_OpenRequest) Reset() {
	*m = AcceptRequest_OpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AcceptRequest_OpenRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AcceptRequest_OpenRequest) ProtoMessage() {}

func (m *AcceptRequest_OpenRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AcceptRequest_OpenRequest) GotenMessage() {}

// Deprecated, Use AcceptRequest_OpenRequest.ProtoReflect.Descriptor instead.
func (*AcceptRequest_OpenRequest) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{4, 0}
}

func (m *AcceptRequest_OpenRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AcceptRequest_OpenRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AcceptRequest_OpenRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AcceptRequest_OpenRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AcceptRequest_OpenRequest) GetProject() *project.Reference {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *AcceptRequest_OpenRequest) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *AcceptRequest_OpenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AcceptRequest_OpenRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return uint64(0)
}

func (m *AcceptRequest_OpenRequest) GetChannelId() uint64 {
	if m != nil {
		return m.ChannelId
	}
	return uint64(0)
}

func (m *AcceptRequest_OpenRequest) SetProject(fv *project.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Project", "AcceptRequest_OpenRequest"))
	}
	m.Project = fv
}

func (m *AcceptRequest_OpenRequest) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "AcceptRequest_OpenRequest"))
	}
	m.RegionId = fv
}

func (m *AcceptRequest_OpenRequest) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "AcceptRequest_OpenRequest"))
	}
	m.Name = fv
}

func (m *AcceptRequest_OpenRequest) SetSessionId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SessionId", "AcceptRequest_OpenRequest"))
	}
	m.SessionId = fv
}

func (m *AcceptRequest_OpenRequest) SetChannelId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChannelId", "AcceptRequest_OpenRequest"))
	}
	m.ChannelId = fv
}

type AcceptRequest_ResumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Project       *project.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=project,proto3" json:"project,omitempty" firestore:"project"`
	RegionId      string             `protobuf:"bytes,6,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
	// Name, to be authenticated/authorized.
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	SessionId uint64 `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" firestore:"sessionId"`
	// Channel ID, requested by the endpoint in the ChannelRequested message.
	ChannelId     uint64 `protobuf:"varint,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" firestore:"channelId"`
	LastMessageId uint64 `protobuf:"varint,5,opt,name=last_message_id,json=lastMessageId,proto3" json:"last_message_id,omitempty" firestore:"lastMessageId"`
}

func (m *AcceptRequest_ResumeRequest) Reset() {
	*m = AcceptRequest_ResumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AcceptRequest_ResumeRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AcceptRequest_ResumeRequest) ProtoMessage() {}

func (m *AcceptRequest_ResumeRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AcceptRequest_ResumeRequest) GotenMessage() {}

// Deprecated, Use AcceptRequest_ResumeRequest.ProtoReflect.Descriptor instead.
func (*AcceptRequest_ResumeRequest) Descriptor() ([]byte, []int) {
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP(), []int{4, 1}
}

func (m *AcceptRequest_ResumeRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AcceptRequest_ResumeRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AcceptRequest_ResumeRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AcceptRequest_ResumeRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AcceptRequest_ResumeRequest) GetProject() *project.Reference {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *AcceptRequest_ResumeRequest) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *AcceptRequest_ResumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AcceptRequest_ResumeRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return uint64(0)
}

func (m *AcceptRequest_ResumeRequest) GetChannelId() uint64 {
	if m != nil {
		return m.ChannelId
	}
	return uint64(0)
}

func (m *AcceptRequest_ResumeRequest) GetLastMessageId() uint64 {
	if m != nil {
		return m.LastMessageId
	}
	return uint64(0)
}

func (m *AcceptRequest_ResumeRequest) SetProject(fv *project.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Project", "AcceptRequest_ResumeRequest"))
	}
	m.Project = fv
}

func (m *AcceptRequest_ResumeRequest) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "AcceptRequest_ResumeRequest"))
	}
	m.RegionId = fv
}

func (m *AcceptRequest_ResumeRequest) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "AcceptRequest_ResumeRequest"))
	}
	m.Name = fv
}

func (m *AcceptRequest_ResumeRequest) SetSessionId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SessionId", "AcceptRequest_ResumeRequest"))
	}
	m.SessionId = fv
}

func (m *AcceptRequest_ResumeRequest) SetChannelId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChannelId", "AcceptRequest_ResumeRequest"))
	}
	m.ChannelId = fv
}

func (m *AcceptRequest_ResumeRequest) SetLastMessageId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastMessageId", "AcceptRequest_ResumeRequest"))
	}
	m.LastMessageId = fv
}

var edgelq_proxies_proto_v1alpha2_broker_custom_proto preflect.FileDescriptor

var edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDesc = []byte{
	0x0a, 0x31, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x07, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5b, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03,
	0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xba, 0x01, 0x0a, 0x0b, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b,
	0x12, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x61, 0x72, 0x67, 0x1a, 0xf6, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x12,
	0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x3a,
	0x6c, 0xc2, 0x85, 0x2c, 0x68, 0x32, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x16, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x3a, 0x1a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x3a,
	0x1c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9e, 0x06, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0d,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2d, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x4c, 0x0a, 0x0c, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x76, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x1a, 0x4b, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x85, 0x06, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a,
	0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x69, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x12, 0x09, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0x8a, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x12, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x4b, 0x0a,
	0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x5a, 0xc2, 0x85, 0x2c, 0x56,
	0x32, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x16, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x11,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xec, 0x04, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x6e, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x13, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x2a, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x60, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x72, 0x67, 0x1a, 0x8a, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xa3, 0x07, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e,
	0x67, 0x1a, 0xa7, 0x01, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x12, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0xd1, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xb2, 0xda, 0x21, 0x0b, 0x12, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x3a,
	0x5a, 0xc2, 0x85, 0x2c, 0x56, 0x32, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x16, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x3a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x03, 0x61,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x06, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x4f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x15, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x17, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0xce, 0x01, 0xe8, 0xde,
	0x21, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42,
	0x11, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x00, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x3b,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1,
	0x02, 0x4a, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x73, 0x12, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescOnce sync.Once
	edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescData = edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDesc
)

func edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescGZIP() []byte {
	edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescOnce.Do(func() {
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescData)
	})
	return edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDescData
}

var edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var edgelq_proxies_proto_v1alpha2_broker_custom_proto_goTypes = []interface{}{
	(*ConnectRequest)(nil),                       // 0: ntt.proxies.v1alpha2.ConnectRequest
	(*ConnectResponse)(nil),                      // 1: ntt.proxies.v1alpha2.ConnectResponse
	(*ListenRequest)(nil),                        // 2: ntt.proxies.v1alpha2.ListenRequest
	(*ListenResponse)(nil),                       // 3: ntt.proxies.v1alpha2.ListenResponse
	(*AcceptRequest)(nil),                        // 4: ntt.proxies.v1alpha2.AcceptRequest
	(*AcceptResponse)(nil),                       // 5: ntt.proxies.v1alpha2.AcceptResponse
	(*Ping)(nil),                                 // 6: ntt.proxies.v1alpha2.Ping
	(*Data)(nil),                                 // 7: ntt.proxies.v1alpha2.Data
	(*Ack)(nil),                                  // 8: ntt.proxies.v1alpha2.Ack
	(*Close)(nil),                                // 9: ntt.proxies.v1alpha2.Close
	(*Error)(nil),                                // 10: ntt.proxies.v1alpha2.Error
	(*ConnectRequest_OpenRequest)(nil),           // 11: ntt.proxies.v1alpha2.ConnectRequest.OpenRequest
	(*ConnectRequest_ResumeRequest)(nil),         // 12: ntt.proxies.v1alpha2.ConnectRequest.ResumeRequest
	(*ConnectResponse_OpenResponse)(nil),         // 13: ntt.proxies.v1alpha2.ConnectResponse.OpenResponse
	(*ConnectResponse_ResumeResponse)(nil),       // 14: ntt.proxies.v1alpha2.ConnectResponse.ResumeResponse
	(*ConnectResponse_ChannelOpenError)(nil),     // 15: ntt.proxies.v1alpha2.ConnectResponse.ChannelOpenError
	(*ListenRequest_OpenRequest)(nil),            // 16: ntt.proxies.v1alpha2.ListenRequest.OpenRequest
	(*ListenRequest_ResumeRequest)(nil),          // 17: ntt.proxies.v1alpha2.ListenRequest.ResumeRequest
	(*ListenRequest_ChannelOpenError)(nil),       // 18: ntt.proxies.v1alpha2.ListenRequest.ChannelOpenError
	(*ListenResponse_Listening)(nil),             // 19: ntt.proxies.v1alpha2.ListenResponse.Listening
	(*ListenResponse_OpenChannelResponse)(nil),   // 20: ntt.proxies.v1alpha2.ListenResponse.OpenChannelResponse
	(*ListenResponse_ResumeChannelResponse)(nil), // 21: ntt.proxies.v1alpha2.ListenResponse.ResumeChannelResponse
	(*AcceptRequest_OpenRequest)(nil),            // 22: ntt.proxies.v1alpha2.AcceptRequest.OpenRequest
	(*AcceptRequest_ResumeRequest)(nil),          // 23: ntt.proxies.v1alpha2.AcceptRequest.ResumeRequest
}
var edgelq_proxies_proto_v1alpha2_broker_custom_proto_depIdxs = []int32{
	11, // 0: ntt.proxies.v1alpha2.ConnectRequest.open_request:type_name -> ntt.proxies.v1alpha2.ConnectRequest.OpenRequest
	12, // 1: ntt.proxies.v1alpha2.ConnectRequest.resume_request:type_name -> ntt.proxies.v1alpha2.ConnectRequest.ResumeRequest
	8,  // 2: ntt.proxies.v1alpha2.ConnectRequest.ack:type_name -> ntt.proxies.v1alpha2.Ack
	7,  // 3: ntt.proxies.v1alpha2.ConnectRequest.data:type_name -> ntt.proxies.v1alpha2.Data
	9,  // 4: ntt.proxies.v1alpha2.ConnectRequest.close:type_name -> ntt.proxies.v1alpha2.Close
	10, // 5: ntt.proxies.v1alpha2.ConnectRequest.error:type_name -> ntt.proxies.v1alpha2.Error
	6,  // 6: ntt.proxies.v1alpha2.ConnectRequest.ping:type_name -> ntt.proxies.v1alpha2.Ping
	13, // 7: ntt.proxies.v1alpha2.ConnectResponse.open_response:type_name -> ntt.proxies.v1alpha2.ConnectResponse.OpenResponse
	14, // 8: ntt.proxies.v1alpha2.ConnectResponse.resume_response:type_name -> ntt.proxies.v1alpha2.ConnectResponse.ResumeResponse
	15, // 9: ntt.proxies.v1alpha2.ConnectResponse.channel_open_error:type_name -> ntt.proxies.v1alpha2.ConnectResponse.ChannelOpenError
	8,  // 10: ntt.proxies.v1alpha2.ConnectResponse.ack:type_name -> ntt.proxies.v1alpha2.Ack
	7,  // 11: ntt.proxies.v1alpha2.ConnectResponse.data:type_name -> ntt.proxies.v1alpha2.Data
	9,  // 12: ntt.proxies.v1alpha2.ConnectResponse.close:type_name -> ntt.proxies.v1alpha2.Close
	10, // 13: ntt.proxies.v1alpha2.ConnectResponse.error:type_name -> ntt.proxies.v1alpha2.Error
	16, // 14: ntt.proxies.v1alpha2.ListenRequest.open_request:type_name -> ntt.proxies.v1alpha2.ListenRequest.OpenRequest
	17, // 15: ntt.proxies.v1alpha2.ListenRequest.resume_request:type_name -> ntt.proxies.v1alpha2.ListenRequest.ResumeRequest
	18, // 16: ntt.proxies.v1alpha2.ListenRequest.channel_open_error:type_name -> ntt.proxies.v1alpha2.ListenRequest.ChannelOpenError
	6,  // 17: ntt.proxies.v1alpha2.ListenRequest.ping:type_name -> ntt.proxies.v1alpha2.Ping
	19, // 18: ntt.proxies.v1alpha2.ListenResponse.listening:type_name -> ntt.proxies.v1alpha2.ListenResponse.Listening
	20, // 19: ntt.proxies.v1alpha2.ListenResponse.open_channel_response:type_name -> ntt.proxies.v1alpha2.ListenResponse.OpenChannelResponse
	21, // 20: ntt.proxies.v1alpha2.ListenResponse.resume_channel_response:type_name -> ntt.proxies.v1alpha2.ListenResponse.ResumeChannelResponse
	22, // 21: ntt.proxies.v1alpha2.AcceptRequest.open_request:type_name -> ntt.proxies.v1alpha2.AcceptRequest.OpenRequest
	23, // 22: ntt.proxies.v1alpha2.AcceptRequest.resume_request:type_name -> ntt.proxies.v1alpha2.AcceptRequest.ResumeRequest
	7,  // 23: ntt.proxies.v1alpha2.AcceptRequest.data:type_name -> ntt.proxies.v1alpha2.Data
	8,  // 24: ntt.proxies.v1alpha2.AcceptRequest.ack:type_name -> ntt.proxies.v1alpha2.Ack
	9,  // 25: ntt.proxies.v1alpha2.AcceptRequest.close:type_name -> ntt.proxies.v1alpha2.Close
	10, // 26: ntt.proxies.v1alpha2.AcceptRequest.error:type_name -> ntt.proxies.v1alpha2.Error
	6,  // 27: ntt.proxies.v1alpha2.AcceptRequest.ping:type_name -> ntt.proxies.v1alpha2.Ping
	7,  // 28: ntt.proxies.v1alpha2.AcceptResponse.data:type_name -> ntt.proxies.v1alpha2.Data
	8,  // 29: ntt.proxies.v1alpha2.AcceptResponse.ack:type_name -> ntt.proxies.v1alpha2.Ack
	9,  // 30: ntt.proxies.v1alpha2.AcceptResponse.close:type_name -> ntt.proxies.v1alpha2.Close
	10, // 31: ntt.proxies.v1alpha2.AcceptResponse.error:type_name -> ntt.proxies.v1alpha2.Error
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { edgelq_proxies_proto_v1alpha2_broker_custom_proto_init() }
func edgelq_proxies_proto_v1alpha2_broker_custom_proto_init() {
	if edgelq_proxies_proto_v1alpha2_broker_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Close); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest_OpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest_ResumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse_OpenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse_ResumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse_ChannelOpenError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest_OpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest_ResumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest_ChannelOpenError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenResponse_Listening); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenResponse_OpenChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenResponse_ResumeChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptRequest_OpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptRequest_ResumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ConnectRequest_OpenRequest_)(nil),
		(*ConnectRequest_ResumeRequest_)(nil),
		(*ConnectRequest_Ack)(nil),
		(*ConnectRequest_Data)(nil),
		(*ConnectRequest_Close)(nil),
		(*ConnectRequest_Error)(nil),
		(*ConnectRequest_Ping)(nil),
	}
	edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ConnectResponse_OpenResponse_)(nil),
		(*ConnectResponse_ResumeResponse_)(nil),
		(*ConnectResponse_ChannelOpenError_)(nil),
		(*ConnectResponse_Ack)(nil),
		(*ConnectResponse_Data)(nil),
		(*ConnectResponse_Close)(nil),
		(*ConnectResponse_Error)(nil),
	}
	edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ListenRequest_OpenRequest_)(nil),
		(*ListenRequest_ResumeRequest_)(nil),
		(*ListenRequest_ChannelOpenError_)(nil),
		(*ListenRequest_Ping)(nil),
	}
	edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ListenResponse_Listening_)(nil),
		(*ListenResponse_OpenChannelResponse_)(nil),
		(*ListenResponse_ResumeChannelResponse_)(nil),
	}
	edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*AcceptRequest_OpenRequest_)(nil),
		(*AcceptRequest_ResumeRequest_)(nil),
		(*AcceptRequest_Data)(nil),
		(*AcceptRequest_Ack)(nil),
		(*AcceptRequest_Close)(nil),
		(*AcceptRequest_Error)(nil),
		(*AcceptRequest_Ping)(nil),
	}
	edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AcceptResponse_Data)(nil),
		(*AcceptResponse_Ack)(nil),
		(*AcceptResponse_Close)(nil),
		(*AcceptResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_proxies_proto_v1alpha2_broker_custom_proto_goTypes,
		DependencyIndexes: edgelq_proxies_proto_v1alpha2_broker_custom_proto_depIdxs,
		MessageInfos:      edgelq_proxies_proto_v1alpha2_broker_custom_proto_msgTypes,
	}.Build()
	edgelq_proxies_proto_v1alpha2_broker_custom_proto = out.File
	edgelq_proxies_proto_v1alpha2_broker_custom_proto_rawDesc = nil
	edgelq_proxies_proto_v1alpha2_broker_custom_proto_goTypes = nil
	edgelq_proxies_proto_v1alpha2_broker_custom_proto_depIdxs = nil
}
